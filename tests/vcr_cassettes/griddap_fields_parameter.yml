http_interactions:
- request:
    method: get
    uri: https://upwell.pfeg.noaa.gov/erddap/info/erdQMekm14day/index.json
    body:
      encoding: ''
      string: ''
    headers:
      User-Agent: libcurl/7.54.0 r-curl/3.2 crul/0.6.0
      Accept-Encoding: gzip, deflate
      Accept: application/json, text/xml, application/xml, */*
  response:
    status:
      status_code: '200'
      message: OK
      explanation: Request fulfilled, document follows
    headers:
      status: 'HTTP/1.1 200 '
      date: Wed, 26 Sep 2018 19:05:09 GMT
      strict-transport-security: max-age=31536000; includeSubDomains
      content-disposition: attachment;filename=erdQMekm14day_info.json
      content-encoding: gzip
      content-type: application/json;charset=UTF-8
      connection: close
      transfer-encoding: chunked
    body:
      encoding: ASCII-8BIT
      string: 
  recorded_at: 2018-09-26 19:05:49 GMT
  recorded_with: vcr/0.1.0.9110, webmockr/0.2.6, crul/0.6.0
- request:
    method: get
    uri: https://upwell.pfeg.noaa.gov/erddap/tabledap/index.json?page=1&itemsPerPage=10000
    body:
      encoding: ''
      string: ''
    headers:
      User-Agent: libcurl/7.54.0 r-curl/3.2 crul/0.6.0
      Accept-Encoding: gzip, deflate
      Accept: application/json, text/xml, application/xml, */*
  response:
    status:
      status_code: '200'
      message: OK
      explanation: Request fulfilled, document follows
    headers:
      status: 'HTTP/1.1 200 '
      date: Wed, 26 Sep 2018 19:05:10 GMT
      strict-transport-security: max-age=31536000; includeSubDomains
      last-modified: Wed, 26 Sep 2018 19:05:10 GMT
      xdods-server: dods/3.7
      erddap-server: '1.82'
      content-disposition: attachment;filename=tabledap.json
      content-encoding: gzip
      content-type: application/json;charset=UTF-8
      connection: close
      transfer-encoding: chunked
    body:
      encoding: ASCII-8BIT
      string: ewogICJ0YWJsZSI6IHsKICAgICJjb2x1bW5OYW1lcyI6IFsiZ3JpZGRhcCIsICJTdWJzZXQiLCAidGFibGVkYXAiLCAiTWFrZSBBIEdyYXBoIiwgIndtcyIsICJmaWxlcyIsICJBY2Nlc3NpYmxlIiwgIlRpdGxlIiwgIlN1bW1hcnkiLCAiRkdEQyIsICJJU08gMTkxMTUiLCAiSW5mbyIsICJCYWNrZ3JvdW5kIEluZm8iLCAiUlNTIiwgIkVtYWlsIiwgIkluc3RpdHV0aW9uIiwgIkRhdGFzZXQgSUQiXSwKICAgICJjb2x1bW5UeXBlcyI6IFsiU3RyaW5nIiwgIlN0cmluZyIsICJTdHJpbmciLCAiU3RyaW5nIiwgIlN0cmluZyIsICJTdHJpbmciLCAiU3RyaW5nIiwgIlN0cmluZyIsICJTdHJpbmciLCAiU3RyaW5nIiwgIlN0cmluZyIsICJTdHJpbmciLCAiU3RyaW5nIiwgIlN0cmluZyIsICJTdHJpbmciLCAiU3RyaW5nIiwgIlN0cmluZyJdLAogICAgInJvd3MiOiBbCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2FsbERhdGFzZXRzLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9hbGxEYXRhc2V0cyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9hbGxEYXRhc2V0cy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICIqIFRoZSBMaXN0IG9mIEFsbCBBY3RpdmUgRGF0YXNldHMgaW4gdGhpcyBFUkREQVAgKiIsICJUaGlzIGRhdGFzZXQgaXMgYSB0YWJsZSB3aGljaCBoYXMgYSByb3cgb2YgaW5mb3JtYXRpb24gZm9yIGVhY2ggZGF0YXNldCBjdXJyZW50bHkgYWN0aXZlIGluIHRoaXMgRVJEREFQLlxuXG5jZG1fZGF0YV90eXBlID0gT3RoZXJcblZBUklBQkxFUzpcbmRhdGFzZXRJRCAoRGF0YXNldCBJRClcbmFjY2Vzc2libGVcbmluc3RpdHV0aW9uXG5kYXRhU3RydWN0dXJlIChEYXRhIFN0cnVjdHVyZSlcbmNkbV9kYXRhX3R5cGUgKENvbW1vbiBEYXRhIE1vZGVsIFR5cGUpXG5jbGFzcyAoRVJEREFQIENsYXNzKVxudGl0bGVcbm1pbkxvbmdpdHVkZSAoTWluaW11bSBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbm1heExvbmdpdHVkZSAoTWF4aW11bSBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxvbmdpdHVkZVNwYWNpbmcgKEF2ZXJhZ2UgR3JpZCBMb25naXR1ZGUgU3BhY2luZywgZGVncmVlc19lYXN0KVxubWluTGF0aXR1ZGUgKE1pbmltdW0gTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG5tYXhMYXRpdHVkZSAoTWF4aW11bSBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbmxhdGl0dWRlU3BhY2luZyAoQXZlcmFnZSBHcmlkIExhdGl0dWRlIFNwYWNpbmcsIGRlZ3JlZXNfbm9ydGgpXG5taW5BbHRpdHVkZSAoTWluaW11bSBBbHRpdHVkZSBvciAtRGVwdGgsIG0pXG5tYXhBbHRpdHVkZSAoTWF4aW11bSBBbHRpdHVkZSBvciAtRGVwdGgsIG0pXG5taW5UaW1lIChNaW5pbXVtIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5tYXhUaW1lIChNYXhpbXVtIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG50aW1lU3BhY2luZyAoQXZlcmFnZSBHcmlkIFRpbWUgU3BhY2luZywgc2Vjb25kcylcbmdyaWRkYXAgKEJhc2UgVVJMIG9mIE9QZU5EQVAgR3JpZCBTZXJ2aWNlKVxuc3Vic2V0IChVUkwgb2YgU3Vic2V0IFdlYiBQYWdlKVxudGFibGVkYXAgKEJhc2UgVVJMIG9mIE9QZU5EQVAgVGFibGUvU2VxdWVuY2UgU2VydmljZSlcbk1ha2VBR3JhcGggKFVSTCBvZiBNYWtlLUEtR3JhcGggV2ViIFBhZ2UpXG5zb3MgKEJhc2UgVVJMIG9mIFNPUyBTZXJ2aWNlKVxud2NzIChCYXNlIFVSTCBvZiBXQ1MgU2VydmljZSlcbndtcyAoQmFzZSBVUkwgb2YgV01TIFNlcnZpY2UpXG5maWxlcyAoQmFzZSBVUkwgb2YgL2ZpbGVzLyBTZXJ2aWNlKVxuLi4uICgxMCBtb3JlIHZhcmlhYmxlcylcbiIsICIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vYWxsRGF0YXNldHMvaW5kZXguanNvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwIiwgIiIsICIiLCAiTk9BQSBOTUZTIFNXRlNDIEVudmlyb25tZW50YWwgUmVzZWFyY2ggRGl2aXNpb24iLCAiYWxsRGF0YXNldHMiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF8wMWFmX2UzNzJfNWJiNiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfMDFhZl9lMzcyXzViYjYuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiQUlTIFNoaXAgVHJhZmZpYzogSGF3YWlpOiAyMDExLTIwMTIiLCAiU2hpcCBwb3NpdGlvbiBkYXRhIGZyb20gYSBzYXRlbGxpdGUtYmFzZWQgQXV0b21hdGljIElkZW50aWZpY2F0aW9uIFN5c3RlbSAoQUlTKSB3ZXJlIG9idGFpbmVkIGpvaW50bHkgYnkgUGFjSU9PUyAoSi4gUG90ZW1yYSksIFNPRVNUL09SRSBvZiB0aGUgVW5pdmVyc2l0eSBvZiBIYXdhaWkgKEUuIFJvdGgpLCBhbmQgdGhlIFBhcGFoYW5hdW1va3Vha2VhIE1hcmluZSBOYXRpb25hbCBNb251bWVudCAoUE5NTikgKEQuIEdyYWhhbSkgdGhyb3VnaCBhIG9uZS10aW1lIHB1cmNoYXNlIGZyb20gT1JCQ09NTSBMTEMuICBUaGUgcHVyY2hhc2UgYWdyZWVtZW50IHdhcyBtYWRlIGluIGxhdGUgMjAxMiBhbmQgd2FzIGZvciBhIDMwLWJ5LTMwIGRlZ3JlZSBzZWN0aW9uIG9mIGhpc3RvcmljYWwgQUlTIGRhdGEgdGhhdCBpbmNsdWRlZCB0aGUgcmVnaW9uIG9mIHRoZSBIYXdhaWlhbiBJc2xhbmRzLiAgVGhlIGRhdGEgaW5jbHVkZSBBSVMgbG9uZyBhbmQgdW5jaGVja2VkIHJlcG9ydHMgZm9yIGEgb25lIHllYXIgcGVyaW9kOiBBdWd1c3QgMjAxMSB0aHJvdWdoIG1pZC1BdWd1c3QgMjAxMi4gIFRoZSByYXcsIG1vbnRobHkgR1BTIGZpbGVzIHdlcmUgbG9jYWxseSBjb252ZXJ0ZWQgdG8gTmV0Q0RGIGZvciB0aGUgUGFjSU9PUyBkYXRhIHNlcnZlcnMuICBEdWUgdG8gdmVuZG9yIGNvbnN0cmFpbnRzLCByZWxlYXNlIG9mIHRoZSByYXcgZGF0YSBpcyBsaW1pdGVkLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbm9icyAob2JzZXJ2YXRpb24sIDApXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbnNoaXBfaWRfbW1zaSAoc2hpcCBpZGVudGlmaWNhdGlvbiBudW1iZXIgKE1NU0kpLCAwKVxubmF2aWdhdGlvbmFsX3N0YXR1cyAoMClcbnNwZWVkX292ZXJfZ3JvdW5kIChrdHMpXG5jb3Vyc2Vfb3Zlcl9ncm91bmQgKGRlZylcbnRydWVfaGVhZGluZyAoZGVnKVxucmF0ZV9vZl90dXJuIChkZWdyZWVzIG1pbnV0ZXMtMSlcbnBvc2l0aW9uX2FjY3VyYWN5ICgwKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2hhd2FpaV9zb2VzdF8wMWFmX2UzNzJfNWJiNl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvaGF3YWlpX3NvZXN0XzAxYWZfZTM3Ml81YmI2X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2hhd2FpaV9zb2VzdF8wMWFmX2UzNzJfNWJiNi9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cubmF2Y2VuLnVzY2cuZ292Lz9wYWdlTmFtZT1BSVNtYWluIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2hhd2FpaV9zb2VzdF8wMWFmX2UzNzJfNWJiNi5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9aGF3YWlpX3NvZXN0XzAxYWZfZTM3Ml81YmI2JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIlVuaXZlcnNpdHkgb2YgSGF3YWlpIiwgImhhd2FpaV9zb2VzdF8wMWFmX2UzNzJfNWJiNiJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0X2Y3MGJfYzc3N18yZDBiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF9mNzBiX2M3NzdfMmQwYi5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJBSVMgU2hpcCBUcmFmZmljOiBKb2huc3RvbiBBdG9sbDogMjAxMS0yMDEyIiwgIlNoaXAgcG9zaXRpb24gZGF0YSBmcm9tIGEgc2F0ZWxsaXRlLWJhc2VkIEF1dG9tYXRpYyBJZGVudGlmaWNhdGlvbiBTeXN0ZW0gKEFJUykgd2VyZSBvYnRhaW5lZCBqb2ludGx5IGJ5IFBhY0lPT1MgKEouIFBvdGVtcmEpLCBTT0VTVC9PUkUgb2YgdGhlIFVuaXZlcnNpdHkgb2YgSGF3YWlpIChFLiBSb3RoKSwgYW5kIHRoZSBQYXBhaGFuYXVtb2t1YWtlYSBNYXJpbmUgTmF0aW9uYWwgTW9udW1lbnQgKFBOTU4pIChELiBHcmFoYW0pIHRocm91Z2ggYSBvbmUtdGltZSBwdXJjaGFzZSBmcm9tIE9SQkNPTU0gTExDLiBUaGUgcHVyY2hhc2UgYWdyZWVtZW50IHdhcyBtYWRlIGluIGxhdGUgMjAxMiBhbmQgd2FzIGZvciBhIDMwLWJ5LTMwIGRlZ3JlZSBzZWN0aW9uIG9mIGhpc3RvcmljYWwgQUlTIGRhdGEgdGhhdCBpbmNsdWRlZCB0aGUgcmVnaW9uIG9mIHRoZSBIYXdhaWlhbiBJc2xhbmRzLiBUaGUgZGF0YSBpbmNsdWRlIEFJUyBsb25nIGFuZCB1bmNoZWNrZWQgcmVwb3J0cyBmb3IgYSBvbmUgeWVhciBwZXJpb2Q6IEF1Z3VzdCAyMDExIHRocm91Z2ggbWlkLUF1Z3VzdCAyMDEyLiBUaGUgcmF3LCBtb250aGx5IEdQUyBmaWxlcyB3ZXJlIGxvY2FsbHkgY29udmVydGVkIHRvIE5ldENERiBmb3IgdGhlIFBhY0lPT1MgZGF0YSBzZXJ2ZXJzLiBEdWUgdG8gdmVuZG9yIGNvbnN0cmFpbnRzLCByZWxlYXNlIG9mIHRoZSByYXcgZGF0YSBpcyBsaW1pdGVkLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbm9icyAob2JzZXJ2YXRpb24sIDApXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbnNoaXBfaWRfbW1zaSAoc2hpcCBpZGVudGlmaWNhdGlvbiBudW1iZXIgKE1NU0kpLCAwKVxubmF2aWdhdGlvbmFsX3N0YXR1cyAoMClcbnNwZWVkX292ZXJfZ3JvdW5kIChrdHMpXG5jb3Vyc2Vfb3Zlcl9ncm91bmQgKGRlZylcbnRydWVfaGVhZGluZyAoZGVnKVxucmF0ZV9vZl90dXJuIChkZWdyZWVzIG1pbnV0ZXMtMSlcbnBvc2l0aW9uX2FjY3VyYWN5ICgwKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2hhd2FpaV9zb2VzdF9mNzBiX2M3NzdfMmQwYl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvaGF3YWlpX3NvZXN0X2Y3MGJfYzc3N18yZDBiX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2hhd2FpaV9zb2VzdF9mNzBiX2M3NzdfMmQwYi9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cucGFjaW9vcy5oYXdhaWkuZWR1IiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2hhd2FpaV9zb2VzdF9mNzBiX2M3NzdfMmQwYi5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9aGF3YWlpX3NvZXN0X2Y3MGJfYzc3N18yZDBiJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIlVuaXZlcnNpdHkgb2YgSGF3YWlpIiwgImhhd2FpaV9zb2VzdF9mNzBiX2M3NzdfMmQwYiJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0X2JlOWFfOWJlMF8xZjBhIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF9iZTlhXzliZTBfMWYwYS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJBSVMgU2hpcCBUcmFmZmljOiBNYXJpYW5hIGFuZCBXYWtlOiAyMDExLTIwMTIiLCAiU2hpcCBwb3NpdGlvbiBkYXRhIGZyb20gYSBzYXRlbGxpdGUtYmFzZWQgQXV0b21hdGljIElkZW50aWZpY2F0aW9uIFN5c3RlbSAoQUlTKSB3ZXJlIG9idGFpbmVkIGpvaW50bHkgYnkgUGFjSU9PUyAoSi4gUG90ZW1yYSksIFNPRVNUL09SRSBvZiB0aGUgVW5pdmVyc2l0eSBvZiBIYXdhaWkgKEUuIFJvdGgpLCBhbmQgdGhlIFBhcGFoYW5hdW1va3Vha2VhIE1hcmluZSBOYXRpb25hbCBNb251bWVudCAoUE5NTikgKEQuIEdyYWhhbSkgdGhyb3VnaCBhIG9uZS10aW1lIHB1cmNoYXNlIGZyb20gT1JCQ09NTSBMTEMuIFRoZSBwdXJjaGFzZSBhZ3JlZW1lbnQgd2FzIG1hZGUgaW4gbGF0ZSAyMDEyIGFuZCB3YXMgZm9yIGEgMzAtYnktMzAgZGVncmVlIHNlY3Rpb24gb2YgaGlzdG9yaWNhbCBBSVMgZGF0YSB0aGF0IGluY2x1ZGVkIHRoZSByZWdpb24gb2YgdGhlIEhhd2FpaWFuIElzbGFuZHMuIFRoZSBkYXRhIGluY2x1ZGUgQUlTIGxvbmcgYW5kIHVuY2hlY2tlZCByZXBvcnRzIGZvciBhIG9uZSB5ZWFyIHBlcmlvZDogQXVndXN0IDIwMTEgdGhyb3VnaCBtaWQtQXVndXN0IDIwMTIuIFRoZSByYXcsIG1vbnRobHkgR1BTIGZpbGVzIHdlcmUgbG9jYWxseSBjb252ZXJ0ZWQgdG8gTmV0Q0RGIGZvciB0aGUgUGFjSU9PUyBkYXRhIHNlcnZlcnMuIER1ZSB0byB2ZW5kb3IgY29uc3RyYWludHMsIHJlbGVhc2Ugb2YgdGhlIHJhdyBkYXRhIGlzIGxpbWl0ZWQuXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxub2JzIChvYnNlcnZhdGlvbiwgMClcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuc2hpcF9pZF9tbXNpIChzaGlwIGlkZW50aWZpY2F0aW9uIG51bWJlciAoTU1TSSksIDApXG5uYXZpZ2F0aW9uYWxfc3RhdHVzICgwKVxuc3BlZWRfb3Zlcl9ncm91bmQgKGt0cylcbmNvdXJzZV9vdmVyX2dyb3VuZCAoZGVnKVxudHJ1ZV9oZWFkaW5nIChkZWcpXG5yYXRlX29mX3R1cm4gKGRlZ3JlZXMgbWludXRlcy0xKVxucG9zaXRpb25fYWNjdXJhY3kgKDApXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvaGF3YWlpX3NvZXN0X2JlOWFfOWJlMF8xZjBhX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9oYXdhaWlfc29lc3RfYmU5YV85YmUwXzFmMGFfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vaGF3YWlpX3NvZXN0X2JlOWFfOWJlMF8xZjBhL2luZGV4Lmpzb24iLCAiaHR0cDovL3d3dy5wYWNpb29zLmhhd2FpaS5lZHUiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvaGF3YWlpX3NvZXN0X2JlOWFfOWJlMF8xZjBhLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1oYXdhaWlfc29lc3RfYmU5YV85YmUwXzFmMGEmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiVW5pdmVyc2l0eSBvZiBIYXdhaWkiLCAiaGF3YWlpX3NvZXN0X2JlOWFfOWJlMF8xZjBhIl0sCiAgICAgIFsiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfNTc0Ml80ZjM1X2ZmNTUiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0XzU3NDJfNGYzNV9mZjU1LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkFJUyBTaGlwIFRyYWZmaWM6IFJvc2UgQXRvbGw6IDIwMTEtMjAxMiIsICJTaGlwIHBvc2l0aW9uIGRhdGEgZnJvbSBhIHNhdGVsbGl0ZS1iYXNlZCBBdXRvbWF0aWMgSWRlbnRpZmljYXRpb24gU3lzdGVtIChBSVMpIHdlcmUgb2J0YWluZWQgam9pbnRseSBieSBQYWNJT09TIChKLiBQb3RlbXJhKSwgU09FU1QvT1JFIG9mIHRoZSBVbml2ZXJzaXR5IG9mIEhhd2FpaSAoRS4gUm90aCksIGFuZCB0aGUgUGFwYWhhbmF1bW9rdWFrZWEgTWFyaW5lIE5hdGlvbmFsIE1vbnVtZW50IChQTk1OKSAoRC4gR3JhaGFtKSB0aHJvdWdoIGEgb25lLXRpbWUgcHVyY2hhc2UgZnJvbSBPUkJDT01NIExMQy4gVGhlIHB1cmNoYXNlIGFncmVlbWVudCB3YXMgbWFkZSBpbiBsYXRlIDIwMTIgYW5kIHdhcyBmb3IgYSAzMC1ieS0zMCBkZWdyZWUgc2VjdGlvbiBvZiBoaXN0b3JpY2FsIEFJUyBkYXRhIHRoYXQgaW5jbHVkZWQgdGhlIHJlZ2lvbiBvZiB0aGUgSGF3YWlpYW4gSXNsYW5kcy4gVGhlIGRhdGEgaW5jbHVkZSBBSVMgbG9uZyBhbmQgdW5jaGVja2VkIHJlcG9ydHMgZm9yIGEgb25lIHllYXIgcGVyaW9kOiBBdWd1c3QgMjAxMSB0aHJvdWdoIG1pZC1BdWd1c3QgMjAxMi4gVGhlIHJhdywgbW9udGhseSBHUFMgZmlsZXMgd2VyZSBsb2NhbGx5IGNvbnZlcnRlZCB0byBOZXRDREYgZm9yIHRoZSBQYWNJT09TIGRhdGEgc2VydmVycy4gRHVlIHRvIHZlbmRvciBjb25zdHJhaW50cywgcmVsZWFzZSBvZiB0aGUgcmF3IGRhdGEgaXMgbGltaXRlZC5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5vYnMgKG9ic2VydmF0aW9uLCAwKVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5zaGlwX2lkX21tc2kgKHNoaXAgaWRlbnRpZmljYXRpb24gbnVtYmVyIChNTVNJKSwgMClcbm5hdmlnYXRpb25hbF9zdGF0dXMgKDApXG5zcGVlZF9vdmVyX2dyb3VuZCAoa3RzKVxuY291cnNlX292ZXJfZ3JvdW5kIChkZWcpXG50cnVlX2hlYWRpbmcgKGRlZylcbnJhdGVfb2ZfdHVybiAoZGVncmVlcyBtaW51dGVzLTEpXG5wb3NpdGlvbl9hY2N1cmFjeSAoMClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9oYXdhaWlfc29lc3RfNTc0Ml80ZjM1X2ZmNTVfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2hhd2FpaV9zb2VzdF81NzQyXzRmMzVfZmY1NV9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9oYXdhaWlfc29lc3RfNTc0Ml80ZjM1X2ZmNTUvaW5kZXguanNvbiIsICJodHRwOi8vd3d3LnBhY2lvb3MuaGF3YWlpLmVkdSIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9oYXdhaWlfc29lc3RfNTc0Ml80ZjM1X2ZmNTUucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWhhd2FpaV9zb2VzdF81NzQyXzRmMzVfZmY1NSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJVbml2ZXJzaXR5IG9mIEhhd2FpaSIsICJoYXdhaWlfc29lc3RfNTc0Ml80ZjM1X2ZmNTUiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF80OTBkXzExOThfMTVjMSIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfNDkwZF8xMTk4XzE1YzEuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiQUxPSEEgQ2FibGVkIE9ic2VydmF0b3J5IChBQ08pOiBBY291c3RpYyBEb3BwbGVyIEN1cnJlbnQgUHJvZmlsZXIgKEFEQ1ApOiBUZW1wZXJhdHVyZSIsICJUaGUgVW5pdmVyc2l0eSBvZiBIYXdhaWkncyBBTE9IQSAoXCJBIExvbmctdGVybSBPbGlnb3Ryb3BoaWMgSGFiaXRhdCBBc3Nlc3NtZW50XCIpIENhYmxlZCBPYnNlcnZhdG9yeSAoQUNPKSBpcyBsb2NhdGVkIDEwMCBrbSBub3J0aCBvZiB0aGUgaXNsYW5kIG9mIE9haHUsIEhhd2FpaSAoMjIgNDUnTiwgMTU4VykgaW4gdGhlIE5vcnRoIFBhY2lmaWMgT2NlYW4uIEl0IHByb3ZpZGVzIHJlYWwtdGltZSBvY2Vhbm9ncmFwaGljIG9ic2VydmF0aW9ucyBmcm9tIGEgZGVwdGggb2YgYWJvdXQgNCw4MDAgbSB2aWEgYSBzdWJtYXJpbmUgZmliZXIgb3B0aWMgY2FibGUgdGhhdCBjb21lcyBhc2hvcmUgYXQgTWFrYWhhIG9uIE9haHUuIFRoaXMgZGF0YSBzZXQgcHJvdmlkZXMgbWVhc3VyZW1lbnRzIG9mIHNlYSB3YXRlciB0ZW1wZXJhdHVyZSBhdCB0aGUgQUNPIGF0IDEuODMgbSBhYm92ZSB0aGUgb2NlYW4gYm90dG9tLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuc3RhdGlvbl9uYW1lXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmRlcHRoIChtKVxuc2VhX3dhdGVyX3RlbXBlcmF0dXJlIChkZWdyZWVfQ2Vsc2l1cylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9oYXdhaWlfc29lc3RfNDkwZF8xMTk4XzE1YzFfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2hhd2FpaV9zb2VzdF80OTBkXzExOThfMTVjMV9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9oYXdhaWlfc29lc3RfNDkwZF8xMTk4XzE1YzEvaW5kZXguanNvbiIsICJodHRwOi8vYWNvLXNzZHMuc29lc3QuaGF3YWlpLmVkdSIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9oYXdhaWlfc29lc3RfNDkwZF8xMTk4XzE1YzEucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWhhd2FpaV9zb2VzdF80OTBkXzExOThfMTVjMSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJVbml2ZXJzaXR5IG9mIEhhd2FpaSIsICJoYXdhaWlfc29lc3RfNDkwZF8xMTk4XzE1YzEiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF8wOTU2X2U5MzlfY2VmYyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfMDk1Nl9lOTM5X2NlZmMuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiQUxPSEEgQ2FibGVkIE9ic2VydmF0b3J5IChBQ08pOiBBY291c3RpYyBEb3BwbGVyIEN1cnJlbnQgUHJvZmlsZXIgKEFEQ1ApOiBWZWxvY2l0eSIsICJUaGUgVW5pdmVyc2l0eSBvZiBIYXdhaWkncyBBTE9IQSAoXCJBIExvbmctdGVybSBPbGlnb3Ryb3BoaWMgSGFiaXRhdCBBc3Nlc3NtZW50XCIpIENhYmxlZCBPYnNlcnZhdG9yeSAoQUNPKSBpcyBsb2NhdGVkIDEwMCBrbSBub3J0aCBvZiB0aGUgaXNsYW5kIG9mIE9haHUsIEhhd2FpaSAoMjIgNDUnTiwgMTU4VykgaW4gdGhlIE5vcnRoIFBhY2lmaWMgT2NlYW4uIEl0IHByb3ZpZGVzIHJlYWwtdGltZSBvY2Vhbm9ncmFwaGljIG9ic2VydmF0aW9ucyBmcm9tIGEgZGVwdGggb2YgYWJvdXQgNCw4MDAgbSB2aWEgYSBzdWJtYXJpbmUgZmliZXIgb3B0aWMgY2FibGUgdGhhdCBjb21lcyBhc2hvcmUgYXQgTWFrYWhhIG9uIE9haHUuIFRoaXMgZGF0YSBzZXQgcHJvdmlkZXMgbWVhc3VyZW1lbnRzIG9mIG9jZWFuIGN1cnJlbnQgdmVsb2NpdHkgYXQgdGhlIEFDTyBmcm9tIGEgMjUwIGtIeiBTb25UZWsgYWNvdXN0aWMgZG9wcGxlciBjdXJyZW50IHByb2ZpbGVyIChBRENQKSBhdCAxLjgzIG0gYWJvdmUgdGhlIG9jZWFuIGJvdHRvbS4gVmVsb2NpdGllcyBhcmUgZmxhZ2dlZCBiYWQgaWYgdGhlIGFtcGxpdHVkZSBpcyBleGNlc3NpdmVseSBsb3cgb3IgaGlnaC4gQW4gYW1wbGl0dWRlIGlzIGhpZ2ggaWYgaXQgZXhjZWVkcyB0aGUgYXZlcmFnZSBvZiB0aGUgcGluZyBiZWZvcmUgYW5kIHRoZSBwaW5nIGFmdGVyIGJ5IDIwIGNvdW50cy4gQW4gYW1wbGl0dWRlIGlzIGxvdyBpZiBsZXNzIHRoYW4gNiBjb3VudHMuIEFmdGVyIHRoaXMgdGhlIHZlbG9jaXRpZXMgYXJlIGZsYWdnZWQgYmFkIGlmIHRoZSBhYnNvbHV0ZSBkZXZpYXRpb24gb2YgdGhlIHZlcnRpY2FsIHZlbG9jaXR5IGZyb20gaXRzIGVuc2VtYmxlIG1lZGlhbiBleGNlZWRzIDAuMTUgbS9zIG9yIGlmIGl0cyB2YWx1ZSBpcyBsZXNzIHRoYW4gLTAuMjUgbS9zLlxuXG5jZG1fZGF0YV90eXBlID0gUHJvZmlsZVxuVkFSSUFCTEVTOlxuc3RhdGlvbl9uYW1lXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKERlcHRoIG9mIGVhY2ggbG9jYXRpb24sIG0pXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuZWFzdHdhcmRfc2VhX3dhdGVyX3ZlbG9jaXR5IChjdXJyZW50IGVhc3QgY29tcG9uZW50LCBtZXRlcnMvc2Vjb25kKVxubm9ydGh3YXJkX3NlYV93YXRlcl92ZWxvY2l0eSAoY3VycmVudCBub3J0aCBjb21wb25lbnQsIG1ldGVycy9zZWNvbmQpXG51cHdhcmRfc2VhX3dhdGVyX3ZlbG9jaXR5IChjdXJyZW50IHVwd2FyZCBjb21wb25lbnQsIG1ldGVycy9zZWNvbmQpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvaGF3YWlpX3NvZXN0XzA5NTZfZTkzOV9jZWZjX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9oYXdhaWlfc29lc3RfMDk1Nl9lOTM5X2NlZmNfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vaGF3YWlpX3NvZXN0XzA5NTZfZTkzOV9jZWZjL2luZGV4Lmpzb24iLCAiaHR0cDovL2Fjby1zc2RzLnNvZXN0Lmhhd2FpaS5lZHUiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvaGF3YWlpX3NvZXN0XzA5NTZfZTkzOV9jZWZjLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1oYXdhaWlfc29lc3RfMDk1Nl9lOTM5X2NlZmMmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiVW5pdmVyc2l0eSBvZiBIYXdhaWkiLCAiaGF3YWlpX3NvZXN0XzA5NTZfZTkzOV9jZWZjIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF9kMWJmXzE1MzVfNzQxZi5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0X2QxYmZfMTUzNV83NDFmIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF9kMWJmXzE1MzVfNzQxZi5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJBTE9IQSBDYWJsZWQgT2JzZXJ2YXRvcnkgKEFDTyk6IEJvdHRvbSBQcmVzc3VyZSBSZWNvcmRlciAoQlBSKSIsICJUaGUgVW5pdmVyc2l0eSBvZiBIYXdhaWkncyBBTE9IQSAoXCJBIExvbmctdGVybSBPbGlnb3Ryb3BoaWMgSGFiaXRhdCBBc3Nlc3NtZW50XCIpIENhYmxlZCBPYnNlcnZhdG9yeSAoQUNPKSBpcyBsb2NhdGVkIDEwMCBrbSBub3J0aCBvZiB0aGUgaXNsYW5kIG9mIE9haHUsIEhhd2FpaSAoMjIgNDUnTiwgMTU4VykgaW4gdGhlIE5vcnRoIFBhY2lmaWMgT2NlYW4uIEl0IHByb3ZpZGVzIHJlYWwtdGltZSBvY2Vhbm9ncmFwaGljIG9ic2VydmF0aW9ucyBmcm9tIGEgZGVwdGggb2YgYWJvdXQgNCw4MDAgbSB2aWEgYSBzdWJtYXJpbmUgZmliZXIgb3B0aWMgY2FibGUgdGhhdCBjb21lcyBhc2hvcmUgYXQgTWFrYWhhIG9uIE9haHUuIFRoaXMgZGF0YSBzZXQgcHJvdmlkZXMgbWVhc3VyZW1lbnRzIG9mIG9jZWFuIHByZXNzdXJlIGF0IHRoZSBBQ08gZnJvbSBhIEJvdHRvbSBQcmVzc3VyZSBSZWNvcmRlciAoQlBSKS5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbnN0YXRpb25cbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuZGVwdGggKG0pXG5wcmVzc3VyZSAoc2VhIHdhdGVyIHByZXNzdXJlLCBwc2kpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvaGF3YWlpX3NvZXN0X2QxYmZfMTUzNV83NDFmX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9oYXdhaWlfc29lc3RfZDFiZl8xNTM1Xzc0MWZfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vaGF3YWlpX3NvZXN0X2QxYmZfMTUzNV83NDFmL2luZGV4Lmpzb24iLCAiaHR0cDovL2Fjby1zc2RzLnNvZXN0Lmhhd2FpaS5lZHUiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvaGF3YWlpX3NvZXN0X2QxYmZfMTUzNV83NDFmLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1oYXdhaWlfc29lc3RfZDFiZl8xNTM1Xzc0MWYmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiVW5pdmVyc2l0eSBvZiBIYXdhaWkiLCAiaGF3YWlpX3NvZXN0X2QxYmZfMTUzNV83NDFmIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF9jYzliXzIwOWZfZWEyZi5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0X2NjOWJfMjA5Zl9lYTJmIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF9jYzliXzIwOWZfZWEyZi5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJBTE9IQSBDYWJsZWQgT2JzZXJ2YXRvcnkgKEFDTyk6IEh5ZHJvcGhvbmUgQWNvdXN0aWNzIiwgIlRoZSBVbml2ZXJzaXR5IG9mIEhhd2FpaSdzIEFMT0hBIChcIkEgTG9uZy10ZXJtIE9saWdvdHJvcGhpYyBIYWJpdGF0IEFzc2Vzc21lbnRcIikgQ2FibGVkIE9ic2VydmF0b3J5IChBQ08pIGlzIGxvY2F0ZWQgMTAwIGttIG5vcnRoIG9mIHRoZSBpc2xhbmQgb2YgT2FodSwgSGF3YWlpICgyMiA0NSdOLCAxNThXKSBpbiB0aGUgTm9ydGggUGFjaWZpYyBPY2Vhbi4gSXQgcHJvdmlkZXMgcmVhbC10aW1lIG9jZWFub2dyYXBoaVxuYyBvYnNlcnZhdGlvbnMgZnJvbSBhIGRlcHRoIG9mIGFib3V0IDQsODAwIG0gdmlhIGEgc3VibWFyaW5lIGZpYmVyIG9wdGljIGNhYmxlIHRoYXQgY29tZXMgYXNob3JlIGF0IE1ha2FoYSBvbiBPYWh1LiBUaGlzIGRhdGEgc2V0IHByb3ZpZGVzIHNvdW5kIGZpbGVzIG9mIG9jZWFuIGFjb3VzdGljcyBhdCB0aGUgb2NlYW4gZmxvb3IgZnJvbSB0aGUgQUNPIGh5ZHJvcGhvbmUuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5zdGF0aW9uXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuZGVwdGggKG0pXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZWxhcHNlZFRpbWUgKEVsYXBzZWQgVGltZSwgc2Vjb25kcylcbmNoYW5uZWxfMVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2hhd2FpaV9zb2VzdF9jYzliXzIwOWZfZWEyZl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvaGF3YWlpX3NvZXN0X2NjOWJfMjA5Zl9lYTJmX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2hhd2FpaV9zb2VzdF9jYzliXzIwOWZfZWEyZi9pbmRleC5qc29uIiwgImh0dHA6Ly9hY28tc3Nkcy5zb2VzdC5oYXdhaWkuZWR1IiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2hhd2FpaV9zb2VzdF9jYzliXzIwOWZfZWEyZi5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9aGF3YWlpX3NvZXN0X2NjOWJfMjA5Zl9lYTJmJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIlVuaXZlcnNpdHkgb2YgSGF3YWlpIiwgImhhd2FpaV9zb2VzdF9jYzliXzIwOWZfZWEyZiJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9kY1BKSlUiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9kY1BKSlUuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiQU4gRVhQRVJJTUVOVEFMIERBVEFTRVQ6IFVuZGVyd2F5IFNlYSBTdXJmYWNlIFRlbXBlcmF0dXJlIGFuZCBTYWxpbml0eSBBYm9hcmQgdGhlIE9sZWFuZGVyLCAyMDA3LTIwMTAiLCAiVGhlIGRhdGEgYmVpbmcgc3VibWl0dGVkIHRvIE5PREMgY29udGFpbiBpbmZvcm1hdGlvbiBhYm91dCB0ZW1wZXJhdHVyZSBhbmQgc2FsaW5pdHkgb2J0YWluZWQgd2l0aCB0aGUgdXNlIG9mIHRoZXJtb3NhbGlub2dyYXBocyAoVFNHKSBpbnN0YWxsZWQgaW4gc2hpcHMgb2YgdGhlIE5PQUEgZmxlZXQgYW5kIG90aGVyIGNhcmdvIGFuZCBjcnVpc2Ugc2hpcHMuIFRoZSBkYXRhIGlzIHRyYW5zbWl0dGVkIHRvIEFPTUwvTk9BQSBpbiByZWFsLXRpbWUgYW5kIHN1Ym1pdHRlZCB0byBhIHF1YWxpdHkgY29udHJvbCBwcm9jZWR1cmUgZGV2ZWxvcGVkIGF0IEFPTUwgYmFzZWQgb24gdGhlIEdsb2JhbCBPY2VhbiBTdXJmYWNlIFVuZGVyd2F5IERhdGEgUGlsb3QgUHJvamVjdCAoR09TVUQpIHJlYWwtdGltZSBjb250cm9sIHRlc3QuIERhdGEgYXBwcm92ZWQgaW4gdGhlc2UgdGVzdHMgYXJlIHN1Ym1pdHRlZCB0byB0aGUgR1RTLiBUaGUgZGF0YSBzZXQgc3VibWl0dGVkIHRvIE5PREMgZm9yIGRpc3RyaWJ1dGlvbiBjb25zdGl0dXRlIHRoZSBjb21wbGV0ZSBkYXRhIHNldCByZWNlaXZlZCBieSBBT01MIHdpdGggdGhlIGNvcnJlc3BvbmRpbmcgZmxhZ3MgYWZ0ZXIgdGhlIHF1YWxpdHkgY29udHJvbC5cblxuY2RtX2RhdGFfdHlwZSA9IFRyYWplY3RvcnlcblZBUklBQkxFUzpcbmNhbGxTaWduIChDYWxsIFNpZ24pXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmludHAgKEludGVybmFsIFRTRyBUZW1wZXJhdHVyZSwgZGVncmVlX0MpXG5zYWwgKFRTRyBQcmFjdGlhbCBTYWxpbml0eSwgUFNVKVxuY29uZCAoVFNHIENvbmR1Y3Rpdml0eSwgZGVncmVlX0MpXG5leHQgKFRoZXJtaXN0b3IgV2F0ZXIgVGVtcGVyYXR1cmUsIGRlZ3JlZXNfQ2Vsc2l1cylcbnNzdCAoU2VhIFN1cmZhY2UgVGVtcGVyYXR1cmUsIGRlZ3JlZXNfQ2Vsc2l1cylcbmZsYWdfYSAoUUMgZmxhZy1wbGF0Zm9ybSBpZGVudGlmaWNhdGlvbilcbmZsYWdfYiAoUUMgZmxhZy1pbXBvc3NpYmxlIGRhdGUpXG5mbGFnX2MgKFFDIGZsYWctaW1wb3NzaWJsZSBsb2NhdGlvbilcbmZsYWdfZCAoUUMgZmxhZy1wb3NpdGlvbiBvbiBsYW5kIHN0ZXApXG5mbGFnX2UgKFFDIGZsYWctaW1wb3NzaWJsZSBzcGVlZClcbmZsYWdfZiAoUUMgZmxhZy1nbG9iYWwgcmFuZ2VzKVxuZmxhZ19nIChRQyBmbGFnLXJlZ2lvbmFsIHJhbmdlcylcbmZsYWdfaCAoUUMgZmxhZy1zcGlrZSB0ZXN0KVxuZmxhZ19pIChRQyBmbGFnLWNvbnN0YW50IHZhbHVlKVxuZmxhZ19qIChRQyBmbGFnLWdyYWRpZW50IHRlc3QpXG5mbGFnX2sgKFFDIGZsYWctY2xpbWF0b2xvZ3kgYW5kIE5DRVAgd2Vla2x5IGFuYWx5c2lzKVxuZmxhZ19sIChRQyBmbGFnLWJ1ZGR5IGNoZWNrKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL25vZGNQSkpVX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9ub2RjUEpKVV9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9ub2RjUEpKVS9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cuYW9tbC5ub2FhLmdvdi9waG9kL3RzZy9pbmRleC5waHAiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3Mvbm9kY1BKSlUucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPW5vZGNQSkpVJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgT0FSIEFPTUwiLCAibm9kY1BKSlUiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZ3RvcHBBVC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZ3RvcHBBVCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ndG9wcEFULmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkFuaW1hbCBUZWxlbWV0cnkgTmV0d29yayAoQVROKSIsICJUaGVzZSBkYXRhICh1cGRhdGVkIGRhaWx5KSBhcmUgZnJvbSB0aGUgQW5pbWFsIFRlbGVtZXRyeSBOZXR3b3JrIChBVE4pIHByb2dyYW0uICBCZWd1biBhcyBvbmUgb2YgdGhlIGZpZWxkIHByb2plY3RzIGluIHRoZSBpbnRlcm5hdGlvbmFsIENlbnN1cyBvZiBNYXJpbmUgTGlmZSwgdGhlIFBhY2lmaWMtZm9jdXNlZCBUT1BQIChUYWdnaW5nIG9mIFBhY2lmaWMgUHJlZGF0b3JzKSBwcm9ncmFtIHdhcyBhbiBpbnRlcm5hdGlvbmFsIG11bHRpZGlzY2lwbGluYXJ5IGNvbGxhYm9yYXRpb24gb2YgbW9yZSB0aGFuIDc1IHNjaWVudGlzdHMgZnJvbSA3IG5hdGlvbnMuICBPdmVyIHRoZSBkZWNhZGUgYmVnaW5uaW5nIGluIDIwMDAsIFRPUFAgcmVzZWFyY2hlcnMgZGVwbG95ZWQgbW9yZSB0aGFuIDQsMzAwIGVsZWN0cm9uaWMgdGFncyBvbiAyMyBkaWZmZXJlbnQgc3BlY2llcyBvZiBtYXJpbmUgYW5pbWFscyAtIHlpZWxkaW5nIGEgZGF0YXNldCBvZiBtb3JlIHRoYW4gMzM1LDAwMCB0cmFja2luZyBkYXlzLiBUbyBsZWFybiBtb3JlIHBsZWFzZSB2aXNpdCBodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L0FUTi5cblxuY2RtX2RhdGFfdHlwZSA9IFRyYWplY3RvcnlcblZBUklBQkxFUzpcbmNvbW1vbk5hbWUgKENvbW1vbiBOYW1lKVxueWVhckRlcGxveWVkIChZZWFyIERlcGxveWVkKVxucHJvamVjdFxudG9wcElEIChUT1BQIElEICh1bmlxdWUpKVxuc2VyaWFsTnVtYmVyIChUaGUgVGFnJ3MgU2VyaWFsIE51bWJlciAobm90IHVuaXF1ZSkpXG5pc0RyaWZ0ZXIgKElzIERyaWZ0ZXI/KVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5MQyAoTG9jYXRpb24gUXVhbGl0eSBDb2RlKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2d0b3BwQVRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2d0b3BwQVRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZ3RvcHBBVC9pbmRleC5qc29uIiwgImh0dHA6Ly9ndG9wcC5vcmcvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2d0b3BwQVQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWd0b3BwQVQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiQW5pbWFsIFRlbGVtZXRyeSBOZXR3b3JrIiwgImd0b3BwQVQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWN1ZmVzLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJY3VmZXMiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWN1ZmVzLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkNhbENPRkkgQ29udGludW91cyBVbmRlcndheSBGaXNoLUVnZyBTYW1wbGVyIiwgIlNhbXBsZXMgY29sbGVjdGVkIHVzaW5nIHRoZSBDb250aW51b3VzIFVuZGVyd2F5IEZpc2gtRWdnIFNhbXBsZXIsIGtub3duIGFzIENVRkVTLiBUaGUgZGF0YSBpbmNsdWRlIG51bWJlcnMgb2YgYW5jaG92eSwgc2FyZGluZSwgamFjayBtYWNrZXJlbCwgc3F1aWQsIGhha2UsIGFuZCB1bmlkZW50aWZpZWQgZmlzaCBlZ2dzIGNhcHR1cmVkLCBhbmQgYXNzb2NpYXRlZCBlbnZpcm9ubWVudGFsLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZSAoQ3J1aXNlIENvZGUpXG5zaGlwIChTaGlwIE5hbWUpXG5zaGlwX2NvZGVcbnNhbXBsZV9udW1iZXJcbnRpbWUgKFN0YXJ0IFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoU3RhcnQgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKFN0YXJ0IExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxuc3RhcnRfdGVtcGVyYXR1cmUgKGRlZ3JlZSBDKVxuc3RhcnRfc2FsaW5pdHkgKHBzdSlcbnN0YXJ0X3dpbmRfc3BlZWQgKGtub3RzKVxuc3RhcnRfd2luZF9kaXJlY3Rpb24gKGRlZ3JlZXMpXG5zdGFydF9wdW1wX3NwZWVkIChNXjMgcGVyIG1pbnV0ZSlcbnN0b3BfdGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnN0b3BfbGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5zdG9wX2xvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuc3RvcF90ZW1wZXJhdHVyZSAoZGVncmVlIEMpXG5zdG9wX3NhbGluaXR5IChwc3UpXG5zdG9wX3dpbmRfc3BlZWQgKGtub3RzKVxuc3RvcF93aW5kX2RpcmVjdGlvbiAoZGVncmVlcylcbnN0b3BfcHVtcF9zcGVlZCAoTV4zIHBlciBtaW51dGUpXG5zYXJkaW5lX2VnZ3MgKGNvdW50KVxuYW5jaG92eV9lZ2dzIChjb3VudClcbmphY2tfbWFja2VyZWxfZWdncyAoY291bnQpXG5oYWtlX2VnZ3MgKGNvdW50KVxuc3F1aWRfZWdncyAoY291bnQpXG5vdGhlcl9maXNoX2VnZ3MgKGNvdW50KVxuY29tbWVudHNcbnJlc29ydGVkXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkQ2FsQ09GSWN1ZmVzX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRDYWxDT0ZJY3VmZXNfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkQ2FsQ09GSWN1ZmVzL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9DYWxDT0ZJL2NhbGNvZmlfaW5mby5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENhbENPRkljdWZlcy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkQ2FsQ09GSWN1ZmVzJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgU1dGU0MiLCAiZXJkQ2FsQ09GSWN1ZmVzIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRkljcnVpc2VzLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJY3J1aXNlcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJY3J1aXNlcy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDYWxDT0ZJIENydWlzZXMiLCAiQ3J1aXNlcyB1c2luZyBvbmUgb3IgbW9yZSBzaGlwcyBjb25kdWN0ZWQgYXMgcGFydCBvZiB0aGUgQ2FsaWZvcm5pYSBDb29wZXJhdGl2ZSBPY2VhbmljIEZpc2hlcmllcyBJbnZlc3RpZ2F0aW9ucyAoQ2FsQ09GSSkgcHJvZ3JhbSBhbmQgb3RoZXIgcmVsYXRlZCBjcnVpc2VzIGNvbmR1Y3RlZCBieSB0aGUgTk9BQSBTb3V0aHdlc3QgRmlzaGVyaWVzIFNjaWVuY2UgQ2VudGVyIGZyb20gMTk1MSB0byBwcmVzZW50LiBNdWx0aS1wdXJwb3NlIGNydWlzZXMgZS5nLiwgQ2FsQ09GSSBhbmQgdHJhd2xpbmcsIGluY2x1ZGUgYSBsaXN0aW5nIGZvciBlYWNoIGNydWlzZSB0eXBlLlxuXG5jZG1fZGF0YV90eXBlID0gT3RoZXJcblZBUklBQkxFUzpcbmNydWlzZSAoQ3J1aXNlIENvZGUpXG5zaGlwIChTaGlwIE5hbWUpXG5zaGlwX2NvZGVcbnllYXJcbm1vbnRoXG5jcnVpc2VfdHlwZVxuIiwgIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRDYWxDT0ZJY3J1aXNlcy9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvQ2FsQ09GSS9jYWxjb2ZpX2luZm8uaHRtbCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lcmRDYWxDT0ZJY3J1aXNlcy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkQ2FsQ09GSWNydWlzZXMmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBTV0ZTQyIsICJlcmRDYWxDT0ZJY3J1aXNlcyJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJZWdnY250LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJZWdnY250IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRkllZ2djbnQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiQ2FsQ09GSSBFZ2cgQ291bnRzIiwgIkZpc2ggZWdnIGNvdW50cyBhbmQgc3RhbmRhcmRpemVkIGNvdW50cyBmb3IgZWdncyBjYXB0dXJlZCBpbiBDYWxDT0ZJIGljdGh5b3BsYW5rdG9uIG5ldHMgKHByaW1hcmlseSB2ZXJ0aWNhbCBbQ2FsdmV0IG9yIFBhaXJvdmV0XSwgb2JsaXF1ZSBbYm9uZ28gb3IgcmluZyBuZXRzXSwgYW5kIHN1cmZhY2UgdG93cyBbTWFudGEgbmV0c10pLiBTdXJmYWNlIHRvd3MgYXJlIG5vcm1hbGx5IHN0YW5kYXJkaXplZCB0byBjb3VudCBwZXIgMSwwMDAgbTMgc3RyYWluZWQuIE9ibGlxdWUgdG93cyBhcmUgbm9ybWFsbHkgc3RhbmRhcmRpemVkIHRvIGNvdW50IHBlciAxMCBtMiBvZiBzdXJmYWNlIHNhbXBsZWQuIFRoaXMgdGFibGUgaW5jbHVkZXMgYWxsIHRvd3MgYnkgc3BlY2llcywgZXZlbiBpZiB6ZXJvIGVnZ3Mgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMsIGkuZS4sIG5lZ2F0aXZlIHRvd3MuIFRoZSBcIkVnZyBDb3VudHMgUG9zaXRpdmUgVG93c1wiIHRhYmxlIGluY2x1ZGVzIG9ubHkgdG93cyB3aGVyZSBvbmUgb3IgbW9yZSBlZ2dzIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzIHNlbGVjdGVkIGJ5IHRoZSB1c2VyLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZSAoQ3J1aXNlIENvZGUpXG5zaGlwIChTaGlwIE5hbWUpXG5zaGlwX2NvZGVcbm9yZGVyX29jY3VwaWVkXG50b3dfdHlwZVxubmV0X3R5cGVcbnRvd19udW1iZXJcbm5ldF9sb2NhdGlvblxuc3RhbmRhcmRfaGF1bF9mYWN0b3JcbnZvbHVtZV9zYW1wbGVkIChjdWJpYyBtZXRlcnMpXG5wZXJjZW50X3NvcnRlZCAoJS8xMDApXG5zYW1wbGVfcXVhbGl0eVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxpbmVcbnN0YXRpb25cbnRpbWUgKFN0YXJ0IFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zY2llbnRpZmljX25hbWVcbmNvbW1vbl9uYW1lXG5pdGlzX3RzbiAoSW50ZXJncmF0ZWQgVGF4b21vbWljIEluZm9ybWF0aW9uIFN5c3RlbSBUYXhvbm9taWMgU2VyaWFsIE51bWJlcilcbmNhbGNvZmlfc3BlY2llc19jb2RlIChDYWxDT0kgU3BlY2llcyBDb2RlKVxuZWdnX2NvdW50IChyYXcgY291bnQpXG5lZ2dzXzEwbTIgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBlZ2dzIGZvciBvYmxpcXVlIHRvd3MsIEVnZ3MgcGVyIHRlbiBtZXRlcnMgc3F1YXJlZCBvZiB3YXRlciBzYW1wbGVkKVxuZWdnc18xMDAwbTMgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBlZ2dzIGZvciBtYW50YSB0b3dzLCBFZ2dzIHBlciAxLDAwMCBjdWJpYyBtZXRlcnMgb2Ygd2F0ZXIgc2FtcGxlZClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRDYWxDT0ZJZWdnY250X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRDYWxDT0ZJZWdnY250X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZENhbENPRkllZ2djbnQvaW5kZXguanNvbiIsICJodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L0NhbENPRkkvY2FsY29maV9pbmZvLmh0bWwiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkQ2FsQ09GSWVnZ2NudC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkQ2FsQ09GSWVnZ2NudCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFNXRlNDIiwgImVyZENhbENPRkllZ2djbnQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWVnZ2NudHBvcy5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWVnZ2NudHBvcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJZWdnY250cG9zLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkNhbENPRkkgRWdnIENvdW50cyBQb3NpdGl2ZSBUb3dzIiwgIkZpc2ggZWdnIGNvdW50cyBhbmQgc3RhbmRhcmRpemVkIGNvdW50cyBmb3IgZWdncyBjYXB0dXJlZCBpbiBDYWxDT0ZJIGljdGh5b3BsYW5rdG9uIG5ldHMgKHByaW1hcmlseSB2ZXJ0aWNhbCBbQ2FsdmV0IG9yIFBhaXJvdmV0XSwgb2JsaXF1ZSBbYm9uZ28gb3IgcmluZyBuZXRzXSwgYW5kIHN1cmZhY2UgdG93cyBbTWFudGEgbmV0c10pLiBTdXJmYWNlIHRvd3MgYXJlIG5vcm1hbGx5IHN0YW5kYXJkaXplZCB0byBjb3VudCBwZXIgMSwwMDAgbTMgc3RyYWluZWQuIE9ibGlxdWUgdG93cyBhcmUgbm9ybWFsbHkgc3RhbmRhcmRpemVkIHRvIGNvdW50IHBlciAxMCBtMiBvZiBzdXJmYWNlIHNhbXBsZWQuIFRoaXMgdGFibGUgaW5jbHVkZXMgb25seSB0b3dzIHdoZXJlIG9uZSBvciBtb3JlIGVnZ3Mgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMgc2VsZWN0ZWQgYnkgdGhlIHVzZXIsIGkuZS4sIG5vIFwiemVyb1wiIHRvd3MuIFRoZSBcIkVnZyBDb3VudHNcIiB0YWJsZSBpbmNsdWRlcyBhbGwgdG93cyBieSBzcGVjaWVzLCBpLmUuLCBib3RoIHBvc2l0aXZlIGFuZCBuZWdhdGl2ZSB0b3dzLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZSAoQ3J1aXNlIENvZGUpXG5zaGlwIChTaGlwIE5hbWUpXG5zaGlwX2NvZGVcbm9yZGVyX29jY3VwaWVkXG50b3dfdHlwZVxubmV0X3R5cGVcbnRvd19udW1iZXJcbm5ldF9sb2NhdGlvblxuc3RhbmRhcmRfaGF1bF9mYWN0b3JcbnZvbHVtZV9zYW1wbGVkIChjdWJpYyBtZXRlcnMpXG5wZXJjZW50X3NvcnRlZCAoJS8xMDApXG5zYW1wbGVfcXVhbGl0eVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxpbmVcbnN0YXRpb25cbnRpbWUgKFN0YXJ0IFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zY2llbnRpZmljX25hbWVcbmNvbW1vbl9uYW1lXG5pdGlzX3RzbiAoSW50ZXJncmF0ZWQgVGF4b21vbWljIEluZm9ybWF0aW9uIFN5c3RlbSBUYXhvbm9taWMgU2VyaWFsIE51bWJlcilcbmNhbGNvZmlfc3BlY2llc19jb2RlXG5lZ2dfY291bnQgKHJhdyBjb3VudClcbmVnZ3NfMTBtMiAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGVnZ3MgZm9yIG9ibGlxdWUgdG93cywgRWdncyBwZXIgdGVuIG1ldGVycyBzcXVhcmVkIG9mIHdhdGVyIHNhbXBsZWQpXG5lZ2dzXzEwMDBtMyAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGVnZ3MgZm9yIG1hbnRhIHRvd3MsIEVnZ3MgcGVyIDEsMDAwIGN1YmljIG1ldGVycyBvZiB3YXRlciBzYW1wbGVkKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZENhbENPRkllZ2djbnRwb3NfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2VyZENhbENPRkllZ2djbnRwb3NfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkQ2FsQ09GSWVnZ2NudHBvcy9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvQ2FsQ09GSS9jYWxjb2ZpX2luZm8uaHRtbCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lcmRDYWxDT0ZJZWdnY250cG9zLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmRDYWxDT0ZJZWdnY250cG9zJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgU1dGU0MiLCAiZXJkQ2FsQ09GSWVnZ2NudHBvcyJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJZWdnc3RnLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJZWdnc3RnIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRkllZ2dzdGcuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiQ2FsQ09GSSBFZ2cgU3RhZ2VzIiwgIkVnZyBtb3JwaG9sb2dpY2FsIGRldmVsb3BtZW50YWwgc3RhZ2UgZm9yIGVnZ3Mgb2Ygc2VsZWN0ZWQgc3BlY2llcyBjYXB0dXJlZCBpbiBDYWxDT0ZJIGljdGh5b3BsYW5rdG9uIG5ldHMuIFNlcXVlbnRpYWwgZGV2ZWxvcG1lbnRhbCBzdGFnZXMgYXJlIGRlc2NyaWJlZCBieSBNb3NlciBhbmQgQWhsc3Ryb20gKDE5ODU7IHNlZSB0aGUgaW5mbyB1cmwgcmVmZXJlbmNlcyBzZWN0aW9uKS5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2UgKENydWlzZSBDb2RlKVxuc2hpcCAoU2hpcCBOYW1lKVxuc2hpcF9jb2RlXG5vcmRlcl9vY2N1cGllZFxudG93X3R5cGUgKFRvdyBUeXBlIE5hbWUpXG5uZXRfdHlwZVxudG93X251bWJlclxubmV0X2xvY2F0aW9uXG5zdGFuZGFyZF9oYXVsX2ZhY3Rvclxudm9sdW1lX3NhbXBsZWQgKGN1YmljIG1ldGVycylcbnBlcmNlbnRfc29ydGVkICglLzEwMClcbnNhbXBsZV9xdWFsaXR5XG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGluZVxuc3RhdGlvblxudGltZSAoU3RhcnQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNjaWVudGlmaWNfbmFtZVxuY29tbW9uX25hbWVcbml0aXNfdHNuIChJbnRlcmdyYXRlZCBUYXhvbW9taWMgSW5mb3JtYXRpb24gU3lzdGVtIFRheG9ub21pYyBTZXJpYWwgTnVtYmVyKVxuY2FsY29maV9zcGVjaWVzX2NvZGVcbmVnZ19zdGFnZVxuZWdnX3N0YWdlX2NvdW50IChSYXcgY291bnQgb2YgZWdncyBpbiB0aGUgc3RhZ2UpXG5lZ2dzXzEwbTIgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBlZ2dzIGZvciBvYmxpcXVlIHRvd3MsIEVnZ3MgcGVyIHRlbiBtZXRlcnMgc3F1YXJlZCBvZiB3YXRlciBzYW1wbGVkKVxuZWdnc18xMDAwbTMgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBlZ2dzIGZvciBtYW50YSB0b3dzLCBFZ2dzIHBlciAxLDAwMCBjdWJpYyBtZXRlcnMgb2Ygd2F0ZXIgc2FtcGxlZClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRDYWxDT0ZJZWdnc3RnX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRDYWxDT0ZJZWdnc3RnX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZENhbENPRkllZ2dzdGcvaW5kZXguanNvbiIsICJodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L0NhbENPRkkvY2FsY29maV9pbmZvLmh0bWwiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkQ2FsQ09GSWVnZ3N0Zy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkQ2FsQ09GSWVnZ3N0ZyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFNXRlNDIiwgImVyZENhbENPRkllZ2dzdGciXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudHBvcy5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudHBvcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250cG9zLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkNhbENPRkkgTGFydmFlIENvdW50cyBQb3NpdGl2ZSBUb3dzIiwgIkZpc2ggbGFydmFlIGNvdW50cyBhbmQgc3RhbmRhcmRpemVkIGNvdW50cyBmb3IgZWdncyBjYXB0dXJlZCBpbiBDYWxDT0ZJIGljdGh5b3BsYW5rdG9uIG5ldHMgKHByaW1hcmlseSB2ZXJ0aWNhbCBbQ2FsdmV0IG9yIFBhaXJvdmV0XSwgb2JsaXF1ZSBbYm9uZ28gb3IgcmluZyBuZXRzXSwgYW5kIHN1cmZhY2UgdG93cyBbTWFudGEgbmV0c10pIC4gU3VyZmFjZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEsMDAwIG0zIHN0cmFpbmVkLiBPYmxpcXVlIHRvd3MgYXJlIG5vcm1hbGx5IHN0YW5kYXJkaXplZCB0byBjb3VudCBwZXIgMTAgbTIgb2Ygc3VyZmFjZSBzYW1wbGVkLiBUaGlzIHRhYmxlIGluY2x1ZGVzIG9ubHkgdG93cyB3aGVyZSBvbmUgb3IgbW9yZSBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMgc2VsZWN0ZWQgYnkgdGhlIHVzZXIsIGkuZS4sIG5vIFwiemVyb1wiIHRvd3MuIFRoZSBcIkxhcnZhZSBDb3VudHNcIiB0YWJsZSBpbmNsdWRlcyBhbGwgdG93cyBieSBzcGVjaWVzLCBpLmUuLCBib3RoIHBvc2l0aXZlIGFuZCBuZWdhdGl2ZSB0b3dzLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZSAoQ3J1aXNlIENvZGUpXG5zaGlwIChTaGlwIE5hbWUpXG5zaGlwX2NvZGVcbm9yZGVyX29jY3VwaWVkXG50b3dfdHlwZVxubmV0X3R5cGVcbnRvd19udW1iZXJcbm5ldF9sb2NhdGlvblxuc3RhbmRhcmRfaGF1bF9mYWN0b3JcbnZvbHVtZV9zYW1wbGVkIChjdWJpYyBtZXRlcnMpXG5wZXJjZW50X3NvcnRlZCAoJS8xMDApXG5zYW1wbGVfcXVhbGl0eVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxpbmVcbnN0YXRpb25cbnRpbWUgKFN0YXJ0IFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zY2llbnRpZmljX25hbWVcbmNvbW1vbl9uYW1lXG5pdGlzX3RzbiAoSW50ZXJncmF0ZWQgVGF4b21vbWljIEluZm9ybWF0aW9uIFN5c3RlbSBUYXhvbm9taWMgU2VyaWFsIE51bWJlcilcbmNhbGNvZmlfc3BlY2llc19jb2RlXG5sYXJ2YWVfY291bnQgKFJhdyBjb3VudCBvZiBsYXJ2YWUpXG5sYXJ2YWVfMTBtMiAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGxhcnZhZSBpbiB0aGUgc2l6ZSBjbGFzcyBmb3Igb2JsaXF1ZSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgdGVuIG1ldGVycyBzcXVhcmVkIG9mIHdhdGVyIHNhbXBsZWQpXG5sYXJ2YWVfMTAwMG0zIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGluIHRoZSBzaXplIGNsYXNzIGZvciBtYW50YSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgMSwwMDAgY3ViaWMgbWV0ZXJzIG9mIHdhdGVyIHNhbXBsZWQpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkQ2FsQ09GSWxydmNudHBvc19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkQ2FsQ09GSWxydmNudHBvc19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRDYWxDT0ZJbHJ2Y250cG9zL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9DYWxDT0ZJL2NhbGNvZmlfaW5mby5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENhbENPRklscnZjbnRwb3MucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZENhbENPRklscnZjbnRwb3Mmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBTV0ZTQyIsICJlcmRDYWxDT0ZJbHJ2Y250cG9zIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRBdG9BTS5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudEF0b0FNIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRBdG9BTS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDYWxDT0ZJIExhcnZhZSBDb3VudHMsIFNjaWVudGlmaWMgTmFtZXMgQSB0byBBTSIsICJGaXNoIGxhcnZhZSBjb3VudHMgYW5kIHN0YW5kYXJkaXplZCBjb3VudHMgZm9yIGxhcnZhZSBjYXB0dXJlZCBpbiBDYWxDT0ZJIGljdGh5b3BsYW5rdG9uIG5ldHMgKHByaW1hcmlseSB2ZXJ0aWNhbCBbQ2FsdmV0IG9yIFBhaXJvdmV0XSwgb2JsaXF1ZSBbYm9uZ28gb3IgcmluZyBuZXRzXSwgYW5kIHN1cmZhY2UgdG93cyBbTWFudGEgbmV0c10pLiBTdXJmYWNlIHRvd3MgYXJlIG5vcm1hbGx5IHN0YW5kYXJkaXplZCB0byBjb3VudCBwZXIgMSwwMDAgbTMgc3RyYWluZWQuIE9ibGlxdWUgdG93cyBhcmUgbm9ybWFsbHkgc3RhbmRhcmRpemVkIHRvIGNvdW50IHBlciAxMCBtMiBvZiBzdXJmYWNlIHNhbXBsZWQuIFRoaXMgdGFibGUgaW5jbHVkZXMgYWxsIHRvd3MgYnkgc3BlY2llcywgZXZlbiBpZiB6ZXJvIGxhcnZhZSB3ZXJlIGNhcHR1cmVkIGZvciB0aGUgc3BlY2llcywgaS5lLiwgbmVnYXRpdmUgdG93cy4gVGhlIFwiTGFydmFlIENvdW50cyBQb3NpdGl2ZSBUb3dzXCIgdGFibGUgaW5jbHVkZXMgb25seSB0b3dzIHdoZXJlIG9uZSBvciBtb3JlIGxhcnZhZSB3ZXJlIGNhcHR1cmVkIGZvciB0aGUgc3BlY2llcyBzZWxlY3RlZCBieSB0aGUgdXNlci5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2UgKENydWlzZSBDb2RlKVxuc2hpcCAoU2hpcCBOYW1lKVxuc2hpcF9jb2RlXG5vcmRlcl9vY2N1cGllZFxudG93X3R5cGVcbm5ldF90eXBlXG50b3dfbnVtYmVyXG5uZXRfbG9jYXRpb25cbnN0YW5kYXJkX2hhdWxfZmFjdG9yXG52b2x1bWVfc2FtcGxlZCAoY3ViaWMgbWV0ZXJzKVxucGVyY2VudF9zb3J0ZWQgKCUvMTAwKVxuc2FtcGxlX3F1YWxpdHlcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5saW5lXG5zdGF0aW9uXG50aW1lIChTdGFydCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuc2NpZW50aWZpY19uYW1lXG5jb21tb25fbmFtZVxuaXRpc190c24gKEludGVyZ3JhdGVkIFRheG9tb21pYyBJbmZvcm1hdGlvbiBTeXN0ZW0gVGF4b25vbWljIFNlcmlhbCBOdW1iZXIpXG5jYWxjb2ZpX3NwZWNpZXNfY29kZVxubGFydmFlX2NvdW50IChSYXcgY291bnQgb2YgbGFydmFlKVxubGFydmFlXzEwbTIgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBsYXJ2YWUgZm9yIG9ibGlxdWUgdG93cywgRmlzaCBsYXJ2YWUgcGVyIHRlbiBtZXRlcnMgc3F1YXJlZCBvZiB3YXRlciBzYW1wbGVkKVxubGFydmFlXzEwMDBtMyAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGxhcnZhZSBmb3IgbWFudGEgdG93cywgRmlzaCBsYXJ2YWUgcGVyIDEsMDAwIGN1YmljIG1ldGVycyBvZiB3YXRlciBzYW1wbGVkKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZENhbENPRklscnZjbnRBdG9BTV9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkQ2FsQ09GSWxydmNudEF0b0FNX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZENhbENPRklscnZjbnRBdG9BTS9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvQ2FsQ09GSS9jYWxjb2ZpX2luZm8uaHRtbCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lcmRDYWxDT0ZJbHJ2Y250QXRvQU0ucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZENhbENPRklscnZjbnRBdG9BTSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFNXRlNDIiwgImVyZENhbENPRklscnZjbnRBdG9BTSJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250QU50b0FSLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250QU50b0FSIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRBTnRvQVIuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiQ2FsQ09GSSBMYXJ2YWUgQ291bnRzLCBTY2llbnRpZmljIE5hbWVzIEFOIHRvIEFSIiwgIkZpc2ggbGFydmFlIGNvdW50cyBhbmQgc3RhbmRhcmRpemVkIGNvdW50cyBmb3IgbGFydmFlIGNhcHR1cmVkIGluIENhbENPRkkgaWN0aHlvcGxhbmt0b24gbmV0cyAocHJpbWFyaWx5IHZlcnRpY2FsIFtDYWx2ZXQgb3IgUGFpcm92ZXRdLCBvYmxpcXVlIFtib25nbyBvciByaW5nIG5ldHNdLCBhbmQgc3VyZmFjZSB0b3dzIFtNYW50YSBuZXRzXSkuIFN1cmZhY2UgdG93cyBhcmUgbm9ybWFsbHkgc3RhbmRhcmRpemVkIHRvIGNvdW50IHBlciAxLDAwMCBtMyBzdHJhaW5lZC4gT2JsaXF1ZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEwIG0yIG9mIHN1cmZhY2Ugc2FtcGxlZC4gVGhpcyB0YWJsZSBpbmNsdWRlcyBhbGwgdG93cyBieSBzcGVjaWVzLCBldmVuIGlmIHplcm8gbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzLCBpLmUuLCBuZWdhdGl2ZSB0b3dzLiBUaGUgXCJMYXJ2YWUgQ291bnRzIFBvc2l0aXZlIFRvd3NcIiB0YWJsZSBpbmNsdWRlcyBvbmx5IHRvd3Mgd2hlcmUgb25lIG9yIG1vcmUgbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzIHNlbGVjdGVkIGJ5IHRoZSB1c2VyLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZSAoQ3J1aXNlIENvZGUpXG5zaGlwIChTaGlwIE5hbWUpXG5zaGlwX2NvZGVcbm9yZGVyX29jY3VwaWVkXG50b3dfdHlwZVxubmV0X3R5cGVcbnRvd19udW1iZXJcbm5ldF9sb2NhdGlvblxuc3RhbmRhcmRfaGF1bF9mYWN0b3JcbnZvbHVtZV9zYW1wbGVkIChjdWJpYyBtZXRlcnMpXG5wZXJjZW50X3NvcnRlZCAoJS8xMDApXG5zYW1wbGVfcXVhbGl0eVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxpbmVcbnN0YXRpb25cbnRpbWUgKFN0YXJ0IFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zY2llbnRpZmljX25hbWVcbmNvbW1vbl9uYW1lXG5pdGlzX3RzbiAoSW50ZXJncmF0ZWQgVGF4b21vbWljIEluZm9ybWF0aW9uIFN5c3RlbSBUYXhvbm9taWMgU2VyaWFsIE51bWJlcilcbmNhbGNvZmlfc3BlY2llc19jb2RlXG5sYXJ2YWVfY291bnQgKFJhdyBjb3VudCBvZiBsYXJ2YWUpXG5sYXJ2YWVfMTBtMiAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGxhcnZhZSBmb3Igb2JsaXF1ZSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgdGVuIG1ldGVycyBzcXVhcmVkIG9mIHdhdGVyIHNhbXBsZWQpXG5sYXJ2YWVfMTAwMG0zIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBtYW50YSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgMSwwMDAgY3ViaWMgbWV0ZXJzIG9mIHdhdGVyIHNhbXBsZWQpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkQ2FsQ09GSWxydmNudEFOdG9BUl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkQ2FsQ09GSWxydmNudEFOdG9BUl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRDYWxDT0ZJbHJ2Y250QU50b0FSL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9DYWxDT0ZJL2NhbGNvZmlfaW5mby5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENhbENPRklscnZjbnRBTnRvQVIucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZENhbENPRklscnZjbnRBTnRvQVImc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBTV0ZTQyIsICJlcmRDYWxDT0ZJbHJ2Y250QU50b0FSIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRBU3RvQkEuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRBU3RvQkEiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudEFTdG9CQS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDYWxDT0ZJIExhcnZhZSBDb3VudHMsIFNjaWVudGlmaWMgTmFtZXMgQVMgdG8gQkEiLCAiRmlzaCBsYXJ2YWUgY291bnRzIGFuZCBzdGFuZGFyZGl6ZWQgY291bnRzIGZvciBsYXJ2YWUgY2FwdHVyZWQgaW4gQ2FsQ09GSSBpY3RoeW9wbGFua3RvbiBuZXRzIChwcmltYXJpbHkgdmVydGljYWwgW0NhbHZldCBvciBQYWlyb3ZldF0sIG9ibGlxdWUgW2JvbmdvIG9yIHJpbmcgbmV0c10sIGFuZCBzdXJmYWNlIHRvd3MgW01hbnRhIG5ldHNdKS4gU3VyZmFjZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEsMDAwIG0zIHN0cmFpbmVkLiBPYmxpcXVlIHRvd3MgYXJlIG5vcm1hbGx5IHN0YW5kYXJkaXplZCB0byBjb3VudCBwZXIgMTAgbTIgb2Ygc3VyZmFjZSBzYW1wbGVkLiBUaGlzIHRhYmxlIGluY2x1ZGVzIGFsbCB0b3dzIGJ5IHNwZWNpZXMsIGV2ZW4gaWYgemVybyBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMsIGkuZS4sIG5lZ2F0aXZlIHRvd3MuIFRoZSBcIkxhcnZhZSBDb3VudHMgUG9zaXRpdmUgVG93c1wiIHRhYmxlIGluY2x1ZGVzIG9ubHkgdG93cyB3aGVyZSBvbmUgb3IgbW9yZSBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMgc2VsZWN0ZWQgYnkgdGhlIHVzZXIuXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlIChDcnVpc2UgQ29kZSlcbnNoaXAgKFNoaXAgTmFtZSlcbnNoaXBfY29kZVxub3JkZXJfb2NjdXBpZWRcbnRvd190eXBlXG5uZXRfdHlwZVxudG93X251bWJlclxubmV0X2xvY2F0aW9uXG5zdGFuZGFyZF9oYXVsX2ZhY3Rvclxudm9sdW1lX3NhbXBsZWQgKGN1YmljIG1ldGVycylcbnBlcmNlbnRfc29ydGVkICglLzEwMClcbnNhbXBsZV9xdWFsaXR5XG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGluZVxuc3RhdGlvblxudGltZSAoU3RhcnQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNjaWVudGlmaWNfbmFtZVxuY29tbW9uX25hbWVcbml0aXNfdHNuIChJbnRlcmdyYXRlZCBUYXhvbW9taWMgSW5mb3JtYXRpb24gU3lzdGVtIFRheG9ub21pYyBTZXJpYWwgTnVtYmVyKVxuY2FsY29maV9zcGVjaWVzX2NvZGVcbmxhcnZhZV9jb3VudCAoUmF3IGNvdW50IG9mIGxhcnZhZSlcbmxhcnZhZV8xMG0yIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBvYmxpcXVlIHRvd3MsIEZpc2ggbGFydmFlIHBlciB0ZW4gbWV0ZXJzIHNxdWFyZWQgb2Ygd2F0ZXIgc2FtcGxlZClcbmxhcnZhZV8xMDAwbTMgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBsYXJ2YWUgZm9yIG1hbnRhIHRvd3MsIEZpc2ggbGFydmFlIHBlciAxLDAwMCBjdWJpYyBtZXRlcnMgb2Ygd2F0ZXIgc2FtcGxlZClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRDYWxDT0ZJbHJ2Y250QVN0b0JBX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRDYWxDT0ZJbHJ2Y250QVN0b0JBX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZENhbENPRklscnZjbnRBU3RvQkEvaW5kZXguanNvbiIsICJodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L0NhbENPRkkvY2FsY29maV9pbmZvLmh0bWwiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkQ2FsQ09GSWxydmNudEFTdG9CQS5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkQ2FsQ09GSWxydmNudEFTdG9CQSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFNXRlNDIiwgImVyZENhbENPRklscnZjbnRBU3RvQkEiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudEJDRXRvQlouc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRCQ0V0b0JaIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRCQ0V0b0JaLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkNhbENPRkkgTGFydmFlIENvdW50cywgU2NpZW50aWZpYyBOYW1lcyBCQ0UgdG8gQloiLCAiRmlzaCBsYXJ2YWUgY291bnRzIGFuZCBzdGFuZGFyZGl6ZWQgY291bnRzIGZvciBsYXJ2YWUgY2FwdHVyZWQgaW4gQ2FsQ09GSSBpY3RoeW9wbGFua3RvbiBuZXRzIChwcmltYXJpbHkgdmVydGljYWwgW0NhbHZldCBvciBQYWlyb3ZldF0sIG9ibGlxdWUgW2JvbmdvIG9yIHJpbmcgbmV0c10sIGFuZCBzdXJmYWNlIHRvd3MgW01hbnRhIG5ldHNdKS4gU3VyZmFjZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEsMDAwIG0zIHN0cmFpbmVkLiBPYmxpcXVlIHRvd3MgYXJlIG5vcm1hbGx5IHN0YW5kYXJkaXplZCB0byBjb3VudCBwZXIgMTAgbTIgb2Ygc3VyZmFjZSBzYW1wbGVkLiBUaGlzIHRhYmxlIGluY2x1ZGVzIGFsbCB0b3dzIGJ5IHNwZWNpZXMsIGV2ZW4gaWYgemVybyBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMsIGkuZS4sIG5lZ2F0aXZlIHRvd3MuIFRoZSBcIkxhcnZhZSBDb3VudHMgUG9zaXRpdmUgVG93c1wiIHRhYmxlIGluY2x1ZGVzIG9ubHkgdG93cyB3aGVyZSBvbmUgb3IgbW9yZSBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMgc2VsZWN0ZWQgYnkgdGhlIHVzZXIuXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlIChDcnVpc2UgQ29kZSlcbnNoaXAgKFNoaXAgTmFtZSlcbnNoaXBfY29kZVxub3JkZXJfb2NjdXBpZWRcbnRvd190eXBlXG5uZXRfdHlwZVxudG93X251bWJlclxubmV0X2xvY2F0aW9uXG5zdGFuZGFyZF9oYXVsX2ZhY3Rvclxudm9sdW1lX3NhbXBsZWQgKGN1YmljIG1ldGVycylcbnBlcmNlbnRfc29ydGVkICglLzEwMClcbnNhbXBsZV9xdWFsaXR5XG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGluZVxuc3RhdGlvblxudGltZSAoU3RhcnQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNjaWVudGlmaWNfbmFtZVxuY29tbW9uX25hbWVcbml0aXNfdHNuIChJbnRlcmdyYXRlZCBUYXhvbW9taWMgSW5mb3JtYXRpb24gU3lzdGVtIFRheG9ub21pYyBTZXJpYWwgTnVtYmVyKVxuY2FsY29maV9zcGVjaWVzX2NvZGVcbmxhcnZhZV9jb3VudCAoUmF3IGNvdW50IG9mIGxhcnZhZSlcbmxhcnZhZV8xMG0yIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBvYmxpcXVlIHRvd3MsIEZpc2ggbGFydmFlIHBlciB0ZW4gbWV0ZXJzIHNxdWFyZWQgb2Ygd2F0ZXIgc2FtcGxlZClcbmxhcnZhZV8xMDAwbTMgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBsYXJ2YWUgZm9yIG1hbnRhIHRvd3MsIEZpc2ggbGFydmFlIHBlciAxLDAwMCBjdWJpYyBtZXRlcnMgb2Ygd2F0ZXIgc2FtcGxlZClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRDYWxDT0ZJbHJ2Y250QkNFdG9CWl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkQ2FsQ09GSWxydmNudEJDRXRvQlpfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkQ2FsQ09GSWxydmNudEJDRXRvQlovaW5kZXguanNvbiIsICJodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L0NhbENPRkkvY2FsY29maV9pbmZvLmh0bWwiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkQ2FsQ09GSWxydmNudEJDRXRvQloucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZENhbENPRklscnZjbnRCQ0V0b0JaJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgU1dGU0MiLCAiZXJkQ2FsQ09GSWxydmNudEJDRXRvQloiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudEN0b0NFLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250Q3RvQ0UiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudEN0b0NFLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkNhbENPRkkgTGFydmFlIENvdW50cywgU2NpZW50aWZpYyBOYW1lcyBDIHRvIENFIiwgIkZpc2ggbGFydmFlIGNvdW50cyBhbmQgc3RhbmRhcmRpemVkIGNvdW50cyBmb3IgbGFydmFlIGNhcHR1cmVkIGluIENhbENPRkkgaWN0aHlvcGxhbmt0b24gbmV0cyAocHJpbWFyaWx5IHZlcnRpY2FsIFtDYWx2ZXQgb3IgUGFpcm92ZXRdLCBvYmxpcXVlIFtib25nbyBvciByaW5nIG5ldHNdLCBhbmQgc3VyZmFjZSB0b3dzIFtNYW50YSBuZXRzXSkuIFN1cmZhY2UgdG93cyBhcmUgbm9ybWFsbHkgc3RhbmRhcmRpemVkIHRvIGNvdW50IHBlciAxLDAwMCBtMyBzdHJhaW5lZC4gT2JsaXF1ZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEwIG0yIG9mIHN1cmZhY2Ugc2FtcGxlZC4gVGhpcyB0YWJsZSBpbmNsdWRlcyBhbGwgdG93cyBieSBzcGVjaWVzLCBldmVuIGlmIHplcm8gbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzLCBpLmUuLCBuZWdhdGl2ZSB0b3dzLiBUaGUgXCJMYXJ2YWUgQ291bnRzIFBvc2l0aXZlIFRvd3NcIiB0YWJsZSBpbmNsdWRlcyBvbmx5IHRvd3Mgd2hlcmUgb25lIG9yIG1vcmUgbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzIHNlbGVjdGVkIGJ5IHRoZSB1c2VyLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZSAoQ3J1aXNlIENvZGUpXG5zaGlwIChTaGlwIE5hbWUpXG5zaGlwX2NvZGVcbm9yZGVyX29jY3VwaWVkXG50b3dfdHlwZVxubmV0X3R5cGVcbnRvd19udW1iZXJcbm5ldF9sb2NhdGlvblxuc3RhbmRhcmRfaGF1bF9mYWN0b3JcbnZvbHVtZV9zYW1wbGVkIChjdWJpYyBtZXRlcnMpXG5wZXJjZW50X3NvcnRlZCAoJS8xMDApXG5zYW1wbGVfcXVhbGl0eVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxpbmVcbnN0YXRpb25cbnRpbWUgKFN0YXJ0IFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zY2llbnRpZmljX25hbWVcbmNvbW1vbl9uYW1lXG5pdGlzX3RzbiAoSW50ZXJncmF0ZWQgVGF4b21vbWljIEluZm9ybWF0aW9uIFN5c3RlbSBUYXhvbm9taWMgU2VyaWFsIE51bWJlcilcbmNhbGNvZmlfc3BlY2llc19jb2RlXG5sYXJ2YWVfY291bnQgKFJhdyBjb3VudCBvZiBsYXJ2YWUpXG5sYXJ2YWVfMTBtMiAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGxhcnZhZSBmb3Igb2JsaXF1ZSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgdGVuIG1ldGVycyBzcXVhcmVkIG9mIHdhdGVyIHNhbXBsZWQpXG5sYXJ2YWVfMTAwMG0zIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBtYW50YSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgMSwwMDAgY3ViaWMgbWV0ZXJzIG9mIHdhdGVyIHNhbXBsZWQpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkQ2FsQ09GSWxydmNudEN0b0NFX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRDYWxDT0ZJbHJ2Y250Q3RvQ0VfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkQ2FsQ09GSWxydmNudEN0b0NFL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9DYWxDT0ZJL2NhbGNvZmlfaW5mby5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENhbENPRklscnZjbnRDdG9DRS5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkQ2FsQ09GSWxydmNudEN0b0NFJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgU1dGU0MiLCAiZXJkQ2FsQ09GSWxydmNudEN0b0NFIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRDRHRvQ0guc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRDRHRvQ0giLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudENEdG9DSC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDYWxDT0ZJIExhcnZhZSBDb3VudHMsIFNjaWVudGlmaWMgTmFtZXMgQ0QgdG8gQ0giLCAiRmlzaCBsYXJ2YWUgY291bnRzIGFuZCBzdGFuZGFyZGl6ZWQgY291bnRzIGZvciBsYXJ2YWUgY2FwdHVyZWQgaW4gQ2FsQ09GSSBpY3RoeW9wbGFua3RvbiBuZXRzIChwcmltYXJpbHkgdmVydGljYWwgW0NhbHZldCBvciBQYWlyb3ZldF0sIG9ibGlxdWUgW2JvbmdvIG9yIHJpbmcgbmV0c10sIGFuZCBzdXJmYWNlIHRvd3MgW01hbnRhIG5ldHNdKS4gU3VyZmFjZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEsMDAwIG0zIHN0cmFpbmVkLiBPYmxpcXVlIHRvd3MgYXJlIG5vcm1hbGx5IHN0YW5kYXJkaXplZCB0byBjb3VudCBwZXIgMTAgbTIgb2Ygc3VyZmFjZSBzYW1wbGVkLiBUaGlzIHRhYmxlIGluY2x1ZGVzIGFsbCB0b3dzIGJ5IHNwZWNpZXMsIGV2ZW4gaWYgemVybyBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMsIGkuZS4sIG5lZ2F0aXZlIHRvd3MuIFRoZSBcIkxhcnZhZSBDb3VudHMgUG9zaXRpdmUgVG93c1wiIHRhYmxlIGluY2x1ZGVzIG9ubHkgdG93cyB3aGVyZSBvbmUgb3IgbW9yZSBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMgc2VsZWN0ZWQgYnkgdGhlIHVzZXIuXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlIChDcnVpc2UgQ29kZSlcbnNoaXAgKFNoaXAgTmFtZSlcbnNoaXBfY29kZVxub3JkZXJfb2NjdXBpZWRcbnRvd190eXBlXG5uZXRfdHlwZVxudG93X251bWJlclxubmV0X2xvY2F0aW9uXG5zdGFuZGFyZF9oYXVsX2ZhY3Rvclxudm9sdW1lX3NhbXBsZWQgKGN1YmljIG1ldGVycylcbnBlcmNlbnRfc29ydGVkICglLzEwMClcbnNhbXBsZV9xdWFsaXR5XG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGluZVxuc3RhdGlvblxudGltZSAoU3RhcnQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNjaWVudGlmaWNfbmFtZVxuY29tbW9uX25hbWVcbml0aXNfdHNuIChJbnRlcmdyYXRlZCBUYXhvbW9taWMgSW5mb3JtYXRpb24gU3lzdGVtIFRheG9ub21pYyBTZXJpYWwgTnVtYmVyKVxuY2FsY29maV9zcGVjaWVzX2NvZGVcbmxhcnZhZV9jb3VudCAoUmF3IGNvdW50IG9mIGxhcnZhZSlcbmxhcnZhZV8xMG0yIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBvYmxpcXVlIHRvd3MsIEZpc2ggbGFydmFlIHBlciB0ZW4gbWV0ZXJzIHNxdWFyZWQgb2Ygd2F0ZXIgc2FtcGxlZClcbmxhcnZhZV8xMDAwbTMgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBsYXJ2YWUgZm9yIG1hbnRhIHRvd3MsIEZpc2ggbGFydmFlIHBlciAxLDAwMCBjdWJpYyBtZXRlcnMgb2Ygd2F0ZXIgc2FtcGxlZClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRDYWxDT0ZJbHJ2Y250Q0R0b0NIX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRDYWxDT0ZJbHJ2Y250Q0R0b0NIX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZENhbENPRklscnZjbnRDRHRvQ0gvaW5kZXguanNvbiIsICJodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L0NhbENPRkkvY2FsY29maV9pbmZvLmh0bWwiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkQ2FsQ09GSWxydmNudENEdG9DSC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkQ2FsQ09GSWxydmNudENEdG9DSCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFNXRlNDIiwgImVyZENhbENPRklscnZjbnRDRHRvQ0giXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudENJdG9DTy5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudENJdG9DTyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250Q0l0b0NPLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkNhbENPRkkgTGFydmFlIENvdW50cywgU2NpZW50aWZpYyBOYW1lcyBDSSB0byBDTyIsICJGaXNoIGxhcnZhZSBjb3VudHMgYW5kIHN0YW5kYXJkaXplZCBjb3VudHMgZm9yIGxhcnZhZSBjYXB0dXJlZCBpbiBDYWxDT0ZJIGljdGh5b3BsYW5rdG9uIG5ldHMgKHByaW1hcmlseSB2ZXJ0aWNhbCBbQ2FsdmV0IG9yIFBhaXJvdmV0XSwgb2JsaXF1ZSBbYm9uZ28gb3IgcmluZyBuZXRzXSwgYW5kIHN1cmZhY2UgdG93cyBbTWFudGEgbmV0c10pLiBTdXJmYWNlIHRvd3MgYXJlIG5vcm1hbGx5IHN0YW5kYXJkaXplZCB0byBjb3VudCBwZXIgMSwwMDAgbTMgc3RyYWluZWQuIE9ibGlxdWUgdG93cyBhcmUgbm9ybWFsbHkgc3RhbmRhcmRpemVkIHRvIGNvdW50IHBlciAxMCBtMiBvZiBzdXJmYWNlIHNhbXBsZWQuIFRoaXMgdGFibGUgaW5jbHVkZXMgYWxsIHRvd3MgYnkgc3BlY2llcywgZXZlbiBpZiB6ZXJvIGxhcnZhZSB3ZXJlIGNhcHR1cmVkIGZvciB0aGUgc3BlY2llcywgaS5lLiwgbmVnYXRpdmUgdG93cy4gVGhlIFwiTGFydmFlIENvdW50cyBQb3NpdGl2ZSBUb3dzXCIgdGFibGUgaW5jbHVkZXMgb25seSB0b3dzIHdoZXJlIG9uZSBvciBtb3JlIGxhcnZhZSB3ZXJlIGNhcHR1cmVkIGZvciB0aGUgc3BlY2llcyBzZWxlY3RlZCBieSB0aGUgdXNlci5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2UgKENydWlzZSBDb2RlKVxuc2hpcCAoU2hpcCBOYW1lKVxuc2hpcF9jb2RlXG5vcmRlcl9vY2N1cGllZFxudG93X3R5cGVcbm5ldF90eXBlXG50b3dfbnVtYmVyXG5uZXRfbG9jYXRpb25cbnN0YW5kYXJkX2hhdWxfZmFjdG9yXG52b2x1bWVfc2FtcGxlZCAoY3ViaWMgbWV0ZXJzKVxucGVyY2VudF9zb3J0ZWQgKCUvMTAwKVxuc2FtcGxlX3F1YWxpdHlcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5saW5lXG5zdGF0aW9uXG50aW1lIChTdGFydCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuc2NpZW50aWZpY19uYW1lXG5jb21tb25fbmFtZVxuaXRpc190c24gKEludGVyZ3JhdGVkIFRheG9tb21pYyBJbmZvcm1hdGlvbiBTeXN0ZW0gVGF4b25vbWljIFNlcmlhbCBOdW1iZXIpXG5jYWxjb2ZpX3NwZWNpZXNfY29kZVxubGFydmFlX2NvdW50IChSYXcgY291bnQgb2YgbGFydmFlKVxubGFydmFlXzEwbTIgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBsYXJ2YWUgZm9yIG9ibGlxdWUgdG93cywgRmlzaCBsYXJ2YWUgcGVyIHRlbiBtZXRlcnMgc3F1YXJlZCBvZiB3YXRlciBzYW1wbGVkKVxubGFydmFlXzEwMDBtMyAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGxhcnZhZSBmb3IgbWFudGEgdG93cywgRmlzaCBsYXJ2YWUgcGVyIDEsMDAwIGN1YmljIG1ldGVycyBvZiB3YXRlciBzYW1wbGVkKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZENhbENPRklscnZjbnRDSXRvQ09fZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2VyZENhbENPRklscnZjbnRDSXRvQ09faXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkQ2FsQ09GSWxydmNudENJdG9DTy9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvQ2FsQ09GSS9jYWxjb2ZpX2luZm8uaHRtbCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lcmRDYWxDT0ZJbHJ2Y250Q0l0b0NPLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmRDYWxDT0ZJbHJ2Y250Q0l0b0NPJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgU1dGU0MiLCAiZXJkQ2FsQ09GSWxydmNudENJdG9DTyJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250Q1B0b0RFLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250Q1B0b0RFIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRDUHRvREUuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiQ2FsQ09GSSBMYXJ2YWUgQ291bnRzLCBTY2llbnRpZmljIE5hbWVzIENQIHRvIERFIiwgIkZpc2ggbGFydmFlIGNvdW50cyBhbmQgc3RhbmRhcmRpemVkIGNvdW50cyBmb3IgbGFydmFlIGNhcHR1cmVkIGluIENhbENPRkkgaWN0aHlvcGxhbmt0b24gbmV0cyAocHJpbWFyaWx5IHZlcnRpY2FsIFtDYWx2ZXQgb3IgUGFpcm92ZXRdLCBvYmxpcXVlIFtib25nbyBvciByaW5nIG5ldHNdLCBhbmQgc3VyZmFjZSB0b3dzIFtNYW50YSBuZXRzXSkuIFN1cmZhY2UgdG93cyBhcmUgbm9ybWFsbHkgc3RhbmRhcmRpemVkIHRvIGNvdW50IHBlciAxLDAwMCBtMyBzdHJhaW5lZC4gT2JsaXF1ZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEwIG0yIG9mIHN1cmZhY2Ugc2FtcGxlZC4gVGhpcyB0YWJsZSBpbmNsdWRlcyBhbGwgdG93cyBieSBzcGVjaWVzLCBldmVuIGlmIHplcm8gbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzLCBpLmUuLCBuZWdhdGl2ZSB0b3dzLiBUaGUgXCJMYXJ2YWUgQ291bnRzIFBvc2l0aXZlIFRvd3NcIiB0YWJsZSBpbmNsdWRlcyBvbmx5IHRvd3Mgd2hlcmUgb25lIG9yIG1vcmUgbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzIHNlbGVjdGVkIGJ5IHRoZSB1c2VyLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZSAoQ3J1aXNlIENvZGUpXG5zaGlwIChTaGlwIE5hbWUpXG5zaGlwX2NvZGVcbm9yZGVyX29jY3VwaWVkXG50b3dfdHlwZVxubmV0X3R5cGVcbnRvd19udW1iZXJcbm5ldF9sb2NhdGlvblxuc3RhbmRhcmRfaGF1bF9mYWN0b3JcbnZvbHVtZV9zYW1wbGVkIChjdWJpYyBtZXRlcnMpXG5wZXJjZW50X3NvcnRlZCAoJS8xMDApXG5zYW1wbGVfcXVhbGl0eVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxpbmVcbnN0YXRpb25cbnRpbWUgKFN0YXJ0IFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zY2llbnRpZmljX25hbWVcbmNvbW1vbl9uYW1lXG5pdGlzX3RzbiAoSW50ZXJncmF0ZWQgVGF4b21vbWljIEluZm9ybWF0aW9uIFN5c3RlbSBUYXhvbm9taWMgU2VyaWFsIE51bWJlcilcbmNhbGNvZmlfc3BlY2llc19jb2RlXG5sYXJ2YWVfY291bnQgKFJhdyBjb3VudCBvZiBsYXJ2YWUpXG5sYXJ2YWVfMTBtMiAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGxhcnZhZSBmb3Igb2JsaXF1ZSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgdGVuIG1ldGVycyBzcXVhcmVkIG9mIHdhdGVyIHNhbXBsZWQpXG5sYXJ2YWVfMTAwMG0zIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBtYW50YSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgMSwwMDAgY3ViaWMgbWV0ZXJzIG9mIHdhdGVyIHNhbXBsZWQpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkQ2FsQ09GSWxydmNudENQdG9ERV9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkQ2FsQ09GSWxydmNudENQdG9ERV9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRDYWxDT0ZJbHJ2Y250Q1B0b0RFL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9DYWxDT0ZJL2NhbGNvZmlfaW5mby5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENhbENPRklscnZjbnRDUHRvREUucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZENhbENPRklscnZjbnRDUHRvREUmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBTV0ZTQyIsICJlcmRDYWxDT0ZJbHJ2Y250Q1B0b0RFIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRESHRvRUMuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRESHRvRUMiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudERIdG9FQy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDYWxDT0ZJIExhcnZhZSBDb3VudHMsIFNjaWVudGlmaWMgTmFtZXMgREggdG8gRUMiLCAiRmlzaCBsYXJ2YWUgY291bnRzIGFuZCBzdGFuZGFyZGl6ZWQgY291bnRzIGZvciBsYXJ2YWUgY2FwdHVyZWQgaW4gQ2FsQ09GSSBpY3RoeW9wbGFua3RvbiBuZXRzIChwcmltYXJpbHkgdmVydGljYWwgW0NhbHZldCBvciBQYWlyb3ZldF0sIG9ibGlxdWUgW2JvbmdvIG9yIHJpbmcgbmV0c10sIGFuZCBzdXJmYWNlIHRvd3MgW01hbnRhIG5ldHNdKS4gU3VyZmFjZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEsMDAwIG0zIHN0cmFpbmVkLiBPYmxpcXVlIHRvd3MgYXJlIG5vcm1hbGx5IHN0YW5kYXJkaXplZCB0byBjb3VudCBwZXIgMTAgbTIgb2Ygc3VyZmFjZSBzYW1wbGVkLiBUaGlzIHRhYmxlIGluY2x1ZGVzIGFsbCB0b3dzIGJ5IHNwZWNpZXMsIGV2ZW4gaWYgemVybyBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMsIGkuZS4sIG5lZ2F0aXZlIHRvd3MuIFRoZSBcIkxhcnZhZSBDb3VudHMgUG9zaXRpdmUgVG93c1wiIHRhYmxlIGluY2x1ZGVzIG9ubHkgdG93cyB3aGVyZSBvbmUgb3IgbW9yZSBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMgc2VsZWN0ZWQgYnkgdGhlIHVzZXIuXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlIChDcnVpc2UgQ29kZSlcbnNoaXAgKFNoaXAgTmFtZSlcbnNoaXBfY29kZVxub3JkZXJfb2NjdXBpZWRcbnRvd190eXBlXG5uZXRfdHlwZVxudG93X251bWJlclxubmV0X2xvY2F0aW9uXG5zdGFuZGFyZF9oYXVsX2ZhY3Rvclxudm9sdW1lX3NhbXBsZWQgKGN1YmljIG1ldGVycylcbnBlcmNlbnRfc29ydGVkICglLzEwMClcbnNhbXBsZV9xdWFsaXR5XG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGluZVxuc3RhdGlvblxudGltZSAoU3RhcnQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNjaWVudGlmaWNfbmFtZVxuY29tbW9uX25hbWVcbml0aXNfdHNuIChJbnRlcmdyYXRlZCBUYXhvbW9taWMgSW5mb3JtYXRpb24gU3lzdGVtIFRheG9ub21pYyBTZXJpYWwgTnVtYmVyKVxuY2FsY29maV9zcGVjaWVzX2NvZGVcbmxhcnZhZV9jb3VudCAoUmF3IGNvdW50IG9mIGxhcnZhZSlcbmxhcnZhZV8xMG0yIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBvYmxpcXVlIHRvd3MsIEZpc2ggbGFydmFlIHBlciB0ZW4gbWV0ZXJzIHNxdWFyZWQgb2Ygd2F0ZXIgc2FtcGxlZClcbmxhcnZhZV8xMDAwbTMgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBsYXJ2YWUgZm9yIG1hbnRhIHRvd3MsIEZpc2ggbGFydmFlIHBlciAxLDAwMCBjdWJpYyBtZXRlcnMgb2Ygd2F0ZXIgc2FtcGxlZClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRDYWxDT0ZJbHJ2Y250REh0b0VDX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRDYWxDT0ZJbHJ2Y250REh0b0VDX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZENhbENPRklscnZjbnRESHRvRUMvaW5kZXguanNvbiIsICJodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L0NhbENPRkkvY2FsY29maV9pbmZvLmh0bWwiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkQ2FsQ09GSWxydmNudERIdG9FQy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkQ2FsQ09GSWxydmNudERIdG9FQyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFNXRlNDIiwgImVyZENhbENPRklscnZjbnRESHRvRUMiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudEVEdG9FVS5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudEVEdG9FVSIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250RUR0b0VVLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkNhbENPRkkgTGFydmFlIENvdW50cywgU2NpZW50aWZpYyBOYW1lcyBFRCB0byBFVSIsICJGaXNoIGxhcnZhZSBjb3VudHMgYW5kIHN0YW5kYXJkaXplZCBjb3VudHMgZm9yIGxhcnZhZSBjYXB0dXJlZCBpbiBDYWxDT0ZJIGljdGh5b3BsYW5rdG9uIG5ldHMgKHByaW1hcmlseSB2ZXJ0aWNhbCBbQ2FsdmV0IG9yIFBhaXJvdmV0XSwgb2JsaXF1ZSBbYm9uZ28gb3IgcmluZyBuZXRzXSwgYW5kIHN1cmZhY2UgdG93cyBbTWFudGEgbmV0c10pLiBTdXJmYWNlIHRvd3MgYXJlIG5vcm1hbGx5IHN0YW5kYXJkaXplZCB0byBjb3VudCBwZXIgMSwwMDAgbTMgc3RyYWluZWQuIE9ibGlxdWUgdG93cyBhcmUgbm9ybWFsbHkgc3RhbmRhcmRpemVkIHRvIGNvdW50IHBlciAxMCBtMiBvZiBzdXJmYWNlIHNhbXBsZWQuIFRoaXMgdGFibGUgaW5jbHVkZXMgYWxsIHRvd3MgYnkgc3BlY2llcywgZXZlbiBpZiB6ZXJvIGxhcnZhZSB3ZXJlIGNhcHR1cmVkIGZvciB0aGUgc3BlY2llcywgaS5lLiwgbmVnYXRpdmUgdG93cy4gVGhlIFwiTGFydmFlIENvdW50cyBQb3NpdGl2ZSBUb3dzXCIgdGFibGUgaW5jbHVkZXMgb25seSB0b3dzIHdoZXJlIG9uZSBvciBtb3JlIGxhcnZhZSB3ZXJlIGNhcHR1cmVkIGZvciB0aGUgc3BlY2llcyBzZWxlY3RlZCBieSB0aGUgdXNlci5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2UgKENydWlzZSBDb2RlKVxuc2hpcCAoU2hpcCBOYW1lKVxuc2hpcF9jb2RlXG5vcmRlcl9vY2N1cGllZFxudG93X3R5cGVcbm5ldF90eXBlXG50b3dfbnVtYmVyXG5uZXRfbG9jYXRpb25cbnN0YW5kYXJkX2hhdWxfZmFjdG9yXG52b2x1bWVfc2FtcGxlZCAoY3ViaWMgbWV0ZXJzKVxucGVyY2VudF9zb3J0ZWQgKCUvMTAwKVxuc2FtcGxlX3F1YWxpdHlcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5saW5lXG5zdGF0aW9uXG50aW1lIChTdGFydCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuc2NpZW50aWZpY19uYW1lXG5jb21tb25fbmFtZVxuaXRpc190c24gKEludGVyZ3JhdGVkIFRheG9tb21pYyBJbmZvcm1hdGlvbiBTeXN0ZW0gVGF4b25vbWljIFNlcmlhbCBOdW1iZXIpXG5jYWxjb2ZpX3NwZWNpZXNfY29kZVxubGFydmFlX2NvdW50IChSYXcgY291bnQgb2YgbGFydmFlKVxubGFydmFlXzEwbTIgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBsYXJ2YWUgZm9yIG9ibGlxdWUgdG93cywgRmlzaCBsYXJ2YWUgcGVyIHRlbiBtZXRlcnMgc3F1YXJlZCBvZiB3YXRlciBzYW1wbGVkKVxubGFydmFlXzEwMDBtMyAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGxhcnZhZSBmb3IgbWFudGEgdG93cywgRmlzaCBsYXJ2YWUgcGVyIDEsMDAwIGN1YmljIG1ldGVycyBvZiB3YXRlciBzYW1wbGVkKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZENhbENPRklscnZjbnRFRHRvRVVfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2VyZENhbENPRklscnZjbnRFRHRvRVVfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkQ2FsQ09GSWxydmNudEVEdG9FVS9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvQ2FsQ09GSS9jYWxjb2ZpX2luZm8uaHRtbCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lcmRDYWxDT0ZJbHJ2Y250RUR0b0VVLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmRDYWxDT0ZJbHJ2Y250RUR0b0VVJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgU1dGU0MiLCAiZXJkQ2FsQ09GSWxydmNudEVEdG9FVSJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250RVZ0b0dOLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250RVZ0b0dOIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRFVnRvR04uZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiQ2FsQ09GSSBMYXJ2YWUgQ291bnRzLCBTY2llbnRpZmljIE5hbWVzIEVWIHRvIEdOIiwgIkZpc2ggbGFydmFlIGNvdW50cyBhbmQgc3RhbmRhcmRpemVkIGNvdW50cyBmb3IgbGFydmFlIGNhcHR1cmVkIGluIENhbENPRkkgaWN0aHlvcGxhbmt0b24gbmV0cyAocHJpbWFyaWx5IHZlcnRpY2FsIFtDYWx2ZXQgb3IgUGFpcm92ZXRdLCBvYmxpcXVlIFtib25nbyBvciByaW5nIG5ldHNdLCBhbmQgc3VyZmFjZSB0b3dzIFtNYW50YSBuZXRzXSkuIFN1cmZhY2UgdG93cyBhcmUgbm9ybWFsbHkgc3RhbmRhcmRpemVkIHRvIGNvdW50IHBlciAxLDAwMCBtMyBzdHJhaW5lZC4gT2JsaXF1ZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEwIG0yIG9mIHN1cmZhY2Ugc2FtcGxlZC4gVGhpcyB0YWJsZSBpbmNsdWRlcyBhbGwgdG93cyBieSBzcGVjaWVzLCBldmVuIGlmIHplcm8gbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzLCBpLmUuLCBuZWdhdGl2ZSB0b3dzLiBUaGUgXCJMYXJ2YWUgQ291bnRzIFBvc2l0aXZlIFRvd3NcIiB0YWJsZSBpbmNsdWRlcyBvbmx5IHRvd3Mgd2hlcmUgb25lIG9yIG1vcmUgbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzIHNlbGVjdGVkIGJ5IHRoZSB1c2VyLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZSAoQ3J1aXNlIENvZGUpXG5zaGlwIChTaGlwIE5hbWUpXG5zaGlwX2NvZGVcbm9yZGVyX29jY3VwaWVkXG50b3dfdHlwZVxubmV0X3R5cGVcbnRvd19udW1iZXJcbm5ldF9sb2NhdGlvblxuc3RhbmRhcmRfaGF1bF9mYWN0b3JcbnZvbHVtZV9zYW1wbGVkIChjdWJpYyBtZXRlcnMpXG5wZXJjZW50X3NvcnRlZCAoJS8xMDApXG5zYW1wbGVfcXVhbGl0eVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxpbmVcbnN0YXRpb25cbnRpbWUgKFN0YXJ0IFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zY2llbnRpZmljX25hbWVcbmNvbW1vbl9uYW1lXG5pdGlzX3RzbiAoSW50ZXJncmF0ZWQgVGF4b21vbWljIEluZm9ybWF0aW9uIFN5c3RlbSBUYXhvbm9taWMgU2VyaWFsIE51bWJlcilcbmNhbGNvZmlfc3BlY2llc19jb2RlXG5sYXJ2YWVfY291bnQgKFJhdyBjb3VudCBvZiBsYXJ2YWUpXG5sYXJ2YWVfMTBtMiAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGxhcnZhZSBmb3Igb2JsaXF1ZSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgdGVuIG1ldGVycyBzcXVhcmVkIG9mIHdhdGVyIHNhbXBsZWQpXG5sYXJ2YWVfMTAwMG0zIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBtYW50YSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgMSwwMDAgY3ViaWMgbWV0ZXJzIG9mIHdhdGVyIHNhbXBsZWQpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkQ2FsQ09GSWxydmNudEVWdG9HTl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkQ2FsQ09GSWxydmNudEVWdG9HTl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRDYWxDT0ZJbHJ2Y250RVZ0b0dOL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9DYWxDT0ZJL2NhbGNvZmlfaW5mby5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENhbENPRklscnZjbnRFVnRvR04ucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZENhbENPRklscnZjbnRFVnRvR04mc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBTV0ZTQyIsICJlcmRDYWxDT0ZJbHJ2Y250RVZ0b0dOIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRHT3RvSEEuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRHT3RvSEEiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudEdPdG9IQS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDYWxDT0ZJIExhcnZhZSBDb3VudHMsIFNjaWVudGlmaWMgTmFtZXMgR08gdG8gSEEiLCAiRmlzaCBsYXJ2YWUgY291bnRzIGFuZCBzdGFuZGFyZGl6ZWQgY291bnRzIGZvciBsYXJ2YWUgY2FwdHVyZWQgaW4gQ2FsQ09GSSBpY3RoeW9wbGFua3RvbiBuZXRzIChwcmltYXJpbHkgdmVydGljYWwgW0NhbHZldCBvciBQYWlyb3ZldF0sIG9ibGlxdWUgW2JvbmdvIG9yIHJpbmcgbmV0c10sIGFuZCBzdXJmYWNlIHRvd3MgW01hbnRhIG5ldHNdKS4gU3VyZmFjZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEsMDAwIG0zIHN0cmFpbmVkLiBPYmxpcXVlIHRvd3MgYXJlIG5vcm1hbGx5IHN0YW5kYXJkaXplZCB0byBjb3VudCBwZXIgMTAgbTIgb2Ygc3VyZmFjZSBzYW1wbGVkLiBUaGlzIHRhYmxlIGluY2x1ZGVzIGFsbCB0b3dzIGJ5IHNwZWNpZXMsIGV2ZW4gaWYgemVybyBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMsIGkuZS4sIG5lZ2F0aXZlIHRvd3MuIFRoZSBcIkxhcnZhZSBDb3VudHMgUG9zaXRpdmUgVG93c1wiIHRhYmxlIGluY2x1ZGVzIG9ubHkgdG93cyB3aGVyZSBvbmUgb3IgbW9yZSBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMgc2VsZWN0ZWQgYnkgdGhlIHVzZXIuXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlIChDcnVpc2UgQ29kZSlcbnNoaXAgKFNoaXAgTmFtZSlcbnNoaXBfY29kZVxub3JkZXJfb2NjdXBpZWRcbnRvd190eXBlXG5uZXRfdHlwZVxudG93X251bWJlclxubmV0X2xvY2F0aW9uXG5zdGFuZGFyZF9oYXVsX2ZhY3Rvclxudm9sdW1lX3NhbXBsZWQgKGN1YmljIG1ldGVycylcbnBlcmNlbnRfc29ydGVkICglLzEwMClcbnNhbXBsZV9xdWFsaXR5XG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGluZVxuc3RhdGlvblxudGltZSAoU3RhcnQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNjaWVudGlmaWNfbmFtZVxuY29tbW9uX25hbWVcbml0aXNfdHNuIChJbnRlcmdyYXRlZCBUYXhvbW9taWMgSW5mb3JtYXRpb24gU3lzdGVtIFRheG9ub21pYyBTZXJpYWwgTnVtYmVyKVxuY2FsY29maV9zcGVjaWVzX2NvZGVcbmxhcnZhZV9jb3VudCAoUmF3IGNvdW50IG9mIGxhcnZhZSlcbmxhcnZhZV8xMG0yIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBvYmxpcXVlIHRvd3MsIEZpc2ggbGFydmFlIHBlciB0ZW4gbWV0ZXJzIHNxdWFyZWQgb2Ygd2F0ZXIgc2FtcGxlZClcbmxhcnZhZV8xMDAwbTMgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBsYXJ2YWUgZm9yIG1hbnRhIHRvd3MsIEZpc2ggbGFydmFlIHBlciAxLDAwMCBjdWJpYyBtZXRlcnMgb2Ygd2F0ZXIgc2FtcGxlZClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRDYWxDT0ZJbHJ2Y250R090b0hBX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRDYWxDT0ZJbHJ2Y250R090b0hBX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZENhbENPRklscnZjbnRHT3RvSEEvaW5kZXguanNvbiIsICJodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L0NhbENPRkkvY2FsY29maV9pbmZvLmh0bWwiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkQ2FsQ09GSWxydmNudEdPdG9IQS5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkQ2FsQ09GSWxydmNudEdPdG9IQSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFNXRlNDIiwgImVyZENhbENPRklscnZjbnRHT3RvSEEiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudEhCdG9ISS5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudEhCdG9ISSIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250SEJ0b0hJLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkNhbENPRkkgTGFydmFlIENvdW50cywgU2NpZW50aWZpYyBOYW1lcyBIQiB0byBISSIsICJGaXNoIGxhcnZhZSBjb3VudHMgYW5kIHN0YW5kYXJkaXplZCBjb3VudHMgZm9yIGxhcnZhZSBjYXB0dXJlZCBpbiBDYWxDT0ZJIGljdGh5b3BsYW5rdG9uIG5ldHMgKHByaW1hcmlseSB2ZXJ0aWNhbCBbQ2FsdmV0IG9yIFBhaXJvdmV0XSwgb2JsaXF1ZSBbYm9uZ28gb3IgcmluZyBuZXRzXSwgYW5kIHN1cmZhY2UgdG93cyBbTWFudGEgbmV0c10pLiBTdXJmYWNlIHRvd3MgYXJlIG5vcm1hbGx5IHN0YW5kYXJkaXplZCB0byBjb3VudCBwZXIgMSwwMDAgbTMgc3RyYWluZWQuIE9ibGlxdWUgdG93cyBhcmUgbm9ybWFsbHkgc3RhbmRhcmRpemVkIHRvIGNvdW50IHBlciAxMCBtMiBvZiBzdXJmYWNlIHNhbXBsZWQuIFRoaXMgdGFibGUgaW5jbHVkZXMgYWxsIHRvd3MgYnkgc3BlY2llcywgZXZlbiBpZiB6ZXJvIGxhcnZhZSB3ZXJlIGNhcHR1cmVkIGZvciB0aGUgc3BlY2llcywgaS5lLiwgbmVnYXRpdmUgdG93cy4gVGhlIFwiTGFydmFlIENvdW50cyBQb3NpdGl2ZSBUb3dzXCIgdGFibGUgaW5jbHVkZXMgb25seSB0b3dzIHdoZXJlIG9uZSBvciBtb3JlIGxhcnZhZSB3ZXJlIGNhcHR1cmVkIGZvciB0aGUgc3BlY2llcyBzZWxlY3RlZCBieSB0aGUgdXNlci5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2UgKENydWlzZSBDb2RlKVxuc2hpcCAoU2hpcCBOYW1lKVxuc2hpcF9jb2RlXG5vcmRlcl9vY2N1cGllZFxudG93X3R5cGVcbm5ldF90eXBlXG50b3dfbnVtYmVyXG5uZXRfbG9jYXRpb25cbnN0YW5kYXJkX2hhdWxfZmFjdG9yXG52b2x1bWVfc2FtcGxlZCAoY3ViaWMgbWV0ZXJzKVxucGVyY2VudF9zb3J0ZWQgKCUvMTAwKVxuc2FtcGxlX3F1YWxpdHlcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5saW5lXG5zdGF0aW9uXG50aW1lIChTdGFydCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuc2NpZW50aWZpY19uYW1lXG5jb21tb25fbmFtZVxuaXRpc190c24gKEludGVyZ3JhdGVkIFRheG9tb21pYyBJbmZvcm1hdGlvbiBTeXN0ZW0gVGF4b25vbWljIFNlcmlhbCBOdW1iZXIpXG5jYWxjb2ZpX3NwZWNpZXNfY29kZVxubGFydmFlX2NvdW50IChSYXcgY291bnQgb2YgbGFydmFlKVxubGFydmFlXzEwbTIgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBsYXJ2YWUgZm9yIG9ibGlxdWUgdG93cywgRmlzaCBsYXJ2YWUgcGVyIHRlbiBtZXRlcnMgc3F1YXJlZCBvZiB3YXRlciBzYW1wbGVkKVxubGFydmFlXzEwMDBtMyAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGxhcnZhZSBmb3IgbWFudGEgdG93cywgRmlzaCBsYXJ2YWUgcGVyIDEsMDAwIGN1YmljIG1ldGVycyBvZiB3YXRlciBzYW1wbGVkKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZENhbENPRklscnZjbnRIQnRvSElfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2VyZENhbENPRklscnZjbnRIQnRvSElfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkQ2FsQ09GSWxydmNudEhCdG9ISS9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvQ2FsQ09GSS9jYWxjb2ZpX2luZm8uaHRtbCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lcmRDYWxDT0ZJbHJ2Y250SEJ0b0hJLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmRDYWxDT0ZJbHJ2Y250SEJ0b0hJJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgU1dGU0MiLCAiZXJkQ2FsQ09GSWxydmNudEhCdG9ISSJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250SEp0b0lELnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250SEp0b0lEIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRISnRvSUQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiQ2FsQ09GSSBMYXJ2YWUgQ291bnRzLCBTY2llbnRpZmljIE5hbWVzIEhKIHRvIElEIiwgIkZpc2ggbGFydmFlIGNvdW50cyBhbmQgc3RhbmRhcmRpemVkIGNvdW50cyBmb3IgbGFydmFlIGNhcHR1cmVkIGluIENhbENPRkkgaWN0aHlvcGxhbmt0b24gbmV0cyAocHJpbWFyaWx5IHZlcnRpY2FsIFtDYWx2ZXQgb3IgUGFpcm92ZXRdLCBvYmxpcXVlIFtib25nbyBvciByaW5nIG5ldHNdLCBhbmQgc3VyZmFjZSB0b3dzIFtNYW50YSBuZXRzXSkuIFN1cmZhY2UgdG93cyBhcmUgbm9ybWFsbHkgc3RhbmRhcmRpemVkIHRvIGNvdW50IHBlciAxLDAwMCBtMyBzdHJhaW5lZC4gT2JsaXF1ZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEwIG0yIG9mIHN1cmZhY2Ugc2FtcGxlZC4gVGhpcyB0YWJsZSBpbmNsdWRlcyBhbGwgdG93cyBieSBzcGVjaWVzLCBldmVuIGlmIHplcm8gbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzLCBpLmUuLCBuZWdhdGl2ZSB0b3dzLiBUaGUgXCJMYXJ2YWUgQ291bnRzIFBvc2l0aXZlIFRvd3NcIiB0YWJsZSBpbmNsdWRlcyBvbmx5IHRvd3Mgd2hlcmUgb25lIG9yIG1vcmUgbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzIHNlbGVjdGVkIGJ5IHRoZSB1c2VyLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZSAoQ3J1aXNlIENvZGUpXG5zaGlwIChTaGlwIE5hbWUpXG5zaGlwX2NvZGVcbm9yZGVyX29jY3VwaWVkXG50b3dfdHlwZVxubmV0X3R5cGVcbnRvd19udW1iZXJcbm5ldF9sb2NhdGlvblxuc3RhbmRhcmRfaGF1bF9mYWN0b3JcbnZvbHVtZV9zYW1wbGVkIChjdWJpYyBtZXRlcnMpXG5wZXJjZW50X3NvcnRlZCAoJS8xMDApXG5zYW1wbGVfcXVhbGl0eVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxpbmVcbnN0YXRpb25cbnRpbWUgKFN0YXJ0IFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zY2llbnRpZmljX25hbWVcbmNvbW1vbl9uYW1lXG5pdGlzX3RzbiAoSW50ZXJncmF0ZWQgVGF4b21vbWljIEluZm9ybWF0aW9uIFN5c3RlbSBUYXhvbm9taWMgU2VyaWFsIE51bWJlcilcbmNhbGNvZmlfc3BlY2llc19jb2RlXG5sYXJ2YWVfY291bnQgKFJhdyBjb3VudCBvZiBsYXJ2YWUpXG5sYXJ2YWVfMTBtMiAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGxhcnZhZSBmb3Igb2JsaXF1ZSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgdGVuIG1ldGVycyBzcXVhcmVkIG9mIHdhdGVyIHNhbXBsZWQpXG5sYXJ2YWVfMTAwMG0zIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBtYW50YSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgMSwwMDAgY3ViaWMgbWV0ZXJzIG9mIHdhdGVyIHNhbXBsZWQpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkQ2FsQ09GSWxydmNudEhKdG9JRF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkQ2FsQ09GSWxydmNudEhKdG9JRF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRDYWxDT0ZJbHJ2Y250SEp0b0lEL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9DYWxDT0ZJL2NhbGNvZmlfaW5mby5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENhbENPRklscnZjbnRISnRvSUQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZENhbENPRklscnZjbnRISnRvSUQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBTV0ZTQyIsICJlcmRDYWxDT0ZJbHJ2Y250SEp0b0lEIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRJRXRvTEEuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRJRXRvTEEiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudElFdG9MQS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDYWxDT0ZJIExhcnZhZSBDb3VudHMsIFNjaWVudGlmaWMgTmFtZXMgSUUgdG8gTEEiLCAiRmlzaCBsYXJ2YWUgY291bnRzIGFuZCBzdGFuZGFyZGl6ZWQgY291bnRzIGZvciBsYXJ2YWUgY2FwdHVyZWQgaW4gQ2FsQ09GSSBpY3RoeW9wbGFua3RvbiBuZXRzIChwcmltYXJpbHkgdmVydGljYWwgW0NhbHZldCBvciBQYWlyb3ZldF0sIG9ibGlxdWUgW2JvbmdvIG9yIHJpbmcgbmV0c10sIGFuZCBzdXJmYWNlIHRvd3MgW01hbnRhIG5ldHNdKS4gU3VyZmFjZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEsMDAwIG0zIHN0cmFpbmVkLiBPYmxpcXVlIHRvd3MgYXJlIG5vcm1hbGx5IHN0YW5kYXJkaXplZCB0byBjb3VudCBwZXIgMTAgbTIgb2Ygc3VyZmFjZSBzYW1wbGVkLiBUaGlzIHRhYmxlIGluY2x1ZGVzIGFsbCB0b3dzIGJ5IHNwZWNpZXMsIGV2ZW4gaWYgemVybyBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMsIGkuZS4sIG5lZ2F0aXZlIHRvd3MuIFRoZSBcIkxhcnZhZSBDb3VudHMgUG9zaXRpdmUgVG93c1wiIHRhYmxlIGluY2x1ZGVzIG9ubHkgdG93cyB3aGVyZSBvbmUgb3IgbW9yZSBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMgc2VsZWN0ZWQgYnkgdGhlIHVzZXIuXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlIChDcnVpc2UgQ29kZSlcbnNoaXAgKFNoaXAgTmFtZSlcbnNoaXBfY29kZVxub3JkZXJfb2NjdXBpZWRcbnRvd190eXBlXG5uZXRfdHlwZVxudG93X251bWJlclxubmV0X2xvY2F0aW9uXG5zdGFuZGFyZF9oYXVsX2ZhY3Rvclxudm9sdW1lX3NhbXBsZWQgKGN1YmljIG1ldGVycylcbnBlcmNlbnRfc29ydGVkICglLzEwMClcbnNhbXBsZV9xdWFsaXR5XG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGluZVxuc3RhdGlvblxudGltZSAoU3RhcnQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNjaWVudGlmaWNfbmFtZVxuY29tbW9uX25hbWVcbml0aXNfdHNuIChJbnRlcmdyYXRlZCBUYXhvbW9taWMgSW5mb3JtYXRpb24gU3lzdGVtIFRheG9ub21pYyBTZXJpYWwgTnVtYmVyKVxuY2FsY29maV9zcGVjaWVzX2NvZGVcbmxhcnZhZV9jb3VudCAoUmF3IGNvdW50IG9mIGxhcnZhZSlcbmxhcnZhZV8xMG0yIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBvYmxpcXVlIHRvd3MsIEZpc2ggbGFydmFlIHBlciB0ZW4gbWV0ZXJzIHNxdWFyZWQgb2Ygd2F0ZXIgc2FtcGxlZClcbmxhcnZhZV8xMDAwbTMgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBsYXJ2YWUgZm9yIG1hbnRhIHRvd3MsIEZpc2ggbGFydmFlIHBlciAxLDAwMCBjdWJpYyBtZXRlcnMgb2Ygd2F0ZXIgc2FtcGxlZClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRDYWxDT0ZJbHJ2Y250SUV0b0xBX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRDYWxDT0ZJbHJ2Y250SUV0b0xBX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZENhbENPRklscnZjbnRJRXRvTEEvaW5kZXguanNvbiIsICJodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L0NhbENPRkkvY2FsY29maV9pbmZvLmh0bWwiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkQ2FsQ09GSWxydmNudElFdG9MQS5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkQ2FsQ09GSWxydmNudElFdG9MQSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFNXRlNDIiwgImVyZENhbENPRklscnZjbnRJRXRvTEEiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudExCdG9MSS5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudExCdG9MSSIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250TEJ0b0xJLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkNhbENPRkkgTGFydmFlIENvdW50cywgU2NpZW50aWZpYyBOYW1lcyBMQiB0byBMSSIsICJGaXNoIGxhcnZhZSBjb3VudHMgYW5kIHN0YW5kYXJkaXplZCBjb3VudHMgZm9yIGxhcnZhZSBjYXB0dXJlZCBpbiBDYWxDT0ZJIGljdGh5b3BsYW5rdG9uIG5ldHMgKHByaW1hcmlseSB2ZXJ0aWNhbCBbQ2FsdmV0IG9yIFBhaXJvdmV0XSwgb2JsaXF1ZSBbYm9uZ28gb3IgcmluZyBuZXRzXSwgYW5kIHN1cmZhY2UgdG93cyBbTWFudGEgbmV0c10pLiBTdXJmYWNlIHRvd3MgYXJlIG5vcm1hbGx5IHN0YW5kYXJkaXplZCB0byBjb3VudCBwZXIgMSwwMDAgbTMgc3RyYWluZWQuIE9ibGlxdWUgdG93cyBhcmUgbm9ybWFsbHkgc3RhbmRhcmRpemVkIHRvIGNvdW50IHBlciAxMCBtMiBvZiBzdXJmYWNlIHNhbXBsZWQuIFRoaXMgdGFibGUgaW5jbHVkZXMgYWxsIHRvd3MgYnkgc3BlY2llcywgZXZlbiBpZiB6ZXJvIGxhcnZhZSB3ZXJlIGNhcHR1cmVkIGZvciB0aGUgc3BlY2llcywgaS5lLiwgbmVnYXRpdmUgdG93cy4gVGhlIFwiTGFydmFlIENvdW50cyBQb3NpdGl2ZSBUb3dzXCIgdGFibGUgaW5jbHVkZXMgb25seSB0b3dzIHdoZXJlIG9uZSBvciBtb3JlIGxhcnZhZSB3ZXJlIGNhcHR1cmVkIGZvciB0aGUgc3BlY2llcyBzZWxlY3RlZCBieSB0aGUgdXNlci5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2UgKENydWlzZSBDb2RlKVxuc2hpcCAoU2hpcCBOYW1lKVxuc2hpcF9jb2RlXG5vcmRlcl9vY2N1cGllZFxudG93X3R5cGVcbm5ldF90eXBlXG50b3dfbnVtYmVyXG5uZXRfbG9jYXRpb25cbnN0YW5kYXJkX2hhdWxfZmFjdG9yXG52b2x1bWVfc2FtcGxlZCAoY3ViaWMgbWV0ZXJzKVxucGVyY2VudF9zb3J0ZWQgKCUvMTAwKVxuc2FtcGxlX3F1YWxpdHlcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5saW5lXG5zdGF0aW9uXG50aW1lIChTdGFydCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuc2NpZW50aWZpY19uYW1lXG5jb21tb25fbmFtZVxuaXRpc190c24gKEludGVyZ3JhdGVkIFRheG9tb21pYyBJbmZvcm1hdGlvbiBTeXN0ZW0gVGF4b25vbWljIFNlcmlhbCBOdW1iZXIpXG5jYWxjb2ZpX3NwZWNpZXNfY29kZVxubGFydmFlX2NvdW50IChSYXcgY291bnQgb2YgbGFydmFlKVxubGFydmFlXzEwbTIgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBsYXJ2YWUgZm9yIG9ibGlxdWUgdG93cywgRmlzaCBsYXJ2YWUgcGVyIHRlbiBtZXRlcnMgc3F1YXJlZCBvZiB3YXRlciBzYW1wbGVkKVxubGFydmFlXzEwMDBtMyAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGxhcnZhZSBmb3IgbWFudGEgdG93cywgRmlzaCBsYXJ2YWUgcGVyIDEsMDAwIGN1YmljIG1ldGVycyBvZiB3YXRlciBzYW1wbGVkKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZENhbENPRklscnZjbnRMQnRvTElfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2VyZENhbENPRklscnZjbnRMQnRvTElfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkQ2FsQ09GSWxydmNudExCdG9MSS9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvQ2FsQ09GSS9jYWxjb2ZpX2luZm8uaHRtbCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lcmRDYWxDT0ZJbHJ2Y250TEJ0b0xJLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmRDYWxDT0ZJbHJ2Y250TEJ0b0xJJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgU1dGU0MiLCAiZXJkQ2FsQ09GSWxydmNudExCdG9MSSJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250TEp0b01BLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250TEp0b01BIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRMSnRvTUEuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiQ2FsQ09GSSBMYXJ2YWUgQ291bnRzLCBTY2llbnRpZmljIE5hbWVzIExKIHRvIE1BIiwgIkZpc2ggbGFydmFlIGNvdW50cyBhbmQgc3RhbmRhcmRpemVkIGNvdW50cyBmb3IgbGFydmFlIGNhcHR1cmVkIGluIENhbENPRkkgaWN0aHlvcGxhbmt0b24gbmV0cyAocHJpbWFyaWx5IHZlcnRpY2FsIFtDYWx2ZXQgb3IgUGFpcm92ZXRdLCBvYmxpcXVlIFtib25nbyBvciByaW5nIG5ldHNdLCBhbmQgc3VyZmFjZSB0b3dzIFtNYW50YSBuZXRzXSkuIFN1cmZhY2UgdG93cyBhcmUgbm9ybWFsbHkgc3RhbmRhcmRpemVkIHRvIGNvdW50IHBlciAxLDAwMCBtMyBzdHJhaW5lZC4gT2JsaXF1ZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEwIG0yIG9mIHN1cmZhY2Ugc2FtcGxlZC4gVGhpcyB0YWJsZSBpbmNsdWRlcyBhbGwgdG93cyBieSBzcGVjaWVzLCBldmVuIGlmIHplcm8gbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzLCBpLmUuLCBuZWdhdGl2ZSB0b3dzLiBUaGUgXCJMYXJ2YWUgQ291bnRzIFBvc2l0aXZlIFRvd3NcIiB0YWJsZSBpbmNsdWRlcyBvbmx5IHRvd3Mgd2hlcmUgb25lIG9yIG1vcmUgbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzIHNlbGVjdGVkIGJ5IHRoZSB1c2VyLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZSAoQ3J1aXNlIENvZGUpXG5zaGlwIChTaGlwIE5hbWUpXG5zaGlwX2NvZGVcbm9yZGVyX29jY3VwaWVkXG50b3dfdHlwZVxubmV0X3R5cGVcbnRvd19udW1iZXJcbm5ldF9sb2NhdGlvblxuc3RhbmRhcmRfaGF1bF9mYWN0b3JcbnZvbHVtZV9zYW1wbGVkIChjdWJpYyBtZXRlcnMpXG5wZXJjZW50X3NvcnRlZCAoJS8xMDApXG5zYW1wbGVfcXVhbGl0eVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxpbmVcbnN0YXRpb25cbnRpbWUgKFN0YXJ0IFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zY2llbnRpZmljX25hbWVcbmNvbW1vbl9uYW1lXG5pdGlzX3RzbiAoSW50ZXJncmF0ZWQgVGF4b21vbWljIEluZm9ybWF0aW9uIFN5c3RlbSBUYXhvbm9taWMgU2VyaWFsIE51bWJlcilcbmNhbGNvZmlfc3BlY2llc19jb2RlXG5sYXJ2YWVfY291bnQgKFJhdyBjb3VudCBvZiBsYXJ2YWUpXG5sYXJ2YWVfMTBtMiAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGxhcnZhZSBmb3Igb2JsaXF1ZSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgdGVuIG1ldGVycyBzcXVhcmVkIG9mIHdhdGVyIHNhbXBsZWQpXG5sYXJ2YWVfMTAwMG0zIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBtYW50YSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgMSwwMDAgY3ViaWMgbWV0ZXJzIG9mIHdhdGVyIHNhbXBsZWQpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkQ2FsQ09GSWxydmNudExKdG9NQV9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkQ2FsQ09GSWxydmNudExKdG9NQV9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRDYWxDT0ZJbHJ2Y250TEp0b01BL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9DYWxDT0ZJL2NhbGNvZmlfaW5mby5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENhbENPRklscnZjbnRMSnRvTUEucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZENhbENPRklscnZjbnRMSnRvTUEmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBTV0ZTQyIsICJlcmRDYWxDT0ZJbHJ2Y250TEp0b01BIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRNQnRvTU8uc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRNQnRvTU8iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudE1CdG9NTy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDYWxDT0ZJIExhcnZhZSBDb3VudHMsIFNjaWVudGlmaWMgTmFtZXMgTUIgdG8gTU8iLCAiRmlzaCBsYXJ2YWUgY291bnRzIGFuZCBzdGFuZGFyZGl6ZWQgY291bnRzIGZvciBsYXJ2YWUgY2FwdHVyZWQgaW4gQ2FsQ09GSSBpY3RoeW9wbGFua3RvbiBuZXRzIChwcmltYXJpbHkgdmVydGljYWwgW0NhbHZldCBvciBQYWlyb3ZldF0sIG9ibGlxdWUgW2JvbmdvIG9yIHJpbmcgbmV0c10sIGFuZCBzdXJmYWNlIHRvd3MgW01hbnRhIG5ldHNdKS4gU3VyZmFjZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEsMDAwIG0zIHN0cmFpbmVkLiBPYmxpcXVlIHRvd3MgYXJlIG5vcm1hbGx5IHN0YW5kYXJkaXplZCB0byBjb3VudCBwZXIgMTAgbTIgb2Ygc3VyZmFjZSBzYW1wbGVkLiBUaGlzIHRhYmxlIGluY2x1ZGVzIGFsbCB0b3dzIGJ5IHNwZWNpZXMsIGV2ZW4gaWYgemVybyBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMsIGkuZS4sIG5lZ2F0aXZlIHRvd3MuIFRoZSBcIkxhcnZhZSBDb3VudHMgUG9zaXRpdmUgVG93c1wiIHRhYmxlIGluY2x1ZGVzIG9ubHkgdG93cyB3aGVyZSBvbmUgb3IgbW9yZSBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMgc2VsZWN0ZWQgYnkgdGhlIHVzZXIuXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlIChDcnVpc2UgQ29kZSlcbnNoaXAgKFNoaXAgTmFtZSlcbnNoaXBfY29kZVxub3JkZXJfb2NjdXBpZWRcbnRvd190eXBlXG5uZXRfdHlwZVxudG93X251bWJlclxubmV0X2xvY2F0aW9uXG5zdGFuZGFyZF9oYXVsX2ZhY3Rvclxudm9sdW1lX3NhbXBsZWQgKGN1YmljIG1ldGVycylcbnBlcmNlbnRfc29ydGVkICglLzEwMClcbnNhbXBsZV9xdWFsaXR5XG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGluZVxuc3RhdGlvblxudGltZSAoU3RhcnQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNjaWVudGlmaWNfbmFtZVxuY29tbW9uX25hbWVcbml0aXNfdHNuIChJbnRlcmdyYXRlZCBUYXhvbW9taWMgSW5mb3JtYXRpb24gU3lzdGVtIFRheG9ub21pYyBTZXJpYWwgTnVtYmVyKVxuY2FsY29maV9zcGVjaWVzX2NvZGVcbmxhcnZhZV9jb3VudCAoUmF3IGNvdW50IG9mIGxhcnZhZSlcbmxhcnZhZV8xMG0yIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBvYmxpcXVlIHRvd3MsIEZpc2ggbGFydmFlIHBlciB0ZW4gbWV0ZXJzIHNxdWFyZWQgb2Ygd2F0ZXIgc2FtcGxlZClcbmxhcnZhZV8xMDAwbTMgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBsYXJ2YWUgZm9yIG1hbnRhIHRvd3MsIEZpc2ggbGFydmFlIHBlciAxLDAwMCBjdWJpYyBtZXRlcnMgb2Ygd2F0ZXIgc2FtcGxlZClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRDYWxDT0ZJbHJ2Y250TUJ0b01PX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRDYWxDT0ZJbHJ2Y250TUJ0b01PX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZENhbENPRklscnZjbnRNQnRvTU8vaW5kZXguanNvbiIsICJodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L0NhbENPRkkvY2FsY29maV9pbmZvLmh0bWwiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkQ2FsQ09GSWxydmNudE1CdG9NTy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkQ2FsQ09GSWxydmNudE1CdG9NTyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFNXRlNDIiwgImVyZENhbENPRklscnZjbnRNQnRvTU8iXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudE1QdG9OQS5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudE1QdG9OQSIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250TVB0b05BLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkNhbENPRkkgTGFydmFlIENvdW50cywgU2NpZW50aWZpYyBOYW1lcyBNUCB0byBOQSIsICJGaXNoIGxhcnZhZSBjb3VudHMgYW5kIHN0YW5kYXJkaXplZCBjb3VudHMgZm9yIGxhcnZhZSBjYXB0dXJlZCBpbiBDYWxDT0ZJIGljdGh5b3BsYW5rdG9uIG5ldHMgKHByaW1hcmlseSB2ZXJ0aWNhbCBbQ2FsdmV0IG9yIFBhaXJvdmV0XSwgb2JsaXF1ZSBbYm9uZ28gb3IgcmluZyBuZXRzXSwgYW5kIHN1cmZhY2UgdG93cyBbTWFudGEgbmV0c10pLiBTdXJmYWNlIHRvd3MgYXJlIG5vcm1hbGx5IHN0YW5kYXJkaXplZCB0byBjb3VudCBwZXIgMSwwMDAgbTMgc3RyYWluZWQuIE9ibGlxdWUgdG93cyBhcmUgbm9ybWFsbHkgc3RhbmRhcmRpemVkIHRvIGNvdW50IHBlciAxMCBtMiBvZiBzdXJmYWNlIHNhbXBsZWQuIFRoaXMgdGFibGUgaW5jbHVkZXMgYWxsIHRvd3MgYnkgc3BlY2llcywgZXZlbiBpZiB6ZXJvIGxhcnZhZSB3ZXJlIGNhcHR1cmVkIGZvciB0aGUgc3BlY2llcywgaS5lLiwgbmVnYXRpdmUgdG93cy4gVGhlIFwiTGFydmFlIENvdW50cyBQb3NpdGl2ZSBUb3dzXCIgdGFibGUgaW5jbHVkZXMgb25seSB0b3dzIHdoZXJlIG9uZSBvciBtb3JlIGxhcnZhZSB3ZXJlIGNhcHR1cmVkIGZvciB0aGUgc3BlY2llcyBzZWxlY3RlZCBieSB0aGUgdXNlci5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2UgKENydWlzZSBDb2RlKVxuc2hpcCAoU2hpcCBOYW1lKVxuc2hpcF9jb2RlXG5vcmRlcl9vY2N1cGllZFxudG93X3R5cGVcbm5ldF90eXBlXG50b3dfbnVtYmVyXG5uZXRfbG9jYXRpb25cbnN0YW5kYXJkX2hhdWxfZmFjdG9yXG52b2x1bWVfc2FtcGxlZCAoY3ViaWMgbWV0ZXJzKVxucGVyY2VudF9zb3J0ZWQgKCUvMTAwKVxuc2FtcGxlX3F1YWxpdHlcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5saW5lXG5zdGF0aW9uXG50aW1lIChTdGFydCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuc2NpZW50aWZpY19uYW1lXG5jb21tb25fbmFtZVxuaXRpc190c24gKEludGVyZ3JhdGVkIFRheG9tb21pYyBJbmZvcm1hdGlvbiBTeXN0ZW0gVGF4b25vbWljIFNlcmlhbCBOdW1iZXIpXG5jYWxjb2ZpX3NwZWNpZXNfY29kZVxubGFydmFlX2NvdW50IChSYXcgY291bnQgb2YgbGFydmFlKVxubGFydmFlXzEwbTIgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBsYXJ2YWUgZm9yIG9ibGlxdWUgdG93cywgRmlzaCBsYXJ2YWUgcGVyIHRlbiBtZXRlcnMgc3F1YXJlZCBvZiB3YXRlciBzYW1wbGVkKVxubGFydmFlXzEwMDBtMyAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGxhcnZhZSBmb3IgbWFudGEgdG93cywgRmlzaCBsYXJ2YWUgcGVyIDEsMDAwIGN1YmljIG1ldGVycyBvZiB3YXRlciBzYW1wbGVkKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZENhbENPRklscnZjbnRNUHRvTkFfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2VyZENhbENPRklscnZjbnRNUHRvTkFfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkQ2FsQ09GSWxydmNudE1QdG9OQS9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvQ2FsQ09GSS9jYWxjb2ZpX2luZm8uaHRtbCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lcmRDYWxDT0ZJbHJ2Y250TVB0b05BLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmRDYWxDT0ZJbHJ2Y250TVB0b05BJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgU1dGU0MiLCAiZXJkQ2FsQ09GSWxydmNudE1QdG9OQSJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250TkJ0b09MLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250TkJ0b09MIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnROQnRvT0wuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiQ2FsQ09GSSBMYXJ2YWUgQ291bnRzLCBTY2llbnRpZmljIE5hbWVzIE5CIHRvIE9MIiwgIkZpc2ggbGFydmFlIGNvdW50cyBhbmQgc3RhbmRhcmRpemVkIGNvdW50cyBmb3IgbGFydmFlIGNhcHR1cmVkIGluIENhbENPRkkgaWN0aHlvcGxhbmt0b24gbmV0cyAocHJpbWFyaWx5IHZlcnRpY2FsIFtDYWx2ZXQgb3IgUGFpcm92ZXRdLCBvYmxpcXVlIFtib25nbyBvciByaW5nIG5ldHNdLCBhbmQgc3VyZmFjZSB0b3dzIFtNYW50YSBuZXRzXSkuIFN1cmZhY2UgdG93cyBhcmUgbm9ybWFsbHkgc3RhbmRhcmRpemVkIHRvIGNvdW50IHBlciAxLDAwMCBtMyBzdHJhaW5lZC4gT2JsaXF1ZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEwIG0yIG9mIHN1cmZhY2Ugc2FtcGxlZC4gVGhpcyB0YWJsZSBpbmNsdWRlcyBhbGwgdG93cyBieSBzcGVjaWVzLCBldmVuIGlmIHplcm8gbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzLCBpLmUuLCBuZWdhdGl2ZSB0b3dzLiBUaGUgXCJMYXJ2YWUgQ291bnRzIFBvc2l0aXZlIFRvd3NcIiB0YWJsZSBpbmNsdWRlcyBvbmx5IHRvd3Mgd2hlcmUgb25lIG9yIG1vcmUgbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzIHNlbGVjdGVkIGJ5IHRoZSB1c2VyLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZSAoQ3J1aXNlIENvZGUpXG5zaGlwIChTaGlwIE5hbWUpXG5zaGlwX2NvZGVcbm9yZGVyX29jY3VwaWVkXG50b3dfdHlwZVxubmV0X3R5cGVcbnRvd19udW1iZXJcbm5ldF9sb2NhdGlvblxuc3RhbmRhcmRfaGF1bF9mYWN0b3JcbnZvbHVtZV9zYW1wbGVkIChjdWJpYyBtZXRlcnMpXG5wZXJjZW50X3NvcnRlZCAoJS8xMDApXG5zYW1wbGVfcXVhbGl0eVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxpbmVcbnN0YXRpb25cbnRpbWUgKFN0YXJ0IFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zY2llbnRpZmljX25hbWVcbmNvbW1vbl9uYW1lXG5pdGlzX3RzbiAoSW50ZXJncmF0ZWQgVGF4b21vbWljIEluZm9ybWF0aW9uIFN5c3RlbSBUYXhvbm9taWMgU2VyaWFsIE51bWJlcilcbmNhbGNvZmlfc3BlY2llc19jb2RlXG5sYXJ2YWVfY291bnQgKFJhdyBjb3VudCBvZiBsYXJ2YWUpXG5sYXJ2YWVfMTBtMiAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGxhcnZhZSBmb3Igb2JsaXF1ZSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgdGVuIG1ldGVycyBzcXVhcmVkIG9mIHdhdGVyIHNhbXBsZWQpXG5sYXJ2YWVfMTAwMG0zIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBtYW50YSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgMSwwMDAgY3ViaWMgbWV0ZXJzIG9mIHdhdGVyIHNhbXBsZWQpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkQ2FsQ09GSWxydmNudE5CdG9PTF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkQ2FsQ09GSWxydmNudE5CdG9PTF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRDYWxDT0ZJbHJ2Y250TkJ0b09ML2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9DYWxDT0ZJL2NhbGNvZmlfaW5mby5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENhbENPRklscnZjbnROQnRvT0wucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZENhbENPRklscnZjbnROQnRvT0wmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBTV0ZTQyIsICJlcmRDYWxDT0ZJbHJ2Y250TkJ0b09MIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRPTXRvT1guc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRPTXRvT1giLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudE9NdG9PWC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDYWxDT0ZJIExhcnZhZSBDb3VudHMsIFNjaWVudGlmaWMgTmFtZXMgT00gdG8gT1giLCAiRmlzaCBsYXJ2YWUgY291bnRzIGFuZCBzdGFuZGFyZGl6ZWQgY291bnRzIGZvciBsYXJ2YWUgY2FwdHVyZWQgaW4gQ2FsQ09GSSBpY3RoeW9wbGFua3RvbiBuZXRzIChwcmltYXJpbHkgdmVydGljYWwgW0NhbHZldCBvciBQYWlyb3ZldF0sIG9ibGlxdWUgW2JvbmdvIG9yIHJpbmcgbmV0c10sIGFuZCBzdXJmYWNlIHRvd3MgW01hbnRhIG5ldHNdKS4gU3VyZmFjZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEsMDAwIG0zIHN0cmFpbmVkLiBPYmxpcXVlIHRvd3MgYXJlIG5vcm1hbGx5IHN0YW5kYXJkaXplZCB0byBjb3VudCBwZXIgMTAgbTIgb2Ygc3VyZmFjZSBzYW1wbGVkLiBUaGlzIHRhYmxlIGluY2x1ZGVzIGFsbCB0b3dzIGJ5IHNwZWNpZXMsIGV2ZW4gaWYgemVybyBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMsIGkuZS4sIG5lZ2F0aXZlIHRvd3MuIFRoZSBcIkxhcnZhZSBDb3VudHMgUG9zaXRpdmUgVG93c1wiIHRhYmxlIGluY2x1ZGVzIG9ubHkgdG93cyB3aGVyZSBvbmUgb3IgbW9yZSBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMgc2VsZWN0ZWQgYnkgdGhlIHVzZXIuXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlIChDcnVpc2UgQ29kZSlcbnNoaXAgKFNoaXAgTmFtZSlcbnNoaXBfY29kZVxub3JkZXJfb2NjdXBpZWRcbnRvd190eXBlXG5uZXRfdHlwZVxudG93X251bWJlclxubmV0X2xvY2F0aW9uXG5zdGFuZGFyZF9oYXVsX2ZhY3Rvclxudm9sdW1lX3NhbXBsZWQgKGN1YmljIG1ldGVycylcbnBlcmNlbnRfc29ydGVkICglLzEwMClcbnNhbXBsZV9xdWFsaXR5XG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGluZVxuc3RhdGlvblxudGltZSAoU3RhcnQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNjaWVudGlmaWNfbmFtZVxuY29tbW9uX25hbWVcbml0aXNfdHNuIChJbnRlcmdyYXRlZCBUYXhvbW9taWMgSW5mb3JtYXRpb24gU3lzdGVtIFRheG9ub21pYyBTZXJpYWwgTnVtYmVyKVxuY2FsY29maV9zcGVjaWVzX2NvZGVcbmxhcnZhZV9jb3VudCAoUmF3IGNvdW50IG9mIGxhcnZhZSlcbmxhcnZhZV8xMG0yIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBvYmxpcXVlIHRvd3MsIEZpc2ggbGFydmFlIHBlciB0ZW4gbWV0ZXJzIHNxdWFyZWQgb2Ygd2F0ZXIgc2FtcGxlZClcbmxhcnZhZV8xMDAwbTMgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBsYXJ2YWUgZm9yIG1hbnRhIHRvd3MsIEZpc2ggbGFydmFlIHBlciAxLDAwMCBjdWJpYyBtZXRlcnMgb2Ygd2F0ZXIgc2FtcGxlZClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRDYWxDT0ZJbHJ2Y250T010b09YX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRDYWxDT0ZJbHJ2Y250T010b09YX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZENhbENPRklscnZjbnRPTXRvT1gvaW5kZXguanNvbiIsICJodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L0NhbENPRkkvY2FsY29maV9pbmZvLmh0bWwiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkQ2FsQ09GSWxydmNudE9NdG9PWC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkQ2FsQ09GSWxydmNudE9NdG9PWCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFNXRlNDIiwgImVyZENhbENPRklscnZjbnRPTXRvT1giXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudE9ZdG9QSS5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudE9ZdG9QSSIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250T1l0b1BJLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkNhbENPRkkgTGFydmFlIENvdW50cywgU2NpZW50aWZpYyBOYW1lcyBPWSB0byBQSSIsICJGaXNoIGxhcnZhZSBjb3VudHMgYW5kIHN0YW5kYXJkaXplZCBjb3VudHMgZm9yIGxhcnZhZSBjYXB0dXJlZCBpbiBDYWxDT0ZJIGljdGh5b3BsYW5rdG9uIG5ldHMgKHByaW1hcmlseSB2ZXJ0aWNhbCBbQ2FsdmV0IG9yIFBhaXJvdmV0XSwgb2JsaXF1ZSBbYm9uZ28gb3IgcmluZyBuZXRzXSwgYW5kIHN1cmZhY2UgdG93cyBbTWFudGEgbmV0c10pLiBTdXJmYWNlIHRvd3MgYXJlIG5vcm1hbGx5IHN0YW5kYXJkaXplZCB0byBjb3VudCBwZXIgMSwwMDAgbTMgc3RyYWluZWQuIE9ibGlxdWUgdG93cyBhcmUgbm9ybWFsbHkgc3RhbmRhcmRpemVkIHRvIGNvdW50IHBlciAxMCBtMiBvZiBzdXJmYWNlIHNhbXBsZWQuIFRoaXMgdGFibGUgaW5jbHVkZXMgYWxsIHRvd3MgYnkgc3BlY2llcywgZXZlbiBpZiB6ZXJvIGxhcnZhZSB3ZXJlIGNhcHR1cmVkIGZvciB0aGUgc3BlY2llcywgaS5lLiwgbmVnYXRpdmUgdG93cy4gVGhlIFwiTGFydmFlIENvdW50cyBQb3NpdGl2ZSBUb3dzXCIgdGFibGUgaW5jbHVkZXMgb25seSB0b3dzIHdoZXJlIG9uZSBvciBtb3JlIGxhcnZhZSB3ZXJlIGNhcHR1cmVkIGZvciB0aGUgc3BlY2llcyBzZWxlY3RlZCBieSB0aGUgdXNlci5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2UgKENydWlzZSBDb2RlKVxuc2hpcCAoU2hpcCBOYW1lKVxuc2hpcF9jb2RlXG5vcmRlcl9vY2N1cGllZFxudG93X3R5cGVcbm5ldF90eXBlXG50b3dfbnVtYmVyXG5uZXRfbG9jYXRpb25cbnN0YW5kYXJkX2hhdWxfZmFjdG9yXG52b2x1bWVfc2FtcGxlZCAoY3ViaWMgbWV0ZXJzKVxucGVyY2VudF9zb3J0ZWQgKCUvMTAwKVxuc2FtcGxlX3F1YWxpdHlcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5saW5lXG5zdGF0aW9uXG50aW1lIChTdGFydCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuc2NpZW50aWZpY19uYW1lXG5jb21tb25fbmFtZVxuaXRpc190c24gKEludGVyZ3JhdGVkIFRheG9tb21pYyBJbmZvcm1hdGlvbiBTeXN0ZW0gVGF4b25vbWljIFNlcmlhbCBOdW1iZXIpXG5jYWxjb2ZpX3NwZWNpZXNfY29kZVxubGFydmFlX2NvdW50IChSYXcgY291bnQgb2YgbGFydmFlKVxubGFydmFlXzEwbTIgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBsYXJ2YWUgZm9yIG9ibGlxdWUgdG93cywgRmlzaCBsYXJ2YWUgcGVyIHRlbiBtZXRlcnMgc3F1YXJlZCBvZiB3YXRlciBzYW1wbGVkKVxubGFydmFlXzEwMDBtMyAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGxhcnZhZSBmb3IgbWFudGEgdG93cywgRmlzaCBsYXJ2YWUgcGVyIDEsMDAwIGN1YmljIG1ldGVycyBvZiB3YXRlciBzYW1wbGVkKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZENhbENPRklscnZjbnRPWXRvUElfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2VyZENhbENPRklscnZjbnRPWXRvUElfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkQ2FsQ09GSWxydmNudE9ZdG9QSS9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvQ2FsQ09GSS9jYWxjb2ZpX2luZm8uaHRtbCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lcmRDYWxDT0ZJbHJ2Y250T1l0b1BJLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmRDYWxDT0ZJbHJ2Y250T1l0b1BJJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgU1dGU0MiLCAiZXJkQ2FsQ09GSWxydmNudE9ZdG9QSSJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250UEx0b1BPLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250UEx0b1BPIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRQTHRvUE8uZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiQ2FsQ09GSSBMYXJ2YWUgQ291bnRzLCBTY2llbnRpZmljIE5hbWVzIFBMIHRvIFBPIiwgIkZpc2ggbGFydmFlIGNvdW50cyBhbmQgc3RhbmRhcmRpemVkIGNvdW50cyBmb3IgbGFydmFlIGNhcHR1cmVkIGluIENhbENPRkkgaWN0aHlvcGxhbmt0b24gbmV0cyAocHJpbWFyaWx5IHZlcnRpY2FsIFtDYWx2ZXQgb3IgUGFpcm92ZXRdLCBvYmxpcXVlIFtib25nbyBvciByaW5nIG5ldHNdLCBhbmQgc3VyZmFjZSB0b3dzIFtNYW50YSBuZXRzXSkuIFN1cmZhY2UgdG93cyBhcmUgbm9ybWFsbHkgc3RhbmRhcmRpemVkIHRvIGNvdW50IHBlciAxLDAwMCBtMyBzdHJhaW5lZC4gT2JsaXF1ZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEwIG0yIG9mIHN1cmZhY2Ugc2FtcGxlZC4gVGhpcyB0YWJsZSBpbmNsdWRlcyBhbGwgdG93cyBieSBzcGVjaWVzLCBldmVuIGlmIHplcm8gbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzLCBpLmUuLCBuZWdhdGl2ZSB0b3dzLiBUaGUgXCJMYXJ2YWUgQ291bnRzIFBvc2l0aXZlIFRvd3NcIiB0YWJsZSBpbmNsdWRlcyBvbmx5IHRvd3Mgd2hlcmUgb25lIG9yIG1vcmUgbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzIHNlbGVjdGVkIGJ5IHRoZSB1c2VyLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZSAoQ3J1aXNlIENvZGUpXG5zaGlwIChTaGlwIE5hbWUpXG5zaGlwX2NvZGVcbm9yZGVyX29jY3VwaWVkXG50b3dfdHlwZVxubmV0X3R5cGVcbnRvd19udW1iZXJcbm5ldF9sb2NhdGlvblxuc3RhbmRhcmRfaGF1bF9mYWN0b3JcbnZvbHVtZV9zYW1wbGVkIChjdWJpYyBtZXRlcnMpXG5wZXJjZW50X3NvcnRlZCAoJS8xMDApXG5zYW1wbGVfcXVhbGl0eVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxpbmVcbnN0YXRpb25cbnRpbWUgKFN0YXJ0IFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zY2llbnRpZmljX25hbWVcbmNvbW1vbl9uYW1lXG5pdGlzX3RzbiAoSW50ZXJncmF0ZWQgVGF4b21vbWljIEluZm9ybWF0aW9uIFN5c3RlbSBUYXhvbm9taWMgU2VyaWFsIE51bWJlcilcbmNhbGNvZmlfc3BlY2llc19jb2RlXG5sYXJ2YWVfY291bnQgKFJhdyBjb3VudCBvZiBsYXJ2YWUpXG5sYXJ2YWVfMTBtMiAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGxhcnZhZSBmb3Igb2JsaXF1ZSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgdGVuIG1ldGVycyBzcXVhcmVkIG9mIHdhdGVyIHNhbXBsZWQpXG5sYXJ2YWVfMTAwMG0zIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBtYW50YSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgMSwwMDAgY3ViaWMgbWV0ZXJzIG9mIHdhdGVyIHNhbXBsZWQpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkQ2FsQ09GSWxydmNudFBMdG9QT19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkQ2FsQ09GSWxydmNudFBMdG9QT19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRDYWxDT0ZJbHJ2Y250UEx0b1BPL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9DYWxDT0ZJL2NhbGNvZmlfaW5mby5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENhbENPRklscnZjbnRQTHRvUE8ucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZENhbENPRklscnZjbnRQTHRvUE8mc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBTV0ZTQyIsICJlcmRDYWxDT0ZJbHJ2Y250UEx0b1BPIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRQUHRvUFouc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRQUHRvUFoiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudFBQdG9QWi5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDYWxDT0ZJIExhcnZhZSBDb3VudHMsIFNjaWVudGlmaWMgTmFtZXMgUFAgdG8gUFoiLCAiRmlzaCBsYXJ2YWUgY291bnRzIGFuZCBzdGFuZGFyZGl6ZWQgY291bnRzIGZvciBsYXJ2YWUgY2FwdHVyZWQgaW4gQ2FsQ09GSSBpY3RoeW9wbGFua3RvbiBuZXRzIChwcmltYXJpbHkgdmVydGljYWwgW0NhbHZldCBvciBQYWlyb3ZldF0sIG9ibGlxdWUgW2JvbmdvIG9yIHJpbmcgbmV0c10sIGFuZCBzdXJmYWNlIHRvd3MgW01hbnRhIG5ldHNdKS4gU3VyZmFjZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEsMDAwIG0zIHN0cmFpbmVkLiBPYmxpcXVlIHRvd3MgYXJlIG5vcm1hbGx5IHN0YW5kYXJkaXplZCB0byBjb3VudCBwZXIgMTAgbTIgb2Ygc3VyZmFjZSBzYW1wbGVkLiBUaGlzIHRhYmxlIGluY2x1ZGVzIGFsbCB0b3dzIGJ5IHNwZWNpZXMsIGV2ZW4gaWYgemVybyBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMsIGkuZS4sIG5lZ2F0aXZlIHRvd3MuIFRoZSBcIkxhcnZhZSBDb3VudHMgUG9zaXRpdmUgVG93c1wiIHRhYmxlIGluY2x1ZGVzIG9ubHkgdG93cyB3aGVyZSBvbmUgb3IgbW9yZSBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMgc2VsZWN0ZWQgYnkgdGhlIHVzZXIuXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlIChDcnVpc2UgQ29kZSlcbnNoaXAgKFNoaXAgTmFtZSlcbnNoaXBfY29kZVxub3JkZXJfb2NjdXBpZWRcbnRvd190eXBlXG5uZXRfdHlwZVxudG93X251bWJlclxubmV0X2xvY2F0aW9uXG5zdGFuZGFyZF9oYXVsX2ZhY3Rvclxudm9sdW1lX3NhbXBsZWQgKGN1YmljIG1ldGVycylcbnBlcmNlbnRfc29ydGVkICglLzEwMClcbnNhbXBsZV9xdWFsaXR5XG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGluZVxuc3RhdGlvblxudGltZSAoU3RhcnQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNjaWVudGlmaWNfbmFtZVxuY29tbW9uX25hbWVcbml0aXNfdHNuIChJbnRlcmdyYXRlZCBUYXhvbW9taWMgSW5mb3JtYXRpb24gU3lzdGVtIFRheG9ub21pYyBTZXJpYWwgTnVtYmVyKVxuY2FsY29maV9zcGVjaWVzX2NvZGVcbmxhcnZhZV9jb3VudCAoUmF3IGNvdW50IG9mIGxhcnZhZSlcbmxhcnZhZV8xMG0yIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBvYmxpcXVlIHRvd3MsIEZpc2ggbGFydmFlIHBlciB0ZW4gbWV0ZXJzIHNxdWFyZWQgb2Ygd2F0ZXIgc2FtcGxlZClcbmxhcnZhZV8xMDAwbTMgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBsYXJ2YWUgZm9yIG1hbnRhIHRvd3MsIEZpc2ggbGFydmFlIHBlciAxLDAwMCBjdWJpYyBtZXRlcnMgb2Ygd2F0ZXIgc2FtcGxlZClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRDYWxDT0ZJbHJ2Y250UFB0b1BaX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRDYWxDT0ZJbHJ2Y250UFB0b1BaX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZENhbENPRklscnZjbnRQUHRvUFovaW5kZXguanNvbiIsICJodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L0NhbENPRkkvY2FsY29maV9pbmZvLmh0bWwiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkQ2FsQ09GSWxydmNudFBQdG9QWi5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkQ2FsQ09GSWxydmNudFBQdG9QWiZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFNXRlNDIiwgImVyZENhbENPRklscnZjbnRQUHRvUFoiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudFF0b1NBLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250UXRvU0EiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudFF0b1NBLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkNhbENPRkkgTGFydmFlIENvdW50cywgU2NpZW50aWZpYyBOYW1lcyBRIHRvIFNBIiwgIkZpc2ggbGFydmFlIGNvdW50cyBhbmQgc3RhbmRhcmRpemVkIGNvdW50cyBmb3IgbGFydmFlIGNhcHR1cmVkIGluIENhbENPRkkgaWN0aHlvcGxhbmt0b24gbmV0cyAocHJpbWFyaWx5IHZlcnRpY2FsIFtDYWx2ZXQgb3IgUGFpcm92ZXRdLCBvYmxpcXVlIFtib25nbyBvciByaW5nIG5ldHNdLCBhbmQgc3VyZmFjZSB0b3dzIFtNYW50YSBuZXRzXSkuIFN1cmZhY2UgdG93cyBhcmUgbm9ybWFsbHkgc3RhbmRhcmRpemVkIHRvIGNvdW50IHBlciAxLDAwMCBtMyBzdHJhaW5lZC4gT2JsaXF1ZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEwIG0yIG9mIHN1cmZhY2Ugc2FtcGxlZC4gVGhpcyB0YWJsZSBpbmNsdWRlcyBhbGwgdG93cyBieSBzcGVjaWVzLCBldmVuIGlmIHplcm8gbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzLCBpLmUuLCBuZWdhdGl2ZSB0b3dzLiBUaGUgXCJMYXJ2YWUgQ291bnRzIFBvc2l0aXZlIFRvd3NcIiB0YWJsZSBpbmNsdWRlcyBvbmx5IHRvd3Mgd2hlcmUgb25lIG9yIG1vcmUgbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzIHNlbGVjdGVkIGJ5IHRoZSB1c2VyLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZSAoQ3J1aXNlIENvZGUpXG5zaGlwIChTaGlwIE5hbWUpXG5zaGlwX2NvZGVcbm9yZGVyX29jY3VwaWVkXG50b3dfdHlwZVxubmV0X3R5cGVcbnRvd19udW1iZXJcbm5ldF9sb2NhdGlvblxuc3RhbmRhcmRfaGF1bF9mYWN0b3JcbnZvbHVtZV9zYW1wbGVkIChjdWJpYyBtZXRlcnMpXG5wZXJjZW50X3NvcnRlZCAoJS8xMDApXG5zYW1wbGVfcXVhbGl0eVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxpbmVcbnN0YXRpb25cbnRpbWUgKFN0YXJ0IFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zY2llbnRpZmljX25hbWVcbmNvbW1vbl9uYW1lXG5pdGlzX3RzbiAoSW50ZXJncmF0ZWQgVGF4b21vbWljIEluZm9ybWF0aW9uIFN5c3RlbSBUYXhvbm9taWMgU2VyaWFsIE51bWJlcilcbmNhbGNvZmlfc3BlY2llc19jb2RlXG5sYXJ2YWVfY291bnQgKFJhdyBjb3VudCBvZiBsYXJ2YWUpXG5sYXJ2YWVfMTBtMiAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGxhcnZhZSBmb3Igb2JsaXF1ZSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgdGVuIG1ldGVycyBzcXVhcmVkIG9mIHdhdGVyIHNhbXBsZWQpXG5sYXJ2YWVfMTAwMG0zIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBtYW50YSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgMSwwMDAgY3ViaWMgbWV0ZXJzIG9mIHdhdGVyIHNhbXBsZWQpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkQ2FsQ09GSWxydmNudFF0b1NBX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRDYWxDT0ZJbHJ2Y250UXRvU0FfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkQ2FsQ09GSWxydmNudFF0b1NBL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9DYWxDT0ZJL2NhbGNvZmlfaW5mby5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENhbENPRklscnZjbnRRdG9TQS5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkQ2FsQ09GSWxydmNudFF0b1NBJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgU1dGU0MiLCAiZXJkQ2FsQ09GSWxydmNudFF0b1NBIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRTQnRvU0Muc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRTQnRvU0MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudFNCdG9TQy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDYWxDT0ZJIExhcnZhZSBDb3VudHMsIFNjaWVudGlmaWMgTmFtZXMgU0IgdG8gU0MiLCAiRmlzaCBsYXJ2YWUgY291bnRzIGFuZCBzdGFuZGFyZGl6ZWQgY291bnRzIGZvciBsYXJ2YWUgY2FwdHVyZWQgaW4gQ2FsQ09GSSBpY3RoeW9wbGFua3RvbiBuZXRzIChwcmltYXJpbHkgdmVydGljYWwgW0NhbHZldCBvciBQYWlyb3ZldF0sIG9ibGlxdWUgW2JvbmdvIG9yIHJpbmcgbmV0c10sIGFuZCBzdXJmYWNlIHRvd3MgW01hbnRhIG5ldHNdKS4gU3VyZmFjZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEsMDAwIG0zIHN0cmFpbmVkLiBPYmxpcXVlIHRvd3MgYXJlIG5vcm1hbGx5IHN0YW5kYXJkaXplZCB0byBjb3VudCBwZXIgMTAgbTIgb2Ygc3VyZmFjZSBzYW1wbGVkLiBUaGlzIHRhYmxlIGluY2x1ZGVzIGFsbCB0b3dzIGJ5IHNwZWNpZXMsIGV2ZW4gaWYgemVybyBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMsIGkuZS4sIG5lZ2F0aXZlIHRvd3MuIFRoZSBcIkxhcnZhZSBDb3VudHMgUG9zaXRpdmUgVG93c1wiIHRhYmxlIGluY2x1ZGVzIG9ubHkgdG93cyB3aGVyZSBvbmUgb3IgbW9yZSBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMgc2VsZWN0ZWQgYnkgdGhlIHVzZXIuXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlIChDcnVpc2UgQ29kZSlcbnNoaXAgKFNoaXAgTmFtZSlcbnNoaXBfY29kZVxub3JkZXJfb2NjdXBpZWRcbnRvd190eXBlXG5uZXRfdHlwZVxudG93X251bWJlclxubmV0X2xvY2F0aW9uXG5zdGFuZGFyZF9oYXVsX2ZhY3Rvclxudm9sdW1lX3NhbXBsZWQgKGN1YmljIG1ldGVycylcbnBlcmNlbnRfc29ydGVkICglLzEwMClcbnNhbXBsZV9xdWFsaXR5XG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGluZVxuc3RhdGlvblxudGltZSAoU3RhcnQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNjaWVudGlmaWNfbmFtZVxuY29tbW9uX25hbWVcbml0aXNfdHNuIChJbnRlcmdyYXRlZCBUYXhvbW9taWMgSW5mb3JtYXRpb24gU3lzdGVtIFRheG9ub21pYyBTZXJpYWwgTnVtYmVyKVxuY2FsY29maV9zcGVjaWVzX2NvZGVcbmxhcnZhZV9jb3VudCAoUmF3IGNvdW50IG9mIGxhcnZhZSlcbmxhcnZhZV8xMG0yIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBvYmxpcXVlIHRvd3MsIEZpc2ggbGFydmFlIHBlciB0ZW4gbWV0ZXJzIHNxdWFyZWQgb2Ygd2F0ZXIgc2FtcGxlZClcbmxhcnZhZV8xMDAwbTMgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBsYXJ2YWUgZm9yIG1hbnRhIHRvd3MsIEZpc2ggbGFydmFlIHBlciAxLDAwMCBjdWJpYyBtZXRlcnMgb2Ygd2F0ZXIgc2FtcGxlZClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRDYWxDT0ZJbHJ2Y250U0J0b1NDX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRDYWxDT0ZJbHJ2Y250U0J0b1NDX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZENhbENPRklscnZjbnRTQnRvU0MvaW5kZXguanNvbiIsICJodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L0NhbENPRkkvY2FsY29maV9pbmZvLmh0bWwiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkQ2FsQ09GSWxydmNudFNCdG9TQy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkQ2FsQ09GSWxydmNudFNCdG9TQyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFNXRlNDIiwgImVyZENhbENPRklscnZjbnRTQnRvU0MiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudFNEdG9TSS5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudFNEdG9TSSIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250U0R0b1NJLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkNhbENPRkkgTGFydmFlIENvdW50cywgU2NpZW50aWZpYyBOYW1lcyBTRCB0byBTSSIsICJGaXNoIGxhcnZhZSBjb3VudHMgYW5kIHN0YW5kYXJkaXplZCBjb3VudHMgZm9yIGxhcnZhZSBjYXB0dXJlZCBpbiBDYWxDT0ZJIGljdGh5b3BsYW5rdG9uIG5ldHMgKHByaW1hcmlseSB2ZXJ0aWNhbCBbQ2FsdmV0IG9yIFBhaXJvdmV0XSwgb2JsaXF1ZSBbYm9uZ28gb3IgcmluZyBuZXRzXSwgYW5kIHN1cmZhY2UgdG93cyBbTWFudGEgbmV0c10pLiBTdXJmYWNlIHRvd3MgYXJlIG5vcm1hbGx5IHN0YW5kYXJkaXplZCB0byBjb3VudCBwZXIgMSwwMDAgbTMgc3RyYWluZWQuIE9ibGlxdWUgdG93cyBhcmUgbm9ybWFsbHkgc3RhbmRhcmRpemVkIHRvIGNvdW50IHBlciAxMCBtMiBvZiBzdXJmYWNlIHNhbXBsZWQuIFRoaXMgdGFibGUgaW5jbHVkZXMgYWxsIHRvd3MgYnkgc3BlY2llcywgZXZlbiBpZiB6ZXJvIGxhcnZhZSB3ZXJlIGNhcHR1cmVkIGZvciB0aGUgc3BlY2llcywgaS5lLiwgbmVnYXRpdmUgdG93cy4gVGhlIFwiTGFydmFlIENvdW50cyBQb3NpdGl2ZSBUb3dzXCIgdGFibGUgaW5jbHVkZXMgb25seSB0b3dzIHdoZXJlIG9uZSBvciBtb3JlIGxhcnZhZSB3ZXJlIGNhcHR1cmVkIGZvciB0aGUgc3BlY2llcyBzZWxlY3RlZCBieSB0aGUgdXNlci5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2UgKENydWlzZSBDb2RlKVxuc2hpcCAoU2hpcCBOYW1lKVxuc2hpcF9jb2RlXG5vcmRlcl9vY2N1cGllZFxudG93X3R5cGVcbm5ldF90eXBlXG50b3dfbnVtYmVyXG5uZXRfbG9jYXRpb25cbnN0YW5kYXJkX2hhdWxfZmFjdG9yXG52b2x1bWVfc2FtcGxlZCAoY3ViaWMgbWV0ZXJzKVxucGVyY2VudF9zb3J0ZWQgKCUvMTAwKVxuc2FtcGxlX3F1YWxpdHlcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5saW5lXG5zdGF0aW9uXG50aW1lIChTdGFydCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuc2NpZW50aWZpY19uYW1lXG5jb21tb25fbmFtZVxuaXRpc190c24gKEludGVyZ3JhdGVkIFRheG9tb21pYyBJbmZvcm1hdGlvbiBTeXN0ZW0gVGF4b25vbWljIFNlcmlhbCBOdW1iZXIpXG5jYWxjb2ZpX3NwZWNpZXNfY29kZVxubGFydmFlX2NvdW50IChSYXcgY291bnQgb2YgbGFydmFlKVxubGFydmFlXzEwbTIgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBsYXJ2YWUgZm9yIG9ibGlxdWUgdG93cywgRmlzaCBsYXJ2YWUgcGVyIHRlbiBtZXRlcnMgc3F1YXJlZCBvZiB3YXRlciBzYW1wbGVkKVxubGFydmFlXzEwMDBtMyAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGxhcnZhZSBmb3IgbWFudGEgdG93cywgRmlzaCBsYXJ2YWUgcGVyIDEsMDAwIGN1YmljIG1ldGVycyBvZiB3YXRlciBzYW1wbGVkKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZENhbENPRklscnZjbnRTRHRvU0lfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2VyZENhbENPRklscnZjbnRTRHRvU0lfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkQ2FsQ09GSWxydmNudFNEdG9TSS9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvQ2FsQ09GSS9jYWxjb2ZpX2luZm8uaHRtbCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lcmRDYWxDT0ZJbHJ2Y250U0R0b1NJLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmRDYWxDT0ZJbHJ2Y250U0R0b1NJJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgU1dGU0MiLCAiZXJkQ2FsQ09GSWxydmNudFNEdG9TSSJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250U0p0b1NULnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250U0p0b1NUIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRTSnRvU1QuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiQ2FsQ09GSSBMYXJ2YWUgQ291bnRzLCBTY2llbnRpZmljIE5hbWVzIFNKIHRvIFNUIiwgIkZpc2ggbGFydmFlIGNvdW50cyBhbmQgc3RhbmRhcmRpemVkIGNvdW50cyBmb3IgbGFydmFlIGNhcHR1cmVkIGluIENhbENPRkkgaWN0aHlvcGxhbmt0b24gbmV0cyAocHJpbWFyaWx5IHZlcnRpY2FsIFtDYWx2ZXQgb3IgUGFpcm92ZXRdLCBvYmxpcXVlIFtib25nbyBvciByaW5nIG5ldHNdLCBhbmQgc3VyZmFjZSB0b3dzIFtNYW50YSBuZXRzXSkuIFN1cmZhY2UgdG93cyBhcmUgbm9ybWFsbHkgc3RhbmRhcmRpemVkIHRvIGNvdW50IHBlciAxLDAwMCBtMyBzdHJhaW5lZC4gT2JsaXF1ZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEwIG0yIG9mIHN1cmZhY2Ugc2FtcGxlZC4gVGhpcyB0YWJsZSBpbmNsdWRlcyBhbGwgdG93cyBieSBzcGVjaWVzLCBldmVuIGlmIHplcm8gbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzLCBpLmUuLCBuZWdhdGl2ZSB0b3dzLiBUaGUgXCJMYXJ2YWUgQ291bnRzIFBvc2l0aXZlIFRvd3NcIiB0YWJsZSBpbmNsdWRlcyBvbmx5IHRvd3Mgd2hlcmUgb25lIG9yIG1vcmUgbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzIHNlbGVjdGVkIGJ5IHRoZSB1c2VyLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZSAoQ3J1aXNlIENvZGUpXG5zaGlwIChTaGlwIE5hbWUpXG5zaGlwX2NvZGVcbm9yZGVyX29jY3VwaWVkXG50b3dfdHlwZVxubmV0X3R5cGVcbnRvd19udW1iZXJcbm5ldF9sb2NhdGlvblxuc3RhbmRhcmRfaGF1bF9mYWN0b3JcbnZvbHVtZV9zYW1wbGVkIChjdWJpYyBtZXRlcnMpXG5wZXJjZW50X3NvcnRlZCAoJS8xMDApXG5zYW1wbGVfcXVhbGl0eVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxpbmVcbnN0YXRpb25cbnRpbWUgKFN0YXJ0IFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zY2llbnRpZmljX25hbWVcbmNvbW1vbl9uYW1lXG5pdGlzX3RzbiAoSW50ZXJncmF0ZWQgVGF4b21vbWljIEluZm9ybWF0aW9uIFN5c3RlbSBUYXhvbm9taWMgU2VyaWFsIE51bWJlcilcbmNhbGNvZmlfc3BlY2llc19jb2RlXG5sYXJ2YWVfY291bnQgKFJhdyBjb3VudCBvZiBsYXJ2YWUpXG5sYXJ2YWVfMTBtMiAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGxhcnZhZSBmb3Igb2JsaXF1ZSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgdGVuIG1ldGVycyBzcXVhcmVkIG9mIHdhdGVyIHNhbXBsZWQpXG5sYXJ2YWVfMTAwMG0zIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBtYW50YSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgMSwwMDAgY3ViaWMgbWV0ZXJzIG9mIHdhdGVyIHNhbXBsZWQpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkQ2FsQ09GSWxydmNudFNKdG9TVF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkQ2FsQ09GSWxydmNudFNKdG9TVF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRDYWxDT0ZJbHJ2Y250U0p0b1NUL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9DYWxDT0ZJL2NhbGNvZmlfaW5mby5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENhbENPRklscnZjbnRTSnRvU1QucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZENhbENPRklscnZjbnRTSnRvU1Qmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBTV0ZTQyIsICJlcmRDYWxDT0ZJbHJ2Y250U0p0b1NUIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRTVXRvVEUuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRTVXRvVEUiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudFNVdG9URS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDYWxDT0ZJIExhcnZhZSBDb3VudHMsIFNjaWVudGlmaWMgTmFtZXMgU1UgdG8gVEUiLCAiRmlzaCBsYXJ2YWUgY291bnRzIGFuZCBzdGFuZGFyZGl6ZWQgY291bnRzIGZvciBsYXJ2YWUgY2FwdHVyZWQgaW4gQ2FsQ09GSSBpY3RoeW9wbGFua3RvbiBuZXRzIChwcmltYXJpbHkgdmVydGljYWwgW0NhbHZldCBvciBQYWlyb3ZldF0sIG9ibGlxdWUgW2JvbmdvIG9yIHJpbmcgbmV0c10sIGFuZCBzdXJmYWNlIHRvd3MgW01hbnRhIG5ldHNdKS4gU3VyZmFjZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEsMDAwIG0zIHN0cmFpbmVkLiBPYmxpcXVlIHRvd3MgYXJlIG5vcm1hbGx5IHN0YW5kYXJkaXplZCB0byBjb3VudCBwZXIgMTAgbTIgb2Ygc3VyZmFjZSBzYW1wbGVkLiBUaGlzIHRhYmxlIGluY2x1ZGVzIGFsbCB0b3dzIGJ5IHNwZWNpZXMsIGV2ZW4gaWYgemVybyBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMsIGkuZS4sIG5lZ2F0aXZlIHRvd3MuIFRoZSBcIkxhcnZhZSBDb3VudHMgUG9zaXRpdmUgVG93c1wiIHRhYmxlIGluY2x1ZGVzIG9ubHkgdG93cyB3aGVyZSBvbmUgb3IgbW9yZSBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMgc2VsZWN0ZWQgYnkgdGhlIHVzZXIuXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlIChDcnVpc2UgQ29kZSlcbnNoaXAgKFNoaXAgTmFtZSlcbnNoaXBfY29kZVxub3JkZXJfb2NjdXBpZWRcbnRvd190eXBlXG5uZXRfdHlwZVxudG93X251bWJlclxubmV0X2xvY2F0aW9uXG5zdGFuZGFyZF9oYXVsX2ZhY3Rvclxudm9sdW1lX3NhbXBsZWQgKGN1YmljIG1ldGVycylcbnBlcmNlbnRfc29ydGVkICglLzEwMClcbnNhbXBsZV9xdWFsaXR5XG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGluZVxuc3RhdGlvblxudGltZSAoU3RhcnQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNjaWVudGlmaWNfbmFtZVxuY29tbW9uX25hbWVcbml0aXNfdHNuIChJbnRlcmdyYXRlZCBUYXhvbW9taWMgSW5mb3JtYXRpb24gU3lzdGVtIFRheG9ub21pYyBTZXJpYWwgTnVtYmVyKVxuY2FsY29maV9zcGVjaWVzX2NvZGVcbmxhcnZhZV9jb3VudCAoUmF3IGNvdW50IG9mIGxhcnZhZSlcbmxhcnZhZV8xMG0yIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBvYmxpcXVlIHRvd3MsIEZpc2ggbGFydmFlIHBlciB0ZW4gbWV0ZXJzIHNxdWFyZWQgb2Ygd2F0ZXIgc2FtcGxlZClcbmxhcnZhZV8xMDAwbTMgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBsYXJ2YWUgZm9yIG1hbnRhIHRvd3MsIEZpc2ggbGFydmFlIHBlciAxLDAwMCBjdWJpYyBtZXRlcnMgb2Ygd2F0ZXIgc2FtcGxlZClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRDYWxDT0ZJbHJ2Y250U1V0b1RFX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRDYWxDT0ZJbHJ2Y250U1V0b1RFX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZENhbENPRklscnZjbnRTVXRvVEUvaW5kZXguanNvbiIsICJodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L0NhbENPRkkvY2FsY29maV9pbmZvLmh0bWwiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkQ2FsQ09GSWxydmNudFNVdG9URS5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkQ2FsQ09GSWxydmNudFNVdG9URSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFNXRlNDIiwgImVyZENhbENPRklscnZjbnRTVXRvVEUiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudFRGdG9VLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250VEZ0b1UiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudFRGdG9VLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkNhbENPRkkgTGFydmFlIENvdW50cywgU2NpZW50aWZpYyBOYW1lcyBURiB0byBVIiwgIkZpc2ggbGFydmFlIGNvdW50cyBhbmQgc3RhbmRhcmRpemVkIGNvdW50cyBmb3IgbGFydmFlIGNhcHR1cmVkIGluIENhbENPRkkgaWN0aHlvcGxhbmt0b24gbmV0cyAocHJpbWFyaWx5IHZlcnRpY2FsIFtDYWx2ZXQgb3IgUGFpcm92ZXRdLCBvYmxpcXVlIFtib25nbyBvciByaW5nIG5ldHNdLCBhbmQgc3VyZmFjZSB0b3dzIFtNYW50YSBuZXRzXSkuIFN1cmZhY2UgdG93cyBhcmUgbm9ybWFsbHkgc3RhbmRhcmRpemVkIHRvIGNvdW50IHBlciAxLDAwMCBtMyBzdHJhaW5lZC4gT2JsaXF1ZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEwIG0yIG9mIHN1cmZhY2Ugc2FtcGxlZC4gVGhpcyB0YWJsZSBpbmNsdWRlcyBhbGwgdG93cyBieSBzcGVjaWVzLCBldmVuIGlmIHplcm8gbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzLCBpLmUuLCBuZWdhdGl2ZSB0b3dzLiBUaGUgXCJMYXJ2YWUgQ291bnRzIFBvc2l0aXZlIFRvd3NcIiB0YWJsZSBpbmNsdWRlcyBvbmx5IHRvd3Mgd2hlcmUgb25lIG9yIG1vcmUgbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzIHNlbGVjdGVkIGJ5IHRoZSB1c2VyLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZSAoQ3J1aXNlIENvZGUpXG5zaGlwIChTaGlwIE5hbWUpXG5zaGlwX2NvZGVcbm9yZGVyX29jY3VwaWVkXG50b3dfdHlwZVxubmV0X3R5cGVcbnRvd19udW1iZXJcbm5ldF9sb2NhdGlvblxuc3RhbmRhcmRfaGF1bF9mYWN0b3JcbnZvbHVtZV9zYW1wbGVkIChjdWJpYyBtZXRlcnMpXG5wZXJjZW50X3NvcnRlZCAoJS8xMDApXG5zYW1wbGVfcXVhbGl0eVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxpbmVcbnN0YXRpb25cbnRpbWUgKFN0YXJ0IFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zY2llbnRpZmljX25hbWVcbmNvbW1vbl9uYW1lXG5pdGlzX3RzbiAoSW50ZXJncmF0ZWQgVGF4b21vbWljIEluZm9ybWF0aW9uIFN5c3RlbSBUYXhvbm9taWMgU2VyaWFsIE51bWJlcilcbmNhbGNvZmlfc3BlY2llc19jb2RlXG5sYXJ2YWVfY291bnQgKFJhdyBjb3VudCBvZiBsYXJ2YWUpXG5sYXJ2YWVfMTBtMiAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGxhcnZhZSBmb3Igb2JsaXF1ZSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgdGVuIG1ldGVycyBzcXVhcmVkIG9mIHdhdGVyIHNhbXBsZWQpXG5sYXJ2YWVfMTAwMG0zIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBtYW50YSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgMSwwMDAgY3ViaWMgbWV0ZXJzIG9mIHdhdGVyIHNhbXBsZWQpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkQ2FsQ09GSWxydmNudFRGdG9VX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRDYWxDT0ZJbHJ2Y250VEZ0b1VfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkQ2FsQ09GSWxydmNudFRGdG9VL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9DYWxDT0ZJL2NhbGNvZmlfaW5mby5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENhbENPRklscnZjbnRURnRvVS5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkQ2FsQ09GSWxydmNudFRGdG9VJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgU1dGU0MiLCAiZXJkQ2FsQ09GSWxydmNudFRGdG9VIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRWdG9aLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250VnRvWiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250VnRvWi5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDYWxDT0ZJIExhcnZhZSBDb3VudHMsIFNjaWVudGlmaWMgTmFtZXMgViB0byBaIiwgIkZpc2ggbGFydmFlIGNvdW50cyBhbmQgc3RhbmRhcmRpemVkIGNvdW50cyBmb3IgbGFydmFlIGNhcHR1cmVkIGluIENhbENPRkkgaWN0aHlvcGxhbmt0b24gbmV0cyAocHJpbWFyaWx5IHZlcnRpY2FsIFtDYWx2ZXQgb3IgUGFpcm92ZXRdLCBvYmxpcXVlIFtib25nbyBvciByaW5nIG5ldHNdLCBhbmQgc3VyZmFjZSB0b3dzIFtNYW50YSBuZXRzXSkuIFN1cmZhY2UgdG93cyBhcmUgbm9ybWFsbHkgc3RhbmRhcmRpemVkIHRvIGNvdW50IHBlciAxLDAwMCBtMyBzdHJhaW5lZC4gT2JsaXF1ZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEwIG0yIG9mIHN1cmZhY2Ugc2FtcGxlZC4gVGhpcyB0YWJsZSBpbmNsdWRlcyBhbGwgdG93cyBieSBzcGVjaWVzLCBldmVuIGlmIHplcm8gbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzLCBpLmUuLCBuZWdhdGl2ZSB0b3dzLiBUaGUgXCJMYXJ2YWUgQ291bnRzIFBvc2l0aXZlIFRvd3NcIiB0YWJsZSBpbmNsdWRlcyBvbmx5IHRvd3Mgd2hlcmUgb25lIG9yIG1vcmUgbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzIHNlbGVjdGVkIGJ5IHRoZSB1c2VyLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZSAoQ3J1aXNlIENvZGUpXG5zaGlwIChTaGlwIE5hbWUpXG5zaGlwX2NvZGVcbm9yZGVyX29jY3VwaWVkXG50b3dfdHlwZVxubmV0X3R5cGVcbnRvd19udW1iZXJcbm5ldF9sb2NhdGlvblxuc3RhbmRhcmRfaGF1bF9mYWN0b3JcbnZvbHVtZV9zYW1wbGVkIChjdWJpYyBtZXRlcnMpXG5wZXJjZW50X3NvcnRlZCAoJS8xMDApXG5zYW1wbGVfcXVhbGl0eVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxpbmVcbnN0YXRpb25cbnRpbWUgKFN0YXJ0IFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zY2llbnRpZmljX25hbWVcbmNvbW1vbl9uYW1lXG5pdGlzX3RzbiAoSW50ZXJncmF0ZWQgVGF4b21vbWljIEluZm9ybWF0aW9uIFN5c3RlbSBUYXhvbm9taWMgU2VyaWFsIE51bWJlcilcbmNhbGNvZmlfc3BlY2llc19jb2RlXG5sYXJ2YWVfY291bnQgKFJhdyBjb3VudCBvZiBsYXJ2YWUpXG5sYXJ2YWVfMTBtMiAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGxhcnZhZSBmb3Igb2JsaXF1ZSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgdGVuIG1ldGVycyBzcXVhcmVkIG9mIHdhdGVyIHNhbXBsZWQpXG5sYXJ2YWVfMTAwMG0zIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBtYW50YSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgMSwwMDAgY3ViaWMgbWV0ZXJzIG9mIHdhdGVyIHNhbXBsZWQpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkQ2FsQ09GSWxydmNudFZ0b1pfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2VyZENhbENPRklscnZjbnRWdG9aX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZENhbENPRklscnZjbnRWdG9aL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9DYWxDT0ZJL2NhbGNvZmlfaW5mby5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENhbENPRklscnZjbnRWdG9aLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmRDYWxDT0ZJbHJ2Y250VnRvWiZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFNXRlNDIiwgImVyZENhbENPRklscnZjbnRWdG9aIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZzaXouc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZzaXoiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydnNpei5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDYWxDT0ZJIExhcnZhZSBTaXplcyIsICJTaXplIGRhdGEgZm9yIHNlbGVjdGVkIGxhcnZhbCBmaXNoIGNhcHR1cmVkIGluIENhbENPRkkgaWN0aHlvcGxhbmt0b24gbmV0cy5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2UgKENydWlzZSBDb2RlKVxuc2hpcCAoU2hpcCBOYW1lKVxuc2hpcF9jb2RlXG5vcmRlcl9vY2N1cGllZFxudG93X3R5cGUgKFRvdyBUeXBlIE5hbWUpXG5uZXRfdHlwZVxudG93X251bWJlclxubmV0X2xvY2F0aW9uXG5zdGFuZGFyZF9oYXVsX2ZhY3Rvclxudm9sdW1lX3NhbXBsZWQgKGN1YmljIG1ldGVycylcbnBlcmNlbnRfc29ydGVkICglLzEwMClcbnNhbXBsZV9xdWFsaXR5XG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGluZVxuc3RhdGlvblxudGltZSAoU3RhcnQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNjaWVudGlmaWNfbmFtZVxuY29tbW9uX25hbWVcbml0aXNfdHNuIChJbnRlcmdyYXRlZCBUYXhvbW9taWMgSW5mb3JtYXRpb24gU3lzdGVtIFRheG9ub21pYyBTZXJpYWwgTnVtYmVyKVxuY2FsY29maV9zcGVjaWVzX2NvZGVcbmxhcnZhZV9zaXplIChUb3RhbCBsZW5ndGggb2YgdGhlIGxhcnZhZSwgbW0pXG5sYXJ2YWVfY291bnQgKFJhdyBjb3VudCBvZiBsYXJ2YWUpXG5sYXJ2YWVfMTBtMiAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGxhcnZhZSBpbiB0aGUgc2l6ZSBjbGFzcyBmb3Igb2JsaXF1ZSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgdGVuIG1ldGVycyBzcXVhcmVkIG9mIHdhdGVyIHNhbXBsZWQpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkQ2FsQ09GSWxydnNpel9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkQ2FsQ09GSWxydnNpel9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRDYWxDT0ZJbHJ2c2l6L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9DYWxDT0ZJL2NhbGNvZmlfaW5mby5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENhbENPRklscnZzaXoucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZENhbENPRklscnZzaXomc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBTV0ZTQyIsICJlcmRDYWxDT0ZJbHJ2c2l6Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZzdGcuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZzdGciLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydnN0Zy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDYWxDT0ZJIExhcnZhZSBTdGFnZXMiLCAiRGV2ZWxvcG1lbnRhbCBzdGFnZXMgKHlvbGsgc2FjLCBwcmVmbGV4aW9uLCBmbGV4aW9uLCBwb3N0ZmxleGlvbiwgb3IgdHJhbnNmb3JtYXRpb24pIG9mIHNlbGVjdGVkIGZpc2ggbGFydmFlIGNhcHR1cmVkIGluIENhbENPRkkgaWN0aHlvcGxhbmt0b24gbmV0cy5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2UgKENydWlzZSBDb2RlKVxuc2hpcCAoU2hpcCBOYW1lKVxuc2hpcF9jb2RlXG5vcmRlcl9vY2N1cGllZFxudG93X3R5cGUgKFRvdyBUeXBlIE5hbWUpXG5uZXRfdHlwZVxudG93X251bWJlclxubmV0X2xvY2F0aW9uXG5zdGFuZGFyZF9oYXVsX2ZhY3Rvclxudm9sdW1lX3NhbXBsZWQgKGN1YmljIG1ldGVycylcbnBlcmNlbnRfc29ydGVkICglLzEwMClcbnNhbXBsZV9xdWFsaXR5XG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGluZVxuc3RhdGlvblxudGltZSAoU3RhcnQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNjaWVudGlmaWNfbmFtZVxuY29tbW9uX25hbWVcbml0aXNfdHNuIChJbnRlcmdyYXRlZCBUYXhvbW9taWMgSW5mb3JtYXRpb24gU3lzdGVtIFRheG9ub21pYyBTZXJpYWwgTnVtYmVyKVxuY2FsY29maV9zcGVjaWVzX2NvZGVcbmxhcnZhZV9zdGFnZVxubGFydmFlX3N0YWdlX2NvdW50IChSYXcgY291bnQgb2YgbGFydmFlIGluIHRoZSBzdGFnZSlcbmxhcnZhZV8xMG0yIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGluIHRoZSBzdGFnZSBmb3Igb2JsaXF1ZSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgdGVuIG1ldGVycyBzcXVhcmVkIG9mIHdhdGVyIHNhbXBsZWQpXG5sYXJ2YWVfMTAwMG0zIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGluIHRoZSBzdGFnZSBmb3IgbWFudGEgdG93cywgRmlzaCBsYXJ2YWUgcGVyIDEsMDAwIGN1YmljIG1ldGVycyBvZiB3YXRlciBzYW1wbGVkKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZENhbENPRklscnZzdGdfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2VyZENhbENPRklscnZzdGdfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkQ2FsQ09GSWxydnN0Zy9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvQ2FsQ09GSS9jYWxjb2ZpX2luZm8uaHRtbCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lcmRDYWxDT0ZJbHJ2c3RnLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmRDYWxDT0ZJbHJ2c3RnJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgU1dGU0MiLCAiZXJkQ2FsQ09GSWxydnN0ZyJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmROT0FBaHlkcm9zLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmROT0FBaHlkcm9zIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZE5PQUFoeWRyb3MuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiQ2FsQ09GSSBOT0FBSHlkcm9zIiwgIkh5ZHJvZ3JhcGhpYyBkYXRhIGNvbGxlY3RlZCBieSBidWNrZXQsIENURCwgb3IgMTAtbSBOaXNraW4gYm90dGxlIGFzIHBhcnQgb2YgQ2FsQ09GSSBhbmQgcmVsYXRlZCBjcnVpc2VzLiBOb3RlIHRoYXQgbW9zdCBveHlnZW4gYW5kIHNhbGluaXR5IHZhbHVlcyBpbiB0aGlzIHRhYmxlIGhhdmUgbm90IGJlZW4gY2FsaWJyYXRlZCB3aXRoIHdhdGVyIHNhbXBsZXMuIE1vc3QgdXNlcnMgd2lsbCB3YW50IHRvIHVzZSB0aGUgU2NyaXBwcyBoeWRyb2dyYXBoaWMgZGF0YSBpbnN0ZWFkLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZSAoQ3J1aXNlIENvZGUpXG5zaGlwIChTaGlwIE5hbWUpXG5zaGlwX2NvZGVcbm9yZGVyX29jY3VwaWVkXG50aW1lIChFc3RpbWF0ZWQgZGF0ZXRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5jYXN0X3R5cGVcbnN0YW5kYXJkX2RlcHRoIChtZXRlcnMpXG50ZW1wZXJhdHVyZSAoV2F0ZXIgVGVtcGVyYXR1cmUsIGRlZ3JlZSBDKVxuc2FsaW5pdHkgKHBzdSlcbmRlbnNpdHkgKFdhdGVyIERlbnNpdHksIDEwMDAqKGcvbCAtIDEpKVxub3h5Z2VuIChEaXNzb2x2ZWQgT3h5Z2VuIENvbnRlbnQsIG1sL2wpXG5keW5hbWljX2hlaWdodCAoZHluYW1pYyBtZXRlcilcbnBlcmNlbnRfc2F0dXJhdGlvbiAoUGVyY2VudCBPeHlnZW4gc2F0dXJhdGlvbiwgJSlcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5saW5lXG5zdGF0aW9uXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkTk9BQWh5ZHJvc19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkTk9BQWh5ZHJvc19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmROT0FBaHlkcm9zL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9DYWxDT0ZJL2NhbGNvZmlfaW5mby5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZE5PQUFoeWRyb3MucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZE5PQUFoeWRyb3Mmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBTV0ZTQyIsICJlcmROT0FBaHlkcm9zIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3Npb2NhbGNvZmlIeWRyb0JvdHRsZS5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvc2lvY2FsY29maUh5ZHJvQm90dGxlIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3Npb2NhbGNvZmlIeWRyb0JvdHRsZS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDYWxDT0ZJIFNJTyBIeWRyb2dyYXBoaWMgQm90dGxlIERhdGEiLCAiU0lPIEh5ZHJvZ3JhcGhpYyBkYXRhXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3N0X2NudCAoQ2FzdCBDb3VudClcbmJ0bF9jbnQgKEJvdHRsZSBDb3VudClcbnN0YV9pZCAoTGluZSBhbmQgU3RhdGlvbilcbmRlcHRoX2lkIChCb3R0bGUgSWRlbnRpZmllcilcbmRlcHRobSAoQm90dGxlIERlcHRoLCBtZXRlcnMpXG50X2RlZ2MgKFRlbXBlcmF0dXJlLCBkZWdyZWUgQylcbnNhbGluaXR5IChwc3UpXG5vMm1sX2wgKE1lYXN1cmVkIE94eWdlbiwgbWwvTCBvZiBzZWF3YXRlcilcbnN0aGV0YSAoUG90ZW50aWFsIERlbnNpdHkgb2Ygd2F0ZXIpXG5idGxudW0gKEJvdHRsZSBOdW1iZXIpXG5yZWNpbmQgKERhdGEgRGVzY3JpcHRvciBDb2RlKVxudF9wcmVjIChUZW1wZXJhdHVyZSBQcmVjaXNpb24pXG50X3F1YWwgKFRlbXBlcmF0dXJlIFF1YWxpdHkpXG5zX3ByZWMgKFNhbGluaXR5IFByZWNpc2lvbilcbnNfcXVhbCAoU2FsaW5pdHkgUXVhbGl0eSlcbnBfcXVhbCAoUHJlc3N1cmUgUXVhbGl0eSlcbm9fcXVhbCAoT3h5Z2VuIFByZWNpc2lvbilcbnN0aHRhcSAoUG90ZW50aWFsIERlbnNpdHkgUXVhbGl0eSlcbm8yc2F0cSAoT3h5Z2VuIHNhdHVyYXRpb24gUXVhbGl0eSlcbmNobG9yYSAoQ2hsb3JvcGh5bGwtYSwgdWcvTCBvZiBzZWF3YXRlcilcbmNobHF1YSAoQ2hsb3JvcGh5bGwtYSBxdWFsaXR5KVxucGhhZW9wIChQaGFlb3BpZ21lbnQgQ29uY2VudHJhdGlvbiwgdWcvTCBvZiBzZWF3YXRlcilcbnBoYXF1YSAoUGhhZW9waWdtZW50cyBxdWFsaXR5KVxucG80dWcgKE1lYXN1cmVkIFBob3NwaGF0ZSBDb25jZW50cmF0aW9uLCB1TS9MIG9mIHNlYXdhdGVyKVxucG80cSAoUGhvc3BoYXRlIHF1YWxpdHkpXG5zaW8zdWcgKE1lYXN1cmVkIFNpbGljYXRlIGNvbmNlbnRyYXRpb24sIHVNL0wgb2Ygc2Vhd2F0ZXIpXG5zaW8zcXUgKFNpbGljYXRlIHF1YWxpdHkpXG4uLi4gKDMzIG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3Npb2NhbGNvZmlIeWRyb0JvdHRsZV9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvc2lvY2FsY29maUh5ZHJvQm90dGxlX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3Npb2NhbGNvZmlIeWRyb0JvdHRsZS9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cuY2FsY29maS5vcmcvbmV3LmRhdGEvaW5kZXgucGhwL3JlcG9ydGVkZGF0YS8yMDEzLTA5LTMwLTIzLTIzLTI3L2RhdGFiYXNlLXRhYmxlcy1kZXNjcmlwdGlvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9zaW9jYWxjb2ZpSHlkcm9Cb3R0bGUucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXNpb2NhbGNvZmlIeWRyb0JvdHRsZSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJVQ1NEIFNJTyIsICJzaW9jYWxjb2ZpSHlkcm9Cb3R0bGUiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvc2lvY2FsY29maUh5ZHJvQm90dGxlUmVwb3J0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9zaW9jYWxjb2ZpSHlkcm9Cb3R0bGVSZXBvcnQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvc2lvY2FsY29maUh5ZHJvQm90dGxlUmVwb3J0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkNhbENPRkkgU0lPIEh5ZHJvZ3JhcGhpYyBCb3R0bGUgUmVwb3J0IGRhdGEiLCAiU0lPIEh5ZHJvZ3JhcGhpYyBkYXRhXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3N0X2NudCAoQ2FzdCBDb3VudClcbmJ0bF9jbnQgKEJvdHRsZSBDb3VudClcbnN0YV9pZCAoTGluZSBhbmQgU3RhdGlvbilcbmRlcHRoX2lkIChCb3R0bGUgSWRlbnRpZmllcilcbnJfZGVwdGggKFJlcG9ydGVkIEJvdHRsZSBEZXB0aCwgbWV0ZXJzKVxucl90ZW1wIChSZXBvcnRlZCBUZW1wZXJhdHVyZSwgZGVncmVlIEMpXG5yX3BvdGVtcCAoUmVwb3J0ZWQgUG90ZW50aWFsIFRlbXBlcmF0dXJlLCBkZWdyZWUgQylcbnJfc2FsaW5pdHkgKFJlcG9ydGVkIFNhbGluaXR5LCBwc3UpXG5yX3NpZ21hIChSZXBvcnRlZCBQb3RlbnRpYWwgRGVuc2l0eSBvZiB3YXRlcilcbnJfc3ZhIChSZXBvcnRlZCBTcGVjaWZpYyBWb2x1bWUgQW5vbWFseSwgZGVncmVlIEMpXG5yX2R5bmh0IChSZXBvcnRlZCBEeW5hbWljIEhlaWdodCwgZHluYW1pYyBtZXRlcnMpXG5yX28yIChSZXBvcnRlZCBPeHlnZW4sIG1sL0wgb2Ygc2Vhd2F0ZXIpXG5yX28yc2F0IChSZXBvcnRlZCBPeHlnZW4gU2F0dXJhdGlvbiwgJSlcbnJfc2lvMyAoUmVwb3J0ZWQgU2lsaWNhdGUgQ29uY2VudHJhdGlvbiwgdU0vTCBvZiBzZWF3YXRlcilcbnJfcG80IChSZXBvcnRlZCBQaG9zcGhhdGUgQ29uY2VudHJhdGlvbiwgdU0vTCBvZiBzZWF3YXRlcilcbnJfbm8zIChSZXBvcnRlZCBOaXRyYXRlIENvbmNlbnRyYXRpb24sIHVNL0wgb2Ygc2Vhd2F0ZXIpXG5yX25vMiAoUmVwb3J0ZWQgTml0cml0ZSBDb25jZW50cmF0aW9uLCB1TS9MIG9mIHNlYXdhdGVyKVxucl9jaGxhIChSZXBvcnRlZCBDaGxvcm9waHlsbC1hLCB1Zy9MIG9mIHNlYXdhdGVyKVxucl9waGFlbyAoUmVwb3J0ZWQgUGhhZW9waHl0aW4sIHVnL0wgb2Ygc2Vhd2F0ZXIpXG5yX3ByZXMgKFJlcG9ydGVkIFByZXNzdXJlLCBkYilcbnJfc2FtcCAoU2FtcGxlIE51bWJlcilcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3Npb2NhbGNvZmlIeWRyb0JvdHRsZVJlcG9ydF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvc2lvY2FsY29maUh5ZHJvQm90dGxlUmVwb3J0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3Npb2NhbGNvZmlIeWRyb0JvdHRsZVJlcG9ydC9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cuY2FsY29maS5vcmcvbmV3LmRhdGEvaW5kZXgucGhwL3JlcG9ydGVkZGF0YS8yMDEzLTA5LTMwLTIzLTIzLTI3L2RhdGFiYXNlLXRhYmxlcy1kZXNjcmlwdGlvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9zaW9jYWxjb2ZpSHlkcm9Cb3R0bGVSZXBvcnQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXNpb2NhbGNvZmlIeWRyb0JvdHRsZVJlcG9ydCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJVQ1NEIFNJTyIsICJzaW9jYWxjb2ZpSHlkcm9Cb3R0bGVSZXBvcnQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvc2lvY2FsY29maUh5ZHJvQ2FzdHMuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3Npb2NhbGNvZmlIeWRyb0Nhc3RzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3Npb2NhbGNvZmlIeWRyb0Nhc3RzLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkNhbENPRkkgU0lPIEh5ZHJvZ3JhcGhpYyBDYXN0IERhdGEiLCAiU0lPIEh5ZHJvZ3JhcGhpYyBkYXRhXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3N0X2NudCAoQ2FzdCBDb3VudClcbmNydWlzZV9pZFxuY3J1el9zdGEgKENydWlzZSBJZClcbmRic3RhX2lkIChDYWxDT0ZJIExpbmUgYW5kIFN0YXRpb24pXG5jYXN0X2lkXG5zdGFfaWQgKExpbmUgYW5kIFN0YXRpb24pXG5xdWFydGVyIChRdWFydGVyIG9mIFllYXIpXG5zdGFfY29kZSAoU3RhdGlvbiBUeXBlKVxuZGlzdGFuY2UgKERpc3RhbmNlIGZyb20gc2hvcmUpXG5kYXRlXG55ZWFyXG5tb250aFxuanVsaWFuX2RhdGVcbmp1bGlhbl9kYXlcbnRpbWVfYXNjaWkgKFRpbWUgb2YgQ2FzdClcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubGF0aXR1ZGVfZGVncmVlc1xubGF0aXR1ZGVfbWludXRlc1xubGF0aXR1ZGVfaGVtaXNwaGVyZVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5sb25naXR1ZGVfZGVncmVlc1xubG9uZ2l0dWRlX21pbnV0ZXNcbmxvbmdpdHVkZV9oZW1pc3BoZXJlXG5ycHRfbGluZSAoUmVwb3J0ZWQgTGluZSBOdW1iZXIpXG5zdF9saW5lIChOb21pbmFsIENhbENPRkkgTGluZSlcbmFjX2xpbmUgKEFjdHVhbCBMaW5lIE51bWJlcilcbnJwdF9zdGEgKFJlcG9ydGVkIFN0YXRpb24pXG4uLi4gKDM0IG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3Npb2NhbGNvZmlIeWRyb0Nhc3RzX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9zaW9jYWxjb2ZpSHlkcm9DYXN0c19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9zaW9jYWxjb2ZpSHlkcm9DYXN0cy9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cuY2FsY29maS5vcmcvbmV3LmRhdGEvaW5kZXgucGhwL3JlcG9ydGVkZGF0YS8yMDEzLTA5LTMwLTIzLTIzLTI3L2Nhc3QtdGFibGUtY29sdW1uLWRlc2NyaXB0aW9ucyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9zaW9jYWxjb2ZpSHlkcm9DYXN0cy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9c2lvY2FsY29maUh5ZHJvQ2FzdHMmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiVUNTRCBTSU8iLCAic2lvY2FsY29maUh5ZHJvQ2FzdHMiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSXN0bnMuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklzdG5zIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklzdG5zLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkNhbENPRkkgU3RhdGlvbnMiLCAiU3VtbWFyeSBpbmZvcm1hdGlvbiBhYm91dCBzYW1wbGUgbG9jYXRpb25zIGZvciBOT0FBIENhbENPRkkgYW5kIHJlbGF0ZWQgY3J1aXNlcy5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2UgKENydWlzZSBDb2RlKVxuc2hpcCAoU2hpcCBOYW1lKVxuc2hpcF9jb2RlXG5vcmRlcl9vY2N1cGllZFxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5ib3R0b21fZGVwdGggKGZhdGhvbXMpXG5yZW1hcmtzXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkQ2FsQ09GSXN0bnNfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2VyZENhbENPRklzdG5zX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZENhbENPRklzdG5zL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9DYWxDT0ZJL2NhbGNvZmlfaW5mby5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENhbENPRklzdG5zLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmRDYWxDT0ZJc3RucyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFNXRlNDIiwgImVyZENhbENPRklzdG5zIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRkl0b3d0eXAuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRkl0b3d0eXAiLCAiIiwgIiIsICIiLCAicHVibGljIiwgIkNhbENPRkkgVG93IFR5cGVzIiwgIkRlc2NyaXB0aW9uIG9mIGVhY2ggQ2FsQ09GSSBuZXQgdHlwZSBhbmQgaXRzIGFzc29jaWF0ZWQgYWJicmV2aWF0aW9uIGluIHRoZSBDYWxDT0ZJIGRhdGFiYXNlLlxuXG5jZG1fZGF0YV90eXBlID0gT3RoZXJcblZBUklBQkxFUzpcbm5ldF90eXBlXG5sb25nX25ldF90eXBlXG5kZXNjcmlwdGlvblxuIiwgIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRDYWxDT0ZJdG93dHlwL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9DYWxDT0ZJL2NhbGNvZmlfaW5mby5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENhbENPRkl0b3d0eXAucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZENhbENPRkl0b3d0eXAmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBTV0ZTQyIsICJlcmRDYWxDT0ZJdG93dHlwIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRkl0b3dzLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJdG93cyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJdG93cy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDYWxDT0ZJIFRvd3MiLCAiTG9jYXRpb24sIHBlcmZvcm1hbmNlLCBhbmQgc3VtbWFyeSBpbmZvcm1hdGlvbiBhYm91dCBpbmRpdmlkdWFsIG5ldCB0b3dzLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZSAoQ3J1aXNlIENvZGUpXG5zaGlwIChTaGlwIE5hbWUpXG5zaGlwX2NvZGVcbm9yZGVyX29jY3VwaWVkXG50b3dfdHlwZVxubmV0X3R5cGVcbnRvd19udW1iZXJcbm5ldF9sb2NhdGlvblxudGltZSAoU3RhcnQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnN0YW5kYXJkX2hhdWxfZmFjdG9yXG52b2x1bWVfc2FtcGxlZCAoY3ViaWMgbWV0ZXJzKVxucGVyY2VudF9zb3J0ZWQgKCUvMTAwKVxubWVzaF9zaXplIChOZXQgTWVzaCBTaXplLCBtaWNyb25zKVxudG90YWxfZWdnc1xuc29ydGVkX3BsYW5rdG9uX3ZvbHVtZSAobWwvMTAwMCBtXjMpXG5zYW1wbGVfcXVhbGl0eVxuc21hbGxfcGxhbmt0b25fdm9sdW1lIChtbC8xMDAwIG1eMyBvZiB3YXRlciBzdHJhaW5lZClcbnRvdGFsX3BsYW5rdG9uX3ZvbHVtZSAobWwvMTAwMCBtXjMgb2Ygd2F0ZXIgc3RyYWluZWQpXG50b3RhbF9sYXJ2YWVcbmVuZF90aW1lIChFbmQgVGltZXN0YW1wLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxudG90YWxfanV2ZW5pbGVzX29yX2FkdWx0cyAoVG90YWwgSnV2ZW5pbGUvQWR1bHRzKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxpbmVcbnN0YXRpb25cbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRDYWxDT0ZJdG93c19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkQ2FsQ09GSXRvd3NfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkQ2FsQ09GSXRvd3MvaW5kZXguanNvbiIsICJodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L0NhbENPRkkvY2FsY29maV9pbmZvLmh0bWwiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkQ2FsQ09GSXRvd3MucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZENhbENPRkl0b3dzJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgU1dGU0MiLCAiZXJkQ2FsQ09GSXRvd3MiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZmVkQ2FsTGFuZGluZ3Muc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZlZENhbExhbmRpbmdzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZlZENhbExhbmRpbmdzLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkNhbGlmb3JuaWEgQ29tbWVyY2lhbCBGaXNoIExhbmRpbmdzLCAxOTMxLTE5NzgiLCAiVGhlIEdyb3VuZGZpc2ggQW5hbHlzaXMgVGVhbSBhdCB0aGUgU1dGU0MgRmlzaGVyaWVzIEVjb2xvZ3kgRGl2aXNpb24gKFNhbnRhXG5DcnV6KSBjb21wbGV0ZWQgd29yayBvbiBhIENhbGlmb3JuaWEgY29tbWVyY2lhbCBsYW5kaW5ncyBkYXRhYmFzZSwgd2hpY2hcbmluY2x1ZGVzIGxhbmRpbmdzIGZyb20gMTkzMSB0aHJvdWdoIDIwMDcuIExhbmRpbmdzIGZyb20gMTkzMSB0aHJvdWdoIDE5NjhcbndlcmUgcmVjb3ZlcmVkIHVzaW5nIGZ1bmRzIGFuZCBzZXJ2aWNlcyBwcm92aWRlZCBieSB0aGUgTkVTRElTIENsaW1hdGVcbkRhdGFiYXNlIE1vZGVybml6YXRpb24gUHJvZ3JhbSAoQ0RNUCkuIFRoZSByZWNvdmVyZWQgZGF0YSwgd2hlbiBjb21iaW5lZCB3aXRoXG5tb3JlIHJlY2VudCBsYW5kaW5ncyBlc3RpbWF0ZXMgZnJvbSB0aGUgQ2FsaWZvcm5pYSBDb29wZXJhdGl2ZSBHcm91bmRmaXNoXG5TdXJ2ZXkgZnJvbSAxOTY5IHRvIDIwMDcsIGZvcm1zIG9uZSBvZiB0aGUgbG9uZ2VzdCBkZXRhaWxlZCBjYXRjaCByZWNvcmRzIGluXG50aGUgVVMuIFRoZSAxOTMxLTY4IHBlcmlvZCBpbmNsdWRlcyBtb250aGx5IHN1bW1hcmllcyBvZiBjYXRjaGVzIGJ5IDEwLW1pbnV0ZVxuZ2VvZ3JhcGhpYyBibG9ja3MuICBUaGVzZSBkYXRhIGFyZSBub3cgb3Blbmx5IGF2YWlsYWJsZSB0byB0aGUgcHVibGljIGZvciB1c2VcbmluIHN0b2NrIGFzc2Vzc21lbnRzIGFuZCBtb25pdG9yaW5nIG9mIGNsaW1hdGUgZWZmZWN0cy4gUGVhcnNvbiBpcyBjdXJyZW50bHlcbndvcmtpbmcgd2l0aCB0aGUgQ2FsaWZvcm5pYSBEZXBhcnRtZW50IG9mIEZpc2ggYW5kIEdhbWUgdG8gZXh0ZW5kIHRoZVxuZ2VvZ3JhcGhpYyBzdW1tYXJ5IGluZm9ybWF0aW9uIHRvIG1vcmUgcmVjZW50IHllYXJzLiBBbHNvLCB0aGUgdGF4YSByZXBvcnRlZFxuaW4gdGhlIGhpc3RvcmljYWwgZGF0YSBhcmUgdGhlIFwibWFya2V0IGNhdGVnb3JpZXNcIiB1c2VkIGJ5IGZpc2ggcHJvY2Vzc29ycyxcbmFuZCBtYXkgaW52b2x2ZSBtdWx0aXBsZSBzcGVjaWVzIGdyb3VwaW5ncy4gQSBwcm9qZWN0IGhhcyBiZWVuIGluaXRpYXRlZCB0b1xucmVzb2x2ZSBoaXN0b3JpY2FsIGxhbmRpbmdzIHRvIHByb3ZpZGUgYmVzdCBlc3RpbWF0ZXMgZm9yIGluZGl2aWR1YWwgc3BlY2llcy5cblxuV2hlbiB1c2luZyB0aGlzIGRhdGEgaXQgaXMgY3JpdGljYWwgdG8gdW5kZXJzdGFuZCB0aGF0IGEgbWFya2V0IGNhdGVnb3J5IGlzXG5OT1QgYSBzcGVjaWVzIGNvZGUgLSBpdCBpcyBhIHNvcnQgZ3JvdXAuICBXaGlsZSBsYW5kaW5ncyBpbiBzb21lIG1hcmtldFxuY2F0ZWdvcmllcyBtYXkgY29uc2lzdCBlbnRpcmVseSBvZiB0aGUgc3BlY2llcyBmb3Igd2hpY2ggdGhleSBhcmUgbmFtZWQsXG5sYW5kaW5ncyBpbiBvdGhlciBtYXJrZXQgY2F0ZWdvcmllcyBtYXkgY29udGFpbiBmZXcgb2YgdGhlIHNwZWNpZXMgZm9yIHdoaWNoXG50aGV5IGFyZSBuYW1lZC5cblxuR2VuZXJhbCBOb3RlczpcblRoZSBkYXRhIGZyb20gMTkzMC0xOTMyIGhhcyBhIGxvdCBvZiB1bmtub3duIGJsb2NrIGRhdGEuICBXaGVuIHRoZSB0cmF3bFxubGFuZGluZyBkYXRhIGlzIGVudGVyZWQsIHNvbWUgb2YgdGhpcyBtYXkgYmUgcmVzb2x2ZWQuICBBdCB0aGUgc2FtZSB0aW1lLFxuc29tZSBnZWFyIGRhdGEgd2lsbCBiZSBhdmFpbGFibGUuXG5cbldoZW4gU291cmNlIENvcnAgZmluaXNoZXMgZGF0YSBlbnRyeSBvZiB0aGUgbGFuZGluZyByZWNlaXB0IGRhdGEsIGdlYXIgY29kZVxuZGF0YSB3aWxsIGJlIGF2YWlsYWJsZSBmcm9tIDE5NTEtMTk2ODsgaG93ZXZlciwgdGhpcyB3aWxsIG5vdCBiZSBjb21wbGV0ZWRcbnVudGlsIGFyb3VuZCAyMDExLlxuXG5CbG9jayBNYXBzOiBodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L1BhQ09PUy9ta3RfY2F0Y2gvY2FfbGFuZGluZ3NfaW5mby5odG1sXG5EYXRhIFNvdXJjZTogQ2FsaWZvcm5pYSBEZXBhcnRtZW50IG9mIEZpc2ggJiBHYW1lLlxuRGF0YSBBc3NlbWJseTogTk9BQSBTV0ZTQyBGRUQ7IENvbnRhY3Q6IERvbi5QZWFyc29uQG5vYWEuZ292XG5cbmNkbV9kYXRhX3R5cGUgPSBPdGhlclxuVkFSSUFCTEVTOlxubWFya2V0X2NhdGVnb3J5XG4uLi4gKDEzIG1vcmUgdmFyaWFibGVzKVxuIiwgIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9mZWRDYWxMYW5kaW5ncy9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvUGFDT09TL21rdF9jYXRjaCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9mZWRDYWxMYW5kaW5ncy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZmVkQ2FsTGFuZGluZ3Mmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBTV0ZTQyBGRUQiLCAiZmVkQ2FsTGFuZGluZ3MiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ0FNYXJDYXRMTS5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ0FNYXJDYXRMTSIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDQU1hckNhdExNLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkNhbGlmb3JuaWEgRmlzaCBNYXJrZXQgQ2F0Y2ggTGFuZGluZ3MsIExvbmcgTGlzdCwgMTkyOC0yMDAyLCBNb250aGx5IiwgIkRhdGFiYXNlIG9mIGZpc2ggYW5kIGludmVydGVicmF0ZXMgY2F1Z2h0IG9mZiBDYWxpZm9ybmlhIGFuZCBsYW5kZWQgaW4gQ2FsaWZvcm5pYSwgaW5jbHVkaW5nIGNvbW1lcmNpYWwgZnJlc2h3YXRlciBjYXRjaGVzIGluIENhbGlmb3JuaWEgdGhyb3VnaCBidXQgbm90IGFmdGVyIDE5NzEgYW5kIHNvbWUgbWFyaWN1bHR1cmVkIHNoZWxsZmlzaCBzdWNoIGFzIG95c3RlcnMgdGhyb3VnaCAxOTgwLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9sYXNfZmlzaDEvZG9jL25hbWVzX2Rlc2NyaWJlLmh0bWwgYW5kXG5odHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L2xhc19maXNoMS9kb2MvbWFya2V0bGlzdC5odG1sIC5cblxuY2RtX2RhdGFfdHlwZSA9IE90aGVyXG5WQVJJQUJMRVM6XG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxueWVhclxuZmlzaCAoRmlzaCBOYW1lKVxucG9ydFxubGFuZGluZ3MgKHBvdW5kcylcbiIsICIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkQ0FNYXJDYXRMTS9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvbGFzX2Zpc2gxL2RvYy9uYW1lc19kZXNjcmliZS5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENBTWFyQ2F0TE0ucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZENBTWFyQ2F0TE0mc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiQ0EgREZHLCBOT0FBIEVSRCIsICJlcmRDQU1hckNhdExNIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENBTWFyQ2F0TFkuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENBTWFyQ2F0TFkiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ0FNYXJDYXRMWS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDYWxpZm9ybmlhIEZpc2ggTWFya2V0IENhdGNoIExhbmRpbmdzLCBMb25nIExpc3QsIDE5MjgtMjAwMiwgWWVhcmx5IiwgIkRhdGFiYXNlIG9mIGZpc2ggYW5kIGludmVydGVicmF0ZXMgY2F1Z2h0IG9mZiBDYWxpZm9ybmlhIGFuZCBsYW5kZWQgaW4gQ2FsaWZvcm5pYSwgaW5jbHVkaW5nIGNvbW1lcmNpYWwgZnJlc2h3YXRlciBjYXRjaGVzIGluIENhbGlmb3JuaWEgdGhyb3VnaCBidXQgbm90IGFmdGVyIDE5NzEgYW5kIHNvbWUgbWFyaWN1bHR1cmVkIHNoZWxsZmlzaCBzdWNoIGFzIG95c3RlcnMgdGhyb3VnaCAxOTgwLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9sYXNfZmlzaDEvZG9jL25hbWVzX2Rlc2NyaWJlLmh0bWwgYW5kXG5odHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L2xhc19maXNoMS9kb2MvbWFya2V0bGlzdC5odG1sIC5cblxuVGhpcyBkYXRhc2V0IGhhcyB0aGUgc3VtcyBvZiB0aGUgbW9udGhseSB2YWx1ZXMgZm9yIGVhY2ggY2FsZW5kYXIgeWVhci5cblxuY2RtX2RhdGFfdHlwZSA9IE90aGVyXG5WQVJJQUJMRVM6XG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxueWVhclxuZmlzaCAoRmlzaCBOYW1lKVxucG9ydFxubGFuZGluZ3MgKHBvdW5kcylcbiIsICIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkQ0FNYXJDYXRMWS9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvbGFzX2Zpc2gxL2RvYy9uYW1lc19kZXNjcmliZS5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENBTWFyQ2F0TFkucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZENBTWFyQ2F0TFkmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiQ0EgREZHLCBOT0FBIEVSRCIsICJlcmRDQU1hckNhdExZIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENBTWFyQ2F0U00uc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENBTWFyQ2F0U00iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ0FNYXJDYXRTTS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDYWxpZm9ybmlhIEZpc2ggTWFya2V0IENhdGNoIExhbmRpbmdzLCBTaG9ydCBMaXN0LCAxOTI4LTIwMDIsIE1vbnRobHkiLCAiRGF0YWJhc2Ugb2YgZmlzaCBhbmQgaW52ZXJ0ZWJyYXRlcyBjYXVnaHQgb2ZmIENhbGlmb3JuaWEgYW5kIGxhbmRlZCBpbiBDYWxpZm9ybmlhLCBpbmNsdWRpbmcgY29tbWVyY2lhbCBmcmVzaHdhdGVyIGNhdGNoZXMgaW4gQ2FsaWZvcm5pYSB0aHJvdWdoIGJ1dCBub3QgYWZ0ZXIgMTk3MSBhbmQgc29tZSBtYXJpY3VsdHVyZWQgc2hlbGxmaXNoIHN1Y2ggYXMgb3lzdGVycyB0aHJvdWdoIDE5ODAuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L2xhc19maXNoMS9kb2MvbmFtZXNfZGVzY3JpYmUuaHRtbCBhbmRcbmh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvbGFzX2Zpc2gxL2RvYy9tYXJrZXRsaXN0Lmh0bWwgLlxuXG5jZG1fZGF0YV90eXBlID0gT3RoZXJcblZBUklBQkxFUzpcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG55ZWFyXG5maXNoIChGaXNoIE5hbWUpXG5wb3J0XG5sYW5kaW5ncyAocG91bmRzKVxuIiwgIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRDQU1hckNhdFNNL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9sYXNfZmlzaDEvZG9jL25hbWVzX2Rlc2NyaWJlLmh0bWwiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkQ0FNYXJDYXRTTS5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkQ0FNYXJDYXRTTSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJDQSBERkcsIE5PQUEgRVJEIiwgImVyZENBTWFyQ2F0U00iXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ0FNYXJDYXRTWS5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ0FNYXJDYXRTWSIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDQU1hckNhdFNZLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkNhbGlmb3JuaWEgRmlzaCBNYXJrZXQgQ2F0Y2ggTGFuZGluZ3MsIFNob3J0IExpc3QsIDE5MjgtMjAwMiwgWWVhcmx5IiwgIkRhdGFiYXNlIG9mIGZpc2ggYW5kIGludmVydGVicmF0ZXMgY2F1Z2h0IG9mZiBDYWxpZm9ybmlhIGFuZCBsYW5kZWQgaW4gQ2FsaWZvcm5pYSwgaW5jbHVkaW5nIGNvbW1lcmNpYWwgZnJlc2h3YXRlciBjYXRjaGVzIGluIENhbGlmb3JuaWEgdGhyb3VnaCBidXQgbm90IGFmdGVyIDE5NzEgYW5kIHNvbWUgbWFyaWN1bHR1cmVkIHNoZWxsZmlzaCBzdWNoIGFzIG95c3RlcnMgdGhyb3VnaCAxOTgwLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9sYXNfZmlzaDEvZG9jL25hbWVzX2Rlc2NyaWJlLmh0bWwgYW5kXG5odHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L2xhc19maXNoMS9kb2MvbWFya2V0bGlzdC5odG1sIC5cblxuVGhpcyBkYXRhc2V0IGhhcyB0aGUgc3VtcyBvZiB0aGUgbW9udGhseSB2YWx1ZXMgZm9yIGVhY2ggY2FsZW5kYXIgeWVhci5cblxuY2RtX2RhdGFfdHlwZSA9IE90aGVyXG5WQVJJQUJMRVM6XG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxueWVhclxuZmlzaCAoRmlzaCBOYW1lKVxucG9ydFxubGFuZGluZ3MgKHBvdW5kcylcbiIsICIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkQ0FNYXJDYXRTWS9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvbGFzX2Zpc2gxL2RvYy9uYW1lc19kZXNjcmliZS5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENBTWFyQ2F0U1kucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZENBTWFyQ2F0U1kmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiQ0EgREZHLCBOT0FBIEVSRCIsICJlcmRDQU1hckNhdFNZIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENpbnBLZm1ULnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDaW5wS2ZtVCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDaW5wS2ZtVC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDaGFubmVsIElzbGFuZHMsIEtlbHAgRm9yZXN0IE1vbml0b3JpbmcsIFNlYSBUZW1wZXJhdHVyZSwgMTk5My0yMDA3IiwgIlRoaXMgZGF0YXNldCBmcm9tIHRoZSBDaGFubmVsIElzbGFuZHMgTmF0aW9uYWwgUGFyaydzIEtlbHAgRm9yZXN0IE1vbml0b3JpbmcgUHJvZ3JhbSBoYXMgc3VidGlkYWwgdGVtcGVyYXR1cmUgZGF0YSB0YWtlbiBhdCBwZXJtYW5lbnQgbW9uaXRvcmluZyBzaXRlcy4gIFNpbmNlIDE5OTMsIHJlbW90ZSB0ZW1wZXJhdHVyZSBsb2dnZXJzIG1hbnVmYWN0dXJlZCBieSBPbnNldCBDb21wdXRlciBDb3Jwb3JhdGlvbiB3ZXJlIGRlcGxveWVkIGF0IGVhY2ggc2l0ZSBhcHByb3hpbWF0ZWx5IDEwLTIwIGNtIGZyb20gdGhlIGJvdHRvbSBpbiBhIHVuZGVyd2F0ZXIgaG91c2luZy4gIFNpbmNlIDE5OTMsIHRocmVlIG1vZGVscyBvZiB0ZW1wZXJhdHVyZSBsb2dnZXJzIChIb2JvVGVtcCAodG0pLCBTdG93QXdheSAoUikgYW5kIFRpZGJpdChSKSkgd2VyZSB1c2VkIHRvIGNvbGxlY3QgdGVtcGVyYXR1cmUgZGF0YSBldmVyeSAxLTUgaG91cnMgZGVwZW5kaW5nIG9uIHRoZSBtb2RlbCB1c2VkLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuc3RhdGlvblxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmRlcHRoIChtKVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnRlbXBlcmF0dXJlIChTZWEgV2F0ZXIgVGVtcGVyYXR1cmUsIGRlZ3JlZV9DKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZENpbnBLZm1UX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRDaW5wS2ZtVF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRDaW5wS2ZtVC9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cubnBzLmdvdi9jaGlzL25hdHVyZXNjaWVuY2UvaW5kZXguaHRtIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENpbnBLZm1ULnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmRDaW5wS2ZtVCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJDSU5QIiwgImVyZENpbnBLZm1UIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENpbnBLZm1TRk5ILnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDaW5wS2ZtU0ZOSCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDaW5wS2ZtU0ZOSC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDaGFubmVsIElzbGFuZHMsIEtlbHAgRm9yZXN0IE1vbml0b3JpbmcsIFNpemUgYW5kIEZyZXF1ZW5jeSwgTmF0dXJhbCBIYWJpdGF0LCAxOTg1LTIwMDciLCAiVGhpcyBkYXRhc2V0IGhhcyBtZWFzdXJlbWVudHMgb2YgdGhlIHNpemUgb2Ygc2VsZWN0ZWQgYW5pbWFsIHNwZWNpZXMgYXQgc2VsZWN0ZWQgbG9jYXRpb25zIGluIHRoZSBDaGFubmVsIElzbGFuZHMgTmF0aW9uYWwgUGFyay4gU2FtcGxpbmcgaXMgY29uZHVjdGVkIGFubnVhbGx5IGJldHdlZW4gdGhlIG1vbnRocyBvZiBNYXktT2N0b2Jlciwgc28gdGhlIFRpbWUgZGF0YSBpbiB0aGlzIGZpbGUgaXMgSnVseSAxIG9mIGVhY2ggeWVhciAoYSBub21pbmFsIHZhbHVlKS4gVGhlIHNpemUgZnJlcXVlbmN5IG1lYXN1cmVtZW50cyB3ZXJlIHRha2VuIHdpdGhpbiAxMCBtZXRlcnMgb2YgdGhlIHRyYW5zZWN0IGxpbmUgYXQgZWFjaCBzaXRlLiAgRGVwdGhzIGF0IHRoZSBzaXRlIHZhcnkgc29tZSwgYnV0IHdlIGRlc2NyaWJlIHRoZSBkZXB0aCBvZiB0aGUgc2l0ZSBhbG9uZyB0aGUgdHJhbnNlY3QgbGluZSB3aGVyZSB0aGF0IHN0YXRpb24ncyB0ZW1wZXJhdHVyZSBsb2dnZXIgaXMgbG9jYXRlZCwgYSB0eXBpY2FsIGRlcHRoIGZvciB0aGUgc2l0ZS5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmlkIChTdGF0aW9uIElkZW50aWZpZXIpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxuZGVwdGggKG0pXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuY29tbW9uX25hbWVcbnNwZWNpZXNfbmFtZVxuc2l6ZSAobW0pXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkQ2lucEtmbVNGTkhfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2VyZENpbnBLZm1TRk5IX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZENpbnBLZm1TRk5IL2luZGV4Lmpzb24iLCAiaHR0cDovL3d3dy5ucHMuZ292L2NoaXMvbmF0dXJlc2NpZW5jZS9pbmRleC5odG0iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkQ2lucEtmbVNGTkgucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZENpbnBLZm1TRk5IJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkNJTlAiLCAiZXJkQ2lucEtmbVNGTkgiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2lucEtmbTFRLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDaW5wS2ZtMVEiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2lucEtmbTFRLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkNoYW5uZWwgSXNsYW5kcywgS2VscCBGb3Jlc3QgTW9uaXRvcmluZywgU3VydmV5LCAxbSBRdWFkcmF0LCAxOTgyLTIwMDciLCAiVGhpcyBkYXRhc2V0IGZyb20gdGhlIENoYW5uZWwgSXNsYW5kcyBOYXRpb25hbCBQYXJrJ3MgS2VscCBGb3Jlc3QgTW9uaXRvcmluZyBQcm9ncmFtIGhhcyBtZWFzdXJlbWVudHMgb2YgdGhlIGFidW5kYW5jZSAoZGVuc2l0eSkgb2YgcmVsYXRpdmVseSBhYnVuZGFudCBzZWxlY3RlZCBzZWRlbnRhcnkgaW5kaWNhdG9yIHNwZWNpZXMuICBUaGUgc3VtbWFyeSBkYXRhIHByZXNlbnRlZCBoZXJlIHJlcHJlc2VudHMgdGhlIG1lYW4gZGVuc2l0eSBwZXIgc3F1YXJlIG1ldGVyLiBTYW1wbGluZyBpcyBjb25kdWN0ZWQgYW5udWFsbHkgYmV0d2VlbiB0aGUgbW9udGhzIG9mIE1heS1PY3RvYmVyLCBzbyB0aGUgVGltZSBkYXRhIGluIHRoaXMgZmlsZSBpcyBKdWx5IDEgb2YgZWFjaCB5ZWFyIChhIG5vbWluYWwgdmFsdWUpLiBUaGUgYWN0dWFsIG1lYXN1cmVtZW50cyB3ZXJlIHRha2VuIGF0IHZhcmlvdXMgZGVwdGhzLCBzbyB0aGUgRGVwdGggZGF0YSBpbiB0aGlzIGZpbGUgaXMgdGhlIGRlcHRoIG9mIHRoZSBzdGF0aW9uJ3MgdGVtcGVyYXR1cmUgbG9nZ2VyLCB3aGljaCBpcyBhIHR5cGljYWwgZGVwdGguXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5zdGF0aW9uXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxuZGVwdGggKG0pXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuQWdhcnVtX2ZpbWJyaWF0dW1fYWR1bHRfTWVhbl9EZW5zaXR5IChtLTIpXG5BZ2FydW1fZmltYnJpYXR1bV9hZHVsdF9TdGREZXZcbkFnYXJ1bV9maW1icmlhdHVtX2FkdWx0X1N0ZEVyclxuQWdhcnVtX2ZpbWJyaWF0dW1fanV2ZW5pbGVfTWVhbl9EZW5zaXR5IChtLTIpXG5BZ2FydW1fZmltYnJpYXR1bV9qdXZlbmlsZV9TdGREZXZcbkFnYXJ1bV9maW1icmlhdHVtX2p1dmVuaWxlX1N0ZEVyclxuQWxsb2NsaW51c19ob2xkZXJpX01lYW5fRGVuc2l0eSAobS0yKVxuQWxsb2NsaW51c19ob2xkZXJpX1N0ZERldlxuQWxsb2NsaW51c19ob2xkZXJpX1N0ZEVyclxuQXBseXNpYV9jYWxpZm9ybmljYV9NZWFuX0RlbnNpdHkgKG0tMilcbkFwbHlzaWFfY2FsaWZvcm5pY2FfU3RkRGV2XG5BcGx5c2lhX2NhbGlmb3JuaWNhX1N0ZEVyclxuQXN0ZXJpbmFfbWluaWF0YV9NZWFuX0RlbnNpdHkgKG0tMilcbkFzdGVyaW5hX21pbmlhdGFfU3RkRGV2XG5Bc3RlcmluYV9taW5pYXRhX1N0ZEVyclxuQ2VudHJvc3RlcGhhbnVzX2Nvcm9uYXR1c19NZWFuX0RlbnNpdHkgKG0tMilcbkNlbnRyb3N0ZXBoYW51c19jb3JvbmF0dXNfU3RkRGV2XG4uLi4gKDkxIG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZENpbnBLZm0xUV9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkQ2lucEtmbTFRX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZENpbnBLZm0xUS9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cubnBzLmdvdi9jaGlzL25hdHVyZXNjaWVuY2UvaW5kZXguaHRtIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENpbnBLZm0xUS5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkQ2lucEtmbTFRJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkNJTlAiLCAiZXJkQ2lucEtmbTFRIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENpbnBLZm01US5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2lucEtmbTVRIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENpbnBLZm01US5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDaGFubmVsIElzbGFuZHMsIEtlbHAgRm9yZXN0IE1vbml0b3JpbmcsIFN1cnZleSwgNW0gUXVhZHJhdCwgMTk5Ni0yMDA3IiwgIlRoaXMgZGF0YXNldCBmcm9tIHRoZSBDaGFubmVsIElzbGFuZHMgTmF0aW9uYWwgUGFyaydzIEtlbHAgRm9yZXN0IE1vbml0b3JpbmcgUHJvZ3JhbSBoYXMgbWVhc3VyZW1lbnRzIG9mIHRoZSBhYnVuZGFuY2Ugb2Ygc2VsZWN0ZWQgcmFyZSwgY2x1bXBlZCwgc2VkZW50YXJ5IGluZGljYXRvciBzcGVjaWVzLiBUaGUgc3VtbWFyeSBkYXRhIHByZXNlbnRlZCBoZXJlIHJlcHJlc2VudHMgdGhlIG1lYW4gZGVuc2l0eSBwZXIgc3F1YXJlIG1ldGVyLiBTYW1wbGluZyBpcyBjb25kdWN0ZWQgYW5udWFsbHkgYmV0d2VlbiB0aGUgbW9udGhzIG9mIE1heS1PY3RvYmVyLCBzbyB0aGUgVGltZSBkYXRhIGluIHRoaXMgZmlsZSBpcyBKdWx5IDEgb2YgZWFjaCB5ZWFyIChhIG5vbWluYWwgdmFsdWUpLiBUaGUgb3JpZ2luYWwgbWVhc3VyZW1lbnRzIHdlcmUgdGFrZW4gYXQgdmFyaW91cyBkZXB0aHMsIHNvIHRoZSBEZXB0aCBkYXRhIGluIHRoaXMgZmlsZSBpcyB0aGUgZGVwdGggb2YgdGhlIHN0YXRpb24ncyB0ZW1wZXJhdHVyZSBsb2dnZXIsIHdoaWNoIGlzIGEgdHlwaWNhbCBkZXB0aC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbnN0YXRpb25cbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5kZXB0aCAobSlcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5NYWNyb2N5c3Rpc19weXJpZmVyYV9BZHVsdF9NZWFuX0RlbnNpdHkgKG0tMilcbk1hY3JvY3lzdGlzX3B5cmlmZXJhX0FkdWx0X1N0ZERldlxuTWFjcm9jeXN0aXNfcHlyaWZlcmFfQWR1bHRfU3RkRXJyXG5NYWNyb2N5c3Rpc19weXJpZmVyYV9TdWJhZHVsdF9NZWFuX0RlbnNpdHkgKG0tMilcbk1hY3JvY3lzdGlzX3B5cmlmZXJhX1N1YmFkdWx0X1N0ZERldlxuTWFjcm9jeXN0aXNfcHlyaWZlcmFfU3ViYWR1bHRfU3RkRXJyXG5QaXNhc3Rlcl9naWdhbnRldXNfTWVhbl9EZW5zaXR5IChtLTIpXG5QaXNhc3Rlcl9naWdhbnRldXNfU3RkRGV2XG5QaXNhc3Rlcl9naWdhbnRldXNfU3RkRXJyXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkQ2lucEtmbTVRX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRDaW5wS2ZtNVFfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkQ2lucEtmbTVRL2luZGV4Lmpzb24iLCAiaHR0cDovL3d3dy5ucHMuZ292L2NoaXMvbmF0dXJlc2NpZW5jZS9pbmRleC5odG0iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkQ2lucEtmbTVRLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmRDaW5wS2ZtNVEmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiQ0lOUCIsICJlcmRDaW5wS2ZtNVEiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2lucEtmbUJULnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDaW5wS2ZtQlQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2lucEtmbUJULmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkNoYW5uZWwgSXNsYW5kcywgS2VscCBGb3Jlc3QgTW9uaXRvcmluZywgU3VydmV5LCBCYW5kIFRyYW5zZWN0LCAxOTgzLTIwMDciLCAiVGhpcyBkYXRhc2V0IGZyb20gdGhlIENoYW5uZWwgSXNsYW5kcyBOYXRpb25hbCBQYXJrJ3MgS2VscCBGb3Jlc3QgTW9uaXRvcmluZyBQcm9ncmFtIGhhcyBtZWFzdXJlbWVudHMgb2YgdGhlIGFidW5kYW5jZSBhbmQgZGlzdHJpYnV0aW9uIG9mIHJhcmUgYW5kIGNsdW1wZWQgb3JnYW5pc21zIG5vdCBhZGVxdWF0ZWx5IHNhbXBsZWQgYnkgcXVhZHJhdHMuIFRoZSBzdW1tYXJ5IGRhdGEgcHJlc2VudGVkIGhlcmUgcmVwcmVzZW50cyB0aGUgbWVhbiBkZW5zaXR5IHBlciBzcXVhcmUgbWV0ZXIuIFNhbXBsaW5nIGlzIGNvbmR1Y3RlZCBhbm51YWxseSBiZXR3ZWVuIHRoZSBtb250aHMgb2YgTWF5LU9jdG9iZXIsIHNvIHRoZSBUaW1lIGRhdGEgaW4gdGhpcyBmaWxlIGlzIEp1bHkgMSBvZiBlYWNoIHllYXIgKGEgbm9taW5hbCB2YWx1ZSkuIFRoZSBhY3R1YWwgbWVhc3VyZW1lbnRzIHdlcmUgdGFrZW4gYXQgdmFyaW91cyBkZXB0aHMsIHNvIHRoZSBEZXB0aCBkYXRhIGluIHRoaXMgZmlsZSBpcyB0aGUgZGVwdGggb2YgdGhlIHN0YXRpb24ncyB0ZW1wZXJhdHVyZSBsb2dnZXIsIHdoaWNoIGlzIGEgdHlwaWNhbCBkZXB0aC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbnN0YXRpb25cbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5kZXB0aCAobSlcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5BcGx5c2lhX2NhbGlmb3JuaWNhX01lYW5fRGVuc2l0eSAobS0yKVxuQXBseXNpYV9jYWxpZm9ybmljYV9TdGREZXZcbkFwbHlzaWFfY2FsaWZvcm5pY2FfU3RkRXJyXG5DcmFzc2Vkb21hX2dpZ2FudGV1bV9NZWFuX0RlbnNpdHkgKG0tMilcbkNyYXNzZWRvbWFfZ2lnYW50ZXVtX1N0ZERldlxuQ3Jhc3NlZG9tYV9naWdhbnRldW1fU3RkRXJyXG5IYWxpb3Rpc19jb3JydWdhdGFfTWVhbl9EZW5zaXR5IChtLTIpXG5IYWxpb3Rpc19jb3JydWdhdGFfU3RkRGV2XG5IYWxpb3Rpc19jb3JydWdhdGFfU3RkRXJyXG5IYWxpb3Rpc19mdWxnZW5zX01lYW5fRGVuc2l0eSAobS0yKVxuSGFsaW90aXNfZnVsZ2Vuc19TdGREZXZcbkhhbGlvdGlzX2Z1bGdlbnNfU3RkRXJyXG5IYWxpb3Rpc19ydWZlc2NlbnNfTWVhbl9EZW5zaXR5IChtLTIpXG5IYWxpb3Rpc19ydWZlc2NlbnNfU3RkRGV2XG5IYWxpb3Rpc19ydWZlc2NlbnNfU3RkRXJyXG5LZWxsZXRpYV9rZWxsZXRpaV9NZWFuX0RlbnNpdHkgKG0tMilcbktlbGxldGlhX2tlbGxldGlpX1N0ZERldlxuLi4uICgzMSBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRDaW5wS2ZtQlRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2VyZENpbnBLZm1CVF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRDaW5wS2ZtQlQvaW5kZXguanNvbiIsICJodHRwOi8vd3d3Lm5wcy5nb3YvY2hpcy9uYXR1cmVzY2llbmNlL2luZGV4Lmh0bSIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lcmRDaW5wS2ZtQlQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZENpbnBLZm1CVCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJDSU5QIiwgImVyZENpbnBLZm1CVCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDaW5wS2ZtRlQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENpbnBLZm1GVCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDaW5wS2ZtRlQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiQ2hhbm5lbCBJc2xhbmRzLCBLZWxwIEZvcmVzdCBNb25pdG9yaW5nLCBTdXJ2ZXksIEZpc2ggVHJhbnNlY3QsIDE5ODUtMjAwNyIsICJUaGlzIGRhdGFzZXQgZnJvbSB0aGUgQ2hhbm5lbCBJc2xhbmRzIE5hdGlvbmFsIFBhcmsncyBLZWxwIEZvcmVzdCBNb25pdG9yaW5nIFByb2dyYW0gaGFzIG1lYXN1cmVtZW50cyBvZiB0aGUgYWJ1bmRhbmNlIG9mIGZpc2ggc3BlY2llcy4gVGhlIG9yaWdpbmFsIG1lYXN1cmVtZW50cyB3ZXJlIHRha2VuIGF0IHZhcmlvdXMgZGVwdGhzLCBzbyB0aGUgRGVwdGggZGF0YSBpbiB0aGlzIGZpbGUgaXMgdGhlIGRlcHRoIG9mIHRoZSBzdGF0aW9uJ3MgdGVtcGVyYXR1cmUgbG9nZ2VyLCB3aGljaCBpcyBhIHR5cGljYWwgZGVwdGguXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5zdGF0aW9uXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxuZGVwdGggKG0pXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuQ2hyb21pc19wdW5jdGlwaW5uaXNfQWR1bHQgKE51bWJlciBvZiBDaHJvbWlzIHB1bmN0aXBpbm5pcyBBZHVsdCwgcGVyIDEwMG1YMm1YMzBtIHRyYW5zZWN0KVxuQ2hyb21pc19wdW5jdGlwaW5uaXNfSnV2ZW5pbGUgKE51bWJlciBvZiBDaHJvbWlzIHB1bmN0aXBpbm5pcyBKdXZlbmlsZSwgcGVyIDEwMG1YMm1YMzBtIHRyYW5zZWN0KVxuRGFtYWxpY2h0aHlzX3ZhY2NhX0FkdWx0IChOdW1iZXIgb2YgRGFtYWxpY2h0aHlzIHZhY2NhIEFkdWx0LCBwZXIgMTAwbVgybVgzMG0gdHJhbnNlY3QpXG5EYW1hbGljaHRoeXNfdmFjY2FfSnV2ZW5pbGUgKE51bWJlciBvZiBEYW1hbGljaHRoeXMgdmFjY2EgSnV2ZW5pbGUsIHBlciAxMDBtWDJtWDMwbSB0cmFuc2VjdClcbkVtYmlvdG9jYV9qYWNrc29uaV9BZHVsdCAoTnVtYmVyIG9mIEVtYmlvdG9jYSBqYWNrc29uaSBBZHVsdCwgcGVyIDEwMG1YMm1YMzBtIHRyYW5zZWN0KVxuRW1iaW90b2NhX2phY2tzb25pX0p1dmVuaWxlIChOdW1iZXIgb2YgRW1iaW90b2NhIGphY2tzb25pIEp1dmVuaWxlLCBwZXIgMTAwbVgybVgzMG0gdHJhbnNlY3QpXG5FbWJpb3RvY2FfbGF0ZXJhbGlzX0FkdWx0IChOdW1iZXIgb2YgRW1iaW90b2NhIGxhdGVyYWxpcyBBZHVsdCwgcGVyIDEwMG1YMm1YMzBtIHRyYW5zZWN0KVxuRW1iaW90b2NhX2xhdGVyYWxpc19KdXZlbmlsZSAoTnVtYmVyIG9mIEVtYmlvdG9jYSBsYXRlcmFsaXMgSnV2ZW5pbGUsIHBlciAxMDBtWDJtWDMwbSB0cmFuc2VjdClcbkdpcmVsbGFfbmlncmljYW5zX0FkdWx0IChOdW1iZXIgb2YgR2lyZWxsYSBuaWdyaWNhbnMgQWR1bHQsIHBlciAxMDBtWDJtWDMwbSB0cmFuc2VjdClcbkdpcmVsbGFfbmlncmljYW5zX0p1dmVuaWxlIChOdW1iZXIgb2YgR2lyZWxsYSBuaWdyaWNhbnMgSnV2ZW5pbGUsIHBlciAxMDBtWDJtWDMwbSB0cmFuc2VjdClcbkhhbGljaG9lcmVzX3NlbWljaW5jdHVzX0ZlbWFsZSAoTnVtYmVyIG9mIEhhbGljaG9lcmVzIHNlbWljaW5jdHVzIEZlbWFsZSwgcGVyIDEwMG1YMm1YMzBtIHRyYW5zZWN0KVxuSGFsaWNob2VyZXNfc2VtaWNpbmN0dXNfTWFsZSAoTnVtYmVyIG9mIEhhbGljaG9lcmVzIHNlbWljaW5jdHVzIE1hbGUsIHBlciAxMDBtWDJtWDMwbSB0cmFuc2VjdClcbkh5cHN5cG9wc19ydWJpY3VuZHVzX0FkdWx0IChOdW1iZXIgb2YgSHlwc3lwb3BzIHJ1YmljdW5kdXMgQWR1bHQsIHBlciAxMDBtWDJtWDMwbSB0cmFuc2VjdClcbkh5cHN5cG9wc19ydWJpY3VuZHVzX0p1dmVuaWxlIChOdW1iZXIgb2YgSHlwc3lwb3BzIHJ1YmljdW5kdXMgSnV2ZW5pbGUsIHBlciAxMDBtWDJtWDMwbSB0cmFuc2VjdClcbk94eWp1bGlzX2NhbGlmb3JuaWNhX0FkdWx0IChOdW1iZXIgb2YgT3h5anVsaXMgY2FsaWZvcm5pY2EgQWR1bHQsIHBlciAxMDBtWDJtWDMwbSB0cmFuc2VjdClcbk94eWp1bGlzX2NhbGlmb3JuaWNhX0p1dmVuaWxlIChOdW1iZXIgb2YgT3h5anVsaXMgY2FsaWZvcm5pY2EgSnV2ZW5pbGUsIHBlciAxMDBtWDJtWDMwbSB0cmFuc2VjdClcblBhcmFsYWJyYXhfY2xhdGhyYXR1c19BZHVsdCAoTnVtYmVyIG9mIFBhcmFsYWJyYXggY2xhdGhyYXR1cyBBZHVsdCwgcGVyIDEwMG1YMm1YMzBtIHRyYW5zZWN0KVxuUGFyYWxhYnJheF9jbGF0aHJhdHVzX0p1dmVuaWxlIChOdW1iZXIgb2YgUGFyYWxhYnJheCBjbGF0aHJhdHVzIEp1dmVuaWxlLCBwZXIgMTAwbVgybVgzMG0gdHJhbnNlY3QpXG5TZWJhc3Rlc19hdHJvdmlyZW5zX0FkdWx0IChOdW1iZXIgb2YgU2ViYXN0ZXMgYXRyb3ZpcmVucyBBZHVsdCwgcGVyIDEwMG1YMm1YMzBtIHRyYW5zZWN0KVxuLi4uICg4IG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZENpbnBLZm1GVF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkQ2lucEtmbUZUX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZENpbnBLZm1GVC9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cubnBzLmdvdi9jaGlzL25hdHVyZXNjaWVuY2UvaW5kZXguaHRtIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENpbnBLZm1GVC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkQ2lucEtmbUZUJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkNJTlAiLCAiZXJkQ2lucEtmbUZUIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENpbnBLZm1SUEMuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENpbnBLZm1SUEMiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2lucEtmbVJQQy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDaGFubmVsIElzbGFuZHMsIEtlbHAgRm9yZXN0IE1vbml0b3JpbmcsIFN1cnZleSwgUmFuZG9tIFBvaW50IENvbnRhY3QsIDE5ODItMjAwNyIsICJUaGlzIGRhdGFzZXQgZnJvbSB0aGUgQ2hhbm5lbCBJc2xhbmRzIE5hdGlvbmFsIFBhcmsncyBLZWxwIEZvcmVzdCBNb25pdG9yaW5nIFByb2dyYW0gaGFzIGVzdGltYXRlcyBvZiBzdWJzdHJhdGUgY29tcG9zaXRpb24gYW5kIHBlcmNlbnQgY292ZXIgb2Ygc2VsZWN0ZWQgYWxnYWwgYW5kIGludmVydGVicmF0ZSB0YXhhLiBUaGUgZGF0YSBzdW1tYXJ5IGRhdGEgcHJlc2VudGVkIGhlcmUgcmVwcmVzZW50cyB0aGUgbWVhbiBwZXJjZW50IGNvdmVyIG9mIHRoZSBpbmRpY2F0b3Igc3BlY2llcyBhdCB0aGUgc2l0ZS4gU2FtcGxpbmcgaXMgY29uZHVjdGVkIGFubnVhbGx5IGJldHdlZW4gdGhlIG1vbnRocyBvZiBNYXktT2N0b2Jlciwgc28gdGhlIFRpbWUgZGF0YSBpbiB0aGlzIGZpbGUgaXMgSnVseSAxIG9mIGVhY2ggeWVhciAoYSBub21pbmFsIHZhbHVlKS4gVGhlIGFjdHVhbCBtZWFzdXJlbWVudHMgd2VyZSB0YWtlbiBhdCB2YXJpb3VzIGRlcHRocywgc28gdGhlIERlcHRoIGRhdGEgaW4gdGhpcyBmaWxlIGlzIHRoZSBkZXB0aCBvZiB0aGUgc3RhdGlvbidzIHRlbXBlcmF0dXJlIGxvZ2dlciwgd2hpY2ggaXMgYSB0eXBpY2FsIGRlcHRoLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuc3RhdGlvblxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmRlcHRoIChtKVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbkFydGljdWxhdGVkX0NvcmFsbGluZV9BbGdhZV9NZWFuIChwZXJjZW50IGNvdmVyKVxuQXJ0aWN1bGF0ZWRfQ29yYWxsaW5lX0FsZ2FlX1N0ZERldlxuQXJ0aWN1bGF0ZWRfQ29yYWxsaW5lX0FsZ2FlX1N0ZEVyclxuQXN0cmFuZ2lhX2xham9sbGFlbnNpc19NZWFuIChwZXJjZW50IGNvdmVyKVxuQXN0cmFuZ2lhX2xham9sbGFlbnNpc19TdGREZXZcbkFzdHJhbmdpYV9sYWpvbGxhZW5zaXNfU3RkRXJyXG5CYWxhbm9waHlsbGlhX2VsZWdhbnNfTWVhbiAocGVyY2VudCBjb3ZlcilcbkJhbGFub3BoeWxsaWFfZWxlZ2Fuc19TdGREZXZcbkJhbGFub3BoeWxsaWFfZWxlZ2Fuc19TdGRFcnJcbkJhbGFudXNfc3BwX01lYW4gKHBlcmNlbnQgY292ZXIpXG5CYWxhbnVzX3NwcF9TdGREZXZcbkJhbGFudXNfc3BwX1N0ZEVyclxuQmFyZV9TdWJzdHJhdGVfTWVhbiAocGVyY2VudCBjb3ZlcilcbkJhcmVfU3Vic3RyYXRlX1N0ZERldlxuQmFyZV9TdWJzdHJhdGVfU3RkRXJyXG5Db2JibGVfTWVhbiAocGVyY2VudCBjb3ZlcilcbkNvYmJsZV9TdGREZXZcbi4uLiAoMTAwIG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZENpbnBLZm1SUENfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2VyZENpbnBLZm1SUENfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkQ2lucEtmbVJQQy9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cubnBzLmdvdi9jaGlzL25hdHVyZXNjaWVuY2UvaW5kZXguaHRtIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENpbnBLZm1SUEMucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZENpbnBLZm1SUEMmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiQ0lOUCIsICJlcmRDaW5wS2ZtUlBDIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL0ZSRENQU1RyYXdsTEhIYXVsQ2F0Y2guc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL0ZSRENQU1RyYXdsTEhIYXVsQ2F0Y2giLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvRlJEQ1BTVHJhd2xMSEhhdWxDYXRjaC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDUFMgVHJhd2wgTGlmZSBIaXN0b3J5IEhhdWwgQ2F0Y2ggRGF0YSIsICJXZWlnaHQgaW4ga2lsb2dyYW1zIGZvciBhbGwgc3BlY2llcyAoaWRlbnRpZmllZCB0byBsb3dlc3QgdGF4b25vbWljIGNyaXRlcmlhKSBjYXVnaHQgZHVyaW5nIFNXRlNDLUZSRCBmaXNoZXJ5IGluZGVwZW5kZW50IHN1cnZleXMgKGluY2x1ZGluZyBERVBNLCBBVE0sIFNhS2UpIG9mIGNvYXN0YWwgcGVsYWdpYyBzcGVjaWVzIHVzaW5nIG1pZC13YXRlciB0cmF3bHMgKHdpdGggbW9zdCB0b3dzIHBlcmZvcm1lZCBuZWFyIHRoZSBzdXJmYWNlKSBhdCBwb3NpdGlvbiBhbmQgdGltZXMgbGlzdGVkLiBBZGRpdGlvbmFsIGluZm9ybWF0aW9uIGZvciBhIHN1YnNldCBvZiBpbmRpdmlkdWFscyBmcm9tIHNvbWUgc3BlY2llcyBjYW4gYmUgZm91bmQgaW4gZWl0aGVyIENQUyBUcmF3bCBMaWZlIEhpc3RvcnkgTGVuZ3RoIEZyZXF1ZW5jeSBvciB0aGUgQ1BTIFRyYXdsIExpZmUgSGlzdG9yeSBTcGVjaW1lbiBkYXRhc2V0cy5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2VcbnNoaXBcbmhhdWwgKEhhdWwgTnVtYmVyKVxuY29sbGVjdGlvblxubGF0aXR1ZGUgKFN0YXJ0IExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChTdGFydCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbnN0b3BfbGF0aXR1ZGVcbnN0b3BfbG9uZ2l0dWRlXG50aW1lIChFcXVpbGlicml1bSBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuaGF1bGJhY2tfdGltZSAoSGF1bCBCYWNrIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zdXJmYWNlX3RlbXAgKFN1cmZhY2UgVGVtcGVyYXR1cmUsIGRlZ3JlZSBDKVxuc3VyZmFjZV90ZW1wX21ldGhvZCAoU3VyZmFjZSBUZW1wZXJhdHVyZSBNZXRob2QpXG5zaGlwX3NwZF90aHJvdWdoX3dhdGVyIChTaGlwIFNwZWVkIFRocm91Z2ggV2F0ZXIsIGtub3QpXG5pdGlzX3RzbiAoSXRpc1RTTilcbnNjaWVudGlmaWNfbmFtZVxuc3Vic2FtcGxlX2NvdW50XG5zdWJzYW1wbGVfd2VpZ2h0IChrZylcbnJlbWFpbmluZ193ZWlnaHQgKGtnKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL0ZSRENQU1RyYXdsTEhIYXVsQ2F0Y2hfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL0ZSRENQU1RyYXdsTEhIYXVsQ2F0Y2hfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vRlJEQ1BTVHJhd2xMSEhhdWxDYXRjaC9pbmRleC5qc29uIiwgImh0dHBzOi8vc3dmc2Mubm9hYS5nb3YvRlJELyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9GUkRDUFNUcmF3bExISGF1bENhdGNoLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1GUkRDUFNUcmF3bExISGF1bENhdGNoJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEtRmlzaGVyaWVzL1NvdXRod2VzdCBGaXNoZXJpZXMgU2NpZW5jZSBDZW50ZXIiLCAiRlJEQ1BTVHJhd2xMSEhhdWxDYXRjaCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9GUkRDUFNUcmF3bExITGVuZ3RoRnJlcXVlbmN5LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9GUkRDUFNUcmF3bExITGVuZ3RoRnJlcXVlbmN5IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL0ZSRENQU1RyYXdsTEhMZW5ndGhGcmVxdWVuY3kuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiQ1BTIFRyYXdsIExpZmUgSGlzdG9yeSBMZW5ndGggRnJlcXVlbmN5IERhdGEiLCAiTGVuZ3RoIGRpc3RyaWJ1dGlvbiBvZiBhIHN1YnNldCBvZiBpbmRpdmlkdWFscyBmcm9tIGEgc3BlY2llcyAobWFpbmx5IG5vbi10YXJnZXQpIGNhdWdodCBkdXJpbmcgU1dGU0MtRlJEIGZpc2hlcnkgaW5kZXBlbmRlbnQgdHJhd2wgc3VydmV5cyBvZiBjb2FzdGFsIHBlbGFnaWMgc3BlY2llcy4gTWVhc3VyZWQgbGVuZ3RocyBmb3IgaW5kaWNhdGVkIGxlbmd0aCB0eXBlIChmb3JrLCBzdGFuZGFyZCwgdG90YWwsIG9yIG1hbnRsZSkgd2VyZSBncm91cGVkIGluIDEwIG1tIGJpbnMgKGlkZW50aWZpZWQgYnkgdGhlIG1pZHBvaW50IG9mIHRoZSBsZW5ndGggY2xhc3MpIGFuZCBjb3VudHMgYXJlIHJlY29yZGVkIGJ5IHNleC4gRG9lcyBub3QgaW5jbHVkZSBzcGVjaWVzIHdpdGggaW5kaXZpZHVhbCBsZW5ndGhzIHJlY29yZGVkIGluIHRoZSBDUFMgVHJhd2wgTGlmZSBIaXN0b3J5IFNwZWNpbWVuIGRhdGFzZXQuXG5cbmNkbV9kYXRhX3R5cGUgPSBPdGhlclxuVkFSSUFCTEVTOlxuY3J1aXNlXG5zaGlwXG5oYXVsIChIYXVsIE51bWJlcilcbmNvbGxlY3Rpb25cbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuaXRpc190c24gKEl0aXNUU04pXG5zY2llbnRpZmljX25hbWVcbmxlbmd0aF9jbGFzc1xubGVuZ3RoX3R5cGVcbm1hbGVcbmZlbWFsZVxudW5rbm93blxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL0ZSRENQU1RyYXdsTEhMZW5ndGhGcmVxdWVuY3lfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL0ZSRENQU1RyYXdsTEhMZW5ndGhGcmVxdWVuY3lfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vRlJEQ1BTVHJhd2xMSExlbmd0aEZyZXF1ZW5jeS9pbmRleC5qc29uIiwgImh0dHBzOi8vc3dmc2Mubm9hYS5nb3YvRlJELyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9GUkRDUFNUcmF3bExITGVuZ3RoRnJlcXVlbmN5LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1GUkRDUFNUcmF3bExITGVuZ3RoRnJlcXVlbmN5JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEtRmlzaGVyaWVzL1NvdXRod2VzdCBGaXNoZXJpZXMgU2NpZW5jZSBDZW50ZXIiLCAiRlJEQ1BTVHJhd2xMSExlbmd0aEZyZXF1ZW5jeSJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9GUkRDUFNUcmF3bExIU3BlY2ltZW4uc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL0ZSRENQU1RyYXdsTEhTcGVjaW1lbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9GUkRDUFNUcmF3bExIU3BlY2ltZW4uZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiQ1BTIFRyYXdsIExpZmUgSGlzdG9yeSBTcGVjaW1lbiBEYXRhIiwgIkluZGl2aWR1YWwgc3BlY2ltZW5zIG1lYXN1cmVkICh3ZWlnaHQgaW4gZ3JhbXMgYW5kIGxlbmd0aCBpbiBtbSkgYW5kIHNleGVkIGZyb20gbWFpbmx5IHRhcmdldGVkIHNwZWNpZXMgY2F1Z2h0IGR1cmluZyBTV0ZTQy1GUkQgZmlzaGVyeSBpbmRlcGVuZGVudCB0cmF3bCBzdXJ2ZXlzIG9mIGNvYXN0YWwgcGVsYWdpYyBzcGVjaWVzLiBJbmRpdmlkdWFscyBhcmUgY2F0ZWdvcml6ZWQgYXMgcmFuZG9tIG9yIG5vbi1yYW5kb20gc2FtcGxlcy4gRG9lcyBub3QgaW5jbHVkZSBzcGVjaWVzIHdpdGggbGVuZ3RoIGJpbnMgcmVjb3JkZWQgaW4gdGhlIENQUyBUcmF3bCBMaWZlIEhpc3RvcnkgTGVuZ3RoIEZyZXF1ZW5jeSBkYXRhc2V0LlxuXG5jZG1fZGF0YV90eXBlID0gT3RoZXJcblZBUklBQkxFUzpcbmNydWlzZVxuc2hpcFxuaGF1bCAoSGF1bCBOdW1iZXIpXG5jb2xsZWN0aW9uXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbml0aXNfdHNuIChJdGlzVFNOKVxuc2NpZW50aWZpY19uYW1lXG5zcGVjaW1lbl9udW1iZXJcbnNleFxuaXNfcmFuZG9tX3NhbXBsZVxud2VpZ2h0IChnKVxuc3RhbmRhcmRfbGVuZ3RoIChtbSlcbmZvcmtfbGVuZ3RoIChtbSlcbnRvdGFsX2xlbmd0aCAobW0pXG5tYW50bGVfbGVuZ3RoIChtbSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9GUkRDUFNUcmF3bExIU3BlY2ltZW5fZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL0ZSRENQU1RyYXdsTEhTcGVjaW1lbl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9GUkRDUFNUcmF3bExIU3BlY2ltZW4vaW5kZXguanNvbiIsICJodHRwczovL3N3ZnNjLm5vYWEuZ292L0ZSRC8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvRlJEQ1BTVHJhd2xMSFNwZWNpbWVuLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1GUkRDUFNUcmF3bExIU3BlY2ltZW4mc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQS1GaXNoZXJpZXMvU291dGh3ZXN0IEZpc2hlcmllcyBTY2llbmNlIENlbnRlciIsICJGUkRDUFNUcmF3bExIU3BlY2ltZW4iXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2Vjb2Nhc3RfaW5wdXRzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2Vjb2Nhc3RfaW5wdXRzLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkVjb2Nhc3Qgc3BlY2llcyB3ZWlnaHRpbmdzIGFuZCBlbnZpcm9ubWVudGFsIGRhdGEgZGF0ZXMiLCAiVGhlIGRhdGFzZXQgY29udGFpbnMgdGhlIHNwZWNpZXMgd2VpZ2h0aW5ncyBhbmQgdGhlIGRhdGVzIG9mIHRoZSBlbnZpcm9ubWVudGFsIGRhdGEgdXNlZCBmb3IgZWFjaCBFY29DYXN0IE1hcCBkYXRhc2V0IChodHRwczovL2NvYXN0d2F0Y2gucGZlZy5ub2FhLmdvdi9lcmRkYXAvZ3JpZGRhcC9lY29jYXN0KVxuXG5jZG1fZGF0YV90eXBlID0gR3JpZFxuVkFSSUFCTEVTOlxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRhdGVcbmJsdWVzaGFyayAoQmx1ZSBTaGFyayBCeWNhdGNoIE1vZGVsIFdlaWdodGluZylcbmJsdWVzaGFya1RSSyAoQmx1ZSBTaGFyayBUcmFja2luZyBNb2RlbCBXZWlnaHRpbmcpXG5zZWFsaW9ucyAoQ2FsaWZvcm5pYSBTZWEgTGlvbnMgVHJhY2tpbmcgTW9kZWwgV2VpZ2h0aW5nKVxubGVhdGhlcmJhY2tzIChMZWF0aGVyYmFjayBUdXJ0bGVzIE1vZGVsIFdlaWdodGluZylcbnN3b3JkZmlzaCAoU3dvcmRmaXNoIE1vZGVsIFdlaWdodGluZylcbnNzdF90aW1lIChEYXRlIG9mIFNlYSBTdXJmYWNlIFRlbXBlcmF0dXJlIERhdGEsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5jaGxfdGltZSAoRGF0ZSBvZiBDaGxvcm9waHlsbC1hIERhdGEsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5la2VfdGltZSAoRGF0ZSBvZiBFZGR5IEtpbmV0aWMgRW5lcmd5IERhdGEsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zc2hfdGltZSAoRGF0ZSBvZiBTZWEgU3VyZmFjZSBIZWlnaHQgRGF0YSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbndpbmRfdGltZSAoRGF0ZSBvZiBXaW5kIERhdGEsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG4iLCAiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2Vjb2Nhc3RfaW5wdXRzL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9jb2FzdHdhdGNoLnBmZWcubm9hYS5nb3YvZWNvY2FzdCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lY29jYXN0X2lucHV0cy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZWNvY2FzdF9pbnB1dHMmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBOTUZTIFNXRlNDIEVSRCIsICJlY29jYXN0X2lucHV0cyJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcHJib1NlZmlEaWV0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3ByYm9TZWZpRGlldC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJGYXJhbGxvbiBJc2xhbmQgU2VhYmlyZCBEaWV0IFN1bW1hcnkiLCAiRGlldCBzdW1tYXJ5IGRhdGEgZm9yIENhc3NpbidzIEF1a2xldHMsIENvbW1vbiBNdXJyZXMsIFBpZ2VvbiBHdWlsbGVtb3RzLCBhbmQgUmhpbm9jZXJvcyBBdWtsZXRzIGZyb20gdGhlIEZhcmFsbG9uIElzbGFuZHMuIERhdGEgcHJlc2VudGVkIGFyZSB0aGUgcHJvcG9ydGlvbiBieSBudW1iZXIgb2YgdGhlIG1vc3QgaW1wb3J0YW50IHByZXkgaXRlbXMgZm9yIGVhY2ggc3BlY2llcy5cblxuVGhlIHByb3BvcnRpb25zIHByZXNlbnRlZCBpbiB0aGlzIHRhYmxlIGFyZSBkZWZpbmVkIGFzIHRoZSBudW1iZXIgb2YgdGhlIHNwZWNpZmljIHByZXkgaXRlbXMgb2JzZXJ2ZWQgZGl2aWRlZCBieSB0aGUgdG90YWwgbnVtYmVyIG9mIGlkZW50aWZpZWQgcHJleSBpdGVtcyBmb3IgdGhhdCBzZWFzb24uIERhdGEgZm9yIHRoZSBtb3N0IGltcG9ydGFudCBwcmV5IHNwZWNpZXMgYXJlIHByZXNlbnRlZCBoZXJlIHdpdGggYWxsIG90aGVyIHByZXkgbHVtcGVkIHRvZ2V0aGVyIGFzIFwib3RoZXJcIi4gU2VlIHRoZSBTRUZJIFJlc2VhcmNoIFBsYW5zIGFuZCBQcm90b2NvbHMgZG9jdW1lbnQgdW5kZXIgUmVzZWFyY2ggVG9vbHMgZm9yIG1vcmUgaW5mb3JtYXRpb24gb24gaG93IGRpZXQgZGF0YSBpcyBjb2xsZWN0ZWQgZm9yIGVhY2ggc3BlY2llcy5cblxuY2RtX2RhdGFfdHlwZSA9IE90aGVyXG5WQVJJQUJMRVM6XG55ZWFyXG5SSEFVX1JvY2tmaXNoIChSb2NrZmlzaCBpbiBSaGlub2Nlcm9zIEF1a2xldCdzIERpZXQsIHBlcmNlbnQpXG5SSEFVX0FuY2hvdnkgKEFuY2hvdnkgaW4gUmhpbm9jZXJvcyBBdWtsZXQncyBEaWV0LCBwZXJjZW50KVxuUkhBVV9TYXVyeSAoU2F1cnkgaW4gUmhpbm9jZXJvcyBBdWtsZXQncyBEaWV0LCBwZXJjZW50KVxuUkhBVV9PdGhlciAoT3RoZXIgaW4gUmhpbm9jZXJvcyBBdWtsZXQncyBEaWV0LCBwZXJjZW50KVxuQ09NVV9Sb2NrZmlzaCAoUm9ja2Zpc2ggaW4gQ29tbW9uIE11cnJlJ3MgRGlldCwgcGVyY2VudClcbkNPTVVfQW5jaG92eVNhcmRpbmUgKEFuY2hvdnkmU2FyZGluZSBpbiBDb21tb24gTXVycmUncyBEaWV0LCBwZXJjZW50KVxuQ09NVV9PdGhlciAoT3RoZXIgaW4gQ29tbW9uIE11cnJlJ3MgRGlldCwgcGVyY2VudClcblBJR1VfUm9ja2Zpc2ggKFJvY2tmaXNoIGluIFBpZ2VvbiBHdWlsbGVtb3QncyBEaWV0LCBwZXJjZW50KVxuUElHVV9TY3VscGluIChTY3VscGluIGluIFBpZ2VvbiBHdWlsbGVtb3QncyBEaWV0LCBwZXJjZW50KVxuUElHVV9GbGF0ZmlzaCAoRmxhdGZpc2ggaW4gUGlnZW9uIEd1aWxsZW1vdCdzIERpZXQsIHBlcmNlbnQpXG5QSUdVX090aGVyIChPdGhlciBpbiBQaWdlb24gR3VpbGxlbW90J3MgRGlldCwgcGVyY2VudClcbkNBQVVfRXVwYWh1c2lpZHMgKEV1cGFodXNpaWRzIGluIENhc3NpbidzIEF1a2xldCdzIERpZXQsIHBlcmNlbnQpXG5DQUFVX015c2lpZHMgKE15c2lpZHMgaW4gQ2Fzc2luJ3MgQXVrbGV0J3MgRGlldCwgcGVyY2VudClcbkNBQVVfQW1waGlwb2RzIChBbXBoaXBvZHMgaW4gQ2Fzc2luJ3MgQXVrbGV0J3MgRGlldCwgcGVyY2VudClcbkNBQVVfUGljZXMgKFBpY2VzIGluIENhc3NpbidzIEF1a2xldCdzIERpZXQsIHBlcmNlbnQpXG5DQUFVX090aGVyIChPdGhlciBpbiBDYXNzaW4ncyBBdWtsZXQncyBEaWV0LCBwZXJjZW50KVxuIiwgIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wcmJvU2VmaURpZXQvaW5kZXguanNvbiIsICJodHRwOi8vZGF0YS5wcmJvLm9yZy9jYWRjMi9pbmRleC5waHA/bWFjdD1MaW5rZWRBcnRpY2xlcyxjbnRudDAxLGRldGFpbCwwJmNudG50MDFhcnRpY2xlX2lkPTE1NSZjbnRudDAxcmV0dXJuaWQ9MTUwIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3ByYm9TZWZpRGlldC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cHJib1NlZmlEaWV0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIlBSQk8iLCAicHJib1NlZmlEaWV0Il0sCiAgICAgIFsiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wcmJvU2VmaVBoZW4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcHJib1NlZmlQaGVuLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkZhcmFsbG9uIElzbGFuZCBTZWFiaXJkIFBoZW5vbG9neSBTdW1tYXJ5IiwgIlBoZW5vbG9neSAodGltaW5nIG9mIGJyZWVkaW5nKSBzdW1tYXJ5IGRhdGEgZm9yIEJyYW5kdCdzIENvcm1vcmFudCwgQ2Fzc2luJ3MgQXVrbGV0LCBDb21tb24gTXVycmUsIFBpZ2VvbiBHdWlsbGVtb3QsIGFuZCBSaGlub2Nlcm9zIEF1a2xldCBicmVlZGluZyBhdCB0aGUgRmFyYWxsb24gSXNsYW5kcy4gRGF0YSBwcmVzZW50ZWQgYXJlIGFubnVhbCBtZWFuIGxheWluZyBkYXRlIGZvciB0aGUgZmlyc3Qgb3Igb25seSBlZ2cgbGFpZCBhbG9uZyB3aXRoIHRoZSBzdGFuZGFyZCBkZXZpYXRpb24uXG5cblRoZSBtZWFuIGxheWluZyBkYXRlIGlzIGNhbGN1bGF0ZWQgZnJvbSBhbGwgc2l0ZXMgd2hlcmUgdGhlIGV4YWN0IGxheWluZyBkYXRlIGlzIGtub3duIHdpdGhpbiB0aGUgY2hlY2sgcGVyaW9kIGZvciB0aGF0IHNwZWNpZXMgKDEtNSBkYXlzKS4gVGhlIG1lYW4gbGF5IGRhdGVzIGFyZSBwcmVzZW50ZWQgYXMganVsaWFuIGRhdGVzIChkYXkgb2YgeWVhcikgYW5kIHRoZSBzdGFuZGFyZCBkZXZpYXRpb24gaXMgaW4gZGF5cy4gU2VlIHRoZSBTRUZJIFJlc2VhcmNoIFBsYW5zIGFuZCBQcm90b2NvbHMgZG9jdW1lbnQgdW5kZXIgUmVzZWFyY2ggVG9vbHMgZm9yIG1vcmUgaW5mb3JtYXRpb24gb24gaG93IGxheSBkYXRlcyBhcmUgZGV0ZXJtaW5lZCBmb3IgZWFjaCBzcGVjaWVzLlxuXG5jZG1fZGF0YV90eXBlID0gT3RoZXJcblZBUklBQkxFUzpcbnllYXJcbkJSQUNfbWVhbiAoQnJhbmR0J3MgQ29ybW9yYW50IE1lYW4sIGRheV9vZl95ZWFyKVxuQlJBQ19zZCAoQnJhbmR0J3MgQ29ybW9yYW50IFN0YW5kYXJkIERldmlhdGlvbiwgZGF5cylcbkNBQVVfbWVhbiAoQ2Fzc2luJ3MgQXVrbGV0IE1lYW4sIGRheV9vZl95ZWFyKVxuQ0FBVV9zZCAoQ2Fzc2luJ3MgQXVrbGV0IFN0YW5kYXJkIERldmlhdGlvbiwgZGF5cylcbkNPTVVfbWVhbiAoQ29tbW9uIE11cnJlIE1lYW4sIGRheV9vZl95ZWFyKVxuQ09NVV9zZCAoQ29tbW9uIE11cnJlIFN0YW5kYXJkIERldmlhdGlvbiwgZGF5cylcblBJR1VfbWVhbiAoUGlnZW9uIEd1aWxsZW1vdCBNZWFuLCBkYXlfb2ZfeWVhcilcblBJR1Vfc2QgKFBpZ2VvbiBHdWlsbGVtb3QgU3RhbmRhcmQgRGV2aWF0aW9uLCBkYXlzKVxuUkhBVV9tZWFuIChSaGlub2Nlcm9zIEF1a2xldCBNZWFuLCBkYXlfb2ZfeWVhcilcblJIQVVfc2QgKFJoaW5vY2Vyb3MgQXVrbGV0IFN0YW5kYXJkIERldmlhdGlvbiwgZGF5cylcbiIsICIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcHJib1NlZmlQaGVuL2luZGV4Lmpzb24iLCAiaHR0cDovL2RhdGEucHJiby5vcmcvY2FkYzIvaW5kZXgucGhwP21hY3Q9TGlua2VkQXJ0aWNsZXMsY250bnQwMSxkZXRhaWwsMCZjbnRudDAxYXJ0aWNsZV9pZD0xNTYmY250bnQwMXJldHVybmlkPTE1MCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wcmJvU2VmaVBoZW4ucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXByYm9TZWZpUGhlbiZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJQUkJPIiwgInByYm9TZWZpUGhlbiJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcHJib1NlZmlQb3AiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcHJib1NlZmlQb3AuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiRmFyYWxsb24gSXNsYW5kIFNlYWJpcmQgUG9wdWxhdGlvbiBTdW1tYXJ5IiwgIkFubnVhbCBicmVlZGluZyBwb3B1bGF0aW9uIGVzdGltYXRlcyBmb3IgQnJhbmR0J3MgQ29ybW9yYW50LCBDYXNzaW4ncyBBdWtsZXQsIENvbW1vbiBNdXJyZSwgRG91YmxlLWNyZXN0ZWQgQ29ybW9yYW50LCBQZWxhZ2ljIENvcm1vcmFudCwgUGlnZW9uIEd1aWxsZW1vdCwgVHVmdGVkIFB1ZmZpbiwgYW5kIFdlc3Rlcm4gR3VsbCBhdCB0aGUgRmFyYWxsb24gSXNsYW5kcy4gRGF0YSBwcmVzZW50ZWQgYXJlIHRoZSBudW1iZXIgb2YgYnJlZWRpbmcgYWR1bHRzIGVzdGltYXRlZCBmb3IgZWFjaCBzZWFzb24uXG5cbkJyZWVkaW5nIHBvcHVsYXRpb24gZXN0aW1hdGVzIGZvciBtb3N0IHNwZWNpZXMgYXJlIGJhc2VkIG9uIGVpdGhlciBkaXJlY3QgY291bnRzIG9mIGFuaW1hbHMgb3IgbmVzdHMuIENhc3NpbidzIGF1a2xldCBlc3RpbWF0ZXMgYXJlIGJhc2VkIG9uIHRoZSBwZXJjZW50IGNoYW5nZSBpbiBidXJyb3cvY3JldmljZSBkZW5zaXR5IHdpdGhpbiBhIHNlcmllcyBvZiBpbmRleCBwbG90cy4gVGhpcyByZWxhdGl2ZSBjaGFuZ2UgaXMgdGhlbiBhcHBsaWVkIHRvIHRoZSBsYXN0IGZ1bGwgY2Vuc3VzIGZyb20gMTk4OSB0byBhcnJpdmUgYXQgYSBjdXJyZW50IHBvcHVsYXRpb24gZXN0aW1hdGUuIFNlZSB0aGUgU0VGSSBSZXNlYXJjaCBQbGFucyBhbmQgUHJvdG9jb2xzIGRvY3VtZW50IHVuZGVyIFJlc2VhcmNoIFRvb2xzIGZvciBtb3JlIGluZm9ybWF0aW9uIG9uIGhvdyB0aGVzZSBlc3RpbWF0ZXMgd2VyZSBkZXRlcm1pbmVkLlxuXG5Ob3RlOiBDYXNzaW4ncyBhdWtsZXQgcG9wdWxhdGlvbiBlc3RpbWF0ZSBpcyBmb3IgU291dGhlYXN0IEZhcmFsbG9uIElzbGFuZCBvbmx5LlxuXG5jZG1fZGF0YV90eXBlID0gT3RoZXJcblZBUklBQkxFUzpcbnllYXJcbkJSQUMgKFBvcHVsYXRpb24gb2YgQnJhbmR0J3MgQ29ybW9yYW50LCBjb3VudClcbkNBQVUgKFBvcHVsYXRpb24gb2YgQ2Fzc2luJ3MgQXVrbGV0LCBjb3VudClcbkNPTVUgKFBvcHVsYXRpb24gb2YgQ29tbW9uIE11cnJlLCBjb3VudClcbkRDQ08gKFBvcHVsYXRpb24gb2YgRG91YmxlLWNyZXN0ZWQgQ29ybW9yYW50LCBjb3VudClcblBFQ08gKFBvcHVsYXRpb24gb2YgUGVsYWdpYyBDb3Jtb3JhbnQsIGNvdW50KVxuUElHVSAoUG9wdWxhdGlvbiBvZiBQaWdlb24gR3VpbGxlbW90LCBjb3VudClcblRVUFUgKFBvcHVsYXRpb24gb2YgVHVmdGVkIFB1ZmZpbiwgY291bnQpXG5XRUdVIChQb3B1bGF0aW9uIG9mIFdlc3Rlcm4gR3VsbCwgY291bnQpXG4iLCAiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3ByYm9TZWZpUG9wL2luZGV4Lmpzb24iLCAiaHR0cDovL2RhdGEucHJiby5vcmcvY2FkYzIvaW5kZXgucGhwP21hY3Q9TGlua2VkQXJ0aWNsZXMsY250bnQwMSxkZXRhaWwsMCZjbnRudDAxYXJ0aWNsZV9pZD0xNTQmY250bnQwMXJldHVybmlkPTE1MCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wcmJvU2VmaVBvcC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cHJib1NlZmlQb3Amc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiUFJCTyIsICJwcmJvU2VmaVBvcCJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcHJib1NlZmlQcm9kIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3ByYm9TZWZpUHJvZC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJGYXJhbGxvbiBJc2xhbmQgU2VhYmlyZCBQcm9kdWN0aXZpdHkgU3VtbWFyeSIsICJBbm51YWwgbWVhbiBwcm9kdWN0aXZpdHkgZm9yIEFzaHkgU3Rvcm0tcGV0cmVsLCBCcmFuZHQncyBDb3Jtb3JhbnQsIENhc3NpbidzIEF1a2xldCwgQ29tbW9uIE11cnJlLCBQZWxhZ2ljIENvcm1vcmFudCwgUGlnZW9uIEd1aWxsZW1vdCwgUmhpbm9jZXJvcyBBdWtsZXQgYW5kIFdlc3Rlcm4gR3VsbCBicmVlZGluZyBvbiB0aGUgRmFyYWxsb24gSXNsYW5kcy4gRGF0YSBwcmVzZW50ZWQgYXJlIHRoZSBtZWFuIG51bWJlciBvZiBjaGlja3MgZmxlZGdlZCBwZXIgYnJlZWRpbmcgcGFpciBhbG9uZyB3aXRoIHRoZSBzdGFuZGFyZCBkZXZpYXRpb24uXG5cbk1lYW4gYW5udWFsIHByb2R1Y3Rpdml0eSAobnVtYmVyIG9mIGNoaWNrcyBmbGVkZ2VkIHBlciBicmVlZGluZyBwYWlyKSBpcyBkZXRlcm1pbmVkIHRocm91Z2ggcmVndWxhciBjaGVja3Mgb2YgYnJlZWRpbmcgc2l0ZXMgYW5kIGluY2x1ZGVzIGRhdGEgZnJvbSBhbGwgYnJlZWRpbmcgYXR0ZW1wdHMgd2l0aGluIHRoYXQgc2Vhc29uLiBTZWUgdGhlIFNFRkkgUmVzZWFyY2ggUGxhbnMgYW5kIFByb3RvY29scyBkb2N1bWVudCB1bmRlciBSZXNlYXJjaCBUb29scyBmb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBob3cgdGhlc2UgZXN0aW1hdGVzIHdlcmUgZGV0ZXJtaW5lZC5cblxuY2RtX2RhdGFfdHlwZSA9IE90aGVyXG5WQVJJQUJMRVM6XG55ZWFyXG5BU1NQX3JzIChBc2h5IFN0b3JtLXBldHJlbCBDaGlja3MgcGVyIEJyZWVkaW5nIFBhaXIsIG1lYW4pXG5BU1NQX3NkIChBc2h5IFN0b3JtLXBldHJlbCBTdGFuZGFyZCBEZXZpYXRpb24pXG5CUkFDX3JzIChCcmFuZHQncyBDb3Jtb3JhbnQgQ2hpY2tzIHBlciBCcmVlZGluZyBQYWlyLCBtZWFuKVxuQlJBQ19zZCAoQnJhbmR0J3MgQ29ybW9yYW50IFN0YW5kYXJkIERldmlhdGlvbilcbkNBQVVfcnMgKENhc3NpbidzIEF1a2xldCBDaGlja3MgcGVyIEJyZWVkaW5nIFBhaXIsIG1lYW4pXG5DQUFVX3NkIChDYXNzaW4ncyBBdWtsZXQgU3RhbmRhcmQgRGV2aWF0aW9uKVxuQ09NVV9ycyAoQ29tbW9uIE11cnJlIENoaWNrcyBwZXIgQnJlZWRpbmcgUGFpciwgbWVhbilcbkNPTVVfc2QgKENvbW1vbiBNdXJyZSBTdGFuZGFyZCBEZXZpYXRpb24pXG5QSUdVX3JzIChQaWdlb24gR3VpbGxlbW90IENoaWNrcyBwZXIgQnJlZWRpbmcgUGFpciwgbWVhbilcblBJR1Vfc2QgKFBpZ2VvbiBHdWlsbGVtb3QgU3RhbmRhcmQgRGV2aWF0aW9uKVxuUEVDT19ycyAoUGVsYWdpYyBDb3Jtb3JhbnQgQ2hpY2tzIHBlciBCcmVlZGluZyBQYWlyLCBtZWFuKVxuUEVDT19zZCAoUGVsYWdpYyBDb3Jtb3JhbnQgU3RhbmRhcmQgRGV2aWF0aW9uKVxuUkhBVV9ycyAoUmhpbm9jZXJvcyBBdWtsZXQgQ2hpY2tzIHBlciBCcmVlZGluZyBQYWlyLCBtZWFuKVxuUkhBVV9zZCAoUmhpbm9jZXJvcyBBdWtsZXQgU3RhbmRhcmQgRGV2aWF0aW9uKVxuV0VHVV9ycyAoV2VzdGVybiBHdWxsIENoaWNrcyBwZXIgQnJlZWRpbmcgUGFpciwgbWVhbilcbldFR1Vfc2QgKFdlc3Rlcm4gR3VsbCBTdGFuZGFyZCBEZXZpYXRpb24pXG4iLCAiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3ByYm9TZWZpUHJvZC9pbmRleC5qc29uIiwgImh0dHA6Ly9kYXRhLnByYm8ub3JnL2NhZGMyL2luZGV4LnBocD9tYWN0PUxpbmtlZEFydGljbGVzLGNudG50MDEsZGV0YWlsLDAmY250bnQwMWFydGljbGVfaWQ9MTUzJmNudG50MDFyZXR1cm5pZD0xNTAiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcHJib1NlZmlQcm9kLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wcmJvU2VmaVByb2Qmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiUFJCTyIsICJwcmJvU2VmaVByb2QiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvc2NyaXBwc0dsaWRlcnMuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3NjcmlwcHNHbGlkZXJzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3NjcmlwcHNHbGlkZXJzLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkdsaWRlcnMsIFNjcmlwcHMgSW5zdGl0dXRpb24gb2YgT2NlYW5vZ3JhcGh5LCAyMDE0LXByZXNlbnQiLCAiU3ByYXkgZ2xpZGVyIGRhdGEgZnJvbSBTY3JpcHBzIEluc3RpdHV0aW9uIG9mIE9jZWFub2dyYXBoeSwgSW5zdHJ1bWVudCBEZXZlbG9wbWVudCBHcm91cC4gR2xpZGVycyBhcmUgc21hbGwsIGZyZWUtc3dpbW1pbmcsIHVubWFubmVkIHZlaGljbGVzIHRoYXQgdXNlIGNoYW5nZXMgaW4gYnVveWFuY3kgdG8gbW92ZSB2ZXJ0aWNhbGx5IGFuZCBob3Jpem9udGFsbHkgdGhyb3VnaCB0aGUgd2F0ZXIgY29sdW1uIGluIGEgc2F3LXRvb3RoIHBhdHRlcm4uIFRoZXkgYXJlIGRlcGxveWVkIGZvciBkYXlzIHRvIHNldmVyYWwgbW9udGhzIGFuZCBnYXRoZXIgZGV0YWlsZWQgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHBoeXNpY2FsLCBjaGVtaWNhbCBhbmQgYmlvbG9naWNhbCBwcm9jZXNzZXMgb2YgdGhlIHdvcmxkJ3Mgb2NlYW5zLlxuXG5jZG1fZGF0YV90eXBlID0gVHJhamVjdG9yeVByb2ZpbGVcblZBUklBQkxFUzpcbnRyYWplY3RvcnkgKFRyYWplY3RvcnkgTmFtZSlcbmluc3RpdHV0aW9uXG5wbGF0Zm9ybV9pZFxucGxhdGZvcm1fdHlwZVxud21vX2lkXG5jdGRfbWFrZV9tb2RlbCAoQ1REIE1ha2UgYW5kIE1vZGVsKVxuc2VnbWVudF9pZFxudGltZV91diAoRGVwdGgtYXZlcmFnZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdF91diAoRGVwdGgtYXZlcmFnZWQgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG5sb25fdXYgKERlcHRoLWF2ZXJhZ2VkIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxudSAoRGVwdGgtYXZlcmFnZWQgRWFzdHdhcmQgU2VhIFdhdGVyIFZlbG9jaXR5LCBtIHMtMSlcbnYgKERlcHRoLWF2ZXJhZ2VkIE5vcnRod2FyZCBTZWEgV2F0ZXIgVmVsb2NpdHksIG0gcy0xKVxudXZfcWMgKHV2IFF1YWxpdHkgRmxhZylcbnByb2ZpbGVfaWRcbnByb2ZpbGVfcWMgKFByb2ZpbGUgdGltZSwgbGF0aXR1ZGUsIGxvbmdpdHVkZSBRdWFsaXR5IEZsYWcpXG50aW1lIChQcm9maWxlIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoUHJvZmlsZSBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoUHJvZmlsZSBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmRlcHRoIChtKVxuZF9xYyAoZGVwdGggcXVhbGl0eSBmbGFnKVxucHJlc3N1cmUgKFNlYSBXYXRlciBQcmVzc3VyZSwgZGJhcilcbnBfcWMgKHByZXNzdXJlIHF1YWxpdHkgZmxhZylcbnRlbXBlcmF0dXJlIChTZWEgV2F0ZXIgVGVtcGVyYXR1cmUsIENlbHNpdXMpXG4uLi4gKDExIG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3NjcmlwcHNHbGlkZXJzX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9zY3JpcHBzR2xpZGVyc19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9zY3JpcHBzR2xpZGVycy9pbmRleC5qc29uIiwgImh0dHA6Ly9zcHJheS51Y3NkLmVkdSIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9zY3JpcHBzR2xpZGVycy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9c2NyaXBwc0dsaWRlcnMmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiU2NyaXBwcyBJbnN0aXR1dGlvbiBvZiBPY2Vhbm9ncmFwaHkiLCAic2NyaXBwc0dsaWRlcnMiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkR3RzcHBCZXN0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRHdHNwcEJlc3QiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkR3RzcHBCZXN0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkdsb2JhbCBUZW1wZXJhdHVyZSBhbmQgU2FsaW5pdHkgUHJvZmlsZSBQcm9ncmFtbWUgKEdUU1BQKSBEYXRhLCAxOTg1LXByZXNlbnQiLCAiVGhlIEdsb2JhbCBUZW1wZXJhdHVyZS1TYWxpbml0eSBQcm9maWxlIFByb2dyYW1tZSAoR1RTUFApIGRldmVsb3BzIGFuZCBtYWludGFpbnMgYSBnbG9iYWwgb2NlYW4gdGVtcGVyYXR1cmUgYW5kIHNhbGluaXR5IHJlc291cmNlIHdpdGggZGF0YSB0aGF0IGFyZSBib3RoIHVwLXRvLWRhdGUgYW5kIG9mIHRoZSBoaWdoZXN0IHF1YWxpdHkuIEl0IGlzIGEgam9pbnQgV29ybGQgTWV0ZW9yb2xvZ2ljYWwgT3JnYW5pemF0aW9uIChXTU8pIGFuZCBJbnRlcmdvdmVybm1lbnRhbCBPY2Vhbm9ncmFwaGljIENvbW1pc3Npb24gKElPQykgcHJvZ3JhbS4gIEl0IGluY2x1ZGVzIGRhdGEgZnJvbSBYQlRzLCBDVERzLCBtb29yZWQgYW5kIGRyaWZ0aW5nIGJ1b3lzLCBhbmQgUEFMQUNFIGZsb2F0cy4gRm9yIGluZm9ybWF0aW9uIGFib3V0IG9yZ2FuaXphdGlvbnMgY29udHJpYnV0aW5nIGRhdGEgdG8gR1RTUFAsIHNlZSBodHRwOi8vZ29zaWMub3JnL2dvb3MvR1RTUFAtZGF0YS1mbG93Lmh0bSAuICBUaGUgVS5TLiBOYXRpb25hbCBPY2Vhbm9ncmFwaGljIERhdGEgQ2VudGVyIChOT0RDKSBtYWludGFpbnMgdGhlIEdUU1BQIENvbnRpbnVvdXNseSBNYW5hZ2VkIERhdGEgQmFzZSBhbmQgcmVsZWFzZXMgbmV3ICdiZXN0LWNvcHknIGRhdGEgb25jZSBwZXIgbW9udGguXG5cbldBUk5JTkc6IFRoaXMgZGF0YXNldCBoYXMgYSAqbG90KiBvZiBkYXRhLiAgSWYgeW91IHJlcXVlc3QgdG9vIG11Y2ggZGF0YSwgeW91ciByZXF1ZXN0IHdpbGwgZmFpbC5cbiogSWYgeW91IGRvbid0IHNwZWNpZnkgYSBsb25naXR1ZGUgYW5kIGxhdGl0dWRlIGJvdW5kaW5nIGJveCwgZG9uJ3QgcmVxdWVzdCBtb3JlIHRoYW4gYSBtb250aCdzIGRhdGEgYXQgYSB0aW1lLlxuKiBJZiB5b3UgZG8gc3BlY2lmeSBhIGxvbmdpdHVkZSBhbmQgbGF0aXR1ZGUgYm91bmRpbmcgYm94LCB5b3UgY2FuIHJlcXVlc3QgZGF0YSBmb3IgYSBwcm9wb3J0aW9uYWxseSBsb25nZXIgdGltZSBwZXJpb2QuXG5SZXF1ZXN0aW5nIGRhdGEgZm9yIGEgc3BlY2lmaWMgc3RhdGlvbl9pZCBtYXkgYmUgc2xvdywgYnV0IGl0IHdvcmtzLlxuXG4qKiogVGhpcyBFUkREQVAgZGF0YXNldCBoYXMgZGF0YSBmb3IgdGhlIGVudGlyZSB3b3JsZCBmb3IgYWxsIGF2YWlsYWJsZSB0aW1lcyAoY3VycmVudGx5LCB1cCB0byBhbmQgaW5jbHVkaW5nIHRoZSBBdWd1c3QgMjAxOCBkYXRhKSBidXQgaXMgYSBzdWJzZXQgb2YgdGhlIG9yaWdpbmFsIE5PREMgJ2Jlc3QtY29weScgZGF0YS4gIEl0IG9ubHkgaW5jbHVkZXMgZGF0YSB3aGVyZSB0aGUgcXVhbGl0eSBmbGFncyBpbmRpY2F0ZSB0aGUgZGF0YSBpcyAxPUNPUlJFQ1QsIDI9UFJPQkFCTFkgR09PRCwgb3IgNT1NT0RJRklFRC4gSXQgZG9lcyBub3QgaW5jbHVkZSBzb21lIG9mIHRoZSBtZXRhZGF0YSwgYW55IG9mIHRoZSBoaXN0b3J5IGRhdGEsIG9yIGFueSBvZiB0aGUgcXVhbGl0eSBmbGFnIGRhdGEgb2YgdGhlIG9yaWdpbmFsIGRhdGFzZXQuIFlvdSBjYW4gYWx3YXlzIGdldCB0aGUgY29tcGxldGUsIHVwLXRvLWRhdGUgZGF0YXNldCAoYW5kIGFkZGl0aW9uYWwsIG5lYXItcmVhbC10aW1lIGRhdGEpIGZyb20gdGhlIHNvdXJjZTogaHR0cHM6Ly93d3cubm9kYy5ub2FhLmdvdi9HVFNQUC8gLiAgU3BlY2lmaWMgZGlmZmVyZW5jZXMgYXJlOlxuKiBQcm9maWxlcyB3aXRoIGEgcG9zaXRpb25fcXVhbGl0eV9mbGFnIG9yIGEgdGltZV9xdWFsaXR5X2ZsYWcgb3RoZXIgdGhhbiAxfDJ8NSB3ZXJlIHJlbW92ZWQuXG4qIFJvd3Mgd2l0aCBhIGRlcHRoICh6KSB2YWx1ZSBsZXNzIHRoYW4gLTAuNCBvciBncmVhdGVyIHRoYW4gMTAwMDAgb3IgYSB6X3ZhcmlhYmxlX3F1YWxpdHlfZmxhZyBvdGhlciB0aGFuIDF8Mnw1IHdlcmUgcmVtb3ZlZC5cbiogVGVtcGVyYXR1cmUgdmFsdWVzIGxlc3MgdGhhbiAtNCBvciBncmVhdGVyIHRoYW4gNDAgb3Igd2l0aCBhIHRlbXBlcmF0dXJlX3F1YWxpdHlfZmxhZyBvdGhlciB0aGFuIDF8Mnw1IHdlcmUgc2V0IHRvIE5hTi5cbiogU2FsaW5pdHkgdmFsdWVzIGxlc3MgdGhhbiAwIG9yIGdyZWF0ZXIgdGhhbiA0MSBvciB3aXRoIGEgc2FsaW5pdHlfcXVhbGl0eV9mbGFnIG90aGVyIHRoYW4gMXwyfDUgd2VyZSBzZXQgdG8gTmFOLlxuKiBUaW1lIHZhbHVlcyB3ZXJlIGNvbnZlcnRlZCBmcm9tIFwiZGF5cyBzaW5jZSAxOTAwLTAxLTAxIDAwOjAwOjAwXCIgdG8gXCJzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBcIi5cblxuU2VlIHRoZSBRdWFsaXR5IEZsYWcgZGVmaW5pdGlvbnMgb24gcGFnZSA1IGFuZCBcIlRhYmxlIDIuMTogR2xvYmFsIEltcG9zc2libGUgUGFyYW1ldGVyIFZhbHVlc1wiIG9uIHBhZ2UgNjEgb2Zcbmh0dHBzOi8vd3d3Lm5vZGMubm9hYS5nb3YvR1RTUFAvZG9jdW1lbnQvcWNtYW5zL0dUU1BQX1JUX1FDX01hbnVhbF8yMDA5MDkxNi5wZGYgLlxuVGhlIFF1YWxpdHkgRmxhZyBkZWZpbml0aW9ucyBhcmUgYWxzbyBhdFxuaHR0cHM6Ly93d3cubm9kYy5ub2FhLmdvdi9HVFNQUC9kb2N1bWVudC9xY21hbnMvcWNmbGFncy5odG0gLlxuXG5jZG1fZGF0YV90eXBlID0gVHJhamVjdG9yeVByb2ZpbGVcblZBUklBQkxFUzpcbnRyYWplY3RvcnkgKFRyYWplY3RvcnkgSUQpXG4uLi4gKDExIG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZEd0c3BwQmVzdF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkR3RzcHBCZXN0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZEd0c3BwQmVzdC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3Lm5vZGMubm9hYS5nb3YvR1RTUFAvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZEd0c3BwQmVzdC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkR3RzcHBCZXN0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgTk9EQyIsICJlcmRHdHNwcEJlc3QiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkR2xvYmVjTW9jMS5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkR2xvYmVjTW9jMSIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRHbG9iZWNNb2MxLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkdMT0JFQyBORVAgTU9DTkVTUyBQbGFua3RvbiAoTU9DMSkgRGF0YSwgMjAwMC0yMDAyIiwgIkdMT0JFQyAoR0xPQmFsIE9jZWFuIEVDb3N5c3RlbXMgRHluYW1pY3MpIE5FUCAoTm9ydGhlYXN0IFBhY2lmaWMpIENhbGlmb3JuaWEgQ3VycmVudCBQcm9ncmFtXG5NT0NORVNTIFBsYW5rdG9uIChNT0MxKSBEYXRhXG5UaGUgTU9DTkVTUyBpcyBiYXNlZCBvbiB0aGUgVHVja2VyIFRyYXdsIHByaW5jaXBsZSAoVHVja2VyLCAxOTUxKS4gVGhlIE1PQ05FU1MtMSBoYXMgbmluZSByZWN0YW5ndWxhciBuZXRzICgxbSB4IDEuNCBtKSB3aGljaCBhcmUgb3BlbmVkIGFuZCBjbG9zZWQgc2VxdWVudGlhbGx5IGJ5IGNvbW1hbmRzIHRocm91Z2ggY29uZHVjdGluZyBjYWJsZSBmcm9tIHRoZSBzdXJmYWNlIChXaWViZSBldCBhbC4sIDE5NzYpLiBJbiBNT0NORVNTIHN5c3RlbXMsIFwidGhlIHVuZGVyd2F0ZXIgdW5pdCBzZW5kcyBhIGRhdGEgZnJhbWUsIGNvbXByaXNlZCBvZiB0ZW1wZXJhdHVyZSwgZGVwdGgsIGNvbmR1Y3Rpdml0eSwgbmV0LWZyYW1lIGFuZ2xlLCBmbG93IGNvdW50LCB0aW1lLCBudW1iZXIgb2Ygb3BlbiBuZXQsIGFuZCBuZXQgb3BlbmluZy9jbG9zaW5nLCB0byB0aGUgZGVjayB1bml0IGluIGEgY29tcHJlc3NlZCBoZXhhZGVjaW1hbCBmb3JtYXQgZXZlcnkgMiBzZWNvbmRzIGFuZCBmcm9tIHRoZSBkZWNrIHVuaXQgdG8gYSBtaWNyb2NvbXB1dGVyIGV2ZXJ5IDQgc2Vjb25kcy4uLiBUZW1wZXJhdHVyZSAodG8gYXBwcm94aW1hdGVseSAwLjAxIGRlZyBDKSBhbmQgY29uZHVjdGl2aXR5IGFyZSBtZWFzdXJlZCB3aXRoIFNFQUJJUkQgc2Vuc29ycy4gTm9ybWFsbHksIGEgbW9kaWZpZWQgVC5TLksuLWZsb3dtZXRlciBpcyB1c2VkLi4uIEJvdGggdGhlIHRlbXBlcmF0dXJlIGFuZCBjb25kdWN0aXZpdHkgc2Vuc29ycyBhbmQgdGhlIGZsb3dtZXRlciBhcmUgbW91bnRlZCBvbiB0b3Agb2YgdGhlIGZyYW1lIHNvIHRoYXQgdGhleSBmYWNlIGhvcml6b250YWxseSB3aGVuIHRoZSBmcmFtZSBpcyBhdCBhIHRvd2luZyBhbmdsZSBvZiA0NWRlZy4uLiBDYWxjdWxhdGlvbnMgb2Ygc2FsaW5pdHkgKHRvIGFwcHJveGltYXRlbHkgMC4wMSBvL29vIFMpLCBwb3RlbnRpYWwgdGVtcGVyYXR1cmUgKHRoZXRhKSwgcG90ZW50aWFsIGRlbnNpdHkgKHNpZ21hKSwgdGhlIG9ibGlxdWUgYW5kIHZlcnRpY2FsIHZlbG9jaXRpZXMgb2YgdGhlIG5ldCwgYW5kIHRoZSBhcHByb3hpbWF0ZSB2b2x1bWUgZmlsdGVyZWQgYnkgZWFjaCBuZXQgYXJlIG1hZGUgYWZ0ZXIgZWFjaCBzdHJpbmcgb2YgZGF0YSBoYXMgYmVlbiByZWNlaXZlZCBieSB0aGUgY29tcHV0ZXIuXCIgKFdpZWJlIGV0IGFsLiwgMTk4NSkgSW4gYWRkaXRpb24sIGRlcGVuZGluZyBvbiB0aGUgcGFydGljdWxhciBjb25maWd1cmF0aW9uIG9mIHRoZSBNT0NORVNTLTEsIGRhdGEgbWF5IGhhdmUgYmVlbiBjb2xsZWN0ZWQgZnJvbSBvdGhlciBzZW5zb3JzIGF0dGFjaGVkIHRvIHRoZSBmcmFtZSA6IChUcmFuc21pc3NvbWV0ZXIsIEZsdW9yb21ldGVyLCBEb3dud2VsbGluZyBsaWdodCBzZW5zb3IsIGFuZCB0aGUgT3h5Z2VuIHNlbnNvcikuIEEgU2VhQmlyZCB1bmRlcndhdGVyIHB1bXAgd2FzIGFsc28gaW5jbHVkZWQgaW4gdGhlIHNlbnNvciBzdWl0IGUuXG5BZnRlciByZXRyaWV2YWwgdG8gZGVjaywgdGhlIGNvbnRlbnRzIG9mIHRoZSBuZXRzIHdlcmUgcmluc2VkIGludG8gdGhlIGNvZGVuZHMgYSBuZCB0cmFuc2ZlcnJlZCB0byBzdG9yYWdlIGJvdHRsZXMsIGFuZCBmaXhlZCBhbmQgcHJlc2VydmVkIHdpdGggZm9ybWFsaW4uIEluIHRoZSBzaG9yZSBsYWJvcmF0b3J5LCB0aGUgY29udGVudHMgb2YgdGhlIGJvdHRsZXMgd2VyZSBzdWJzYW1wbGVkIGFuZCBjb3VudHMgYW5kIGJpb21hc3MgZXN0aW1hdGVzIG1hZGUgZm9yIHNlbGVjdGVkIHRheGEgKHNlZSB0aGUgUHJvY19Qcm90b2NvbCBpbmZvIGJlbG93KS4gVGhpcyBkYXRhIG9iamVjdCByZXBvcnRzIG9ubHkgdGhlIGNvdW50IGluZm9ybWF0aW9uLlxuXG5Gb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwOi8vY2lzLndob2kuZWR1L3NjaWVuY2UvYmNvZG1vL2RhdGFzZXQuY2ZtP2lkPTEwMTgyJmZsYWc9dmlld1xub3Jcbmh0dHA6Ly9nbG9iZWMud2hvaS5lZHUvamcvaW5mby9nbG9iZWMvbmVwL2Njcy9NT0MxJTdCZGlyPWdsb2JlYy53aG9pLmVkdS9qZy9kaXIvZ2xvYmVjL25lcC9jY3MvLGRhdGE9Z2xvYmVjLmNvYXMub3JlZ29uc3RhdGUuZWR1L2pnL3NlcnYvTU9DMS5odG1sMCU3RFxuXG5BbGwgaW5xdWlyaWVzIGFib3V0IHRoaXMgZGF0YSBzaG91bGQgYmUgZGlyZWN0ZWQgdG8gRHIuIFdpbGxpYW0gUGV0ZXJzb24gKGJpbGwucGV0ZXJzb25Abm9hYS5nb3YpLlxuSW5xdWlyaWVzIGFib3V0IGhvdyB0byBhY2Nlc3MgdGhpcyBkYXRhIHNob3VsZCBiZSBkaXJlY3RlZCB0byBEci4gSGFsIEJhdGNoZWxkZXIgKGhiYXRjaGVsZGVyQGNvYXMub3JlZ29uc3RhdGUuZWR1KS5cblxuY2RtX2RhdGFfdHlwZSA9IFRyYWplY3RvcnlcblZBUklBQkxFUzpcbmNydWlzZV9pZFxuLi4uICgyMiBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRHbG9iZWNNb2MxX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRHbG9iZWNNb2MxX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZEdsb2JlY01vYzEvaW5kZXguanNvbiIsICJodHRwOi8vd3d3Lmdsb2JlYy5vcmcvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZEdsb2JlY01vYzEucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZEdsb2JlY01vYzEmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiR0xPQkVDIiwgImVyZEdsb2JlY01vYzEiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkR2xvYmVjQmlyZHMuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZEdsb2JlY0JpcmRzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZEdsb2JlY0JpcmRzLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkdMT0JFQyBORVAgTm9ydGhlcm4gQ2FsaWZvcm5pYSBDdXJyZW50IEJpcmQgRGF0YSBOSDAwMDUsIDIwMDAtMjAwMCwgMDAwNyIsICJHTE9CRUMgKEdMT0JhbCBPY2VhbiBFQ29zeXN0ZW1zIER5bmFtaWNzKSBORVAgKE5vcnRoZWFzdCBQYWNpZmljKVxuTm9ydGhlcm4gQ2FsaWZvcm5pYSBDdXJyZW50IEJpcmQgRGF0YSBmcm9tIFIvViBOZXcgSG9yaXpvbiBjcnVpc2VzIE5IMDAwNSBhbmQgMDAwNy5cblxuQXMgYSBwYXJ0IG9mIHRoZSBHTE9CRUMtTm9ydGhlYXN0IFBhY2lmaWMgcHJvamVjdCwgd2UgaW52ZXN0aWdhdGVkIHZhcmlhdGlvbiBpbiB0aGUgYWJ1bmRhbmNlIG9mIG1hcmluZSBiaXJkcyBpbiB0aGUgY29udGV4dCBvZiBiaW9sb2dpY2FsIGFuZCBwaHlzaWNhbCBoYWJpdGF0IGNvbmRpdGlvbnMgaW4gdGhlIG5vcnRoZXJuIHBvcnRpb24gb2YgdGhlIENhbGlmb3JuaWEgQ3VycmVudCBTeXN0ZW0gKENDUykgZHVyaW5nIGNydWlzZXMgZHVyaW5nIHRoZSB1cHdlbGxpbmcgc2Vhc29uIDIwMDAuIENvbnRpbnVvdXMgc3VydmV5cyBvZiBzZWFiaXJkcyB3ZXJlIGNvbmR1Y3RlZCBzaW11bHRhbmVvdXNseSBpbiBKdW5lIChvbnNldCBvZiB1cHdlbGxpbmcpIGFuZCBBdWd1c3QgKG1hdHVyZSBwaGFzZSBvZiB1cHdlbGxpbmcpLlxuXG5TZWFiaXJkIHN1cnZleXMgd2VyZSBjb25kdWN0ZWQgY29udGludW91c2x5IGR1cmluZyBkYXlsaWdodCwgdXNpbmcgYSAzMDAtbS13aWRlIHRyYW5zZWN0IHN0cmlwLiBXaXRoaW4gdGhhdCBzdHJpcCwgYmlyZHMgd2VyZSBjb3VudGVkIHRoYXQgb2NjdXJyZWQgd2l0aGluIHRoZSA5MCBkZWdyZWUgcXVhZHJhbnQgb2ZmIHRoZSBzaGlwJ3MgYm93IHRoYXQgb2ZmZXJlZCB0aGUgYmVzdCBvYnNlcnZhdGlvbiBjb25kaXRpb25zLlxuXG5PYnNlcnZlZCBjb3VudHMgb2Ygc2VhYmlyZHMgcmVjb3JkZWQgYXMgZmx5aW5nIGluIGEgc3RlYWR5IGRpcmVjdGlvbiB3ZXJlIGFkanVzdGVkIGZvciB0aGUgZWZmZWN0IG9mIGZsaWdodCBzcGVlZCBhbmQgZGlyZWN0aW9uIHJlbGF0aXZlIHRvIHRoYXQgb2YgdGhlIHNoaXAgKFNwZWFyIGV0IGFsLiwgMTk5MjsgU3BlYXIgYW5kIEFpbmxleSwgMTk5N2IpLiBUaGUgZWZmZWN0IG9mIHN1Y2ggZmx1eCBpcyB0aGUgbW9zdCBzZXJpb3VzIGJpYXMgZW5jb3VudGVyZWQgZHVyaW5nIHNlYWJpcmQgc3VydmV5cyBhdCBzZWEgKFNwZWFyIGV0IGFsLiwgMjAwNSkuIEtub3duIGFzIHJhbmRvbSBkaXJlY3Rpb25hbCBtb3ZlbWVudCAoYXMgb3Bwb3NlZCB0byBub25yYW5kb20gZGlyZWN0aW9uYWwgbW92ZW1lbnQsIHdoaWNoIG9jY3VycyB3aGVuIGJpcmRzIGFyZSBhdHRyYWN0ZWQgb3IgcmVwZWxsZWQgZnJvbSB0aGUgc3VydmV5IHZlc3NlbCksIHRoaXMgcHJvYmxlbSB1c3VhbGx5IHJlc3VsdHMgaW4gZGVuc2l0eSBvdmVyZXN0aW1hdGlvbiBiZWNhdXNlIG1vc3Qgc3BlY2llcyBmbHkgZmFzdGVyIHRoYW4gc3VydmV5IHZlc3NlbHM7IGRlbnNpdGllcyBvZiBiaXJkcyB0aGF0IGZseSBzbG93ZXIgb3IgYXQgYSBzaW1pbGFyIHNwZWVkIGFzIHRoZSBzdXJ2ZXkgdmVzc2VsIChlLmcuLCBzdG9ybS1wZXRyZWxzKSwgb3IgYXJlIGZseWluZyBpbiB0aGUgc2FtZSBkaXJlY3Rpb24sIGFyZSB1c3VhbGx5IHVuZGVyZXN0aW1hdGVkIChTcGVhciBldCBhbC4sIDE5OTIpXG5cbihleHRyYWN0ZWQgZnJvbTogRGF2aWQgRy4gQWlubGV5LCBMYXJyeSBCLiBTcGVhciwgQ3ludGhpYSBULiBUeW5hbiwgSm9obiBBLiBCYXJ0aCwgU3RlcGhlbiBELiBQaWVyY2UsIFIuIEdsZW5uIEZvcmQgYW5kIFRpbW90aHkgSi4gQ293bGVzLCAyMDA1LiBQaHlzaWNhbCBhbmQgYmlvbG9naWNhbCB2YXJpYWJsZXMgYWZmZWN0aW5nIHNlYWJpcmQgZGlzdHJpYnV0aW9ucyBkdXJpbmcgdGhlIHVwd2VsbGluZyBzZWFzb24gb2YgdGhlIG5vcnRoZXJuIENhbGlmb3JuaWEgQ3VycmVudC4gRGVlcCBTZWEgUmVzZWFyY2ggUGFydCBJSTogVG9waWNhbCBTdHVkaWVzIGluIE9jZWFub2dyYXBoeSwgVm9sdW1lIDUyLCBJc3N1ZXMgMS0yLCBKYW51YXJ5IDIwMDUsIFBhZ2VzIDEyMy0xNDMpXG5cbkZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHA6Ly9jaXMud2hvaS5lZHUvc2NpZW5jZS9iY29kbW8vZGF0YXNldC5jZm0/aWQ9MTAwNTMmZmxhZz12aWV3XG5vclxuaHR0cDovL2dsb2JlYy53aG9pLmVkdS9qZy9pbmZvL2dsb2JlYy9uZXAvY2NzL2JpcmRzJTdCZGlyPWdsb2JlYy53aG9pLmVkdS9qZy9kaXIvZ2xvYmVjL25lcC9jY3MvLGRhdGE9Z2xvYmVjLndob2kuZWR1L2pnL3NlcnYvZ2xvYmVjL25lcC9jY3MvYmlyZHMuaHRtbDAlN0RcblxuQ29udGFjdDpcbkN5bnRoaWEgVC4gVHluYW4sIGN0eW5hbkB3aG9pLmVkdSwgV29vZHMgSG9sZSBPY2Vhbm9ncmFwaGljIEluc3RpdHV0aW9uXG5EYXZpZCBHLiBBaW5sZXksIGRhaW5sZXlAcGVuZ3VpbnNjaWVuY2UuY29tLCBILlQuIEhhcnZleSAmIEFzc29jaWF0ZXNcblxuY2RtX2RhdGFfdHlwZSA9IFRyYWplY3RvcnlcblZBUklBQkxFUzpcbnRyYW5zX25vIChUcmFuc2VjdCBOdW1iZXIpXG4uLi4gKDEyIG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZEdsb2JlY0JpcmRzX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRHbG9iZWNCaXJkc19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRHbG9iZWNCaXJkcy9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cuZ2xvYmVjLm9yZy8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkR2xvYmVjQmlyZHMucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZEdsb2JlY0JpcmRzJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkdMT0JFQyIsICJlcmRHbG9iZWNCaXJkcyJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRHbG9iZWNDZXRhY2VhbnMuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZEdsb2JlY0NldGFjZWFucyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRHbG9iZWNDZXRhY2VhbnMuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiR0xPQkVDIE5FUCBOb3J0aGVybiBDYWxpZm9ybmlhIEN1cnJlbnQgQ2V0YWNlYW4gU3VydmV5IERhdGEsIE5IMDAwNSwgMjAwMC0yMDAwLCAwMDA3IiwgIkdMT0JFQyAoR0xPQmFsIE9jZWFuIEVDb3N5c3RlbXMgRHluYW1pY3MpIE5FUCAoTm9ydGhlYXN0IFBhY2lmaWMpXG5Ob3J0aGVybiBDYWxpZm9ybmlhIEN1cnJlbnQgQ2V0YWNlYW4gU3VydmV5IERhdGEgZnJvbSBSL1YgTmV3IEhvcml6b24gY3J1aXNlcyBOSDAwMDUgYW5kIDAwMDcuXG5cbkxpbmUtdHJhbnNlY3Qgc3VydmV5cyBvZiBjZXRhY2VhbnMgd2VyZSBjb25kdWN0ZWQgZHVyaW5nIHR3byBjcnVpc2VzIG9mIHRoZSBHTE9CRUMgTm9ydGhlYXN0IFBhY2lmaWMgTm9ydGhlcm4gQ2FsaWZvcm5pYSBDdXJyZW50IChOQ0MpIHByb2dyYW0gaW4gMjAwMDogTWF5IDI5IC1KdW5lIDEzIGFuZCBKdWx5IDI3IC0gQXVndXN0IDEyLiAgIFN1cnZleXMgd2VyZSBjb25kdWN0ZWQgYWNyb3NzIHRoZSBzaGVsZiBhbmQgc2xvcGUgb2ZmIE9yZWdvbiBhbmQgbm9ydGhlcm4gQ2FsaWZvcm5pYSAoNDEuOSAtIDQ0LjY1TikgZnJvbSB0aGUgY29hc3QgdG8gfjEyNS41Vy4gICBTdXJ2ZXlzIHdlcmUgY29uZHVjdGVkIGluIHBhc3NpbmcgbW9kZSB3aGlsZSB0aGUgUi9WIE5ldyBIb3Jpem9uIHdhcyBpbiB0cmFuc2l0IGJldHdlZW4gc3RhdGlvbnMgZm9yIGh5ZHJvZ3JhcGhpYyBhbmQgem9vcGxhbmt0b24gc2FtcGxpbmcuICAgT2JzZXJ2YXRpb25zIHdlcmUgY29uZHVjdGVkIGZyb20gdGhlIGZseWluZyBicmlkZ2UgZHVyaW5nIGRheWxpZ2h0ICh+MDYwMCB0byAyMDMwKSB3aGVuZXZlciBzdWZmaWNpZW50IHZpc2liaWxpdHkgKGkuZS4sID4gMiBubSkgYW5kIHdlYXRoZXIgKGkuZS4sIDwgQmVhdWZvcnQgNikgYWxsb3dlZC4gICBUd28gb2JzZXJ2ZXJzIHNpbXVsdGFuZW91c2x5IHN1cnZleWVkIHRvIHRoZSBob3Jpem9uIHdpdGggMjUgeCAxNTAgYmlub2N1bGFycywgZXF1aXBwZWQgd2l0aCBjb21wYXNzIGFuZCByZXRpY2xlLiAgIEVhY2ggb2JzZXJ2ZXIgc3VydmV5ZWQgYSAxMDAgZGVncmVlIGFyYyBmcm9tIDEwIGRlZ3JlZXMgb2ZmIHRoZSBib3cgKG9wcG9zaXRlIHNpZGUpIHRvIDkwIGRlZ3JlZXMgb24gdGhlaXIgc2lkZSBvZiB0aGUgc2hpcC4gICBBIHRoaXJkIG9ic2VydmVyIGZvY3VzZWQgb24gdGhlIHRyYWNrLWxpbmUgYnkgZXllLCBhaWRlZCB3aXRoIDcgeCA1MCBoYW5kLWhlbGQgYmlub2N1bGFycy4gICBTaWdodGluZ3Mgd2VyZSBlbnRlcmVkIGltbWVkaWF0ZWx5IG9uIGEgbGFwdG9wIGNvbXB1dGVyIGNvbm5lY3RlZCB0byB0aGUgc2hpcCdzIEdQUyBzeXN0ZW0uICAgUG9zaXRpb25zIG9mIGFsbCBzaWdodGluZ3Mgd2VyZSBjb3JyZWN0ZWQgdG8gcmVmbGVjdCB0aGUgYWN0dWFsIGxvY2F0aW9uIG9mIHRoZSBjZXRhY2VhbnMsIHJhdGhlciB0aGFuIHRoZSBzaGlwJ3MgcG9zaXRpb24uICAgVGhlIGhlaWdodCBmcm9tIHRoZSBzdXJmYWNlIG9mIHRoZSB3YXRlciB0byB0aGUgZXllcyBvZiBvYnNlcnZlcnMgb24gdGhlIDI1IHggMTUwIGJpbm9jdWxhcnMgd2FzIDEwLjg3IG0uXG5cbkZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWU6XG5odHRwOi8vY2lzLndob2kuZWR1L3NjaWVuY2UvYmNvZG1vL2RhdGFzZXQuY2ZtP2lkPTEwMDU1JmZsYWc9dmlld1xub3Jcbmh0dHA6Ly9nbG9iZWMud2hvaS5lZHUvamcvaW5mby9nbG9iZWMvbmVwL2Njcy9jZXRhY2VhbnMlN0JkaXI9Z2xvYmVjLndob2kuZWR1L2pnL2Rpci9nbG9iZWMvbmVwL2Njcy8sZGF0YT1nbG9iZWMud2hvaS5lZHUvamcvc2Vydi9nbG9iZWMvbmVwL2Njcy9jZXRhY2VhbnMuaHRtbDAlN0RcblxuQ29udGFjdCBQSXM6XG5DeW50aGlhIFQuIFR5bmFuLCBjdHluYW5Ad2hvaS5lZHUsIFdvb2RzIEhvbGUgT2NlYW5vZ3JhcGhpYyBJbnN0aXR1dGlvblxuRGF2aWQgRy4gQWlubGV5LCBkYWlubGV5QHBlbmd1aW5zY2llbmNlLmNvbSwgSC5ULiBIYXJ2ZXkgJiBBc3NvY2lhdGVzXG5cbmNkbV9kYXRhX3R5cGUgPSBUcmFqZWN0b3J5XG5WQVJJQUJMRVM6XG5jcnVpc2VfaWRcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuLi4uICg3IG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZEdsb2JlY0NldGFjZWFuc19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkR2xvYmVjQ2V0YWNlYW5zX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZEdsb2JlY0NldGFjZWFucy9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cuZ2xvYmVjLm9yZy8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkR2xvYmVjQ2V0YWNlYW5zLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmRHbG9iZWNDZXRhY2VhbnMmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiR0xPQkVDIiwgImVyZEdsb2JlY0NldGFjZWFucyJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRHbG9iZWNCb3R0bGUuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZEdsb2JlY0JvdHRsZSIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRHbG9iZWNCb3R0bGUuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiR0xPQkVDIE5FUCBSb3NldHRlIEJvdHRsZSBEYXRhICgyMDAyKSIsICJHTE9CRUMgKEdMT0JhbCBPY2VhbiBFQ29zeXN0ZW1zIER5bmFtaWNzKSBORVAgKE5vcnRoZWFzdCBQYWNpZmljKVxuUm9zZXR0ZSBCb3R0bGUgRGF0YSBmcm9tIE5ldyBIb3Jpem9uIENydWlzZSAoTkgwMjA3OiAxLTE5IEF1Z3VzdCAyMDAyKS5cbk5vdGVzOlxuUGh5c2ljYWwgZGF0YSBwcm9jZXNzZWQgYnkgSmFuZSBGbGVpc2NoYmVpbiAoT1NVKS5cbkNobG9yb3BoeWxsIHJlYWRpbmdzIGRvbmUgYnkgTGVhaCBGZWluYmVyZyAoT1NVKS5cbk51dHJpZW50IGFuYWx5c2lzIGRvbmUgYnkgQnVya2UgSGFsZXMgKE9TVSkuXG5TYWwwMCAtIHNhbGluaXR5IGNhbGN1bGF0ZWQgZnJvbSBwcmltYXJ5IHNlbnNvcnMgKEMwLFQwKS5cblNhbDExIC0gc2FsaW5pdHkgY2FsY3VsYXRlZCBmcm9tIHNlY29uZGFyeSBzZW5zb3JzIChDMSxUMSkuXG5zZWNvbmRhcnkgc2Vuc29yIHBhaXIgd2FzIHVzZWQgaW4gZmluYWwgcHJvY2Vzc2luZyBvZiBDVEQgZGF0YSBmb3Jcbm1vc3Qgc3RhdGlvbnMgYmVjYXVzZSB0aGUgcHJpbWFyeSBoYWQgbW9yZSBub2lzZSBhbmQgc3Bpa2VzLiBUaGVcbnByaW1hcnkgcGFpciB3ZXJlIHVzZWQgZm9yIGNhc3QgIzksIDI0LCA0OCwgMTExIGFuZCAxNTAgZHVlIHRvXG5tdWx0aXBsZSBzcGlrZXMgb3Igb2Zmc2V0cyBpbiB0aGUgc2Vjb25kYXJ5IHBhaXIuXG5OdXRyaWVudCBzYW1wbGVzIHdlcmUgY29sbGVjdGVkIGZyb20gbW9zdCBib3R0bGVzOyBhbGwgbnV0cmllbnQgZGF0YVxuZGV2ZWxvcGVkIGZyb20gc2FtcGxlcyBmcm96ZW4gZHVyaW5nIHRoZSBjcnVpc2UgYW5kIGFuYWx5emVkIGFzaG9yZTtcbmRhdGEgZGV2ZWxvcGVkIGJ5IEJ1cmtlIEhhbGVzIChPU1UpLlxuT3BlcmF0aW9uIERldGVjdGlvbiBMaW1pdHMgZm9yIE51dHJpZW50IENvbmNlbnRyYXRpb25zXG5OdXRyaWVudCAgUmFuZ2UgICAgICAgICBNZWFuICAgIFZhcmlhYmxlICAgICAgICAgVW5pdHNcblBPNCAgICAgICAwLjAwMy0wLjAwNCAgIDAuMDA0ICAgUGhvc3BoYXRlICAgICAgICBtaWNyb21vbGVzIHBlciBsaXRlclxuTitOICAgICAgIDAuMDQtMC4wOCAgICAgMC4wNiAgICBOaXRyYXRlK05pdHJpdGUgIG1pY3JvbW9sZXMgcGVyIGxpdGVyXG5TaSAgICAgICAgMC4xMy0wLjI0ICAgICAwLjE2ICAgIFNpbGljYXRlICAgICAgICAgbWljcm9tb2xlcyBwZXIgbGl0ZXJcbk5PMiAgICAgICAwLjAwMy0wLjAwNCAgIDAuMDAzICAgTml0cml0ZSAgICAgICAgICBtaWNyb21vbGVzIHBlciBsaXRlclxuRGF0ZXMgYW5kIFRpbWVzIGFyZSBVVEMuXG5cbkZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHA6Ly9jaXMud2hvaS5lZHUvc2NpZW5jZS9iY29kbW8vZGF0YXNldC5jZm0/aWQ9MTAxODAmZmxhZz12aWV3XG5cbklucXVpcmllcyBhYm91dCBob3cgdG8gYWNjZXNzIHRoaXMgZGF0YSBzaG91bGQgYmUgZGlyZWN0ZWQgdG9cbkRyLiBIYWwgQmF0Y2hlbGRlciAoaGJhdGNoZWxkZXJAY29hcy5vcmVnb25zdGF0ZS5lZHUpLlxuXG5jZG1fZGF0YV90eXBlID0gVHJhamVjdG9yeVByb2ZpbGVcblZBUklBQkxFUzpcbmNydWlzZV9pZFxuLi4uICgyNCBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRHbG9iZWNCb3R0bGVfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2VyZEdsb2JlY0JvdHRsZV9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRHbG9iZWNCb3R0bGUvaW5kZXguanNvbiIsICJodHRwOi8vd3d3Lmdsb2JlYy5vcmcvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZEdsb2JlY0JvdHRsZS5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkR2xvYmVjQm90dGxlJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkdMT0JFQyIsICJlcmRHbG9iZWNCb3R0bGUiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkR2xvYmVjVnB0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRHbG9iZWNWcHQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkR2xvYmVjVnB0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkdMT0JFQyBORVAgVmVydGljYWwgUGxhbmt0b24gVG93IChWUFQpIERhdGEsIDE5OTctMjAwMSIsICJHTE9CRUMgKEdMT0JhbCBPY2VhbiBFQ29zeXN0ZW1zIER5bmFtaWNzKSBORVAgKE5vcnRoZWFzdCBQYWNpZmljKVxuQ2FsaWZvcm5pYSBDdXJyZW50IFByb2dyYW1cblZlcnRpY2FsIFBsYW5rdG9uIFRvdyAoVlBUKSBEYXRhXG5cbkZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHA6Ly9jaXMud2hvaS5lZHUvc2NpZW5jZS9iY29kbW8vZGF0YXNldC5jZm0/aWQ9MTAxODEmZmxhZz12aWV3XG5vclxuaHR0cDovL2dsb2JlYy53aG9pLmVkdS9qZy9pbmZvL2dsb2JlYy9uZXAvY2NzL3ZwdCU3QmRpcj1nbG9iZWMud2hvaS5lZHUvamcvZGlyL2dsb2JlYy9uZXAvY2NzLyxkYXRhPWdsb2JlYy5jb2FzLm9yZWdvbnN0YXRlLmVkdS9qZy9zZXJ2L3ZwdC5odG1sMCU3RFxuXG5BbGwgaW5xdWlyaWVzIGFib3V0IHRoaXMgZGF0YSBzaG91bGQgYmUgZGlyZWN0ZWQgdG8gRHIuIFdpbGxpYW0gUGV0ZXJzb24gKGJpbGwucGV0ZXJzb25Abm9hYS5nb3YpLlxuSW5xdWlyaWVzIGFib3V0IGhvdyB0byBhY2Nlc3MgdGhpcyBkYXRhIHNob3VsZCBiZSBkaXJlY3RlZCB0byBEci4gSGFsIEJhdGNoZWxkZXIgKGhiYXRjaGVsZGVyQGNvYXMub3JlZ29uc3RhdGUuZWR1KS5cblxuY2RtX2RhdGFfdHlwZSA9IFRyYWplY3RvcnlcblZBUklBQkxFUzpcbmNydWlzZV9pZFxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5jYXN0X25vIChDYXN0IE51bWJlciBXaXRoaW4gdGhlIENydWlzZSlcbnN0YXRpb25faWRcbmFidW5kX20zIChBYnVuZGFuY2UsIGNvdW50IG0tMylcbmNvbW1lbnRzXG5jb3VudGVyX2lkXG5kX25fZmxhZyAoRGF5L05pZ2h0IEZsYWcpXG5nZWFyX2FyZWEgKE1vdXRoIEFyZWEgb2YgTmV0LCBtMilcbmdlYXJfbWVzaCAoTmV0J3MgTWVzaCBTaXplLCBtbSlcbmdlYXJfdHlwZVxuZ2VudXNfc3BlY2llc1xubGlmZV9zdGFnZVxubG9jYWxfY29kZVxuLi4uICg4IG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZEdsb2JlY1ZwdF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkR2xvYmVjVnB0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZEdsb2JlY1ZwdC9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cuZ2xvYmVjLm9yZy8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkR2xvYmVjVnB0LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmRHbG9iZWNWcHQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiR0xPQkVDIiwgImVyZEdsb2JlY1ZwdCJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkR29kYWVTZmNvYnMiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkR29kYWVTZmNvYnMuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiR09EQUUsIFNGQ09CUyAtIFN1cmZhY2UgVGVtcGVyYXR1cmUgT2JzZXJ2YXRpb25zLCAxOTk4LXByZXNlbnQiLCAiR09EQUUsIFNGQ09CUyAtIFN1cmZhY2UgVGVtcGVyYXR1cmUgT2JzZXJ2YXRpb25zOiBTaGlwLCBmaXhlZC9kcmlmdGluZyBidW95LCBhbmQgQ01BTiBpbi1zaXR1IHN1cmZhY2UgdGVtcGVyYXR1cmUuICBHbG9iYWwgVGVsZWNvbW11bmljYXRpb24gU3lzdGVtIChHVFMpIERhdGEuXG4gICAgICAgIFxuVGhlIEdsb2JhbCBPY2VhbiBEYXRhIEFzc2ltaWxhdGlvbiBFeHBlcmltZW50IChHT0RBRSkgaXMgYSBwcmFjdGljYWwgZGVtb25zdHJhdGlvbiBvZiBuZWFyLXJlYWwtdGltZSwgZ2xvYmFsIG9jZWFuIGRhdGEgYXNzaW1pbGF0aW9uIHRoYXQgcHJvdmlkZXMsIHJlZ3VsYXIsIGNvbXBsZXRlIGRlc2NyaXB0aW9ucyBvZiB0aGUgdGVtcGVyYXR1cmUsIHNhbGluaXR5IGFuZCB2ZWxvY2l0eSBzdHJ1Y3R1cmVzIG9mIHRoZSBvY2VhbiBpbiBzdXBwb3J0IG9mIG9wZXJhdGlvbmFsIG9jZWFub2dyYXBoeSwgc2Vhc29uYWwtdG8tZGVjYWRhbCBjbGltYXRlIGZvcmVjYXN0cyBhbmQgYW5hbHlzZXMsIGFuZCBvY2Vhbm9ncmFwaGljIHJlc2VhcmNoLiBUaGUgR09EQUUgTW9udGVyZXkgU2VydmVyLCBzcG9uc29yZWQgbWFpbmx5IGJ5IHRoZSBPZmZpY2Ugb2YgTmF2YWwgUmVzZWFyY2ggKE9OUiksIGlzIGludGVuZGVkIHRvIGJlIGEgcHJpbmNpcGFsIG5vZGUgaW4gdGhlIEdPREFFIGFyY2hpdGVjdHVyZS5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxudGltZSAoT2JzZXJ2YXRpb24gVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbm9iX2NsbSAoR0RFTSBDbGltYXRvbG9naWNhbCBTU1QsIGRlZ3JlZV9DKVxub2JfY3NnbSAoR0RFTSBTU1QgQ2xpbWF0b2xvZ2ljYWwgVmFyaWFiaWxpdHksIGRlZ3JlZV9DKVxub2JfZ2xiIChHbG9iYWwgQW5hbHlzaXMgU1NUIEVzdGltYXRlLCBkZWdyZWVfQylcbm9iX2dzZ20gKEdsb2JhbCBBbmFseXNpcyBTU1QgVmFyaWFiaWxpdHkgRXN0aW1hdGUsIGRlZ3JlZV9DKVxub2JfcWMgKFByb2JhYmlsaXR5IG9mIGdyb3NzIGVycm9yIGluIFNTVClcbm9iX3JjcHQgKFNTVCBvYnNlcnZhdGlvbiByZWNlaXB0IHRpbWUgYXQgRk5NT0MsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5vYl9yZ24gKFJlZ2lvbmFsIEFuYWx5c2lzIFNTVCBFc3RpbWF0ZSwgZGVncmVlX0MpXG5vYl9yc2dtIChSZWdpb25hbCBBbmFseXNpcyBTU1QgVmFyaWFiaWxpdHkgRXN0aW1hdGUsIGRlZ3JlZV9DKVxub2Jfc2lnbiAoU1NUIG9ic2VydmF0aW9uIGNhbGwgc2lnbilcbm9iX3NzdCAoU2VhIFN1cmZhY2UgVGVtcGVyYXR1cmUsIGRlZ3JlZV9DKVxub2JfdHlwIChTU1Qgb2JzZXJhdGlvbiBkYXRhIHR5cGUpXG5vYl93bSAoU1NUIHdhdGVyIG1hc3MgaW5kaWNhdG9yKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZEdvZGFlU2Zjb2JzX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRHb2RhZVNmY29ic19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRHb2RhZVNmY29icy9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cudXNnb2RhZS5vcmcvY2dpLWJpbi9kYXRhbGlzdC5wbD9zdW1tYXJ5PUdvJmRzZXQ9Zm5tb2Nfb2JzX3NmY29icyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lcmRHb2RhZVNmY29icy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkR29kYWVTZmNvYnMmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiRk5NT0MgR09EQUUiLCAiZXJkR29kYWVTZmNvYnMiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbndpb29zQWRjcDE5OTUuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL253aW9vc0FkY3AxOTk1IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL253aW9vc0FkY3AxOTk1LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkhha2UgU3VydmV5IEFEQ1AgKDE5OTUpIiwgIlNoaXBib2FyZCBhY291c3RpYyBEb3BwbGVyIGN1cnJlbnQgcHJvZmlsZXIgZGF0YSBjb2xsZWN0ZWQgZHVyaW5nIHRoZVxuSW50ZWdyYXRlZCBBY291c3RpYyBhbmQgVHJhd2wgU3VydmV5cyBvZiBQYWNpZmljIEhha2UuXG5Qcm9jZXNzaW5nIGJ5OiAgU3RlcGhlbiBQaWVyY2UsIE9yZWdvbiBTdGF0ZSBVbml2ZXJzaXR5XG4oUC4gTS4gS29zcm8gYWxzbyBwZXJmb3JtZWQgc29tZSBwcm9jZXNzaW5nIHN0ZXBzIGluIHRoZSAxOTk4IGNhc2UpXG5EYXRlOiAgMTYgQXVndXN0IDIwMDZcbkRhdGEgcXVhbGl0eTogR29vZCBpbiBnZW5lcmFsXG5NaXNzaW5nIG9yIHBvb3ItcXVhbGl0eSBkYXRhIGhhdmUgYmVlbiBvbWl0dGVkLlxuXG5UaGlzIGRhdGFzZXQgaGFzIGEgc2ltcGxlIHNpbXBsZSB2ZXJzaW9uIG9mIG9ic2VydmVkIHZlbG9jaXRpZXMsIHVzZWZ1bFxuZm9yIG1vc3QgcHVycG9zZXMuICBUaGUgY29tcGxldGUgZGF0YSBzZXRzIHdpdGggYWxsIGNvbmZpZ3VyYXRpb24gYW5kXG5wcm9jZXNzaW5nIGRldGFpbHMgYW5kIGRpYWdub3N0aWMgZGF0YSAoZS5nLiBlcnJvciB2ZWxvY2l0eSwgQUdDLFxuc3BlY3RyYWwgd2lkdGgpIGFyZSBhdmFpbGFibGUgZnJvbSB0aGUgTk9EQyBKb2ludCBBcmNoaXZlIGZvciBTaGlwYm9hcmRcbkFEQ1AsIG9yIGJ5IHJlcXVlc3QgZnJvbSBTLiBQaWVyY2UuXG5cblByb2Nlc3Npbmcgc3RlcHMgaW5jbHVkZWQ6ICBlZGl0aW5nIG9mIHRoZSBkYXRhIHVzaW5nIHZhcmlvdXNcbmRpYWdub3N0aWNzLCBjYWxpYnJhdGlvbiBvZiB0aGUgcGhhc2UgYW5kIGFtcGxpdHVkZSBlcnJvcnMgb2YgdGhlXG5BRENQL25hdmlnYXRpb24vZ3lyb2NvbXBhc3Mgc3lzdGVtIGJ5IGNvdmFyaWFiaWxpdHkgYW5hbHlzaXMgYmV0d2VlblxuY3VycmVudHMgYW5kIHNoaXAgdmVsb2NpdHksIHJlZmVyZW5jZSBsYXllciB2ZWxvY2l0eSBzbW9vdGhpbmcsIGFuZFxuZmluYWwgcHJvZHVjdGlvbiBvZiBlYXJ0aC1yZWZlcmVuY2VkIHZlbG9jaXRpZXMuICBGb3IgbW9yZSBkZXRhaWxzXG5yZWdhcmRpbmcgbWV0aG9kcywgc2VlOiAgUGllcmNlIGV0IGFsLiAoMjAwMCksIERTUiBJSSA0NywgODExLTgyOS5cblxuQ29udGFjdDogRHIuIFN0ZXBoZW4gRC4gUGllcmNlLCBzcGllcmNlQGNvYXMub3JlZ29uc3RhdGUuZWR1XG5cbmNkbV9kYXRhX3R5cGUgPSBPdGhlclxuVkFSSUFCTEVTOlxueWVhclxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmRlcHRoIChtKVxueWVhcmRheSAodGltZSlcbmVhc3R2IChFYXN0d2FyZCBTZWEgV2F0ZXIgVmVsb2NpdHksIG0gcy0xKVxubm9ydGh2IChOb3J0aHdhcmQgU2VhIFdhdGVyIFZlbG9jaXR5LCBtIHMtMSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9ud2lvb3NBZGNwMTk5NV9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvbndpb29zQWRjcDE5OTVfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vbndpb29zQWRjcDE5OTUvaW5kZXguanNvbiIsICJodHRwOi8vbndpb29zLmNvYXMub3JlZ29uc3RhdGUuZWR1OjgwODAvZG9kcy9kcmRzLzE5OTUlMjBIYWtlJTIwU3VydmV5JTIwQURDUC5pbmZvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL253aW9vc0FkY3AxOTk1LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1ud2lvb3NBZGNwMTk5NSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJPU1UiLCAibndpb29zQWRjcDE5OTUiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbndpb29zQWRjcDE5OTguc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL253aW9vc0FkY3AxOTk4IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL253aW9vc0FkY3AxOTk4LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkhha2UgU3VydmV5IEFEQ1AgKDE5OTgpIiwgIlNoaXBib2FyZCBhY291c3RpYyBEb3BwbGVyIGN1cnJlbnQgcHJvZmlsZXIgZGF0YSBjb2xsZWN0ZWQgZHVyaW5nIHRoZVxuSW50ZWdyYXRlZCBBY291c3RpYyBhbmQgVHJhd2wgU3VydmV5cyBvZiBQYWNpZmljIEhha2UuXG5Qcm9jZXNzaW5nIGJ5OiAgU3RlcGhlbiBQaWVyY2UsIE9yZWdvbiBTdGF0ZSBVbml2ZXJzaXR5XG4oUC4gTS4gS29zcm8gYWxzbyBwZXJmb3JtZWQgc29tZSBwcm9jZXNzaW5nIHN0ZXBzIGluIHRoZSAxOTk4IGNhc2UpXG5EYXRlOiAgMTYgQXVndXN0IDIwMDZcbkRhdGEgcXVhbGl0eTogR29vZCBpbiBnZW5lcmFsXG5NaXNzaW5nIG9yIHBvb3ItcXVhbGl0eSBkYXRhIGhhdmUgYmVlbiBvbWl0dGVkLlxuXG5UaGlzIGRhdGFzZXQgaGFzIGEgc2ltcGxlIHNpbXBsZSB2ZXJzaW9uIG9mIG9ic2VydmVkIHZlbG9jaXRpZXMsIHVzZWZ1bFxuZm9yIG1vc3QgcHVycG9zZXMuICBUaGUgY29tcGxldGUgZGF0YSBzZXRzIHdpdGggYWxsIGNvbmZpZ3VyYXRpb24gYW5kXG5wcm9jZXNzaW5nIGRldGFpbHMgYW5kIGRpYWdub3N0aWMgZGF0YSAoZS5nLiBlcnJvciB2ZWxvY2l0eSwgQUdDLFxuc3BlY3RyYWwgd2lkdGgpIGFyZSBhdmFpbGFibGUgZnJvbSB0aGUgTk9EQyBKb2ludCBBcmNoaXZlIGZvciBTaGlwYm9hcmRcbkFEQ1AsIG9yIGJ5IHJlcXVlc3QgZnJvbSBTLiBQaWVyY2UuXG5cblByb2Nlc3Npbmcgc3RlcHMgaW5jbHVkZWQ6ICBlZGl0aW5nIG9mIHRoZSBkYXRhIHVzaW5nIHZhcmlvdXNcbmRpYWdub3N0aWNzLCBjYWxpYnJhdGlvbiBvZiB0aGUgcGhhc2UgYW5kIGFtcGxpdHVkZSBlcnJvcnMgb2YgdGhlXG5BRENQL25hdmlnYXRpb24vZ3lyb2NvbXBhc3Mgc3lzdGVtIGJ5IGNvdmFyaWFiaWxpdHkgYW5hbHlzaXMgYmV0d2VlblxuY3VycmVudHMgYW5kIHNoaXAgdmVsb2NpdHksIHJlZmVyZW5jZSBsYXllciB2ZWxvY2l0eSBzbW9vdGhpbmcsIGFuZFxuZmluYWwgcHJvZHVjdGlvbiBvZiBlYXJ0aC1yZWZlcmVuY2VkIHZlbG9jaXRpZXMuICBGb3IgbW9yZSBkZXRhaWxzXG5yZWdhcmRpbmcgbWV0aG9kcywgc2VlOiAgUGllcmNlIGV0IGFsLiAoMjAwMCksIERTUiBJSSA0NywgODExLTgyOS5cblxuQ29udGFjdDogRHIuIFN0ZXBoZW4gRC4gUGllcmNlLCBzcGllcmNlQGNvYXMub3JlZ29uc3RhdGUuZWR1XG5cbmNkbV9kYXRhX3R5cGUgPSBPdGhlclxuVkFSSUFCTEVTOlxueWVhclxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmRlcHRoIChtKVxueWVhcmRheSAodGltZSlcbmVhc3R2IChFYXN0d2FyZCBTZWEgV2F0ZXIgVmVsb2NpdHksIG0gcy0xKVxubm9ydGh2IChOb3J0aHdhcmQgU2VhIFdhdGVyIFZlbG9jaXR5LCBtIHMtMSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9ud2lvb3NBZGNwMTk5OF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvbndpb29zQWRjcDE5OThfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vbndpb29zQWRjcDE5OTgvaW5kZXguanNvbiIsICJodHRwOi8vbndpb29zLmNvYXMub3JlZ29uc3RhdGUuZWR1OjgwODAvZG9kcy9kcmRzLzE5OTglMjBIYWtlJTIwU3VydmV5JTIwQURDUC5pbmZvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL253aW9vc0FkY3AxOTk4LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1ud2lvb3NBZGNwMTk5OCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJPU1UiLCAibndpb29zQWRjcDE5OTgiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbndpb29zQWRjcDIwMDEuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL253aW9vc0FkY3AyMDAxIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL253aW9vc0FkY3AyMDAxLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkhha2UgU3VydmV5IEFEQ1AgKDIwMDEpIiwgIlNoaXBib2FyZCBhY291c3RpYyBEb3BwbGVyIGN1cnJlbnQgcHJvZmlsZXIgZGF0YSBjb2xsZWN0ZWQgZHVyaW5nIHRoZVxuSW50ZWdyYXRlZCBBY291c3RpYyBhbmQgVHJhd2wgU3VydmV5cyBvZiBQYWNpZmljIEhha2UuXG5Qcm9jZXNzaW5nIGJ5OiAgU3RlcGhlbiBQaWVyY2UsIE9yZWdvbiBTdGF0ZSBVbml2ZXJzaXR5XG4oUC4gTS4gS29zcm8gYWxzbyBwZXJmb3JtZWQgc29tZSBwcm9jZXNzaW5nIHN0ZXBzIGluIHRoZSAxOTk4IGNhc2UpXG5EYXRlOiAgMTYgQXVndXN0IDIwMDZcbkRhdGEgcXVhbGl0eTogR29vZCBpbiBnZW5lcmFsXG5NaXNzaW5nIG9yIHBvb3ItcXVhbGl0eSBkYXRhIGhhdmUgYmVlbiBvbWl0dGVkLlxuXG5UaGlzIGRhdGFzZXQgaGFzIGEgc2ltcGxlIHNpbXBsZSB2ZXJzaW9uIG9mIG9ic2VydmVkIHZlbG9jaXRpZXMsIHVzZWZ1bFxuZm9yIG1vc3QgcHVycG9zZXMuICBUaGUgY29tcGxldGUgZGF0YSBzZXRzIHdpdGggYWxsIGNvbmZpZ3VyYXRpb24gYW5kXG5wcm9jZXNzaW5nIGRldGFpbHMgYW5kIGRpYWdub3N0aWMgZGF0YSAoZS5nLiBlcnJvciB2ZWxvY2l0eSwgQUdDLFxuc3BlY3RyYWwgd2lkdGgpIGFyZSBhdmFpbGFibGUgZnJvbSB0aGUgTk9EQyBKb2ludCBBcmNoaXZlIGZvciBTaGlwYm9hcmRcbkFEQ1AsIG9yIGJ5IHJlcXVlc3QgZnJvbSBTLiBQaWVyY2UuXG5cblByb2Nlc3Npbmcgc3RlcHMgaW5jbHVkZWQ6ICBlZGl0aW5nIG9mIHRoZSBkYXRhIHVzaW5nIHZhcmlvdXNcbmRpYWdub3N0aWNzLCBjYWxpYnJhdGlvbiBvZiB0aGUgcGhhc2UgYW5kIGFtcGxpdHVkZSBlcnJvcnMgb2YgdGhlXG5BRENQL25hdmlnYXRpb24vZ3lyb2NvbXBhc3Mgc3lzdGVtIGJ5IGNvdmFyaWFiaWxpdHkgYW5hbHlzaXMgYmV0d2VlblxuY3VycmVudHMgYW5kIHNoaXAgdmVsb2NpdHksIHJlZmVyZW5jZSBsYXllciB2ZWxvY2l0eSBzbW9vdGhpbmcsIGFuZFxuZmluYWwgcHJvZHVjdGlvbiBvZiBlYXJ0aC1yZWZlcmVuY2VkIHZlbG9jaXRpZXMuICBGb3IgbW9yZSBkZXRhaWxzXG5yZWdhcmRpbmcgbWV0aG9kcywgc2VlOiAgUGllcmNlIGV0IGFsLiAoMjAwMCksIERTUiBJSSA0NywgODExLTgyOS5cblxuQ29udGFjdDogRHIuIFN0ZXBoZW4gRC4gUGllcmNlLCBzcGllcmNlQGNvYXMub3JlZ29uc3RhdGUuZWR1XG5cbmNkbV9kYXRhX3R5cGUgPSBPdGhlclxuVkFSSUFCTEVTOlxueWVhclxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmRlcHRoIChBbHRpdHVkZSwgbSlcbnllYXJkYXkgKHRpbWUpXG5lYXN0diAoRWFzdHdhcmQgU2VhIFdhdGVyIFZlbG9jaXR5LCBtIHMtMSlcbm5vcnRodiAoTm9ydGh3YXJkIFNlYSBXYXRlciBWZWxvY2l0eSwgbSBzLTEpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvbndpb29zQWRjcDIwMDFfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL253aW9vc0FkY3AyMDAxX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL253aW9vc0FkY3AyMDAxL2luZGV4Lmpzb24iLCAiaHR0cDovL253aW9vcy5jb2FzLm9yZWdvbnN0YXRlLmVkdTo4MDgwL2RvZHMvZHJkcy8yMDAxJTIwSGFrZSUyMFN1cnZleSUyMEFEQ1AuaW5mbyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9ud2lvb3NBZGNwMjAwMS5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9bndpb29zQWRjcDIwMDEmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiT1NVIiwgIm53aW9vc0FkY3AyMDAxIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL253aW9vc0FkY3AyMDAzLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ud2lvb3NBZGNwMjAwMyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ud2lvb3NBZGNwMjAwMy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJIYWtlIFN1cnZleSBBRENQICgyMDAzKSIsICJTaGlwYm9hcmQgYWNvdXN0aWMgRG9wcGxlciBjdXJyZW50IHByb2ZpbGVyIGRhdGEgY29sbGVjdGVkIGR1cmluZyB0aGVcbkludGVncmF0ZWQgQWNvdXN0aWMgYW5kIFRyYXdsIFN1cnZleXMgb2YgUGFjaWZpYyBIYWtlLlxuUHJvY2Vzc2luZyBieTogIFN0ZXBoZW4gUGllcmNlLCBPcmVnb24gU3RhdGUgVW5pdmVyc2l0eVxuKFAuIE0uIEtvc3JvIGFsc28gcGVyZm9ybWVkIHNvbWUgcHJvY2Vzc2luZyBzdGVwcyBpbiB0aGUgMTk5OCBjYXNlKVxuRGF0ZTogIDE2IEF1Z3VzdCAyMDA2XG5EYXRhIHF1YWxpdHk6IEdvb2QgaW4gZ2VuZXJhbFxuTWlzc2luZyBvciBwb29yLXF1YWxpdHkgZGF0YSBoYXZlIGJlZW4gb21pdHRlZC5cblxuVGhpcyBkYXRhc2V0IGhhcyBhIHNpbXBsZSBzaW1wbGUgdmVyc2lvbiBvZiBvYnNlcnZlZCB2ZWxvY2l0aWVzLCB1c2VmdWxcbmZvciBtb3N0IHB1cnBvc2VzLiAgVGhlIGNvbXBsZXRlIGRhdGEgc2V0cyB3aXRoIGFsbCBjb25maWd1cmF0aW9uIGFuZFxucHJvY2Vzc2luZyBkZXRhaWxzIGFuZCBkaWFnbm9zdGljIGRhdGEgKGUuZy4gZXJyb3IgdmVsb2NpdHksIEFHQyxcbnNwZWN0cmFsIHdpZHRoKSBhcmUgYXZhaWxhYmxlIGZyb20gdGhlIE5PREMgSm9pbnQgQXJjaGl2ZSBmb3IgU2hpcGJvYXJkXG5BRENQLCBvciBieSByZXF1ZXN0IGZyb20gUy4gUGllcmNlLlxuXG5Qcm9jZXNzaW5nIHN0ZXBzIGluY2x1ZGVkOiAgZWRpdGluZyBvZiB0aGUgZGF0YSB1c2luZyB2YXJpb3VzXG5kaWFnbm9zdGljcywgY2FsaWJyYXRpb24gb2YgdGhlIHBoYXNlIGFuZCBhbXBsaXR1ZGUgZXJyb3JzIG9mIHRoZVxuQURDUC9uYXZpZ2F0aW9uL2d5cm9jb21wYXNzIHN5c3RlbSBieSBjb3ZhcmlhYmlsaXR5IGFuYWx5c2lzIGJldHdlZW5cbmN1cnJlbnRzIGFuZCBzaGlwIHZlbG9jaXR5LCByZWZlcmVuY2UgbGF5ZXIgdmVsb2NpdHkgc21vb3RoaW5nLCBhbmRcbmZpbmFsIHByb2R1Y3Rpb24gb2YgZWFydGgtcmVmZXJlbmNlZCB2ZWxvY2l0aWVzLiAgRm9yIG1vcmUgZGV0YWlsc1xucmVnYXJkaW5nIG1ldGhvZHMsIHNlZTogIFBpZXJjZSBldCBhbC4gKDIwMDApLCBEU1IgSUkgNDcsIDgxMS04MjkuXG5cbkNvbnRhY3Q6IERyLiBTdGVwaGVuIEQuIFBpZXJjZSwgc3BpZXJjZUBjb2FzLm9yZWdvbnN0YXRlLmVkdVxuXG5jZG1fZGF0YV90eXBlID0gT3RoZXJcblZBUklBQkxFUzpcbnllYXJcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5kZXB0aCAobSlcbnllYXJkYXkgKHRpbWUpXG5lYXN0diAoRWFzdHdhcmQgU2VhIFdhdGVyIFZlbG9jaXR5LCBtIHMtMSlcbm5vcnRodiAoTm9ydGh3YXJkIFNlYSBXYXRlciBWZWxvY2l0eSwgbSBzLTEpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvbndpb29zQWRjcDIwMDNfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL253aW9vc0FkY3AyMDAzX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL253aW9vc0FkY3AyMDAzL2luZGV4Lmpzb24iLCAiaHR0cDovL253aW9vcy5jb2FzLm9yZWdvbnN0YXRlLmVkdTo4MDgwL2RvZHMvZHJkcy8yMDAzJTIwSGFrZSUyMFN1cnZleSUyMEFEQ1AuaW5mbyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9ud2lvb3NBZGNwMjAwMy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9bndpb29zQWRjcDIwMDMmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiT1NVIiwgIm53aW9vc0FkY3AyMDAzIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL253aW9vc0FkY3AyMDA1LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ud2lvb3NBZGNwMjAwNSIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ud2lvb3NBZGNwMjAwNS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJIYWtlIFN1cnZleSBBRENQICgyMDA1KSIsICJTaGlwYm9hcmQgYWNvdXN0aWMgRG9wcGxlciBjdXJyZW50IHByb2ZpbGVyIGRhdGEgY29sbGVjdGVkIGR1cmluZyB0aGVcbkludGVncmF0ZWQgQWNvdXN0aWMgYW5kIFRyYXdsIFN1cnZleXMgb2YgUGFjaWZpYyBIYWtlLlxuUHJvY2Vzc2luZyBieTogIFN0ZXBoZW4gUGllcmNlLCBPcmVnb24gU3RhdGUgVW5pdmVyc2l0eVxuKFAuIE0uIEtvc3JvIGFsc28gcGVyZm9ybWVkIHNvbWUgcHJvY2Vzc2luZyBzdGVwcyBpbiB0aGUgMTk5OCBjYXNlKVxuRGF0ZTogIDE2IEF1Z3VzdCAyMDA2XG5EYXRhIHF1YWxpdHk6IEdvb2QgaW4gZ2VuZXJhbFxuTWlzc2luZyBvciBwb29yLXF1YWxpdHkgZGF0YSBoYXZlIGJlZW4gb21pdHRlZC5cblxuVGhpcyBkYXRhc2V0IGhhcyBhIHNpbXBsZSBzaW1wbGUgdmVyc2lvbiBvZiBvYnNlcnZlZCB2ZWxvY2l0aWVzLCB1c2VmdWxcbmZvciBtb3N0IHB1cnBvc2VzLiAgVGhlIGNvbXBsZXRlIGRhdGEgc2V0cyB3aXRoIGFsbCBjb25maWd1cmF0aW9uIGFuZFxucHJvY2Vzc2luZyBkZXRhaWxzIGFuZCBkaWFnbm9zdGljIGRhdGEgKGUuZy4gZXJyb3IgdmVsb2NpdHksIEFHQyxcbnNwZWN0cmFsIHdpZHRoKSBhcmUgYXZhaWxhYmxlIGZyb20gdGhlIE5PREMgSm9pbnQgQXJjaGl2ZSBmb3IgU2hpcGJvYXJkXG5BRENQLCBvciBieSByZXF1ZXN0IGZyb20gUy4gUGllcmNlLlxuXG5Qcm9jZXNzaW5nIHN0ZXBzIGluY2x1ZGVkOiAgZWRpdGluZyBvZiB0aGUgZGF0YSB1c2luZyB2YXJpb3VzXG5kaWFnbm9zdGljcywgY2FsaWJyYXRpb24gb2YgdGhlIHBoYXNlIGFuZCBhbXBsaXR1ZGUgZXJyb3JzIG9mIHRoZVxuQURDUC9uYXZpZ2F0aW9uL2d5cm9jb21wYXNzIHN5c3RlbSBieSBjb3ZhcmlhYmlsaXR5IGFuYWx5c2lzIGJldHdlZW5cbmN1cnJlbnRzIGFuZCBzaGlwIHZlbG9jaXR5LCByZWZlcmVuY2UgbGF5ZXIgdmVsb2NpdHkgc21vb3RoaW5nLCBhbmRcbmZpbmFsIHByb2R1Y3Rpb24gb2YgZWFydGgtcmVmZXJlbmNlZCB2ZWxvY2l0aWVzLiAgRm9yIG1vcmUgZGV0YWlsc1xucmVnYXJkaW5nIG1ldGhvZHMsIHNlZTogIFBpZXJjZSBldCBhbC4gKDIwMDApLCBEU1IgSUkgNDcsIDgxMS04MjkuXG5cbkNvbnRhY3Q6IERyLiBTdGVwaGVuIEQuIFBpZXJjZSwgc3BpZXJjZUBjb2FzLm9yZWdvbnN0YXRlLmVkdVxuXG5jZG1fZGF0YV90eXBlID0gT3RoZXJcblZBUklBQkxFUzpcbnllYXJcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5kZXB0aCAobSlcbnllYXJkYXkgKHRpbWUpXG5lYXN0diAoRWFzdHdhcmQgU2VhIFdhdGVyIFZlbG9jaXR5LCBtIHMtMSlcbm5vcnRodiAoTm9ydGh3YXJkIFNlYSBXYXRlciBWZWxvY2l0eSwgbSBzLTEpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvbndpb29zQWRjcDIwMDVfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL253aW9vc0FkY3AyMDA1X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL253aW9vc0FkY3AyMDA1L2luZGV4Lmpzb24iLCAiaHR0cDovL253aW9vcy5jb2FzLm9yZWdvbnN0YXRlLmVkdTo4MDgwL2RvZHMvZHJkcy8yMDA1JTIwSGFrZSUyMFN1cnZleSUyMEFEQ1AuaW5mbyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9ud2lvb3NBZGNwMjAwNS5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9bndpb29zQWRjcDIwMDUmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiT1NVIiwgIm53aW9vc0FkY3AyMDA1Il0sCiAgICAgIFsiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfZTViNF9kOTA1Xzk5ZWYiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0X2U1YjRfZDkwNV85OWVmLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkhhd2FpaSBDbGVhbiBXYXRlciBCcmFuY2ggKENXQikgQmVhY2ggV2F0ZXIgUXVhbGl0eSBEYXRhIiwgIkV4cG9zdXJlIHRvIHNld2FnZSBjb250YW1pbmF0ZWQgcmVjcmVhdGlvbmFsIHdhdGVycyBtYXkgY2F1c2UgZ2FzdHJvaW50ZXN0aW5hbCBpbGxuZXNzZXMgaW4gc3dpbW1lcnMuIFRoZSBTdGF0ZSBvZiBIYXdhaWkgRGVwYXJ0bWVudCBvZiBIZWFsdGggKEhJRE9IKSBDbGVhbiBXYXRlciBCcmFuY2ggKENXQikgbW9uaXRvcnMgdGhlIHdhdGVycyBvZiBIYXdhaWkncyBiZWFjaGVzIGZvciBjb25jZW50cmF0aW9ucyBvZiBFbnRlcm9jb2NjdXMsIHdoaWNoIGFjdHMgYXMgYW4gaW5kaWNhdG9yIG9mIHBhdGhvZ2Vucy4gVGhlIENXQiBhbHNvIHVzZXMgQ2xvc3RyaWRpdW0gcGVyZnJpbmdlbnMgYXMgYSBzZWNvbmRhcnkgdHJhY2VyIG9mIHNld2FnZSBjb250YW1pbmF0aW9uLiBSZXN1bHRzIG9mIHRoaXMgbW9uaXRvcmluZyBhcmUgZXZhbHVhdGVkIHVzaW5nIGEgZGVjaXNpb24gcnVsZSB0byBkZXRlcm1pbmUgd2hldGhlciBhIGJlYWNoIGlzIHNhZmUgKFwiQ29tcGxpYW50XCIpIG9yIG5vdCBzYWZlIChvbiBcIkFsZXJ0XCIpIGZvciBzd2ltbWluZyBhbmQgb3RoZXIgd2F0ZXIgY29udGFjdCBhY3Rpdml0aWVzLiBJZiBhIGJlYWNoIGlzIGZvdW5kIHRvIGJlIG9uIFwiQWxlcnRcIiBkdWUgdG8gZWxldmF0ZWQgaW5kaWNhdG9yIGJhY3RlcmlhIGxldmVscywgdGhlIENXQiBpc3N1ZXMgcHVibGljIHdhcm5pbmdzIGFuZCBhbGVydHMgYW5kIGRldGVybWluZXMgd2hldGhlciByZXNhbXBsaW5nIG9mIHRoZSBhcmVhIGlzIG5lY2Vzc2FyeS5cblxuVW5kZXIgdGhlIFUuUy4gQkVBQ0ggQWN0LCB0aGUgU3RhdGUgb2YgSGF3YWlpIHJlY2VpdmVzIGFuIGFubnVhbCBncmFudCB0byBpbXBsZW1lbnQgaXRzIGJlYWNoIG1vbml0b3JpbmcgcHJvZ3JhbS4gVGhpcyByZXF1aXJlcyB0aGUgU3RhdGUgdG8gY29uZHVjdCBhIG1vbml0b3JpbmcgYW5kIG5vdGlmaWNhdGlvbiBwcm9ncmFtIHRoYXQgaXMgY29uc2lzdGVudCB3aXRoIHBlcmZvcm1hbmNlIGNyaXRlcmlhIHB1Ymxpc2hlZCBieSB0aGUgVS5TLiBFbnZpcm9ubWVudGFsIFByb3RlY3Rpb24gQWdlbmN5IChFUEEpIGluIDIwMDIuIEluIE1hcmNoIDIwMTAsIEVQQSBhcHByb3ZlZCBhbWVuZG1lbnRzIHRvIHRoZSBIYXdhaWkgQWRtaW5pc3RyYXRpdmUgUnVsZXMgKEhBUiksIENoYXB0ZXIgMTEtNTQsIFdhdGVyIFF1YWxpdHkgU3RhbmRhcmRzIChDV0IgUUFQcmdQLCBISURPSCAyMDExLCBBcHBlbmRpeCBEKSwgd2hpY2ggcmV2aXNlZCB0aGUgcHJldmlvdXMgU3RhdGUgRW50ZXJvY29jY3VzIGNyaXRlcmlhIG9mIGEgZ2VvbWV0cmljIG1lYW4gKEdNKSBvZiA3IGNvbG9ueS1mb3JtaW5nIHVuaXRzIChDRlUpIHBlciAxMDAgbUwgYW5kIGEgc2luZ2xlIHNhbXBsZSBtYXhpbXVtIChTU00pIG9mIDEwMCBDRlUvMTAwIG1MIHRvIG1lZXQgY3VycmVudCBFUEEgZ3VpZGVsaW5lcy4gVGhlIFN0YXRlIG9mIEhhd2FpaSBub3cgdXNlcyB0aGUgRVBBIHJlY29tbWVuZGVkIEVudGVyb2NvY2N1cyBHTSBhbmQgU1NNIGZvciByZWNyZWF0aW9uYWwgd2F0ZXJzIGNvbnNpc3RlbnQgaW4gdGhlIDE5ODYgQW1iaWVudCBXYXRlciBRdWFsaXR5IENyaXRlcmlhIGZvciBCYWN0ZXJpYS4gVGhlIGNyaXRlcmlvbiBsaXN0cyB0aGUgR00gYW5kIFNTTSBmb3IgbWFyaW5lIHdhdGVycyBhcyAzNSBDRlUvMTAwIG1MIGFuZCAxMDQgQ0ZVLzEwMCBtTCwgcmVzcGVjdGl2ZWx5LlxuXG5UaGUgQ1dCIHV0aWxpemVzIENsb3N0cmlkaXVtIHBlcmZyaW5nZW5zIGFzIGEgc2Vjb25kYXJ5IHRyYWNlciBpbiBhZGRpdGlvbiB0byB0aGUgRW50ZXJvY29jY3VzIGluZGljYXRvciB0byBoZWxwIGRpc3Rpbmd1aXNoIGJldHdlZW4gc2V3YWdlIGFuZCBub24tc2V3YWdlIHNvdXJjZXMgb2YgZWxldmF0ZWQgRW50ZXJvY29jY3VzIGxldmVscyBpbiBtYXJpbmUgY29hc3RhbCB3YXRlcnMuIFRoZSByZWxpYWJpbGl0eSBvZiBFbnRlcm9jb2NjdXMgYXMgYW4gaW5kaWNhdG9yIG9yZ2FuaXNtIGluIHRyb3BpY2FsIGVudmlyb25tZW50cyBoYXMgYmVlbiBxdWVzdGlvbmVkLiBUaGlzIGlzc3VlIHdhcyBmb3JtYWxseSBkb2N1bWVudGVkIGluIHRoZSByZXBvcnQsIFRyb3BpY2FsIFdhdGVyIFF1YWxpdHkgSW5kaWNhdG9yIFdvcmtzaG9wIChGdWppb2thIGFuZCBCeWFwcGFuYWhhbGxpLCAyMDAzKS5cblxuT25lIG9mIHRoZSBsaW1pdGF0aW9ucyBvZiBhbGwgYXZhaWxhYmxlIGFuZCBFUEEtYXBwcm92ZWQgdGVzdCBtZXRob2RzIGlzIHRoYXQgdGhlIHNhbXBsZSBtdXN0IGJlIGluY3ViYXRlZCBmb3IgYWJvdXQgMjQgaG91cnMuIEFzIGEgcmVzdWx0LCB0aGUgcHVibGljIGZpbmRzIG91dCB0b2RheSB3aGVuIHRoZXkgc2hvdWxkbid0IGhhdmUgZ29uZSBpbiB0aGUgd2F0ZXIgeWVzdGVyZGF5LiBBcyBhIHJlc3VsdCwgd2FybmluZyBzaWducyBvbiB0aGUgYmVhY2ggbWF5IG9yIG1heSBub3QgYmUgcmVmbGVjdGl2ZSBvZiBhY3R1YWwgd2F0ZXIgcXVhbGl0eSBiZWNhdXNlIHRoZXkgYXJlIGJhc2VkIG9uIHRlc3RzIHBlcmZvcm1lZCBvbmUgb3IgbW9yZSBkYXlzIGFnby5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuLi4uICgxMyBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9oYXdhaWlfc29lc3RfZTViNF9kOTA1Xzk5ZWZfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2hhd2FpaV9zb2VzdF9lNWI0X2Q5MDVfOTllZl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9oYXdhaWlfc29lc3RfZTViNF9kOTA1Xzk5ZWYvaW5kZXguanNvbiIsICJodHRwOi8vd3d3LmJlYWNoYXBlZGlhLm9yZy9TdGF0ZV9vZl90aGVfQmVhY2gvU3RhdGVfUmVwb3J0cy9ISS9XYXRlcl9RdWFsaXR5IiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2hhd2FpaV9zb2VzdF9lNWI0X2Q5MDVfOTllZi5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9aGF3YWlpX3NvZXN0X2U1YjRfZDkwNV85OWVmJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIlN0YXRlIG9mIEhhd2FpaSBDbGVhbiBXYXRlciBCcmFuY2ggKENXQikiLCAiaGF3YWlpX3NvZXN0X2U1YjRfZDkwNV85OWVmIl0sCiAgICAgIFsiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lYXJ0aEN1YmVMaXNpcmRIaXN0VHNpIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VhcnRoQ3ViZUxpc2lyZEhpc3RUc2kuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiSGlzdG9yaWNhbCBUb3RhbCBTb2xhciBJcnJhZGlhbmNlIFJlY29uc3RydWN0aW9uIiwgIkhpc3RvcmljYWwgVG90YWwgU29sYXIgSXJyYWRpYW5jZSAoVFNJKSBSZWNvbnN0cnVjdGlvbiBlY29uc3RydWN0aW9uIGZyb20gV2FuZywgTGVhbiwgU2hlZWxleSAoQXBKLCAyMDA1KS4gIE9mZnNldCAtNC44MTc4IFcvbV4yIHRvIG1hdGNoIFNPUkNFL1RJTSBhYnNvbHV0ZSB2YWx1ZSBmcm9tIEtvcHAsIExhd3JlbmNlLCBhbmQgUm90dG1hbiAoU29sYXIgUGh5cywgMjAwNSkuIEV4dGVuZGVkIHVzaW5nIFNPUkNFL1RJTSBhbm51YWwgYXZlcmFnZXMgZnJvbSAyMDAzIG9ud2FyZC4gQ29tcHV0ZWQgYnkgR3JlZyBLb3BwLiAgRnJvbSB0aGUgTEFTUCBJbnRlcmFjdGl2ZSBTb2xhciBJcnJhZGlhbmNlIERhdGEgKExJU0lSRCkgQ2VudGVyXG5cbmNkbV9kYXRhX3R5cGUgPSBPdGhlclxuVkFSSUFCTEVTOlxueWVhclxuaXJyYWRpYW5jZSAoVG90YWwgU29sYXIgSXJyYWRpYW5jZSwgVy9tXjIpXG4iLCAiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VhcnRoQ3ViZUxpc2lyZEhpc3RUc2kvaW5kZXguanNvbiIsICJodHRwOi8vbGFzcC5jb2xvcmFkby5lZHUvbGlzaXJkLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lYXJ0aEN1YmVMaXNpcmRIaXN0VHNpLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lYXJ0aEN1YmVMaXNpcmRIaXN0VHNpJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkxJU0lSRCIsICJlYXJ0aEN1YmVMaXNpcmRIaXN0VHNpIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL0xpcXVpZFJfSEJHM18yMDE1X2Fpcy5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvTGlxdWlkUl9IQkczXzIwMTVfYWlzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL0xpcXVpZFJfSEJHM18yMDE1X2Fpcy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJMaXF1aWQgUm9ib3RpY3MgV2F2ZSBHbGlkZXIsIEhvbmV5IEJhZGdlciAoRzMpLCAyMDE1LCBBSVMiLCAiTGlxdWlkIFJvYm90aWNzIFdhdmUgR2xpZGVyLCBIb25leSBCYWRnZXIgKEczKSwgMjAxNSwgQUlTLiBUaGUgTUFHSSBtaXNzaW9uIGlzIHRvIHVzZSB0aGUgV2F2ZSBHbGlkZXIgdG8gc2FtcGxlIHRoZSBsYXRlIHN1bW1lciBjaGxvcm9waHlsbCBibG9vbSB0aGF0IGRldmVsb3BzIG5lYXIgMzBcdTAwYjBOLCB3aXRoIHRoZSBnb2FsIG9mIHVzaW5nIHRoZSBjYW1lcmEgYW5kIExJU1NULUhvbG8gdG8gdHJ5IHRvIGlkZW50aWZ5IHNwZWNpZXMgaW4gdGhlIGJsb29tcyBhbmQgdGhlbiBmb2xsb3cgdGhlIGRldmVsb3BtZW50IG9mIHBoeXRvcGxhbmt0b24gYWdncmVnYXRlcy4gVGhlc2UgYWdncmVnYXRlcyBoYXZlIHJlY2VudGx5IGJlZW4gc2hvd24gdG8gYmUgYSBzaWduaWZpY2FudCBwYXJ0IG9mIHRoZSB0b3RhbCBhbW91bnQgb2YgY2FyYm9uIHRoYXQgc2lua3MgdG8gdGhlIGRlZXAgc2VhLiBLYXJsIGV0IGFsICgyMDEyKSBmb3VuZCB0aGF0IGluIGVhY2ggb2YgdGhlIHBhc3QgMTMgeWVhcnMsIHRoZXJlIHdhcyBhIGZsdXggb2YgbWF0ZXJpYWwgdG8gNCwwMDAgbSAodGhlIHN1bW1lciBleHBvcnQgcHVsc2UpIHRoYXQgcmVwcmVzZW50ZWQgfjIwJSBvZiB0aGUgdG90YWwgYW5udWFsIGZsdXguIFdvcmsgYmFzZWQgb24gc2F0ZWxsaXRlIG9jZWFuIGNvbG9yIGRhdGEgb3ZlciB0aGUgcGFzdCBkZWNhZGUgaGFzIHJldmVhbGVkIHRoZSBleGlzdGVuY2Ugb2YgbGFyZ2UgcGh5dG9wbGFua3RvbiBibG9vbXMgaW4gdGhlIFBhY2lmaWMgT2NlYW4gdGhhdCBjb3ZlciB0aG91c2FuZHMgb2Yga20yLCBwZXJzaXN0IGZvciB3ZWVrcyBvciBsb25nZXIsIGFuZCBhcmUgb2Z0ZW4gZG9taW5hdGVkIGJ5IG5pdHJvZ2VuLWZpeGluZyBkaWF0b20gc3ltYmlvc2VzIChXaWxzb24gZXQgYWwuIDIwMDgpLiBXZSBob3BlIHRvIGJlIGFibGUgdG8gZXhhbWluZSB3aGV0aGVyIHRoaXMgYWdncmVnYXRpb24gaXMgb2NjdXJyaW5nIGluIHRoZSB2YXN0IG9jZWFuaWMgcmVnaW9ucyBub3J0aCBhbmQgZWFzdCBvZiBIYXdhaSdpIGFuZCBwcm92aWRlIGEgYmFzaW4tc2NhbGUgY29udGV4dCBmb3IgdGhlIEFMT0hBIG9ic2VydmF0aW9ucy4gVGhlc2UgZXZlbnRzIGhhdmUgcHJvdmVuIGRpZmZpY3VsdCB0byBzdHVkeSBvdXRzaWRlIG9mIHRoZSB0aW1lIHNlcmllcyBzdGF0aW9uIEFMT0hBIGF0IEhhd2FpJ2kuXG5cbmNkbV9kYXRhX3R5cGUgPSBUcmFqZWN0b3J5XG5WQVJJQUJMRVM6XG52ZWhpY2xlTmFtZSAoVmVoaWNsZSBOYW1lKVxuYWlzXG5mZWVkX3ZlcnNpb25cbnRpbWUgKERhdGV0aW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbk1NU0kgKE1hcml0aW1lIE1vYmlsZSBTZXJ2aWNlIElkZW50aXR5KVxuQ09HIChDb3Vyc2UgT3ZlciBHcm91bmQsIGRlZ3JlZXNfdHJ1ZSlcblNPRyAoU3BlZWQgT3ZlciBHcm91bmQsIGtub3RzKVxuUk9UIChSYXRlIE9mIFR1cm4sIGRlZ3JlZXMvbWluKVxuSGVhZGluZyAoZGVncmVlc190cnVlKVxuTmF2aWdhdGlvblN0YXR1cyAoTmF2aWdhdGlvbiBTdGF0dXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvTGlxdWlkUl9IQkczXzIwMTVfYWlzX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9MaXF1aWRSX0hCRzNfMjAxNV9haXNfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vTGlxdWlkUl9IQkczXzIwMTVfYWlzL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9NQUdJLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9MaXF1aWRSX0hCRzNfMjAxNV9haXMucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPUxpcXVpZFJfSEJHM18yMDE1X2FpcyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJMaXF1aWQgUm9ib3RpY3MsIFVUIEF1c3RpbiwgTk9BQSBOTUZTIFNXRlNDIEVSRCIsICJMaXF1aWRSX0hCRzNfMjAxNV9haXMiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvTGlxdWlkUl9IQkczXzIwMTVfYzMuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL0xpcXVpZFJfSEJHM18yMDE1X2MzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL0xpcXVpZFJfSEJHM18yMDE1X2MzLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkxpcXVpZCBSb2JvdGljcyBXYXZlIEdsaWRlciwgSG9uZXkgQmFkZ2VyIChHMyksIDIwMTUsIEMzIiwgIkxpcXVpZCBSb2JvdGljcyBXYXZlIEdsaWRlciwgSG9uZXkgQmFkZ2VyIChHMyksIDIwMTUsIEMzLlxuQzMgYm9hcmQgbnVtYmVyIDgyMTUgKG5vdCBjb2F0ZWQpIGFwcGVhcnMgYXMgYm9hcmRfaWQ9MzIsIHRhc2tfaWQ9MjMuXG5DMyBib2FyZCBudW1iZXIgNzcxIChjb2F0ZWQpIGFwcGVhcnMgYXMgYm9hcmRfaWQ9MywgdGFza19pZD0zLiBUaGUgTUFHSSBtaXNzaW9uIGlzIHRvIHVzZSB0aGUgV2F2ZSBHbGlkZXIgdG8gc2FtcGxlIHRoZSBsYXRlIHN1bW1lciBjaGxvcm9waHlsbCBibG9vbSB0aGF0IGRldmVsb3BzIG5lYXIgMzBcdTAwYjBOLCB3aXRoIHRoZSBnb2FsIG9mIHVzaW5nIHRoZSBjYW1lcmEgYW5kIExJU1NULUhvbG8gdG8gdHJ5IHRvIGlkZW50aWZ5IHNwZWNpZXMgaW4gdGhlIGJsb29tcyBhbmQgdGhlbiBmb2xsb3cgdGhlIGRldmVsb3BtZW50IG9mIHBoeXRvcGxhbmt0b24gYWdncmVnYXRlcy4gVGhlc2UgYWdncmVnYXRlcyBoYXZlIHJlY2VudGx5IGJlZW4gc2hvd24gdG8gYmUgYSBzaWduaWZpY2FudCBwYXJ0IG9mIHRoZSB0b3RhbCBhbW91bnQgb2YgY2FyYm9uIHRoYXQgc2lua3MgdG8gdGhlIGRlZXAgc2VhLiBLYXJsIGV0IGFsICgyMDEyKSBmb3VuZCB0aGF0IGluIGVhY2ggb2YgdGhlIHBhc3QgMTMgeWVhcnMsIHRoZXJlIHdhcyBhIGZsdXggb2YgbWF0ZXJpYWwgdG8gNCwwMDAgbSAodGhlIHN1bW1lciBleHBvcnQgcHVsc2UpIHRoYXQgcmVwcmVzZW50ZWQgfjIwJSBvZiB0aGUgdG90YWwgYW5udWFsIGZsdXguIFdvcmsgYmFzZWQgb24gc2F0ZWxsaXRlIG9jZWFuIGNvbG9yIGRhdGEgb3ZlciB0aGUgcGFzdCBkZWNhZGUgaGFzIHJldmVhbGVkIHRoZSBleGlzdGVuY2Ugb2YgbGFyZ2UgcGh5dG9wbGFua3RvbiBibG9vbXMgaW4gdGhlIFBhY2lmaWMgT2NlYW4gdGhhdCBjb3ZlciB0aG91c2FuZHMgb2Yga20yLCBwZXJzaXN0IGZvciB3ZWVrcyBvciBsb25nZXIsIGFuZCBhcmUgb2Z0ZW4gZG9taW5hdGVkIGJ5IG5pdHJvZ2VuLWZpeGluZyBkaWF0b20gc3ltYmlvc2VzIChXaWxzb24gZXQgYWwuIDIwMDgpLiBXZSBob3BlIHRvIGJlIGFibGUgdG8gZXhhbWluZSB3aGV0aGVyIHRoaXMgYWdncmVnYXRpb24gaXMgb2NjdXJyaW5nIGluIHRoZSB2YXN0IG9jZWFuaWMgcmVnaW9ucyBub3J0aCBhbmQgZWFzdCBvZiBIYXdhaSdpIGFuZCBwcm92aWRlIGEgYmFzaW4tc2NhbGUgY29udGV4dCBmb3IgdGhlIEFMT0hBIG9ic2VydmF0aW9ucy4gVGhlc2UgZXZlbnRzIGhhdmUgcHJvdmVuIGRpZmZpY3VsdCB0byBzdHVkeSBvdXRzaWRlIG9mIHRoZSB0aW1lIHNlcmllcyBzdGF0aW9uIEFMT0hBIGF0IEhhd2FpJ2kuXG5cbmNkbV9kYXRhX3R5cGUgPSBUcmFqZWN0b3J5XG5WQVJJQUJMRVM6XG52ZWhpY2xlTmFtZSAoVmVoaWNsZSBOYW1lKVxuYm9hcmRfaWRcbnRhc2tfaWRcbmMzXyAoQzMpXG5mZWVkX3ZlcnNpb25cbnRpbWUgKERhdGV0aW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbnVuaXhfdGltZXN0YW1wIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuYzFfY2hsb3JvcGh5bGwgKENoYW5uZWwgMTogQ2hsb3JvcGh5bGwsIFJGVSlcbmMyX0NET00gKENoYW5uZWwgMjogQ0RPTSwgUkZVKVxuYzNfcGh5Y29lcnl0aHJpbiAoQ2hhbm5lbCAzOiBQaHljb2VyeXRocmluLCBSRlUpXG5wcmVzc3VyZSAoPylcbnRlbXBlcmF0dXJlIChkZWdyZWVfQylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9MaXF1aWRSX0hCRzNfMjAxNV9jM19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvTGlxdWlkUl9IQkczXzIwMTVfYzNfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vTGlxdWlkUl9IQkczXzIwMTVfYzMvaW5kZXguanNvbiIsICJodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L01BR0kvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL0xpcXVpZFJfSEJHM18yMDE1X2MzLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1MaXF1aWRSX0hCRzNfMjAxNV9jMyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJMaXF1aWQgUm9ib3RpY3MsIFVUIEF1c3RpbiwgTk9BQSBOTUZTIFNXRlNDIEVSRCIsICJMaXF1aWRSX0hCRzNfMjAxNV9jMyJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9MaXF1aWRSX0hCRzNfMjAxNV9jdGQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL0xpcXVpZFJfSEJHM18yMDE1X2N0ZCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9MaXF1aWRSX0hCRzNfMjAxNV9jdGQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTGlxdWlkIFJvYm90aWNzIFdhdmUgR2xpZGVyLCBIb25leSBCYWRnZXIgKEczKSwgMjAxNSwgQ1REIiwgIkxpcXVpZCBSb2JvdGljcyBXYXZlIEdsaWRlciwgSG9uZXkgQmFkZ2VyIChHMyksIDIwMTUsIENURC4gVGhlIE1BR0kgbWlzc2lvbiBpcyB0byB1c2UgdGhlIFdhdmUgR2xpZGVyIHRvIHNhbXBsZSB0aGUgbGF0ZSBzdW1tZXIgY2hsb3JvcGh5bGwgYmxvb20gdGhhdCBkZXZlbG9wcyBuZWFyIDMwXHUwMGIwTiwgd2l0aCB0aGUgZ29hbCBvZiB1c2luZyB0aGUgY2FtZXJhIGFuZCBMSVNTVC1Ib2xvIHRvIHRyeSB0byBpZGVudGlmeSBzcGVjaWVzIGluIHRoZSBibG9vbXMgYW5kIHRoZW4gZm9sbG93IHRoZSBkZXZlbG9wbWVudCBvZiBwaHl0b3BsYW5rdG9uIGFnZ3JlZ2F0ZXMuIFRoZXNlIGFnZ3JlZ2F0ZXMgaGF2ZSByZWNlbnRseSBiZWVuIHNob3duIHRvIGJlIGEgc2lnbmlmaWNhbnQgcGFydCBvZiB0aGUgdG90YWwgYW1vdW50IG9mIGNhcmJvbiB0aGF0IHNpbmtzIHRvIHRoZSBkZWVwIHNlYS4gS2FybCBldCBhbCAoMjAxMikgZm91bmQgdGhhdCBpbiBlYWNoIG9mIHRoZSBwYXN0IDEzIHllYXJzLCB0aGVyZSB3YXMgYSBmbHV4IG9mIG1hdGVyaWFsIHRvIDQsMDAwIG0gKHRoZSBzdW1tZXIgZXhwb3J0IHB1bHNlKSB0aGF0IHJlcHJlc2VudGVkIH4yMCUgb2YgdGhlIHRvdGFsIGFubnVhbCBmbHV4LiBXb3JrIGJhc2VkIG9uIHNhdGVsbGl0ZSBvY2VhbiBjb2xvciBkYXRhIG92ZXIgdGhlIHBhc3QgZGVjYWRlIGhhcyByZXZlYWxlZCB0aGUgZXhpc3RlbmNlIG9mIGxhcmdlIHBoeXRvcGxhbmt0b24gYmxvb21zIGluIHRoZSBQYWNpZmljIE9jZWFuIHRoYXQgY292ZXIgdGhvdXNhbmRzIG9mIGttMiwgcGVyc2lzdCBmb3Igd2Vla3Mgb3IgbG9uZ2VyLCBhbmQgYXJlIG9mdGVuIGRvbWluYXRlZCBieSBuaXRyb2dlbi1maXhpbmcgZGlhdG9tIHN5bWJpb3NlcyAoV2lsc29uIGV0IGFsLiAyMDA4KS4gV2UgaG9wZSB0byBiZSBhYmxlIHRvIGV4YW1pbmUgd2hldGhlciB0aGlzIGFnZ3JlZ2F0aW9uIGlzIG9jY3VycmluZyBpbiB0aGUgdmFzdCBvY2VhbmljIHJlZ2lvbnMgbm9ydGggYW5kIGVhc3Qgb2YgSGF3YWknaSBhbmQgcHJvdmlkZSBhIGJhc2luLXNjYWxlIGNvbnRleHQgZm9yIHRoZSBBTE9IQSBvYnNlcnZhdGlvbnMuIFRoZXNlIGV2ZW50cyBoYXZlIHByb3ZlbiBkaWZmaWN1bHQgdG8gc3R1ZHkgb3V0c2lkZSBvZiB0aGUgdGltZSBzZXJpZXMgc3RhdGlvbiBBTE9IQSBhdCBIYXdhaSdpLlxuXG5jZG1fZGF0YV90eXBlID0gVHJhamVjdG9yeVxuVkFSSUFCTEVTOlxudmVoaWNsZU5hbWUgKFZlaGljbGUgTmFtZSlcbmJvYXJkX2lkXG50YXNrX2lkXG5jdGRcbmZlZWRfdmVyc2lvblxudGltZSAoRGF0ZXRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxudW5peF90aW1lc3RhbXAgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG50ZW1wZXJhdHVyZSAoZGVncmVlX0MpXG5wcmVzc3VyZSAoZEJhcilcbmNvbmR1Y3Rpdml0eSAoU2VhIFdhdGVyIEVsZWN0cmljYWwgQ29uZHVjdGl2aXR5LCBTL20pXG5kaXNzb2x2ZWRfT191bmNhbGlicmF0ZWQgKEh6KVxucHJhY3RpY2FsX3NhbGluaXR5IChTZWEgV2F0ZXIgUHJhY3RpY2FsIFNhbGluaXR5LCBQU1UpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvTGlxdWlkUl9IQkczXzIwMTVfY3RkX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9MaXF1aWRSX0hCRzNfMjAxNV9jdGRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vTGlxdWlkUl9IQkczXzIwMTVfY3RkL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9NQUdJLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9MaXF1aWRSX0hCRzNfMjAxNV9jdGQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPUxpcXVpZFJfSEJHM18yMDE1X2N0ZCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJMaXF1aWQgUm9ib3RpY3MsIFVUIEF1c3RpbiwgTk9BQSBOTUZTIFNXRlNDIEVSRCIsICJMaXF1aWRSX0hCRzNfMjAxNV9jdGQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvTGlxdWlkUl9IQkczXzIwMTVfbW9zZS5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvTGlxdWlkUl9IQkczXzIwMTVfbW9zZSIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9MaXF1aWRSX0hCRzNfMjAxNV9tb3NlLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkxpcXVpZCBSb2JvdGljcyBXYXZlIEdsaWRlciwgSG9uZXkgQmFkZ2VyIChHMyksIDIwMTUsIE1PU0UiLCAiTGlxdWlkIFJvYm90aWNzIFdhdmUgR2xpZGVyLCBIb25leSBCYWRnZXIgKEczKSwgMjAxNSwgTU9TRS4gVGhlIE1BR0kgbWlzc2lvbiBpcyB0byB1c2UgdGhlIFdhdmUgR2xpZGVyIHRvIHNhbXBsZSB0aGUgbGF0ZSBzdW1tZXIgY2hsb3JvcGh5bGwgYmxvb20gdGhhdCBkZXZlbG9wcyBuZWFyIDMwXHUwMGIwTiwgd2l0aCB0aGUgZ29hbCBvZiB1c2luZyB0aGUgY2FtZXJhIGFuZCBMSVNTVC1Ib2xvIHRvIHRyeSB0byBpZGVudGlmeSBzcGVjaWVzIGluIHRoZSBibG9vbXMgYW5kIHRoZW4gZm9sbG93IHRoZSBkZXZlbG9wbWVudCBvZiBwaHl0b3BsYW5rdG9uIGFnZ3JlZ2F0ZXMuIFRoZXNlIGFnZ3JlZ2F0ZXMgaGF2ZSByZWNlbnRseSBiZWVuIHNob3duIHRvIGJlIGEgc2lnbmlmaWNhbnQgcGFydCBvZiB0aGUgdG90YWwgYW1vdW50IG9mIGNhcmJvbiB0aGF0IHNpbmtzIHRvIHRoZSBkZWVwIHNlYS4gS2FybCBldCBhbCAoMjAxMikgZm91bmQgdGhhdCBpbiBlYWNoIG9mIHRoZSBwYXN0IDEzIHllYXJzLCB0aGVyZSB3YXMgYSBmbHV4IG9mIG1hdGVyaWFsIHRvIDQsMDAwIG0gKHRoZSBzdW1tZXIgZXhwb3J0IHB1bHNlKSB0aGF0IHJlcHJlc2VudGVkIH4yMCUgb2YgdGhlIHRvdGFsIGFubnVhbCBmbHV4LiBXb3JrIGJhc2VkIG9uIHNhdGVsbGl0ZSBvY2VhbiBjb2xvciBkYXRhIG92ZXIgdGhlIHBhc3QgZGVjYWRlIGhhcyByZXZlYWxlZCB0aGUgZXhpc3RlbmNlIG9mIGxhcmdlIHBoeXRvcGxhbmt0b24gYmxvb21zIGluIHRoZSBQYWNpZmljIE9jZWFuIHRoYXQgY292ZXIgdGhvdXNhbmRzIG9mIGttMiwgcGVyc2lzdCBmb3Igd2Vla3Mgb3IgbG9uZ2VyLCBhbmQgYXJlIG9mdGVuIGRvbWluYXRlZCBieSBuaXRyb2dlbi1maXhpbmcgZGlhdG9tIHN5bWJpb3NlcyAoV2lsc29uIGV0IGFsLiAyMDA4KS4gV2UgaG9wZSB0byBiZSBhYmxlIHRvIGV4YW1pbmUgd2hldGhlciB0aGlzIGFnZ3JlZ2F0aW9uIGlzIG9jY3VycmluZyBpbiB0aGUgdmFzdCBvY2VhbmljIHJlZ2lvbnMgbm9ydGggYW5kIGVhc3Qgb2YgSGF3YWknaSBhbmQgcHJvdmlkZSBhIGJhc2luLXNjYWxlIGNvbnRleHQgZm9yIHRoZSBBTE9IQSBvYnNlcnZhdGlvbnMuIFRoZXNlIGV2ZW50cyBoYXZlIHByb3ZlbiBkaWZmaWN1bHQgdG8gc3R1ZHkgb3V0c2lkZSBvZiB0aGUgdGltZSBzZXJpZXMgc3RhdGlvbiBBTE9IQSBhdCBIYXdhaSdpLlxuXG5jZG1fZGF0YV90eXBlID0gVHJhamVjdG9yeVxuVkFSSUFCTEVTOlxudmVoaWNsZU5hbWUgKFZlaGljbGUgTmFtZSlcbmJvYXJkX2lkXG50YXNrX2lkXG5tb3NlXG5mZWVkX3ZlcnNpb25cbnRpbWUgKERhdGV0aW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbnVuaXhfdGltZXN0YW1wIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuc2lnbmlmaWNhbnRfd2F2ZV9oZWlnaHQgKFNlYSBTdXJmYWNlIFdhdmUgU2lnbmlmaWNhbnQgSGVpZ2h0LCBtKVxuYXZlcmFnZV9wZXJpb2RfYWxsX3dhdmVzIChTZWEgU3VyZmFjZSBTd2VsbCBXYXZlIFBlcmlvZCwgcylcbnBlcmlvZF9iZXR3ZWVuX3NpZ25pZmljYW50X3dhdmVzIChTZWEgU3VyZmFjZSBTd2VsbCBXYXZlIFBlcmlvZCwgcylcbmRpcmVjdGlvbl9vZl9zaWduaWZpY2FudF93YXZlcyAoU2VhIFN1cmZhY2UgV2F2ZSBUbyBEaXJlY3Rpb24sIGRlZ3JlZXNfdHJ1ZSlcbm51bWJlcl9hdmVyYWdlZF9zcGVjdHJhXG5udW1iZXJfc2FtcGxlc19wZXJfc3BlY3RydW1cbm51bWJlcl9zYW1wbGVfZ2Fwc1xuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL0xpcXVpZFJfSEJHM18yMDE1X21vc2VfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL0xpcXVpZFJfSEJHM18yMDE1X21vc2VfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vTGlxdWlkUl9IQkczXzIwMTVfbW9zZS9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvTUFHSS8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvTGlxdWlkUl9IQkczXzIwMTVfbW9zZS5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9TGlxdWlkUl9IQkczXzIwMTVfbW9zZSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJMaXF1aWQgUm9ib3RpY3MsIFVUIEF1c3RpbiwgTk9BQSBOTUZTIFNXRlNDIEVSRCIsICJMaXF1aWRSX0hCRzNfMjAxNV9tb3NlIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL0xpcXVpZFJfSEJHM18yMDE1X3BoeXRvZmxhc2guc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL0xpcXVpZFJfSEJHM18yMDE1X3BoeXRvZmxhc2giLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvTGlxdWlkUl9IQkczXzIwMTVfcGh5dG9mbGFzaC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJMaXF1aWQgUm9ib3RpY3MgV2F2ZSBHbGlkZXIsIEhvbmV5IEJhZGdlciAoRzMpLCAyMDE1LCBQaHl0b2ZsYXNoIiwgIkxpcXVpZCBSb2JvdGljcyBXYXZlIEdsaWRlciwgSG9uZXkgQmFkZ2VyIChHMyksIDIwMTUsIFBoeXRvZmxhc2guIFRoZSBNQUdJIG1pc3Npb24gaXMgdG8gdXNlIHRoZSBXYXZlIEdsaWRlciB0byBzYW1wbGUgdGhlIGxhdGUgc3VtbWVyIGNobG9yb3BoeWxsIGJsb29tIHRoYXQgZGV2ZWxvcHMgbmVhciAzMFx1MDBiME4sIHdpdGggdGhlIGdvYWwgb2YgdXNpbmcgdGhlIGNhbWVyYSBhbmQgTElTU1QtSG9sbyB0byB0cnkgdG8gaWRlbnRpZnkgc3BlY2llcyBpbiB0aGUgYmxvb21zIGFuZCB0aGVuIGZvbGxvdyB0aGUgZGV2ZWxvcG1lbnQgb2YgcGh5dG9wbGFua3RvbiBhZ2dyZWdhdGVzLiBUaGVzZSBhZ2dyZWdhdGVzIGhhdmUgcmVjZW50bHkgYmVlbiBzaG93biB0byBiZSBhIHNpZ25pZmljYW50IHBhcnQgb2YgdGhlIHRvdGFsIGFtb3VudCBvZiBjYXJib24gdGhhdCBzaW5rcyB0byB0aGUgZGVlcCBzZWEuIEthcmwgZXQgYWwgKDIwMTIpIGZvdW5kIHRoYXQgaW4gZWFjaCBvZiB0aGUgcGFzdCAxMyB5ZWFycywgdGhlcmUgd2FzIGEgZmx1eCBvZiBtYXRlcmlhbCB0byA0LDAwMCBtICh0aGUgc3VtbWVyIGV4cG9ydCBwdWxzZSkgdGhhdCByZXByZXNlbnRlZCB+MjAlIG9mIHRoZSB0b3RhbCBhbm51YWwgZmx1eC4gV29yayBiYXNlZCBvbiBzYXRlbGxpdGUgb2NlYW4gY29sb3IgZGF0YSBvdmVyIHRoZSBwYXN0IGRlY2FkZSBoYXMgcmV2ZWFsZWQgdGhlIGV4aXN0ZW5jZSBvZiBsYXJnZSBwaHl0b3BsYW5rdG9uIGJsb29tcyBpbiB0aGUgUGFjaWZpYyBPY2VhbiB0aGF0IGNvdmVyIHRob3VzYW5kcyBvZiBrbTIsIHBlcnNpc3QgZm9yIHdlZWtzIG9yIGxvbmdlciwgYW5kIGFyZSBvZnRlbiBkb21pbmF0ZWQgYnkgbml0cm9nZW4tZml4aW5nIGRpYXRvbSBzeW1iaW9zZXMgKFdpbHNvbiBldCBhbC4gMjAwOCkuIFdlIGhvcGUgdG8gYmUgYWJsZSB0byBleGFtaW5lIHdoZXRoZXIgdGhpcyBhZ2dyZWdhdGlvbiBpcyBvY2N1cnJpbmcgaW4gdGhlIHZhc3Qgb2NlYW5pYyByZWdpb25zIG5vcnRoIGFuZCBlYXN0IG9mIEhhd2FpJ2kgYW5kIHByb3ZpZGUgYSBiYXNpbi1zY2FsZSBjb250ZXh0IGZvciB0aGUgQUxPSEEgb2JzZXJ2YXRpb25zLiBUaGVzZSBldmVudHMgaGF2ZSBwcm92ZW4gZGlmZmljdWx0IHRvIHN0dWR5IG91dHNpZGUgb2YgdGhlIHRpbWUgc2VyaWVzIHN0YXRpb24gQUxPSEEgYXQgSGF3YWknaS5cblxuY2RtX2RhdGFfdHlwZSA9IFRyYWplY3RvcnlcblZBUklBQkxFUzpcbnZlaGljbGVOYW1lIChWZWhpY2xlIE5hbWUpXG5ib2FyZF9pZFxudGFza19pZFxucGh5dG9mbGFzaFxuZmVlZF92ZXJzaW9uXG50aW1lIChEYXRldGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG51bml4X3RpbWVzdGFtcCAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbkZvXG5GbVxuQmxhbmtcbkZ2XG5ZaWVsZFxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL0xpcXVpZFJfSEJHM18yMDE1X3BoeXRvZmxhc2hfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL0xpcXVpZFJfSEJHM18yMDE1X3BoeXRvZmxhc2hfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vTGlxdWlkUl9IQkczXzIwMTVfcGh5dG9mbGFzaC9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvTUFHSS8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvTGlxdWlkUl9IQkczXzIwMTVfcGh5dG9mbGFzaC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9TGlxdWlkUl9IQkczXzIwMTVfcGh5dG9mbGFzaCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJMaXF1aWQgUm9ib3RpY3MsIFVUIEF1c3RpbiwgTk9BQSBOTUZTIFNXRlNDIEVSRCIsICJMaXF1aWRSX0hCRzNfMjAxNV9waHl0b2ZsYXNoIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL0xpcXVpZFJfSEJHM18yMDE1X3RlbGVtZXRyeS5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvTGlxdWlkUl9IQkczXzIwMTVfdGVsZW1ldHJ5IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL0xpcXVpZFJfSEJHM18yMDE1X3RlbGVtZXRyeS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJMaXF1aWQgUm9ib3RpY3MgV2F2ZSBHbGlkZXIsIEhvbmV5IEJhZGdlciAoRzMpLCAyMDE1LCBUZWxlbWV0cnkiLCAiTGlxdWlkIFJvYm90aWNzIFdhdmUgR2xpZGVyLCBIb25leSBCYWRnZXIgKEczKSwgMjAxNSwgVGVsZW1ldHJ5LiBUaGUgTUFHSSBtaXNzaW9uIGlzIHRvIHVzZSB0aGUgV2F2ZSBHbGlkZXIgdG8gc2FtcGxlIHRoZSBsYXRlIHN1bW1lciBjaGxvcm9waHlsbCBibG9vbSB0aGF0IGRldmVsb3BzIG5lYXIgMzBcdTAwYjBOLCB3aXRoIHRoZSBnb2FsIG9mIHVzaW5nIHRoZSBjYW1lcmEgYW5kIExJU1NULUhvbG8gdG8gdHJ5IHRvIGlkZW50aWZ5IHNwZWNpZXMgaW4gdGhlIGJsb29tcyBhbmQgdGhlbiBmb2xsb3cgdGhlIGRldmVsb3BtZW50IG9mIHBoeXRvcGxhbmt0b24gYWdncmVnYXRlcy4gVGhlc2UgYWdncmVnYXRlcyBoYXZlIHJlY2VudGx5IGJlZW4gc2hvd24gdG8gYmUgYSBzaWduaWZpY2FudCBwYXJ0IG9mIHRoZSB0b3RhbCBhbW91bnQgb2YgY2FyYm9uIHRoYXQgc2lua3MgdG8gdGhlIGRlZXAgc2VhLiBLYXJsIGV0IGFsICgyMDEyKSBmb3VuZCB0aGF0IGluIGVhY2ggb2YgdGhlIHBhc3QgMTMgeWVhcnMsIHRoZXJlIHdhcyBhIGZsdXggb2YgbWF0ZXJpYWwgdG8gNCwwMDAgbSAodGhlIHN1bW1lciBleHBvcnQgcHVsc2UpIHRoYXQgcmVwcmVzZW50ZWQgfjIwJSBvZiB0aGUgdG90YWwgYW5udWFsIGZsdXguIFdvcmsgYmFzZWQgb24gc2F0ZWxsaXRlIG9jZWFuIGNvbG9yIGRhdGEgb3ZlciB0aGUgcGFzdCBkZWNhZGUgaGFzIHJldmVhbGVkIHRoZSBleGlzdGVuY2Ugb2YgbGFyZ2UgcGh5dG9wbGFua3RvbiBibG9vbXMgaW4gdGhlIFBhY2lmaWMgT2NlYW4gdGhhdCBjb3ZlciB0aG91c2FuZHMgb2Yga20yLCBwZXJzaXN0IGZvciB3ZWVrcyBvciBsb25nZXIsIGFuZCBhcmUgb2Z0ZW4gZG9taW5hdGVkIGJ5IG5pdHJvZ2VuLWZpeGluZyBkaWF0b20gc3ltYmlvc2VzIChXaWxzb24gZXQgYWwuIDIwMDgpLiBXZSBob3BlIHRvIGJlIGFibGUgdG8gZXhhbWluZSB3aGV0aGVyIHRoaXMgYWdncmVnYXRpb24gaXMgb2NjdXJyaW5nIGluIHRoZSB2YXN0IG9jZWFuaWMgcmVnaW9ucyBub3J0aCBhbmQgZWFzdCBvZiBIYXdhaSdpIGFuZCBwcm92aWRlIGEgYmFzaW4tc2NhbGUgY29udGV4dCBmb3IgdGhlIEFMT0hBIG9ic2VydmF0aW9ucy4gVGhlc2UgZXZlbnRzIGhhdmUgcHJvdmVuIGRpZmZpY3VsdCB0byBzdHVkeSBvdXRzaWRlIG9mIHRoZSB0aW1lIHNlcmllcyBzdGF0aW9uIEFMT0hBIGF0IEhhd2FpJ2kuXG5cbmNkbV9kYXRhX3R5cGUgPSBUcmFqZWN0b3J5XG5WQVJJQUJMRVM6XG52ZWhpY2xlTmFtZSAoVmVoaWNsZSBOYW1lKVxudGVsZW1ldHJ5XG5mZWVkX3ZlcnNpb25cbnRpbWUgKERhdGV0aW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmRpc3RhbmNlX292ZXJfZ3JvdW5kIChtKVxuZGVzaXJlZF9oZWFkaW5nIChkZWdyZWVzKVxuc3ViX2hlYWRpbmcgKGRlZ3JlZXMpXG50YXJnZXRfd2F5cG9pbnRcbnN1Yl90ZW1wZXJhdHVyZSAoZGVncmVlX0MpXG50b3RhbF9wb3dlciAobVdoKVxud2F0ZXJfc3BlZWQgKGtub3RzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL0xpcXVpZFJfSEJHM18yMDE1X3RlbGVtZXRyeV9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvTGlxdWlkUl9IQkczXzIwMTVfdGVsZW1ldHJ5X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL0xpcXVpZFJfSEJHM18yMDE1X3RlbGVtZXRyeS9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvTUFHSS8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvTGlxdWlkUl9IQkczXzIwMTVfdGVsZW1ldHJ5LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1MaXF1aWRSX0hCRzNfMjAxNV90ZWxlbWV0cnkmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTGlxdWlkIFJvYm90aWNzLCBVVCBBdXN0aW4sIE5PQUEgTk1GUyBTV0ZTQyBFUkQiLCAiTGlxdWlkUl9IQkczXzIwMTVfdGVsZW1ldHJ5Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL0xpcXVpZFJfSEJHM18yMDE1X3dlYXRoZXIuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL0xpcXVpZFJfSEJHM18yMDE1X3dlYXRoZXIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvTGlxdWlkUl9IQkczXzIwMTVfd2VhdGhlci5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJMaXF1aWQgUm9ib3RpY3MgV2F2ZSBHbGlkZXIsIEhvbmV5IEJhZGdlciAoRzMpLCAyMDE1LCBXZWF0aGVyIiwgIkxpcXVpZCBSb2JvdGljcyBXYXZlIEdsaWRlciwgSG9uZXkgQmFkZ2VyIChHMyksIDIwMTUsIFdlYXRoZXIuIFRoZSBNQUdJIG1pc3Npb24gaXMgdG8gdXNlIHRoZSBXYXZlIEdsaWRlciB0byBzYW1wbGUgdGhlIGxhdGUgc3VtbWVyIGNobG9yb3BoeWxsIGJsb29tIHRoYXQgZGV2ZWxvcHMgbmVhciAzMFx1MDBiME4sIHdpdGggdGhlIGdvYWwgb2YgdXNpbmcgdGhlIGNhbWVyYSBhbmQgTElTU1QtSG9sbyB0byB0cnkgdG8gaWRlbnRpZnkgc3BlY2llcyBpbiB0aGUgYmxvb21zIGFuZCB0aGVuIGZvbGxvdyB0aGUgZGV2ZWxvcG1lbnQgb2YgcGh5dG9wbGFua3RvbiBhZ2dyZWdhdGVzLiBUaGVzZSBhZ2dyZWdhdGVzIGhhdmUgcmVjZW50bHkgYmVlbiBzaG93biB0byBiZSBhIHNpZ25pZmljYW50IHBhcnQgb2YgdGhlIHRvdGFsIGFtb3VudCBvZiBjYXJib24gdGhhdCBzaW5rcyB0byB0aGUgZGVlcCBzZWEuIEthcmwgZXQgYWwgKDIwMTIpIGZvdW5kIHRoYXQgaW4gZWFjaCBvZiB0aGUgcGFzdCAxMyB5ZWFycywgdGhlcmUgd2FzIGEgZmx1eCBvZiBtYXRlcmlhbCB0byA0LDAwMCBtICh0aGUgc3VtbWVyIGV4cG9ydCBwdWxzZSkgdGhhdCByZXByZXNlbnRlZCB+MjAlIG9mIHRoZSB0b3RhbCBhbm51YWwgZmx1eC4gV29yayBiYXNlZCBvbiBzYXRlbGxpdGUgb2NlYW4gY29sb3IgZGF0YSBvdmVyIHRoZSBwYXN0IGRlY2FkZSBoYXMgcmV2ZWFsZWQgdGhlIGV4aXN0ZW5jZSBvZiBsYXJnZSBwaHl0b3BsYW5rdG9uIGJsb29tcyBpbiB0aGUgUGFjaWZpYyBPY2VhbiB0aGF0IGNvdmVyIHRob3VzYW5kcyBvZiBrbTIsIHBlcnNpc3QgZm9yIHdlZWtzIG9yIGxvbmdlciwgYW5kIGFyZSBvZnRlbiBkb21pbmF0ZWQgYnkgbml0cm9nZW4tZml4aW5nIGRpYXRvbSBzeW1iaW9zZXMgKFdpbHNvbiBldCBhbC4gMjAwOCkuIFdlIGhvcGUgdG8gYmUgYWJsZSB0byBleGFtaW5lIHdoZXRoZXIgdGhpcyBhZ2dyZWdhdGlvbiBpcyBvY2N1cnJpbmcgaW4gdGhlIHZhc3Qgb2NlYW5pYyByZWdpb25zIG5vcnRoIGFuZCBlYXN0IG9mIEhhd2FpJ2kgYW5kIHByb3ZpZGUgYSBiYXNpbi1zY2FsZSBjb250ZXh0IGZvciB0aGUgQUxPSEEgb2JzZXJ2YXRpb25zLiBUaGVzZSBldmVudHMgaGF2ZSBwcm92ZW4gZGlmZmljdWx0IHRvIHN0dWR5IG91dHNpZGUgb2YgdGhlIHRpbWUgc2VyaWVzIHN0YXRpb24gQUxPSEEgYXQgSGF3YWknaS5cblxuY2RtX2RhdGFfdHlwZSA9IFRyYWplY3RvcnlcblZBUklBQkxFUzpcbnZlaGljbGVOYW1lIChWZWhpY2xlIE5hbWUpXG53ZWF0aGVyXG5mZWVkX3ZlcnNpb25cbnRpbWUgKERhdGV0aW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbnRlbXBlcmF0dXJlIChkZWdyZWVfQylcbnByZXNzdXJlIChtQmFyKVxuYXZnX3dpbmRfc3BlZWQgKFdpbmQgU3BlZWQsIGtub3RzKVxuc3RkX2Rldl93aW5kX3NwZWVkIChXaW5kIFNwZWVkLCBrbm90cylcbmF2Z193aW5kX2RpcmVjdGlvbiAoV2luZCBGcm9tIERpcmVjdGlvbiwgZGVncmVlc190cnVlKVxuc3RkX2Rldl93aW5kX2RpcmVjdGlvbiAoV2luZCBGcm9tIERpcmVjdGlvbiwgZGVncmVlc190cnVlKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL0xpcXVpZFJfSEJHM18yMDE1X3dlYXRoZXJfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL0xpcXVpZFJfSEJHM18yMDE1X3dlYXRoZXJfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vTGlxdWlkUl9IQkczXzIwMTVfd2VhdGhlci9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvTUFHSS8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvTGlxdWlkUl9IQkczXzIwMTVfd2VhdGhlci5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9TGlxdWlkUl9IQkczXzIwMTVfd2VhdGhlciZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJMaXF1aWQgUm9ib3RpY3MsIFVUIEF1c3RpbiwgTk9BQSBOTUZTIFNXRlNDIEVSRCIsICJMaXF1aWRSX0hCRzNfMjAxNV93ZWF0aGVyIl0sCiAgICAgIFsiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfMTkwZl8xZmU4XzRjYzQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0XzE5MGZfMWZlOF80Y2M0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk1hdWkgQ2l0aXplbiBTY2llbmNlIENvYXN0YWwgV2F0ZXIgUXVhbGl0eSBEYXRhIiwgIkEgbmV0d29yayBvZiBjaXRpemVuIHNjaWVuY2Ugdm9sdW50ZWVycyBwZXJpb2RpY2FsbHkgbW9uaXRvcnMgd2F0ZXIgcXVhbGl0eSBhdCBzZXZlcmFsIGJlYWNoZXMgYWNyb3NzIHRoZSBpc2xhbmQgb2YgTWF1aSBpbiB0aGUgU3RhdGUgb2YgSGF3YWlpLiBUaGlzIGNvbW11bml0eS1iYXNlZCBtb25pdG9yaW5nIGVmZm9ydCBwcm92aWRlcyB2YWx1YWJsZSBkYXRhIGZvciByZXNvdXJjZSBtYW5hZ2VtZW50IHB1cnBvc2VzLiBJbmZvcm1lZCB2b2x1bnRlZXIgbmV0d29ya3MgY2FuIHNlcnZlIGFzIGEgY29tbXVuaXR5J3MgXCJleWVzIGFuZCBlYXJzXCIgYW5kIHdpbGwgb2Z0ZW4gcHJvdmlkZSB0aGUgZmlyc3QgaW5kaWNhdGlvbnMgb2YgY2hhbmdlcyB0byBhIHN5c3RlbS4gSW4gYWRkaXRpb24gdG8gdGhlIHZhbHVlIG9mIGVhcmx5IGRldGVjdGlvbiwgaXQgaXMgaW1wb3J0YW50IHRvIG1haW50YWluIG9uZ29pbmcgbW9uaXRvcmluZyBlZmZvcnRzIHRvIGNvbXBpbGUgZGF0YSBhbmQgZG9jdW1lbnQgcmVzb3VyY2UgY29uZGl0aW9ucy5cblxuSW4gYWRkaXRpb24gdG8gd2F0ZXIgdGVtcGVyYXR1cmUsIHNhbGluaXR5LCB0dXJiaWRpdHkgKHdhdGVyIGNsYXJpdHkpLCBhbmQgcEgsIHNhbXBsaW5nIHNpdGVzIGFyZSBhbHNvIG1vbml0b3JlZCBmb3IgaGFybWZ1bCBiYWN0ZXJpYSBsZXZlbHMgb2YgRW50ZXJvY29jY3VzLiBUaGlzIGluZGljYXRvciBiYWN0ZXJpYSBoYXMgYmVlbiBjb3JyZWxhdGVkIHdpdGggdGhlIHByZXNlbmNlIG9mIGh1bWFuIHBhdGhvZ2VucyAoZGlzZWFzZS1jYXVzaW5nIG9yZ2FuaXNtcykgYW5kIHRoZXJlZm9yZSB3aXRoIGh1bWFuIGlsbG5lc3NlcyBzdWNoIGFzIGdhc3Ryb2VudGVyaXRpcywgZGlhcnJoZWEsIGFuZCB2YXJpb3VzIGluZmVjdGlvbnMgaW4gZXBpZGVtaW9sb2dpY2FsIHN0dWRpZXMuIEFzIHN1Y2gsIGl0IGlzIGNvbW1vbmx5IG1lYXN1cmVkIGluIGJlYWNoIHdhdGVyIHF1YWxpdHkgbW9uaXRvcmluZyBwcm9ncmFtcy4gRm9yIHJlZmVyZW5jZSwgdGhlIFUuUy4gRW52aXJvbm1lbnRhbCBQcm90ZWN0aW9uIEFnZW5jeSAoRVBBKSAxOTg2IEFtYmllbnQgV2F0ZXIgUXVhbGl0eSBDcml0ZXJpYSBmb3IgQmFjdGVyaWEgcmVjb21tZW5kcyB0aGF0IGEgd2F0ZXIgcXVhbGl0eSBhbGVydCBpcyBwb3N0ZWQgaWYgZWl0aGVyOiAoYS4pIHRoZSBsYXRlc3Qgd2F0ZXIgc2FtcGxlIGV4Y2VlZHMgMTA0IENGVS8xMDAgbUwgb2YgRW50ZXJvY29jY3VzLCBvciAoYi4pIHRoZSBnZW9tZXRyaWMgbWVhbiBvZiB0aGUgcGFzdCAzMCBkYXlzIG9mIHdhdGVyIHNhbXBsZXMgZXhjZWVkcyAzNSBDRlUvMTAwIG1MLiAgT25lIG9mIHRoZSBsaW1pdGF0aW9ucyBvZiBhbGwgYXZhaWxhYmxlIGFuZCBFUEEtYXBwcm92ZWQgdGVzdCBtZXRob2RzIGlzIHRoYXQgdGhlIHNhbXBsZSBtdXN0IGJlIGluY3ViYXRlZCBmb3IgYWJvdXQgMjQgaG91cnMuIFxuXG5EYXRhIGFyZSBtYW5hZ2VkIHRocm91Z2ggYW4gb25saW5lIHJlcG9zaXRvcnksIHRoZSBDb3JhbCBSZWVmIE1vbml0b3JpbmcgRGF0YSBQb3J0YWwgKGh0dHA6Ly9tb25pdG9yaW5nLmNvcmFsLm9yZyksIGRldmVsb3BlZCBhbmQgY29vcmRpbmF0ZWQgYnkgdGhlIENvcmFsIFJlZWYgQWxsaWFuY2UgKENPUkFMKSBhbmQgaXRzIHBhcnRuZXJzIHdpdGggZnVuZGluZyBwcm92aWRlZCBieSB0aGUgSGF3YWlpIFRvdXJpc20gQXV0aG9yaXR5IChIVEEpIGFuZCB0aGUgTmF0aW9uYWwgT2NlYW5pYyBhbmQgQXRtb3NwaGVyaWMgQWRtaW5pc3RyYXRpb24gKE5PQUEpLiBEYXRhIGNvbGxlY3Rpb24gaXMgY29vcmRpbmF0ZWQgYnkgdGhlIEhhd2FpaSBEaXZpc2lvbiBvZiBBcXVhdGljIFJlc291cmNlcyAoREFSKSwgdGhlIEhhd2FpaWFuIElzbGFuZHMgSHVtcGJhY2sgV2hhbGUgTmF0aW9uYWwgTWFyaW5lIFNhbmN0dWFyeSAoSElIV05NUyksIEFxdWFuaW1pdHkgTm93LCB0aGUgRGlnaXRhbCBCdXMsIFNhdmUgSG9ub2x1YSBDb2FsaXRpb24sIFByb2plY3QgUy5FLkEuLUxpbmssIGFuZCBvdGhlciBsb2NhbCBvcmdhbml6YXRpb25zIGFuZCBhZ2VuY2llcy4gRGF0YSBhcmUgcHVibGljbHkgZGlzdHJpYnV0ZWQgYnkgdGhlIFBhY2lmaWMgSXNsYW5kcyBPY2VhbiBPYnNlcnZpbmcgU3lzdGVtIChQYWNJT09TKS5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG4uLi4gKDEwIG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2hhd2FpaV9zb2VzdF8xOTBmXzFmZThfNGNjNF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvaGF3YWlpX3NvZXN0XzE5MGZfMWZlOF80Y2M0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2hhd2FpaV9zb2VzdF8xOTBmXzFmZThfNGNjNC9pbmRleC5qc29uIiwgImh0dHA6Ly9tb25pdG9yaW5nLmNvcmFsLm9yZyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9oYXdhaWlfc29lc3RfMTkwZl8xZmU4XzRjYzQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWhhd2FpaV9zb2VzdF8xOTBmXzFmZThfNGNjNCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJDb3JhbCBSZWVmIEFsbGlhbmNlIChDT1JBTCkiLCAiaGF3YWlpX3NvZXN0XzE5MGZfMWZlOF80Y2M0Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2N3d2NOREJDTWV0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9jd3djTkRCQ01ldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9jd3djTkRCQ01ldC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOREJDIFN0YW5kYXJkIE1ldGVvcm9sb2dpY2FsIEJ1b3kgRGF0YSwgMTk3MC1wcmVzZW50IiwgIlRoZSBOYXRpb25hbCBEYXRhIEJ1b3kgQ2VudGVyIChOREJDKSBkaXN0cmlidXRlcyBtZXRlb3JvbG9naWNhbCBkYXRhIGZyb21cbm1vb3JlZCBidW95cyBtYWludGFpbmVkIGJ5IE5EQkMgYW5kIG90aGVycy4gTW9vcmVkIGJ1b3lzIGFyZSB0aGUgd2VhdGhlclxuc2VudGluZWxzIG9mIHRoZSBzZWEuIFRoZXkgYXJlIGRlcGxveWVkIGluIHRoZSBjb2FzdGFsIGFuZCBvZmZzaG9yZSB3YXRlcnNcbmZyb20gdGhlIHdlc3Rlcm4gQXRsYW50aWMgdG8gdGhlIFBhY2lmaWMgT2NlYW4gYXJvdW5kIEhhd2FpaSwgYW5kIGZyb20gdGhlXG5CZXJpbmcgU2VhIHRvIHRoZSBTb3V0aCBQYWNpZmljLiBOREJDJ3MgbW9vcmVkIGJ1b3lzIG1lYXN1cmUgYW5kIHRyYW5zbWl0XG5iYXJvbWV0cmljIHByZXNzdXJlOyB3aW5kIGRpcmVjdGlvbiwgc3BlZWQsIGFuZCBndXN0OyBhaXIgYW5kIHNlYVxudGVtcGVyYXR1cmU7IGFuZCB3YXZlIGVuZXJneSBzcGVjdHJhIGZyb20gd2hpY2ggc2lnbmlmaWNhbnQgd2F2ZSBoZWlnaHQsXG5kb21pbmFudCB3YXZlIHBlcmlvZCwgYW5kIGF2ZXJhZ2Ugd2F2ZSBwZXJpb2QgYXJlIGRlcml2ZWQuIEV2ZW4gdGhlXG5kaXJlY3Rpb24gb2Ygd2F2ZSBwcm9wYWdhdGlvbiBpcyBtZWFzdXJlZCBvbiBtYW55IG1vb3JlZCBidW95cy5cblxuVGhlIGRhdGEgaXMgZnJvbSBOT0FBIE5EQkMuIEl0IGhhcyBiZWVuIHJlZm9ybWF0dGVkIGJ5IE5PQUEgQ29hc3R3YXRjaCxcbldlc3QgQ29hc3QgTm9kZS4gVGhpcyBkYXRhc2V0IG9ubHkgaGFzIHRoZSBkYXRhIHRoYXQgaXMgY2xvc2VzdCB0byBhXG5naXZlbiBob3VyLiBUaGUgdGltZSB2YWx1ZXMgaW4gdGhlIGRhdGFzZXQgYXJlIHJvdW5kZWQgdG8gdGhlIG5lYXJlc3QgaG91ci5cblxuVGhpcyBkYXRhc2V0IGhhcyBib3RoIGhpc3RvcmljYWwgZGF0YSAocXVhbGl0eSBjb250cm9sbGVkLCBiZWZvcmVcbjIwMTgtMDgtMDFUMDA6MDA6MDBaKSBhbmQgbmVhciByZWFsIHRpbWUgZGF0YSAobGVzcyBxdWFsaXR5IGNvbnRyb2xsZWQsIGZyb21cbjIwMTgtMDgtMDFUMDA6MDA6MDBaIG9uKS5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbnN0YXRpb24gKFN0YXRpb24gTmFtZSlcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxud2QgKFdpbmQgRGlyZWN0aW9uLCBkZWdyZWVzX3RydWUpXG53c3BkIChXaW5kIFNwZWVkLCBtIHMtMSlcbmdzdCAoV2luZCBHdXN0IFNwZWVkLCBtIHMtMSlcbnd2aHQgKFdhdmUgSGVpZ2h0LCBtKVxuZHBkIChXYXZlIFBlcmlvZCwgRG9taW5hbnQsIHMpXG5hcGQgKFdhdmUgUGVyaW9kLCBBdmVyYWdlLCBzKVxubXdkIChXYXZlIERpcmVjdGlvbiwgZGVncmVlc190cnVlKVxuLi4uICg5IG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2N3d2NOREJDTWV0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9jd3djTkRCQ01ldF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9jd3djTkRCQ01ldC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3Lm5kYmMubm9hYS5nb3YvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2N3d2NOREJDTWV0LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1jd3djTkRCQ01ldCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIE5EQkMsIE5PQUEgTk1GUyBTV0ZTQyBFUkQiLCAiY3d3Y05EQkNNZXQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvd29jZWNwci5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvd29jZWNwciIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC93b2NlY3ByLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5FRlNDIENvbnRpbnVvdXMgUGxhbmt0b24gUmVjb3JkZXIiLCAiQSBzdW1tYXJ5IGZvciB0aGUgZGF0YVxuXG5jZG1fZGF0YV90eXBlID0gT3RoZXJcblZBUklBQkxFUzpcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5jcnVpc2VcbnNhbXBsZVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbnBoeXRvX2NvbG9yX2luZHggKFBoeXRvcGxhbmt0b24gQ29sb3IgSW5kZXgpXG5tYXJtYXBfdGF4X2NvZGUgKE1hcm1hcCBUYXhvbm9taWMgQ29kZSlcbm1hcm1hcF9zdGFnZV9jb2RlXG5hYnVuZGFuY2UgKHBlciAxMDAgY3ViaWMgbWV0ZXJzKVxubGlmZV9zdGFnZVxudGF4b25vbWljX25hbWVcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC93b2NlY3ByX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC93b2NlY3ByX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3dvY2VjcHIvaW5kZXguanNvbiIsICJodHRwczovL2NvYXN0d2F0Y2gucGZlZy5ub2FhLmdvdi9lcmRkYXAiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3Mvd29jZWNwci5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9d29jZWNwciZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJORUZTQyIsICJ3b2NlY3ByIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZE5ld3BvcnRDdGQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZE5ld3BvcnRDdGQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkTmV3cG9ydEN0ZC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOZXdwb3J0IExhYiBDVEQgQ2FzdHMsIDE5OTctMjAwOCIsICJUaGUgTmV3cG9ydCBIeWRyb2dyYXBoaWMgKE5IKSBMaW5lIGFsb25nIDQ0LjY1XHUwMGIwTiBvZmYgY2VudHJhbCBPcmVnb24gd2FzIHNhbXBsZWQgc2Vhc29uYWxseSBkdXJpbmcgdHdvIGVwb2NoczogMTk2MS0xOTcxIHRocm91Z2ggdGhlIFRFTk9DIHByb2dyYW0gYW5kIDE5OTctMjAwMyB0aHJvdWdoIHRoZSBHTE9CRUMgTm9ydGhlYXN0IFBhY2lmaWMgTG9uZyBUZXJtIE9ic2VydmF0aW9ucyBQcm9ncmFtIChMVE9QKTsgc29tZSBvYnNlcnZhdGlvbnMgYXJlIGF2YWlsYWJsZSBmb3IgMjAwNCBhbmQgMjAwNS4gRHVyaW5nIFRFTk9DLCB0aGUgbGluZSBleHRlbmRlZCAzMDUga20gb2Zmc2hvcmUgdG8gMTI4XHUwMGIwVywgd2l0aCBzdGF0aW9ucyAxOCBrbSBhcGFydCBvdmVyIHRoZSBjb250aW5lbnRhbCBzaGVsZiBhbmQgMzYga20gb2Zmc2hvcmUuIER1cmluZyBMVE9QLCB0aGUgbGluZSB3YXMgc2hvcnRlciAodG8gMTI2XHUwMGIwVykgd2l0aCBjbG9zZXIgc3RhdGlvbiBzcGFjaW5nIG92ZXIgdGhlIGNvbnRpbmVudGFsIHNoZWxmICg5IGttIGFwYXJ0KSBhbmQgc2xvcGUgKDE4IGttIGFwYXJ0KS4gTFRPUCBjcnVpc2VzIGluY2x1ZGVkIGJpb2NoZW1pY2FsIHNhbXBsaW5nIGFuZCB1bmRlcndheSBjdXJyZW50IG1lYXN1cmVtZW50cy5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNQcm9maWxlXG5WQVJJQUJMRVM6XG5saW5lXG50cmFuc2VjdFxuc3RhdGlvblxucGxhaW5fc3RhdGlvblxucHJvamVjdFxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbnN0YXRpb25fY29kZSAoQ1REIFN0YXRpb24gQ29kZSlcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcbmRlbnNpdHkgKHNpZ21hKVxuZmx1b3Jlc2NlbmNlICh2b2x0cylcbnNhbGluaXR5IChTZWEgV2F0ZXIgUHJhY3RpY2FsIFNhbGluaXR5LCBQU1UpXG50ZW1wZXJhdHVyZSAoZGVncmVlX0MpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkTmV3cG9ydEN0ZF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkTmV3cG9ydEN0ZF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmROZXdwb3J0Q3RkL2luZGV4Lmpzb24iLCAiaHR0cDovL2xpbmtpbmdodWIuZWxzZXZpZXIuY29tL3JldHJpZXZlL3BpaS9TMDA3OTY2MTEwNzAwMTQ3NCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lcmROZXdwb3J0Q3RkLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmROZXdwb3J0Q3RkJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5XRlNDIiwgImVyZE5ld3BvcnRDdGQiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25jZXBOaW5vU1NUd2siLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbmNlcE5pbm9TU1R3ay5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOaW5vIFJlZ2lvbiBXZWVrbHkgU1NUIE9JU1NULnYyIiwgIldlZWtseSBPSVNTVC52MiAoMTk4MS0yMDEwIGJhc2UgcGVyaW9kKSBOaVx1MDBmMW8gMSsyICgwLTEwXHUwMGIwU291dGgpKDkwXHUwMGIwV2VzdC04MFx1MDBiMFdlc3QpIE5pXHUwMGYxbyAzICg1XHUwMGIwTm9ydGgtNVx1MDBiMFNvdXRoKSgxNTBcdTAwYjBXZXN0LTkwXHUwMGIwV2VzdCkgTmlcdTAwZjFvIDQgKDVcdTAwYjBOb3J0aC01XHUwMGIwU291dGgpICgxNjBcdTAwYjBFYXN0LTE1MFx1MDBiMFdlc3QpIE5pXHUwMGYxbyAzLjQgKDVcdTAwYjBOb3J0aC01XHUwMGIwU291dGgpKDE3MC0xMjBcdTAwYjBXZXN0KVxuXG5jZG1fZGF0YV90eXBlID0gT3RoZXJcblZBUklBQkxFUzpcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5OaW5vMV8yX3NzdCAoZGVncmVlcyBDKVxuTmlubzFfMl9zc3RhIChOaW5vMSsyIFNTVCBBbm9tYWx5LCBkZWdyZWVzIEMpXG5OaW5vM19zc3QgKGRlZ3JlZXMgQylcbk5pbm8zX3NzdGEgKE5pbm8zIFNTVCBBbm9tYWx5LCBkZWdyZWVzIEMpXG5OaW5vMzRfc3N0IChOaW5vMy40IFNTVCwgZGVncmVlcyBDKVxuTmlubzM0X3NzdGEgKE5pbm8zLjQgU1NUIEFub21hbHksIGRlZ3JlZXMgQylcbk5pbm80X3NzdCAoZGVncmVlcyBDKVxuTmlubzRfc3N0YSAoTmlubzQgU1NUIEFub21hbHksIGRlZ3JlZXMgQylcbiIsICIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vbmNlcE5pbm9TU1R3ay9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LmNwYy5uY2VwLm5vYWEuZ292L2RhdGEvaW5kaWNlcy8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvbmNlcE5pbm9TU1R3ay5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9bmNlcE5pbm9TU1R3ayZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOQ0VQIiwgIm5jZXBOaW5vU1NUd2siXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbmRiY1Nvc1dUZW1wLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9uZGJjU29zV1RlbXAiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbmRiY1Nvc1dUZW1wLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5PQUEgTkRCQyBTT1MsIDIwMDYtcHJlc2VudCwgc2VhX3dhdGVyX3RlbXBlcmF0dXJlIiwgIlRoZSBOT0FBIE5EQkMgU09TIHNlcnZlciBpcyBwYXJ0IG9mIHRoZSBJT09TIERJRiBTT1MgUHJvamVjdC4gIFRoZSBzdGF0aW9ucyBpbiB0aGlzIGRhdGFzZXQgaGF2ZSBzZWFfd2F0ZXJfdGVtcGVyYXR1cmUgZGF0YS5cblxuQmVjYXVzZSBvZiB0aGUgbmF0dXJlIG9mIFNPUyByZXF1ZXN0cywgcmVxdWVzdHMgZm9yIGRhdGEgTVVTVCBpbmNsdWRlIGNvbnN0cmFpbnRzIGZvciB0aGUgbG9uZ2l0dWRlLCBsYXRpdHVkZSwgdGltZSwgYW5kL29yIHN0YXRpb25faWQgdmFyaWFibGVzLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbnN0YXRpb25faWRcbmFsdGl0dWRlIChtKVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNlbnNvcl9pZFxuc2VhX3dhdGVyX3RlbXBlcmF0dXJlIChkZWdyZWVfQylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9uZGJjU29zV1RlbXBfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL25kYmNTb3NXVGVtcF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9uZGJjU29zV1RlbXAvaW5kZXguanNvbiIsICJodHRwczovL3NkZi5uZGJjLm5vYWEuZ292L3Nvcy8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvbmRiY1Nvc1dUZW1wLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1uZGJjU29zV1RlbXAmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBOREJDIiwgIm5kYmNTb3NXVGVtcCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9uZGJjU29zV2luZC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbmRiY1Nvc1dpbmQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbmRiY1Nvc1dpbmQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTk9BQSBOREJDIFNPUywgMjAwNi1wcmVzZW50LCB3aW5kcyIsICJUaGUgTk9BQSBOREJDIFNPUyBzZXJ2ZXIgaXMgcGFydCBvZiB0aGUgSU9PUyBESUYgU09TIFByb2plY3QuICBUaGUgc3RhdGlvbnMgaW4gdGhpcyBkYXRhc2V0IGhhdmUgd2luZHMgZGF0YS5cblxuQmVjYXVzZSBvZiB0aGUgbmF0dXJlIG9mIFNPUyByZXF1ZXN0cywgcmVxdWVzdHMgZm9yIGRhdGEgTVVTVCBpbmNsdWRlIGNvbnN0cmFpbnRzIGZvciB0aGUgbG9uZ2l0dWRlLCBsYXRpdHVkZSwgdGltZSwgYW5kL29yIHN0YXRpb25faWQgdmFyaWFibGVzLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbnN0YXRpb25faWRcbmFsdGl0dWRlIChtKVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNlbnNvcl9pZFxud2luZF9mcm9tX2RpcmVjdGlvbiAoZGVncmVlc190cnVlKVxud2luZF9zcGVlZCAobSBzLTEpXG53aW5kX3NwZWVkX29mX2d1c3QgKG0gcy0xKVxudXB3YXJkX2Fpcl92ZWxvY2l0eSAobSBzLTEpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvbmRiY1Nvc1dpbmRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL25kYmNTb3NXaW5kX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL25kYmNTb3NXaW5kL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zZGYubmRiYy5ub2FhLmdvdi9zb3MvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL25kYmNTb3NXaW5kLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1uZGJjU29zV2luZCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIE5EQkMiLCAibmRiY1Nvc1dpbmQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbmRiY1Nvc0N1cnJlbnRzLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9uZGJjU29zQ3VycmVudHMiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbmRiY1Nvc0N1cnJlbnRzLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5PQUEgTkRCQyBTT1MsIDIwMDctcHJlc2VudCwgY3VycmVudHMiLCAiVGhlIE5PQUEgTkRCQyBTT1Mgc2VydmVyIGlzIHBhcnQgb2YgdGhlIElPT1MgRElGIFNPUyBQcm9qZWN0LiAgVGhlIHN0YXRpb25zIGluIHRoaXMgZGF0YXNldCBoYXZlIGN1cnJlbnRzIGRhdGEuXG5cbkJlY2F1c2Ugb2YgdGhlIG5hdHVyZSBvZiBTT1MgcmVxdWVzdHMsIHJlcXVlc3RzIGZvciBkYXRhIE1VU1QgaW5jbHVkZSBjb25zdHJhaW50cyBmb3IgdGhlIGxvbmdpdHVkZSwgbGF0aXR1ZGUsIHRpbWUsIGFuZC9vciBzdGF0aW9uX2lkIHZhcmlhYmxlcy5cblxuV0FSTklORzogQWx3YXlzIGNoZWNrIHRoZSBxdWFsaXR5X2ZsYWdzIGJlZm9yZSB1c2luZyB0aGlzIGRhdGEuIEEgc2ltcGxlIGNyaXRlcmlvbiBpczogb25seSB1c2UgYSByb3cgb2YgZGF0YSBpZiB0aGUgZmlyc3QgcXVhbGl0eV9mbGFncyB2YWx1ZSBmb3IgdGhlIHJvdyAob3ZlcmFsbCBiaW4gc3RhdHVzKSBpcyAzIChnb29kIGRhdGEvcGFzc2VkIHF1YWxpdHkgdGVzdCkuIFlvdSBjYW4gZG8gdGhpcyBieSBhcHBlbmRpbmcgJnF1YWxpdHlfZmxhZ3M9flwiMzsuKlwiIHRvIHlvdXIgcmVxdWVzdC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNQcm9maWxlXG5WQVJJQUJMRVM6XG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxuc3RhdGlvbl9pZFxuYWx0aXR1ZGUgKG0pXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuc2Vuc29yX2lkXG5iaW4gKGNvdW50KVxuZGlyZWN0aW9uX29mX3NlYV93YXRlcl92ZWxvY2l0eSAoZGVncmVlc190cnVlKVxuc2VhX3dhdGVyX3NwZWVkIChjbS9zKVxudXB3YXJkX3NlYV93YXRlcl92ZWxvY2l0eSAoY20vcylcbmVycm9yX3ZlbG9jaXR5IChjbS9zKVxucGxhdGZvcm1fb3JpZW50YXRpb24gKGRlZ3JlZXNfdHJ1ZSlcbnBsYXRmb3JtX3BpdGNoX2FuZ2xlIChkZWdyZWUpXG5wbGF0Zm9ybV9yb2xsX2FuZ2xlIChkZWdyZWUpXG5zZWFfd2F0ZXJfdGVtcGVyYXR1cmUgKENlbClcbnBjdF9nb29kXzNfYmVhbSAoUGVyY2VudCBHb29kIDMgQmVhbSwgcGVyY2VudClcbnBjdF9nb29kXzRfYmVhbSAoUGVyY2VudCBHb29kIDQgQmVhbSwgcGVyY2VudClcbnBjdF9yZWplY3RlZCAoUGVyY2VudCBSZWplY3RlZCwgcGVyY2VudClcbnBjdF9iYWQgKFBlcmNlbnQgQmFkLCBwZXJjZW50KVxuLi4uICg5IG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL25kYmNTb3NDdXJyZW50c19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvbmRiY1Nvc0N1cnJlbnRzX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL25kYmNTb3NDdXJyZW50cy9pbmRleC5qc29uIiwgImh0dHBzOi8vc2RmLm5kYmMubm9hYS5nb3Yvc29zLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9uZGJjU29zQ3VycmVudHMucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPW5kYmNTb3NDdXJyZW50cyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIE5EQkMiLCAibmRiY1Nvc0N1cnJlbnRzIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25kYmNTb3NTYWxpbml0eS5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbmRiY1Nvc1NhbGluaXR5IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25kYmNTb3NTYWxpbml0eS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOT0FBIE5EQkMgU09TLCAyMDA3LXByZXNlbnQsIHNlYV93YXRlcl9wcmFjdGljYWxfc2FsaW5pdHkiLCAiVGhlIE5PQUEgTkRCQyBTT1Mgc2VydmVyIGlzIHBhcnQgb2YgdGhlIElPT1MgRElGIFNPUyBQcm9qZWN0LiAgVGhlIHN0YXRpb25zIGluIHRoaXMgZGF0YXNldCBoYXZlIHNlYV93YXRlcl9wcmFjdGljYWxfc2FsaW5pdHkgZGF0YS5cblxuQmVjYXVzZSBvZiB0aGUgbmF0dXJlIG9mIFNPUyByZXF1ZXN0cywgcmVxdWVzdHMgZm9yIGRhdGEgTVVTVCBpbmNsdWRlIGNvbnN0cmFpbnRzIGZvciB0aGUgbG9uZ2l0dWRlLCBsYXRpdHVkZSwgdGltZSwgYW5kL29yIHN0YXRpb25faWQgdmFyaWFibGVzLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbnN0YXRpb25faWRcbmFsdGl0dWRlIChtKVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNlbnNvcl9pZFxuc2VhX3dhdGVyX3NhbGluaXR5IChTZWEgV2F0ZXIgUHJhY3RpY2FsIFNhbGluaXR5LCBQU1UpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvbmRiY1Nvc1NhbGluaXR5X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9uZGJjU29zU2FsaW5pdHlfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vbmRiY1Nvc1NhbGluaXR5L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zZGYubmRiYy5ub2FhLmdvdi9zb3MvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL25kYmNTb3NTYWxpbml0eS5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9bmRiY1Nvc1NhbGluaXR5JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgTkRCQyIsICJuZGJjU29zU2FsaW5pdHkiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbmRiY1Nvc1dMZXZlbC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbmRiY1Nvc1dMZXZlbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9uZGJjU29zV0xldmVsLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5PQUEgTkRCQyBTT1MsIDIwMDgtcHJlc2VudCwgc2VhX2Zsb29yX2RlcHRoX2JlbG93X3NlYV9zdXJmYWNlIiwgIlRoZSBOT0FBIE5EQkMgU09TIHNlcnZlciBpcyBwYXJ0IG9mIHRoZSBJT09TIERJRiBTT1MgUHJvamVjdC4gIFRoZSBzdGF0aW9ucyBpbiB0aGlzIGRhdGFzZXQgaGF2ZSBzZWFfZmxvb3JfZGVwdGhfYmVsb3dfc2VhX3N1cmZhY2UgZGF0YS5cblxuQmVjYXVzZSBvZiB0aGUgbmF0dXJlIG9mIFNPUyByZXF1ZXN0cywgcmVxdWVzdHMgZm9yIGRhdGEgTVVTVCBpbmNsdWRlIGNvbnN0cmFpbnRzIGZvciB0aGUgbG9uZ2l0dWRlLCBsYXRpdHVkZSwgdGltZSwgYW5kL29yIHN0YXRpb25faWQgdmFyaWFibGVzLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbnN0YXRpb25faWRcbmFsdGl0dWRlIChtKVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNlbnNvcl9pZFxuYXZlcmFnaW5nX2ludGVydmFsIChzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL25kYmNTb3NXTGV2ZWxfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL25kYmNTb3NXTGV2ZWxfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vbmRiY1Nvc1dMZXZlbC9pbmRleC5qc29uIiwgImh0dHBzOi8vc2RmLm5kYmMubm9hYS5nb3Yvc29zLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9uZGJjU29zV0xldmVsLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1uZGJjU29zV0xldmVsJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgTkRCQyIsICJuZGJjU29zV0xldmVsIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc1Nvc0FUZW1wLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NTb3NBVGVtcCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NTb3NBVGVtcC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOT0FBIE5PUyBTT1MsIEVYUEVSSU1FTlRBTCwgMTg1My1wcmVzZW50LCBBaXIgVGVtcGVyYXR1cmUiLCAiVGhlIE5PQUEgTk9TIFNPUyBzZXJ2ZXIgaXMgcGFydCBvZiB0aGUgSU9PUyBESUYgU09TIFByb2plY3QuICBUaGUgc3RhdGlvbnMgaW4gdGhpcyBkYXRhc2V0IGhhdmUgYWlyIHRlbXBlcmF0dXJlIGRhdGEuICAqKioqVGhlc2Ugc2VydmljZXMgYXJlIGZvciB0ZXN0aW5nIGFuZCBldmFsdWF0aW9uIHVzZSBvbmx5KioqKlxuXG5CZWNhdXNlIG9mIHRoZSBuYXR1cmUgb2YgU09TIHJlcXVlc3RzLCByZXF1ZXN0cyBmb3IgZGF0YSBNVVNUIGluY2x1ZGUgY29uc3RyYWludHMgZm9yIHRoZSBsb25naXR1ZGUsIGxhdGl0dWRlLCB0aW1lLCBhbmQvb3Igc3RhdGlvbl9pZCB2YXJpYWJsZXMuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxuc3RhdGlvbl9pZFxuYWx0aXR1ZGUgKG0pXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuc2Vuc29yX2lkXG5haXJfdGVtcGVyYXR1cmUgKGRlZ3JlZV9DKVxucXVhbGl0eV9mbGFnc1xuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL25vc1Nvc0FUZW1wX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9ub3NTb3NBVGVtcF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9ub3NTb3NBVGVtcC9pbmRleC5qc29uIiwgImh0dHBzOi8vb3BlbmRhcC5jby1vcHMubm9zLm5vYWEuZ292L2lvb3MtZGlmLXNvcy8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3Mvbm9zU29zQVRlbXAucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPW5vc1Nvc0FUZW1wJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgTk9TIiwgIm5vc1Nvc0FUZW1wIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc1Nvc0JQcmVzLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NTb3NCUHJlcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NTb3NCUHJlcy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOT0FBIE5PUyBTT1MsIEVYUEVSSU1FTlRBTCwgMTg1My1wcmVzZW50LCBCYXJvbWV0cmljIFByZXNzdXJlIiwgIlRoZSBOT0FBIE5PUyBTT1Mgc2VydmVyIGlzIHBhcnQgb2YgdGhlIElPT1MgRElGIFNPUyBQcm9qZWN0LiAgVGhlIHN0YXRpb25zIGluIHRoaXMgZGF0YXNldCBoYXZlIGJhcm9tZXRyaWMgcHJlc3N1cmUgZGF0YS4gICoqKipUaGVzZSBzZXJ2aWNlcyBhcmUgZm9yIHRlc3RpbmcgYW5kIGV2YWx1YXRpb24gdXNlIG9ubHkqKioqXG5cbkJlY2F1c2Ugb2YgdGhlIG5hdHVyZSBvZiBTT1MgcmVxdWVzdHMsIHJlcXVlc3RzIGZvciBkYXRhIE1VU1QgaW5jbHVkZSBjb25zdHJhaW50cyBmb3IgdGhlIGxvbmdpdHVkZSwgbGF0aXR1ZGUsIHRpbWUsIGFuZC9vciBzdGF0aW9uX2lkIHZhcmlhYmxlcy5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5zdGF0aW9uX2lkXG5hbHRpdHVkZSAobSlcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zZW5zb3JfaWRcbmFpcl9wcmVzc3VyZSAoQmFyb21ldHJpYyBQcmVzc3VyZSwgbWlsbGliYXJzKVxucXVhbGl0eV9mbGFnc1xuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL25vc1Nvc0JQcmVzX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9ub3NTb3NCUHJlc19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9ub3NTb3NCUHJlcy9pbmRleC5qc29uIiwgImh0dHBzOi8vb3BlbmRhcC5jby1vcHMubm9zLm5vYWEuZ292L2lvb3MtZGlmLXNvcy8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3Mvbm9zU29zQlByZXMucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPW5vc1Nvc0JQcmVzJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgTk9TIiwgIm5vc1Nvc0JQcmVzIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc1Nvc1dMZXZlbC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9zU29zV0xldmVsIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc1Nvc1dMZXZlbC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOT0FBIE5PUyBTT1MsIEVYUEVSSU1FTlRBTCwgMTg1My1wcmVzZW50LCBXYXRlciBMZXZlbCIsICJUaGUgTk9BQSBOT1MgU09TIHNlcnZlciBpcyBwYXJ0IG9mIHRoZSBJT09TIERJRiBTT1MgUHJvamVjdC4gIFRoZSBzdGF0aW9ucyBpbiB0aGlzIGRhdGFzZXQgaGF2ZSB3YXRlciBzdXJmYWNlIGhlaWdodCBhYm92ZSBhIHJlZmVyZW5jZSBkYXR1bS4gICoqKipUaGVzZSBzZXJ2aWNlcyBhcmUgZm9yIHRlc3RpbmcgYW5kIGV2YWx1YXRpb24gdXNlIG9ubHkqKioqXG5cbkJlY2F1c2Ugb2YgdGhlIG5hdHVyZSBvZiBTT1MgcmVxdWVzdHMsIHJlcXVlc3RzIGZvciBkYXRhIE1VU1QgaW5jbHVkZSBjb25zdHJhaW50cyBmb3IgdGhlIGxvbmdpdHVkZSwgbGF0aXR1ZGUsIHRpbWUsIGFuZC9vciBzdGF0aW9uX2lkIHZhcmlhYmxlcy5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5zdGF0aW9uX2lkXG5hbHRpdHVkZSAobSlcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zZW5zb3JfaWRcbndhdGVyX2xldmVsICh3YXRlcl9zdXJmYWNlX2hlaWdodF9hYm92ZV9yZWZlcmVuY2VfZGF0dW0sIG0pXG5kYXR1bV9pZFxudmVydGljYWxfcG9zaXRpb24gKG0pXG5zaWdtYVxucXVhbGl0eV9mbGFnc1xuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL25vc1Nvc1dMZXZlbF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvbm9zU29zV0xldmVsX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL25vc1Nvc1dMZXZlbC9pbmRleC5qc29uIiwgImh0dHBzOi8vb3BlbmRhcC5jby1vcHMubm9zLm5vYWEuZ292L2lvb3MtZGlmLXNvcy8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3Mvbm9zU29zV0xldmVsLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1ub3NTb3NXTGV2ZWwmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBOT1MiLCAibm9zU29zV0xldmVsIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc1Nvc1dUZW1wLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NTb3NXVGVtcCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NTb3NXVGVtcC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOT0FBIE5PUyBTT1MsIEVYUEVSSU1FTlRBTCwgMTg1My1wcmVzZW50LCBXYXRlciBUZW1wZXJhdHVyZSIsICJUaGUgTk9BQSBOT1MgU09TIHNlcnZlciBpcyBwYXJ0IG9mIHRoZSBJT09TIERJRiBTT1MgUHJvamVjdC4gIFRoZSBzdGF0aW9ucyBpbiB0aGlzIGRhdGFzZXQgaGF2ZSB3YXRlciB0ZW1wZXJhdHVyZSBkYXRhLiAgKioqKlRoZXNlIHNlcnZpY2VzIGFyZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlvbiB1c2Ugb25seSoqKipcblxuQmVjYXVzZSBvZiB0aGUgbmF0dXJlIG9mIFNPUyByZXF1ZXN0cywgcmVxdWVzdHMgZm9yIGRhdGEgTVVTVCBpbmNsdWRlIGNvbnN0cmFpbnRzIGZvciB0aGUgbG9uZ2l0dWRlLCBsYXRpdHVkZSwgdGltZSwgYW5kL29yIHN0YXRpb25faWQgdmFyaWFibGVzLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbnN0YXRpb25faWRcbmFsdGl0dWRlIChtKVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNlbnNvcl9pZFxuc2VhX3dhdGVyX3RlbXBlcmF0dXJlIChkZWdyZWVfQylcbnF1YWxpdHlfZmxhZ3NcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9ub3NTb3NXVGVtcF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvbm9zU29zV1RlbXBfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vbm9zU29zV1RlbXAvaW5kZXguanNvbiIsICJodHRwczovL29wZW5kYXAuY28tb3BzLm5vcy5ub2FhLmdvdi9pb29zLWRpZi1zb3MvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL25vc1Nvc1dUZW1wLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1ub3NTb3NXVGVtcCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIE5PUyIsICJub3NTb3NXVGVtcCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NTb3NDb25kLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NTb3NDb25kIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc1Nvc0NvbmQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTk9BQSBOT1MgU09TLCBFWFBFUklNRU5UQUwsIDE5MDItcHJlc2VudCwgQ29uZHVjdGl2aXR5IiwgIlRoZSBOT0FBIE5PUyBTT1Mgc2VydmVyIGlzIHBhcnQgb2YgdGhlIElPT1MgRElGIFNPUyBQcm9qZWN0LiAgVGhlIHN0YXRpb25zIGluIHRoaXMgZGF0YXNldCBoYXZlIGNvbmR1Y3Rpdml0eSBkYXRhLiAgKioqKlRoZXNlIHNlcnZpY2VzIGFyZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlvbiB1c2Ugb25seSoqKipcblxuQmVjYXVzZSBvZiB0aGUgbmF0dXJlIG9mIFNPUyByZXF1ZXN0cywgcmVxdWVzdHMgZm9yIGRhdGEgTVVTVCBpbmNsdWRlIGNvbnN0cmFpbnRzIGZvciB0aGUgbG9uZ2l0dWRlLCBsYXRpdHVkZSwgdGltZSwgYW5kL29yIHN0YXRpb25faWQgdmFyaWFibGVzLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbnN0YXRpb25faWRcbmFsdGl0dWRlIChtKVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNlbnNvcl9pZFxuY29uZHVjdGl2aXR5IChFbGVjdHJpY2FsIENvbmR1Y3Rpdml0eSwgbVMgY20tMSlcbnF1YWxpdHlfZmxhZ3NcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9ub3NTb3NDb25kX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9ub3NTb3NDb25kX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL25vc1Nvc0NvbmQvaW5kZXguanNvbiIsICJodHRwczovL29wZW5kYXAuY28tb3BzLm5vcy5ub2FhLmdvdi9pb29zLWRpZi1zb3MvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL25vc1Nvc0NvbmQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPW5vc1Nvc0NvbmQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBOT1MiLCAibm9zU29zQ29uZCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NTb3NTYWxpbml0eS5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9zU29zU2FsaW5pdHkiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9zU29zU2FsaW5pdHkuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTk9BQSBOT1MgU09TLCBFWFBFUklNRU5UQUwsIDE5MDItcHJlc2VudCwgU2FsaW5pdHkiLCAiVGhlIE5PQUEgTk9TIFNPUyBzZXJ2ZXIgaXMgcGFydCBvZiB0aGUgSU9PUyBESUYgU09TIFByb2plY3QuICBUaGUgc3RhdGlvbnMgaW4gdGhpcyBkYXRhc2V0IGhhdmUgc2FsaW5pdHkgZGF0YS4gICoqKipUaGVzZSBzZXJ2aWNlcyBhcmUgZm9yIHRlc3RpbmcgYW5kIGV2YWx1YXRpb24gdXNlIG9ubHkqKioqXG5cbkJlY2F1c2Ugb2YgdGhlIG5hdHVyZSBvZiBTT1MgcmVxdWVzdHMsIHJlcXVlc3RzIGZvciBkYXRhIE1VU1QgaW5jbHVkZSBjb25zdHJhaW50cyBmb3IgdGhlIGxvbmdpdHVkZSwgbGF0aXR1ZGUsIHRpbWUsIGFuZC9vciBzdGF0aW9uX2lkIHZhcmlhYmxlcy5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5zdGF0aW9uX2lkXG5hbHRpdHVkZSAobSlcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zZW5zb3JfaWRcbnNlYV93YXRlcl9zYWxpbml0eSAoU2VhIFdhdGVyIFByYWN0aWNhbCBTYWxpbml0eSwgUFNVKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL25vc1Nvc1NhbGluaXR5X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9ub3NTb3NTYWxpbml0eV9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9ub3NTb3NTYWxpbml0eS9pbmRleC5qc29uIiwgImh0dHBzOi8vb3BlbmRhcC5jby1vcHMubm9zLm5vYWEuZ292L2lvb3MtZGlmLXNvcy8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3Mvbm9zU29zU2FsaW5pdHkucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPW5vc1Nvc1NhbGluaXR5JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgTk9TIiwgIm5vc1Nvc1NhbGluaXR5Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RFRG5ydC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVEbnJ0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RFRG5ydC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOT0FBIFNoaXAgQmVsbCBNLiBTaGltYWRhIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEsIE5lYXIgUmVhbCBUaW1lIiwgIk5PQUEgU2hpcCBCZWxsIE0uIFNoaW1hZGEgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSAoTmVhciBSZWFsIFRpbWUsIHVwZGF0ZWQgZGFpbHkpIGFyZSBmcm9tIHRoZSBTaGlwYm9hcmQgQXV0b21hdGVkIE1ldGVvcm9sb2dpY2FsIGFuZCBPY2Vhbm9ncmFwaGljIFN5c3RlbSAoU0FNT1MpIHByb2dyYW0uXG5cbklNUE9SVEFOVDogQUxXQVlTIFVTRSBUSEUgUVVBTElUWSBGTEFHIERBVEEhIEVhY2ggZGF0YSB2YXJpYWJsZSdzIG1ldGFkYXRhIGluY2x1ZGVzIGEgcWNpbmRleCBhdHRyaWJ1dGUgd2hpY2ggaW5kaWNhdGVzIGEgY2hhcmFjdGVyIG51bWJlciBpbiB0aGUgZmxhZyBkYXRhLiAgQUxXQVlTIGNoZWNrIHRoZSBmbGFnIGRhdGEgZm9yIGVhY2ggcm93IG9mIGRhdGEgdG8gc2VlIHdoaWNoIGRhdGEgaXMgZ29vZCAoZmxhZz0nWicpIGFuZCB3aGljaCBkYXRhIGlzbid0LiAgRm9yIGV4YW1wbGUsIHRvIGV4dHJhY3QganVzdCBkYXRhIHdoZXJlIHRpbWUgKHFjaW5kZXg9MSksIGxhdGl0dWRlIChxY2luZGV4PTIpLCBsb25naXR1ZGUgKHFjaW5kZXg9MyksIGFuZCBhaXJUZW1wZXJhdHVyZSAocWNpbmRleD0xMikgYXJlICdnb29kJyBkYXRhLCBpbmNsdWRlIHRoaXMgY29uc3RyYWludCBpbiB5b3VyIEVSRERBUCBxdWVyeTpcbiAgZmxhZz1+XCJaWlouLi4uLi4uLlouKlwiXG5pbiB5b3VyIHF1ZXJ5LiAgXG5cIj1+XCIgaW5kaWNhdGVzIHRoaXMgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24gY29uc3RyYWludC5cblRoZSAnWidzIGFyZSBsaXRlcmFsIGNoYXJhY3RlcnMuICBJbiB0aGlzIGRhdGFzZXQsICdaJyBpbmRpY2F0ZXMgJ2dvb2QnIGRhdGEuIFxuVGhlICcuJ3Mgc2F5IHRvIG1hdGNoIGFueSBjaGFyYWN0ZXIuICBcblRoZSAnKicgc2F5cyB0byBtYXRjaCB0aGUgcHJldmlvdXMgY2hhcmFjdGVyIDAgb3IgbW9yZSB0aW1lcy4gIFxuU2VlIHRoZSB0dXRvcmlhbCBmb3IgcmVndWxhciBleHByZXNzaW9ucyBhdFxuaHR0cDovL3d3dy52b2dlbGxhLmNvbS90dXRvcmlhbHMvSmF2YVJlZ3VsYXJFeHByZXNzaW9ucy9hcnRpY2xlLmh0bWxcblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2VfaWRcbmV4cG9jb2RlXG5mYWNpbGl0eVxuSURcbklNT1xucGxhdGZvcm1cbnBsYXRmb3JtX3ZlcnNpb25cbnNpdGVcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuYWlyUHJlc3N1cmUgKEF0bW9zcGhlcmljIFByZXNzdXJlLCBtaWxsaWJhcilcbi4uLiAoMTkgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZnN1Tm9hYVNoaXBXVEVEbnJ0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9mc3VOb2FhU2hpcFdURURucnRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZnN1Tm9hYVNoaXBXVEVEbnJ0L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zYW1vcy5jb2Fwcy5mc3UuZWR1L2h0bWwvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2ZzdU5vYWFTaGlwV1RFRG5ydC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZnN1Tm9hYVNoaXBXVEVEbnJ0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkZTVSIsICJmc3VOb2FhU2hpcFdURURucnQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVELnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURUQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVELmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5PQUEgU2hpcCBCZWxsIE0uIFNoaW1hZGEgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSwgUXVhbGl0eSBDb250cm9sbGVkIiwgIk5PQUEgU2hpcCBCZWxsIE0uIFNoaW1hZGEgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSAoZGVsYXllZCB+MTAgZGF5cyBmb3IgcXVhbGl0eSBjb250cm9sKSBhcmUgZnJvbSB0aGUgU2hpcGJvYXJkIEF1dG9tYXRlZCBNZXRlb3JvbG9naWNhbCBhbmQgT2NlYW5vZ3JhcGhpYyBTeXN0ZW0gKFNBTU9TKSBwcm9ncmFtLlxuXG5JTVBPUlRBTlQ6IEFMV0FZUyBVU0UgVEhFIFFVQUxJVFkgRkxBRyBEQVRBISBFYWNoIGRhdGEgdmFyaWFibGUncyBtZXRhZGF0YSBpbmNsdWRlcyBhIHFjaW5kZXggYXR0cmlidXRlIHdoaWNoIGluZGljYXRlcyBhIGNoYXJhY3RlciBudW1iZXIgaW4gdGhlIGZsYWcgZGF0YS4gIEFMV0FZUyBjaGVjayB0aGUgZmxhZyBkYXRhIGZvciBlYWNoIHJvdyBvZiBkYXRhIHRvIHNlZSB3aGljaCBkYXRhIGlzIGdvb2QgKGZsYWc9J1onKSBhbmQgd2hpY2ggZGF0YSBpc24ndC4gIEZvciBleGFtcGxlLCB0byBleHRyYWN0IGp1c3QgZGF0YSB3aGVyZSB0aW1lIChxY2luZGV4PTEpLCBsYXRpdHVkZSAocWNpbmRleD0yKSwgbG9uZ2l0dWRlIChxY2luZGV4PTMpLCBhbmQgYWlyVGVtcGVyYXR1cmUgKHFjaW5kZXg9MTIpIGFyZSAnZ29vZCcgZGF0YSwgaW5jbHVkZSB0aGlzIGNvbnN0cmFpbnQgaW4geW91ciBFUkREQVAgcXVlcnk6XG4gIGZsYWc9flwiWlpaLi4uLi4uLi5aLipcIlxuaW4geW91ciBxdWVyeS4gIFxuXCI9flwiIGluZGljYXRlcyB0aGlzIGlzIGEgcmVndWxhciBleHByZXNzaW9uIGNvbnN0cmFpbnQuXG5UaGUgJ1oncyBhcmUgbGl0ZXJhbCBjaGFyYWN0ZXJzLiAgSW4gdGhpcyBkYXRhc2V0LCAnWicgaW5kaWNhdGVzICdnb29kJyBkYXRhLiBcblRoZSAnLidzIHNheSB0byBtYXRjaCBhbnkgY2hhcmFjdGVyLiAgXG5UaGUgJyonIHNheXMgdG8gbWF0Y2ggdGhlIHByZXZpb3VzIGNoYXJhY3RlciAwIG9yIG1vcmUgdGltZXMuICBcblNlZSB0aGUgdHV0b3JpYWwgZm9yIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXRcbmh0dHA6Ly93d3cudm9nZWxsYS5jb20vdHV0b3JpYWxzL0phdmFSZWd1bGFyRXhwcmVzc2lvbnMvYXJ0aWNsZS5odG1sXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlX2lkXG5leHBvY29kZVxuZmFjaWxpdHlcbklEXG5JTU9cbnBsYXRmb3JtXG5wbGF0Zm9ybV92ZXJzaW9uXG5zaXRlXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmFpclByZXNzdXJlIChBdG1vc3BoZXJpYyBQcmVzc3VyZSwgbWlsbGliYXIpXG4uLi4gKDE5IG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2ZzdU5vYWFTaGlwV1RFRF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZnN1Tm9hYVNoaXBXVEVEX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2ZzdU5vYWFTaGlwV1RFRC9pbmRleC5qc29uIiwgImh0dHBzOi8vc2Ftb3MuY29hcHMuZnN1LmVkdS9odG1sLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9mc3VOb2FhU2hpcFdURUQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWZzdU5vYWFTaGlwV1RFRCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJGU1UiLCAiZnN1Tm9hYVNoaXBXVEVEIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RESy5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVERLIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RESy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOT0FBIFNoaXAgRGF2aWQgU3RhcnIgSm9yZGFuIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEsIFF1YWxpdHkgQ29udHJvbGxlZCIsICJOT0FBIFNoaXAgRGF2aWQgU3RhcnIgSm9yZGFuIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEgKGRlbGF5ZWQgfjEwIGRheXMgZm9yIHF1YWxpdHkgY29udHJvbCkgYXJlIGZyb20gdGhlIFNoaXBib2FyZCBBdXRvbWF0ZWQgTWV0ZW9yb2xvZ2ljYWwgYW5kIE9jZWFub2dyYXBoaWMgU3lzdGVtIChTQU1PUykgcHJvZ3JhbS5cblxuSU1QT1JUQU5UOiBBTFdBWVMgVVNFIFRIRSBRVUFMSVRZIEZMQUcgREFUQSEgRWFjaCBkYXRhIHZhcmlhYmxlJ3MgbWV0YWRhdGEgaW5jbHVkZXMgYSBxY2luZGV4IGF0dHJpYnV0ZSB3aGljaCBpbmRpY2F0ZXMgYSBjaGFyYWN0ZXIgbnVtYmVyIGluIHRoZSBmbGFnIGRhdGEuICBBTFdBWVMgY2hlY2sgdGhlIGZsYWcgZGF0YSBmb3IgZWFjaCByb3cgb2YgZGF0YSB0byBzZWUgd2hpY2ggZGF0YSBpcyBnb29kIChmbGFnPSdaJykgYW5kIHdoaWNoIGRhdGEgaXNuJ3QuICBGb3IgZXhhbXBsZSwgdG8gZXh0cmFjdCBqdXN0IGRhdGEgd2hlcmUgdGltZSAocWNpbmRleD0xKSwgbGF0aXR1ZGUgKHFjaW5kZXg9MiksIGxvbmdpdHVkZSAocWNpbmRleD0zKSwgYW5kIGFpclRlbXBlcmF0dXJlIChxY2luZGV4PTEyKSBhcmUgJ2dvb2QnIGRhdGEsIGluY2x1ZGUgdGhpcyBjb25zdHJhaW50IGluIHlvdXIgRVJEREFQIHF1ZXJ5OlxuICBmbGFnPX5cIlpaWi4uLi4uLi4uWi4qXCJcbmluIHlvdXIgcXVlcnkuICBcblwiPX5cIiBpbmRpY2F0ZXMgdGhpcyBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBjb25zdHJhaW50LlxuVGhlICdaJ3MgYXJlIGxpdGVyYWwgY2hhcmFjdGVycy4gIEluIHRoaXMgZGF0YXNldCwgJ1onIGluZGljYXRlcyAnZ29vZCcgZGF0YS4gXG5UaGUgJy4ncyBzYXkgdG8gbWF0Y2ggYW55IGNoYXJhY3Rlci4gIFxuVGhlICcqJyBzYXlzIHRvIG1hdGNoIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIgMCBvciBtb3JlIHRpbWVzLiAgXG5TZWUgdGhlIHR1dG9yaWFsIGZvciByZWd1bGFyIGV4cHJlc3Npb25zIGF0XG5odHRwOi8vd3d3LnZvZ2VsbGEuY29tL3R1dG9yaWFscy9KYXZhUmVndWxhckV4cHJlc3Npb25zL2FydGljbGUuaHRtbFxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZV9pZFxuZXhwb2NvZGVcbmZhY2lsaXR5XG5JRFxuSU1PXG5wbGF0Zm9ybVxucGxhdGZvcm1fdmVyc2lvblxuc2l0ZVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5haXJQcmVzc3VyZSAoQXRtb3NwaGVyaWMgUHJlc3N1cmUsIG1pbGxpYmFyKVxuLi4uICgxMyBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9mc3VOb2FhU2hpcFdUREtfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2ZzdU5vYWFTaGlwV1RES19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9mc3VOb2FhU2hpcFdUREsvaW5kZXguanNvbiIsICJodHRwczovL3NhbW9zLmNvYXBzLmZzdS5lZHUvaHRtbC8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZnN1Tm9hYVNoaXBXVERLLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1mc3VOb2FhU2hpcFdUREsmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiRlNVIiwgImZzdU5vYWFTaGlwV1RESyJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcEtOQkQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwS05CRCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcEtOQkQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTk9BQSBTaGlwIERlbGF3YXJlIElJIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEsIFF1YWxpdHkgQ29udHJvbGxlZCIsICJOT0FBIFNoaXAgRGVsYXdhcmUgSUkgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSAoZGVsYXllZCB+MTAgZGF5cyBmb3IgcXVhbGl0eSBjb250cm9sKSBhcmUgZnJvbSB0aGUgU2hpcGJvYXJkIEF1dG9tYXRlZCBNZXRlb3JvbG9naWNhbCBhbmQgT2NlYW5vZ3JhcGhpYyBTeXN0ZW0gKFNBTU9TKSBwcm9ncmFtLlxuXG5JTVBPUlRBTlQ6IEFMV0FZUyBVU0UgVEhFIFFVQUxJVFkgRkxBRyBEQVRBISBFYWNoIGRhdGEgdmFyaWFibGUncyBtZXRhZGF0YSBpbmNsdWRlcyBhIHFjaW5kZXggYXR0cmlidXRlIHdoaWNoIGluZGljYXRlcyBhIGNoYXJhY3RlciBudW1iZXIgaW4gdGhlIGZsYWcgZGF0YS4gIEFMV0FZUyBjaGVjayB0aGUgZmxhZyBkYXRhIGZvciBlYWNoIHJvdyBvZiBkYXRhIHRvIHNlZSB3aGljaCBkYXRhIGlzIGdvb2QgKGZsYWc9J1onKSBhbmQgd2hpY2ggZGF0YSBpc24ndC4gIEZvciBleGFtcGxlLCB0byBleHRyYWN0IGp1c3QgZGF0YSB3aGVyZSB0aW1lIChxY2luZGV4PTEpLCBsYXRpdHVkZSAocWNpbmRleD0yKSwgbG9uZ2l0dWRlIChxY2luZGV4PTMpLCBhbmQgYWlyVGVtcGVyYXR1cmUgKHFjaW5kZXg9MTIpIGFyZSAnZ29vZCcgZGF0YSwgaW5jbHVkZSB0aGlzIGNvbnN0cmFpbnQgaW4geW91ciBFUkREQVAgcXVlcnk6XG4gIGZsYWc9flwiWlpaLi4uLi4uLi5aLipcIlxuaW4geW91ciBxdWVyeS4gIFxuXCI9flwiIGluZGljYXRlcyB0aGlzIGlzIGEgcmVndWxhciBleHByZXNzaW9uIGNvbnN0cmFpbnQuXG5UaGUgJ1oncyBhcmUgbGl0ZXJhbCBjaGFyYWN0ZXJzLiAgSW4gdGhpcyBkYXRhc2V0LCAnWicgaW5kaWNhdGVzICdnb29kJyBkYXRhLiBcblRoZSAnLidzIHNheSB0byBtYXRjaCBhbnkgY2hhcmFjdGVyLiAgXG5UaGUgJyonIHNheXMgdG8gbWF0Y2ggdGhlIHByZXZpb3VzIGNoYXJhY3RlciAwIG9yIG1vcmUgdGltZXMuICBcblNlZSB0aGUgdHV0b3JpYWwgZm9yIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXRcbmh0dHA6Ly93d3cudm9nZWxsYS5jb20vdHV0b3JpYWxzL0phdmFSZWd1bGFyRXhwcmVzc2lvbnMvYXJ0aWNsZS5odG1sXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlX2lkXG5leHBvY29kZVxuZmFjaWxpdHlcbklEXG5JTU9cbnBsYXRmb3JtXG5wbGF0Zm9ybV92ZXJzaW9uXG5zaXRlXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmFpclByZXNzdXJlIChBdG1vc3BoZXJpYyBQcmVzc3VyZSwgbWlsbGliYXIpXG4uLi4gKDEzIG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2ZzdU5vYWFTaGlwS05CRF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZnN1Tm9hYVNoaXBLTkJEX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2ZzdU5vYWFTaGlwS05CRC9pbmRleC5qc29uIiwgImh0dHBzOi8vc2Ftb3MuY29hcHMuZnN1LmVkdS9odG1sLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9mc3VOb2FhU2hpcEtOQkQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWZzdU5vYWFTaGlwS05CRCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJGU1UiLCAiZnN1Tm9hYVNoaXBLTkJEIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RFQm5ydC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVCbnJ0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RFQm5ydC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOT0FBIFNoaXAgRmFpcndlYXRoZXIgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSwgTmVhciBSZWFsIFRpbWUiLCAiTk9BQSBTaGlwIEZhaXJ3ZWF0aGVyIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEgKE5lYXIgUmVhbCBUaW1lLCB1cGRhdGVkIGRhaWx5KSBhcmUgZnJvbSB0aGUgU2hpcGJvYXJkIEF1dG9tYXRlZCBNZXRlb3JvbG9naWNhbCBhbmQgT2NlYW5vZ3JhcGhpYyBTeXN0ZW0gKFNBTU9TKSBwcm9ncmFtLlxuXG5JTVBPUlRBTlQ6IEFMV0FZUyBVU0UgVEhFIFFVQUxJVFkgRkxBRyBEQVRBISBFYWNoIGRhdGEgdmFyaWFibGUncyBtZXRhZGF0YSBpbmNsdWRlcyBhIHFjaW5kZXggYXR0cmlidXRlIHdoaWNoIGluZGljYXRlcyBhIGNoYXJhY3RlciBudW1iZXIgaW4gdGhlIGZsYWcgZGF0YS4gIEFMV0FZUyBjaGVjayB0aGUgZmxhZyBkYXRhIGZvciBlYWNoIHJvdyBvZiBkYXRhIHRvIHNlZSB3aGljaCBkYXRhIGlzIGdvb2QgKGZsYWc9J1onKSBhbmQgd2hpY2ggZGF0YSBpc24ndC4gIEZvciBleGFtcGxlLCB0byBleHRyYWN0IGp1c3QgZGF0YSB3aGVyZSB0aW1lIChxY2luZGV4PTEpLCBsYXRpdHVkZSAocWNpbmRleD0yKSwgbG9uZ2l0dWRlIChxY2luZGV4PTMpLCBhbmQgYWlyVGVtcGVyYXR1cmUgKHFjaW5kZXg9MTIpIGFyZSAnZ29vZCcgZGF0YSwgaW5jbHVkZSB0aGlzIGNvbnN0cmFpbnQgaW4geW91ciBFUkREQVAgcXVlcnk6XG4gIGZsYWc9flwiWlpaLi4uLi4uLi5aLipcIlxuaW4geW91ciBxdWVyeS4gIFxuXCI9flwiIGluZGljYXRlcyB0aGlzIGlzIGEgcmVndWxhciBleHByZXNzaW9uIGNvbnN0cmFpbnQuXG5UaGUgJ1oncyBhcmUgbGl0ZXJhbCBjaGFyYWN0ZXJzLiAgSW4gdGhpcyBkYXRhc2V0LCAnWicgaW5kaWNhdGVzICdnb29kJyBkYXRhLiBcblRoZSAnLidzIHNheSB0byBtYXRjaCBhbnkgY2hhcmFjdGVyLiAgXG5UaGUgJyonIHNheXMgdG8gbWF0Y2ggdGhlIHByZXZpb3VzIGNoYXJhY3RlciAwIG9yIG1vcmUgdGltZXMuICBcblNlZSB0aGUgdHV0b3JpYWwgZm9yIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXRcbmh0dHA6Ly93d3cudm9nZWxsYS5jb20vdHV0b3JpYWxzL0phdmFSZWd1bGFyRXhwcmVzc2lvbnMvYXJ0aWNsZS5odG1sXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlX2lkXG5leHBvY29kZVxuZmFjaWxpdHlcbklEXG5JTU9cbnBsYXRmb3JtXG5wbGF0Zm9ybV92ZXJzaW9uXG5zaXRlXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmFpclByZXNzdXJlIChBdG1vc3BoZXJpYyBQcmVzc3VyZSwgbWlsbGliYXIpXG4uLi4gKDEzIG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2ZzdU5vYWFTaGlwV1RFQm5ydF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZnN1Tm9hYVNoaXBXVEVCbnJ0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2ZzdU5vYWFTaGlwV1RFQm5ydC9pbmRleC5qc29uIiwgImh0dHBzOi8vc2Ftb3MuY29hcHMuZnN1LmVkdS9odG1sLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9mc3VOb2FhU2hpcFdURUJucnQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWZzdU5vYWFTaGlwV1RFQm5ydCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJGU1UiLCAiZnN1Tm9hYVNoaXBXVEVCbnJ0Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RFQi5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVCIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RFQi5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOT0FBIFNoaXAgRmFpcndlYXRoZXIgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSwgUXVhbGl0eSBDb250cm9sbGVkIiwgIk5PQUEgU2hpcCBGYWlyd2VhdGhlciBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhIChkZWxheWVkIH4xMCBkYXlzIGZvciBxdWFsaXR5IGNvbnRyb2wpIGFyZSBmcm9tIHRoZSBTaGlwYm9hcmQgQXV0b21hdGVkIE1ldGVvcm9sb2dpY2FsIGFuZCBPY2Vhbm9ncmFwaGljIFN5c3RlbSAoU0FNT1MpIHByb2dyYW0uXG5cbklNUE9SVEFOVDogQUxXQVlTIFVTRSBUSEUgUVVBTElUWSBGTEFHIERBVEEhIEVhY2ggZGF0YSB2YXJpYWJsZSdzIG1ldGFkYXRhIGluY2x1ZGVzIGEgcWNpbmRleCBhdHRyaWJ1dGUgd2hpY2ggaW5kaWNhdGVzIGEgY2hhcmFjdGVyIG51bWJlciBpbiB0aGUgZmxhZyBkYXRhLiAgQUxXQVlTIGNoZWNrIHRoZSBmbGFnIGRhdGEgZm9yIGVhY2ggcm93IG9mIGRhdGEgdG8gc2VlIHdoaWNoIGRhdGEgaXMgZ29vZCAoZmxhZz0nWicpIGFuZCB3aGljaCBkYXRhIGlzbid0LiAgRm9yIGV4YW1wbGUsIHRvIGV4dHJhY3QganVzdCBkYXRhIHdoZXJlIHRpbWUgKHFjaW5kZXg9MSksIGxhdGl0dWRlIChxY2luZGV4PTIpLCBsb25naXR1ZGUgKHFjaW5kZXg9MyksIGFuZCBhaXJUZW1wZXJhdHVyZSAocWNpbmRleD0xMikgYXJlICdnb29kJyBkYXRhLCBpbmNsdWRlIHRoaXMgY29uc3RyYWludCBpbiB5b3VyIEVSRERBUCBxdWVyeTpcbiAgZmxhZz1+XCJaWlouLi4uLi4uLlouKlwiXG5pbiB5b3VyIHF1ZXJ5LiAgXG5cIj1+XCIgaW5kaWNhdGVzIHRoaXMgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24gY29uc3RyYWludC5cblRoZSAnWidzIGFyZSBsaXRlcmFsIGNoYXJhY3RlcnMuICBJbiB0aGlzIGRhdGFzZXQsICdaJyBpbmRpY2F0ZXMgJ2dvb2QnIGRhdGEuIFxuVGhlICcuJ3Mgc2F5IHRvIG1hdGNoIGFueSBjaGFyYWN0ZXIuICBcblRoZSAnKicgc2F5cyB0byBtYXRjaCB0aGUgcHJldmlvdXMgY2hhcmFjdGVyIDAgb3IgbW9yZSB0aW1lcy4gIFxuU2VlIHRoZSB0dXRvcmlhbCBmb3IgcmVndWxhciBleHByZXNzaW9ucyBhdFxuaHR0cDovL3d3dy52b2dlbGxhLmNvbS90dXRvcmlhbHMvSmF2YVJlZ3VsYXJFeHByZXNzaW9ucy9hcnRpY2xlLmh0bWxcblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2VfaWRcbmV4cG9jb2RlXG5mYWNpbGl0eVxuSURcbklNT1xucGxhdGZvcm1cbnBsYXRmb3JtX3ZlcnNpb25cbnNpdGVcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuYWlyUHJlc3N1cmUgKEF0bW9zcGhlcmljIFByZXNzdXJlLCBtaWxsaWJhcilcbi4uLiAoMTMgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZnN1Tm9hYVNoaXBXVEVCX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9mc3VOb2FhU2hpcFdURUJfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZnN1Tm9hYVNoaXBXVEVCL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zYW1vcy5jb2Fwcy5mc3UuZWR1L2h0bWwvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2ZzdU5vYWFTaGlwV1RFQi5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZnN1Tm9hYVNoaXBXVEVCJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkZTVSIsICJmc3VOb2FhU2hpcFdURUIiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVPbnJ0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURU9ucnQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVPbnJ0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5PQUEgU2hpcCBHb3Jkb24gR3VudGVyIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEsIE5lYXIgUmVhbCBUaW1lIiwgIk5PQUEgU2hpcCBHb3Jkb24gR3VudGVyIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEgKE5lYXIgUmVhbCBUaW1lLCB1cGRhdGVkIGRhaWx5KSBhcmUgZnJvbSB0aGUgU2hpcGJvYXJkIEF1dG9tYXRlZCBNZXRlb3JvbG9naWNhbCBhbmQgT2NlYW5vZ3JhcGhpYyBTeXN0ZW0gKFNBTU9TKSBwcm9ncmFtLlxuXG5JTVBPUlRBTlQ6IEFMV0FZUyBVU0UgVEhFIFFVQUxJVFkgRkxBRyBEQVRBISBFYWNoIGRhdGEgdmFyaWFibGUncyBtZXRhZGF0YSBpbmNsdWRlcyBhIHFjaW5kZXggYXR0cmlidXRlIHdoaWNoIGluZGljYXRlcyBhIGNoYXJhY3RlciBudW1iZXIgaW4gdGhlIGZsYWcgZGF0YS4gIEFMV0FZUyBjaGVjayB0aGUgZmxhZyBkYXRhIGZvciBlYWNoIHJvdyBvZiBkYXRhIHRvIHNlZSB3aGljaCBkYXRhIGlzIGdvb2QgKGZsYWc9J1onKSBhbmQgd2hpY2ggZGF0YSBpc24ndC4gIEZvciBleGFtcGxlLCB0byBleHRyYWN0IGp1c3QgZGF0YSB3aGVyZSB0aW1lIChxY2luZGV4PTEpLCBsYXRpdHVkZSAocWNpbmRleD0yKSwgbG9uZ2l0dWRlIChxY2luZGV4PTMpLCBhbmQgYWlyVGVtcGVyYXR1cmUgKHFjaW5kZXg9MTIpIGFyZSAnZ29vZCcgZGF0YSwgaW5jbHVkZSB0aGlzIGNvbnN0cmFpbnQgaW4geW91ciBFUkREQVAgcXVlcnk6XG4gIGZsYWc9flwiWlpaLi4uLi4uLi5aLipcIlxuaW4geW91ciBxdWVyeS4gIFxuXCI9flwiIGluZGljYXRlcyB0aGlzIGlzIGEgcmVndWxhciBleHByZXNzaW9uIGNvbnN0cmFpbnQuXG5UaGUgJ1oncyBhcmUgbGl0ZXJhbCBjaGFyYWN0ZXJzLiAgSW4gdGhpcyBkYXRhc2V0LCAnWicgaW5kaWNhdGVzICdnb29kJyBkYXRhLiBcblRoZSAnLidzIHNheSB0byBtYXRjaCBhbnkgY2hhcmFjdGVyLiAgXG5UaGUgJyonIHNheXMgdG8gbWF0Y2ggdGhlIHByZXZpb3VzIGNoYXJhY3RlciAwIG9yIG1vcmUgdGltZXMuICBcblNlZSB0aGUgdHV0b3JpYWwgZm9yIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXRcbmh0dHA6Ly93d3cudm9nZWxsYS5jb20vdHV0b3JpYWxzL0phdmFSZWd1bGFyRXhwcmVzc2lvbnMvYXJ0aWNsZS5odG1sXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlX2lkXG5leHBvY29kZVxuZmFjaWxpdHlcbklEXG5JTU9cbnBsYXRmb3JtXG5wbGF0Zm9ybV92ZXJzaW9uXG5zaXRlXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmFpclByZXNzdXJlIChBdG1vc3BoZXJpYyBQcmVzc3VyZSwgbWlsbGliYXIpXG4uLi4gKDEzIG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2ZzdU5vYWFTaGlwV1RFT25ydF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZnN1Tm9hYVNoaXBXVEVPbnJ0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2ZzdU5vYWFTaGlwV1RFT25ydC9pbmRleC5qc29uIiwgImh0dHBzOi8vc2Ftb3MuY29hcHMuZnN1LmVkdS9odG1sLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9mc3VOb2FhU2hpcFdURU9ucnQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWZzdU5vYWFTaGlwV1RFT25ydCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJGU1UiLCAiZnN1Tm9hYVNoaXBXVEVPbnJ0Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RFTy5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVPIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RFTy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOT0FBIFNoaXAgR29yZG9uIEd1bnRlciBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhLCBRdWFsaXR5IENvbnRyb2xsZWQiLCAiTk9BQSBTaGlwIEdvcmRvbiBHdW50ZXIgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSAoZGVsYXllZCB+MTAgZGF5cyBmb3IgcXVhbGl0eSBjb250cm9sKSBhcmUgZnJvbSB0aGUgU2hpcGJvYXJkIEF1dG9tYXRlZCBNZXRlb3JvbG9naWNhbCBhbmQgT2NlYW5vZ3JhcGhpYyBTeXN0ZW0gKFNBTU9TKSBwcm9ncmFtLlxuXG5JTVBPUlRBTlQ6IEFMV0FZUyBVU0UgVEhFIFFVQUxJVFkgRkxBRyBEQVRBISBFYWNoIGRhdGEgdmFyaWFibGUncyBtZXRhZGF0YSBpbmNsdWRlcyBhIHFjaW5kZXggYXR0cmlidXRlIHdoaWNoIGluZGljYXRlcyBhIGNoYXJhY3RlciBudW1iZXIgaW4gdGhlIGZsYWcgZGF0YS4gIEFMV0FZUyBjaGVjayB0aGUgZmxhZyBkYXRhIGZvciBlYWNoIHJvdyBvZiBkYXRhIHRvIHNlZSB3aGljaCBkYXRhIGlzIGdvb2QgKGZsYWc9J1onKSBhbmQgd2hpY2ggZGF0YSBpc24ndC4gIEZvciBleGFtcGxlLCB0byBleHRyYWN0IGp1c3QgZGF0YSB3aGVyZSB0aW1lIChxY2luZGV4PTEpLCBsYXRpdHVkZSAocWNpbmRleD0yKSwgbG9uZ2l0dWRlIChxY2luZGV4PTMpLCBhbmQgYWlyVGVtcGVyYXR1cmUgKHFjaW5kZXg9MTIpIGFyZSAnZ29vZCcgZGF0YSwgaW5jbHVkZSB0aGlzIGNvbnN0cmFpbnQgaW4geW91ciBFUkREQVAgcXVlcnk6XG4gIGZsYWc9flwiWlpaLi4uLi4uLi5aLipcIlxuaW4geW91ciBxdWVyeS4gIFxuXCI9flwiIGluZGljYXRlcyB0aGlzIGlzIGEgcmVndWxhciBleHByZXNzaW9uIGNvbnN0cmFpbnQuXG5UaGUgJ1oncyBhcmUgbGl0ZXJhbCBjaGFyYWN0ZXJzLiAgSW4gdGhpcyBkYXRhc2V0LCAnWicgaW5kaWNhdGVzICdnb29kJyBkYXRhLiBcblRoZSAnLidzIHNheSB0byBtYXRjaCBhbnkgY2hhcmFjdGVyLiAgXG5UaGUgJyonIHNheXMgdG8gbWF0Y2ggdGhlIHByZXZpb3VzIGNoYXJhY3RlciAwIG9yIG1vcmUgdGltZXMuICBcblNlZSB0aGUgdHV0b3JpYWwgZm9yIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXRcbmh0dHA6Ly93d3cudm9nZWxsYS5jb20vdHV0b3JpYWxzL0phdmFSZWd1bGFyRXhwcmVzc2lvbnMvYXJ0aWNsZS5odG1sXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlX2lkXG5leHBvY29kZVxuZmFjaWxpdHlcbklEXG5JTU9cbnBsYXRmb3JtXG5wbGF0Zm9ybV92ZXJzaW9uXG5zaXRlXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmFpclByZXNzdXJlIChBdG1vc3BoZXJpYyBQcmVzc3VyZSwgbWlsbGliYXIpXG4uLi4gKDEzIG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2ZzdU5vYWFTaGlwV1RFT19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZnN1Tm9hYVNoaXBXVEVPX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2ZzdU5vYWFTaGlwV1RFTy9pbmRleC5qc29uIiwgImh0dHBzOi8vc2Ftb3MuY29hcHMuZnN1LmVkdS9odG1sLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9mc3VOb2FhU2hpcFdURU8ucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWZzdU5vYWFTaGlwV1RFTyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJGU1UiLCAiZnN1Tm9hYVNoaXBXVEVPIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RERm5ydC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVERGbnJ0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RERm5ydC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOT0FBIFNoaXAgSGVucnkgQi4gQmlnZWxvdyBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhLCBOZWFyIFJlYWwgVGltZSIsICJOT0FBIFNoaXAgSGVucnkgQi4gQmlnZWxvdyBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhIChOZWFyIFJlYWwgVGltZSwgdXBkYXRlZCBkYWlseSkgYXJlIGZyb20gdGhlIFNoaXBib2FyZCBBdXRvbWF0ZWQgTWV0ZW9yb2xvZ2ljYWwgYW5kIE9jZWFub2dyYXBoaWMgU3lzdGVtIChTQU1PUykgcHJvZ3JhbS5cblxuSU1QT1JUQU5UOiBBTFdBWVMgVVNFIFRIRSBRVUFMSVRZIEZMQUcgREFUQSEgRWFjaCBkYXRhIHZhcmlhYmxlJ3MgbWV0YWRhdGEgaW5jbHVkZXMgYSBxY2luZGV4IGF0dHJpYnV0ZSB3aGljaCBpbmRpY2F0ZXMgYSBjaGFyYWN0ZXIgbnVtYmVyIGluIHRoZSBmbGFnIGRhdGEuICBBTFdBWVMgY2hlY2sgdGhlIGZsYWcgZGF0YSBmb3IgZWFjaCByb3cgb2YgZGF0YSB0byBzZWUgd2hpY2ggZGF0YSBpcyBnb29kIChmbGFnPSdaJykgYW5kIHdoaWNoIGRhdGEgaXNuJ3QuICBGb3IgZXhhbXBsZSwgdG8gZXh0cmFjdCBqdXN0IGRhdGEgd2hlcmUgdGltZSAocWNpbmRleD0xKSwgbGF0aXR1ZGUgKHFjaW5kZXg9MiksIGxvbmdpdHVkZSAocWNpbmRleD0zKSwgYW5kIGFpclRlbXBlcmF0dXJlIChxY2luZGV4PTEyKSBhcmUgJ2dvb2QnIGRhdGEsIGluY2x1ZGUgdGhpcyBjb25zdHJhaW50IGluIHlvdXIgRVJEREFQIHF1ZXJ5OlxuICBmbGFnPX5cIlpaWi4uLi4uLi4uWi4qXCJcbmluIHlvdXIgcXVlcnkuICBcblwiPX5cIiBpbmRpY2F0ZXMgdGhpcyBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBjb25zdHJhaW50LlxuVGhlICdaJ3MgYXJlIGxpdGVyYWwgY2hhcmFjdGVycy4gIEluIHRoaXMgZGF0YXNldCwgJ1onIGluZGljYXRlcyAnZ29vZCcgZGF0YS4gXG5UaGUgJy4ncyBzYXkgdG8gbWF0Y2ggYW55IGNoYXJhY3Rlci4gIFxuVGhlICcqJyBzYXlzIHRvIG1hdGNoIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIgMCBvciBtb3JlIHRpbWVzLiAgXG5TZWUgdGhlIHR1dG9yaWFsIGZvciByZWd1bGFyIGV4cHJlc3Npb25zIGF0XG5odHRwOi8vd3d3LnZvZ2VsbGEuY29tL3R1dG9yaWFscy9KYXZhUmVndWxhckV4cHJlc3Npb25zL2FydGljbGUuaHRtbFxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZV9pZFxuZXhwb2NvZGVcbmZhY2lsaXR5XG5JRFxuSU1PXG5wbGF0Zm9ybVxucGxhdGZvcm1fdmVyc2lvblxuc2l0ZVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5haXJQcmVzc3VyZSAoQXRtb3NwaGVyaWMgUHJlc3N1cmUsIG1pbGxpYmFyKVxuLi4uICgxMyBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9mc3VOb2FhU2hpcFdUREZucnRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2ZzdU5vYWFTaGlwV1RERm5ydF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9mc3VOb2FhU2hpcFdUREZucnQvaW5kZXguanNvbiIsICJodHRwczovL3NhbW9zLmNvYXBzLmZzdS5lZHUvaHRtbC8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZnN1Tm9hYVNoaXBXVERGbnJ0LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1mc3VOb2FhU2hpcFdUREZucnQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiRlNVIiwgImZzdU5vYWFTaGlwV1RERm5ydCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdUREYuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RERiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdUREYuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTk9BQSBTaGlwIEhlbnJ5IEIuIEJpZ2Vsb3cgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSwgUXVhbGl0eSBDb250cm9sbGVkIiwgIk5PQUEgU2hpcCBIZW5yeSBCLiBCaWdlbG93IFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEgKGRlbGF5ZWQgfjEwIGRheXMgZm9yIHF1YWxpdHkgY29udHJvbCkgYXJlIGZyb20gdGhlIFNoaXBib2FyZCBBdXRvbWF0ZWQgTWV0ZW9yb2xvZ2ljYWwgYW5kIE9jZWFub2dyYXBoaWMgU3lzdGVtIChTQU1PUykgcHJvZ3JhbS5cblxuSU1QT1JUQU5UOiBBTFdBWVMgVVNFIFRIRSBRVUFMSVRZIEZMQUcgREFUQSEgRWFjaCBkYXRhIHZhcmlhYmxlJ3MgbWV0YWRhdGEgaW5jbHVkZXMgYSBxY2luZGV4IGF0dHJpYnV0ZSB3aGljaCBpbmRpY2F0ZXMgYSBjaGFyYWN0ZXIgbnVtYmVyIGluIHRoZSBmbGFnIGRhdGEuICBBTFdBWVMgY2hlY2sgdGhlIGZsYWcgZGF0YSBmb3IgZWFjaCByb3cgb2YgZGF0YSB0byBzZWUgd2hpY2ggZGF0YSBpcyBnb29kIChmbGFnPSdaJykgYW5kIHdoaWNoIGRhdGEgaXNuJ3QuICBGb3IgZXhhbXBsZSwgdG8gZXh0cmFjdCBqdXN0IGRhdGEgd2hlcmUgdGltZSAocWNpbmRleD0xKSwgbGF0aXR1ZGUgKHFjaW5kZXg9MiksIGxvbmdpdHVkZSAocWNpbmRleD0zKSwgYW5kIGFpclRlbXBlcmF0dXJlIChxY2luZGV4PTEyKSBhcmUgJ2dvb2QnIGRhdGEsIGluY2x1ZGUgdGhpcyBjb25zdHJhaW50IGluIHlvdXIgRVJEREFQIHF1ZXJ5OlxuICBmbGFnPX5cIlpaWi4uLi4uLi4uWi4qXCJcbmluIHlvdXIgcXVlcnkuICBcblwiPX5cIiBpbmRpY2F0ZXMgdGhpcyBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBjb25zdHJhaW50LlxuVGhlICdaJ3MgYXJlIGxpdGVyYWwgY2hhcmFjdGVycy4gIEluIHRoaXMgZGF0YXNldCwgJ1onIGluZGljYXRlcyAnZ29vZCcgZGF0YS4gXG5UaGUgJy4ncyBzYXkgdG8gbWF0Y2ggYW55IGNoYXJhY3Rlci4gIFxuVGhlICcqJyBzYXlzIHRvIG1hdGNoIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIgMCBvciBtb3JlIHRpbWVzLiAgXG5TZWUgdGhlIHR1dG9yaWFsIGZvciByZWd1bGFyIGV4cHJlc3Npb25zIGF0XG5odHRwOi8vd3d3LnZvZ2VsbGEuY29tL3R1dG9yaWFscy9KYXZhUmVndWxhckV4cHJlc3Npb25zL2FydGljbGUuaHRtbFxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZV9pZFxuZXhwb2NvZGVcbmZhY2lsaXR5XG5JRFxuSU1PXG5wbGF0Zm9ybVxucGxhdGZvcm1fdmVyc2lvblxuc2l0ZVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5haXJQcmVzc3VyZSAoQXRtb3NwaGVyaWMgUHJlc3N1cmUsIG1pbGxpYmFyKVxuLi4uICgxMyBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9mc3VOb2FhU2hpcFdUREZfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2ZzdU5vYWFTaGlwV1RERl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9mc3VOb2FhU2hpcFdUREYvaW5kZXguanNvbiIsICJodHRwczovL3NhbW9zLmNvYXBzLmZzdS5lZHUvaHRtbC8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZnN1Tm9hYVNoaXBXVERGLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1mc3VOb2FhU2hpcFdUREYmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiRlNVIiwgImZzdU5vYWFTaGlwV1RERiJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURVlucnQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RFWW5ydCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURVlucnQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTk9BQSBTaGlwIEhpJ2lhbGFrYWkgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSwgTmVhciBSZWFsIFRpbWUiLCAiTk9BQSBTaGlwIEhpJ2lhbGFrYWkgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSAoTmVhciBSZWFsIFRpbWUsIHVwZGF0ZWQgZGFpbHkpIGFyZSBmcm9tIHRoZSBTaGlwYm9hcmQgQXV0b21hdGVkIE1ldGVvcm9sb2dpY2FsIGFuZCBPY2Vhbm9ncmFwaGljIFN5c3RlbSAoU0FNT1MpIHByb2dyYW0uXG5cbklNUE9SVEFOVDogQUxXQVlTIFVTRSBUSEUgUVVBTElUWSBGTEFHIERBVEEhIEVhY2ggZGF0YSB2YXJpYWJsZSdzIG1ldGFkYXRhIGluY2x1ZGVzIGEgcWNpbmRleCBhdHRyaWJ1dGUgd2hpY2ggaW5kaWNhdGVzIGEgY2hhcmFjdGVyIG51bWJlciBpbiB0aGUgZmxhZyBkYXRhLiAgQUxXQVlTIGNoZWNrIHRoZSBmbGFnIGRhdGEgZm9yIGVhY2ggcm93IG9mIGRhdGEgdG8gc2VlIHdoaWNoIGRhdGEgaXMgZ29vZCAoZmxhZz0nWicpIGFuZCB3aGljaCBkYXRhIGlzbid0LiAgRm9yIGV4YW1wbGUsIHRvIGV4dHJhY3QganVzdCBkYXRhIHdoZXJlIHRpbWUgKHFjaW5kZXg9MSksIGxhdGl0dWRlIChxY2luZGV4PTIpLCBsb25naXR1ZGUgKHFjaW5kZXg9MyksIGFuZCBhaXJUZW1wZXJhdHVyZSAocWNpbmRleD0xMikgYXJlICdnb29kJyBkYXRhLCBpbmNsdWRlIHRoaXMgY29uc3RyYWludCBpbiB5b3VyIEVSRERBUCBxdWVyeTpcbiAgZmxhZz1+XCJaWlouLi4uLi4uLlouKlwiXG5pbiB5b3VyIHF1ZXJ5LiAgXG5cIj1+XCIgaW5kaWNhdGVzIHRoaXMgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24gY29uc3RyYWludC5cblRoZSAnWidzIGFyZSBsaXRlcmFsIGNoYXJhY3RlcnMuICBJbiB0aGlzIGRhdGFzZXQsICdaJyBpbmRpY2F0ZXMgJ2dvb2QnIGRhdGEuIFxuVGhlICcuJ3Mgc2F5IHRvIG1hdGNoIGFueSBjaGFyYWN0ZXIuICBcblRoZSAnKicgc2F5cyB0byBtYXRjaCB0aGUgcHJldmlvdXMgY2hhcmFjdGVyIDAgb3IgbW9yZSB0aW1lcy4gIFxuU2VlIHRoZSB0dXRvcmlhbCBmb3IgcmVndWxhciBleHByZXNzaW9ucyBhdFxuaHR0cDovL3d3dy52b2dlbGxhLmNvbS90dXRvcmlhbHMvSmF2YVJlZ3VsYXJFeHByZXNzaW9ucy9hcnRpY2xlLmh0bWxcblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2VfaWRcbmV4cG9jb2RlXG5mYWNpbGl0eVxuSURcbklNT1xucGxhdGZvcm1cbnBsYXRmb3JtX3ZlcnNpb25cbnNpdGVcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuYWlyUHJlc3N1cmUgKEF0bW9zcGhlcmljIFByZXNzdXJlLCBtaWxsaWJhcilcbi4uLiAoMTMgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZnN1Tm9hYVNoaXBXVEVZbnJ0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9mc3VOb2FhU2hpcFdURVlucnRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZnN1Tm9hYVNoaXBXVEVZbnJ0L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zYW1vcy5jb2Fwcy5mc3UuZWR1L2h0bWwvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2ZzdU5vYWFTaGlwV1RFWW5ydC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZnN1Tm9hYVNoaXBXVEVZbnJ0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkZTVSIsICJmc3VOb2FhU2hpcFdURVlucnQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVZLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURVkiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVZLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5PQUEgU2hpcCBIaSdpYWxha2FpIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEsIFF1YWxpdHkgQ29udHJvbGxlZCIsICJOT0FBIFNoaXAgSGknaWFsYWthaSBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhIChkZWxheWVkIH4xMCBkYXlzIGZvciBxdWFsaXR5IGNvbnRyb2wpIGFyZSBmcm9tIHRoZSBTaGlwYm9hcmQgQXV0b21hdGVkIE1ldGVvcm9sb2dpY2FsIGFuZCBPY2Vhbm9ncmFwaGljIFN5c3RlbSAoU0FNT1MpIHByb2dyYW0uXG5cbklNUE9SVEFOVDogQUxXQVlTIFVTRSBUSEUgUVVBTElUWSBGTEFHIERBVEEhIEVhY2ggZGF0YSB2YXJpYWJsZSdzIG1ldGFkYXRhIGluY2x1ZGVzIGEgcWNpbmRleCBhdHRyaWJ1dGUgd2hpY2ggaW5kaWNhdGVzIGEgY2hhcmFjdGVyIG51bWJlciBpbiB0aGUgZmxhZyBkYXRhLiAgQUxXQVlTIGNoZWNrIHRoZSBmbGFnIGRhdGEgZm9yIGVhY2ggcm93IG9mIGRhdGEgdG8gc2VlIHdoaWNoIGRhdGEgaXMgZ29vZCAoZmxhZz0nWicpIGFuZCB3aGljaCBkYXRhIGlzbid0LiAgRm9yIGV4YW1wbGUsIHRvIGV4dHJhY3QganVzdCBkYXRhIHdoZXJlIHRpbWUgKHFjaW5kZXg9MSksIGxhdGl0dWRlIChxY2luZGV4PTIpLCBsb25naXR1ZGUgKHFjaW5kZXg9MyksIGFuZCBhaXJUZW1wZXJhdHVyZSAocWNpbmRleD0xMikgYXJlICdnb29kJyBkYXRhLCBpbmNsdWRlIHRoaXMgY29uc3RyYWludCBpbiB5b3VyIEVSRERBUCBxdWVyeTpcbiAgZmxhZz1+XCJaWlouLi4uLi4uLlouKlwiXG5pbiB5b3VyIHF1ZXJ5LiAgXG5cIj1+XCIgaW5kaWNhdGVzIHRoaXMgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24gY29uc3RyYWludC5cblRoZSAnWidzIGFyZSBsaXRlcmFsIGNoYXJhY3RlcnMuICBJbiB0aGlzIGRhdGFzZXQsICdaJyBpbmRpY2F0ZXMgJ2dvb2QnIGRhdGEuIFxuVGhlICcuJ3Mgc2F5IHRvIG1hdGNoIGFueSBjaGFyYWN0ZXIuICBcblRoZSAnKicgc2F5cyB0byBtYXRjaCB0aGUgcHJldmlvdXMgY2hhcmFjdGVyIDAgb3IgbW9yZSB0aW1lcy4gIFxuU2VlIHRoZSB0dXRvcmlhbCBmb3IgcmVndWxhciBleHByZXNzaW9ucyBhdFxuaHR0cDovL3d3dy52b2dlbGxhLmNvbS90dXRvcmlhbHMvSmF2YVJlZ3VsYXJFeHByZXNzaW9ucy9hcnRpY2xlLmh0bWxcblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2VfaWRcbmV4cG9jb2RlXG5mYWNpbGl0eVxuSURcbklNT1xucGxhdGZvcm1cbnBsYXRmb3JtX3ZlcnNpb25cbnNpdGVcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuYWlyUHJlc3N1cmUgKEF0bW9zcGhlcmljIFByZXNzdXJlLCBtaWxsaWJhcilcbi4uLiAoMTMgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZnN1Tm9hYVNoaXBXVEVZX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9mc3VOb2FhU2hpcFdURVlfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZnN1Tm9hYVNoaXBXVEVZL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zYW1vcy5jb2Fwcy5mc3UuZWR1L2h0bWwvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2ZzdU5vYWFTaGlwV1RFWS5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZnN1Tm9hYVNoaXBXVEVZJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkZTVSIsICJmc3VOb2FhU2hpcFdURVkiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVVLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURVUiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVVLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5PQUEgU2hpcCBLYSdpbWltb2FuYSBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhLCBRdWFsaXR5IENvbnRyb2xsZWQiLCAiTk9BQSBTaGlwIEthJ2ltaW1vYW5hIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEgKGRlbGF5ZWQgfjEwIGRheXMgZm9yIHF1YWxpdHkgY29udHJvbCkgYXJlIGZyb20gdGhlIFNoaXBib2FyZCBBdXRvbWF0ZWQgTWV0ZW9yb2xvZ2ljYWwgYW5kIE9jZWFub2dyYXBoaWMgU3lzdGVtIChTQU1PUykgcHJvZ3JhbS5cblxuSU1QT1JUQU5UOiBBTFdBWVMgVVNFIFRIRSBRVUFMSVRZIEZMQUcgREFUQSEgRWFjaCBkYXRhIHZhcmlhYmxlJ3MgbWV0YWRhdGEgaW5jbHVkZXMgYSBxY2luZGV4IGF0dHJpYnV0ZSB3aGljaCBpbmRpY2F0ZXMgYSBjaGFyYWN0ZXIgbnVtYmVyIGluIHRoZSBmbGFnIGRhdGEuICBBTFdBWVMgY2hlY2sgdGhlIGZsYWcgZGF0YSBmb3IgZWFjaCByb3cgb2YgZGF0YSB0byBzZWUgd2hpY2ggZGF0YSBpcyBnb29kIChmbGFnPSdaJykgYW5kIHdoaWNoIGRhdGEgaXNuJ3QuICBGb3IgZXhhbXBsZSwgdG8gZXh0cmFjdCBqdXN0IGRhdGEgd2hlcmUgdGltZSAocWNpbmRleD0xKSwgbGF0aXR1ZGUgKHFjaW5kZXg9MiksIGxvbmdpdHVkZSAocWNpbmRleD0zKSwgYW5kIGFpclRlbXBlcmF0dXJlIChxY2luZGV4PTEyKSBhcmUgJ2dvb2QnIGRhdGEsIGluY2x1ZGUgdGhpcyBjb25zdHJhaW50IGluIHlvdXIgRVJEREFQIHF1ZXJ5OlxuICBmbGFnPX5cIlpaWi4uLi4uLi4uWi4qXCJcbmluIHlvdXIgcXVlcnkuICBcblwiPX5cIiBpbmRpY2F0ZXMgdGhpcyBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBjb25zdHJhaW50LlxuVGhlICdaJ3MgYXJlIGxpdGVyYWwgY2hhcmFjdGVycy4gIEluIHRoaXMgZGF0YXNldCwgJ1onIGluZGljYXRlcyAnZ29vZCcgZGF0YS4gXG5UaGUgJy4ncyBzYXkgdG8gbWF0Y2ggYW55IGNoYXJhY3Rlci4gIFxuVGhlICcqJyBzYXlzIHRvIG1hdGNoIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIgMCBvciBtb3JlIHRpbWVzLiAgXG5TZWUgdGhlIHR1dG9yaWFsIGZvciByZWd1bGFyIGV4cHJlc3Npb25zIGF0XG5odHRwOi8vd3d3LnZvZ2VsbGEuY29tL3R1dG9yaWFscy9KYXZhUmVndWxhckV4cHJlc3Npb25zL2FydGljbGUuaHRtbFxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZV9pZFxuZXhwb2NvZGVcbmZhY2lsaXR5XG5JRFxuSU1PXG5wbGF0Zm9ybVxucGxhdGZvcm1fdmVyc2lvblxuc2l0ZVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5haXJQcmVzc3VyZSAoQXRtb3NwaGVyaWMgUHJlc3N1cmUsIG1pbGxpYmFyKVxuLi4uICgxNiBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9mc3VOb2FhU2hpcFdURVVfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2ZzdU5vYWFTaGlwV1RFVV9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9mc3VOb2FhU2hpcFdURVUvaW5kZXguanNvbiIsICJodHRwczovL3NhbW9zLmNvYXBzLmZzdS5lZHUvaHRtbC8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZnN1Tm9hYVNoaXBXVEVVLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1mc3VOb2FhU2hpcFdURVUmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiRlNVIiwgImZzdU5vYWFTaGlwV1RFVSJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURUouc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RFSiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURUouZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTk9BQSBTaGlwIE1jQXJ0aHVySUkgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSwgUXVhbGl0eSBDb250cm9sbGVkIiwgIk5PQUEgU2hpcCBNY0FydGh1ciBJSSBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhIChkZWxheWVkIH4xMCBkYXlzIGZvciBxdWFsaXR5IGNvbnRyb2wpIGFyZSBmcm9tIHRoZSBTaGlwYm9hcmQgQXV0b21hdGVkIE1ldGVvcm9sb2dpY2FsIGFuZCBPY2Vhbm9ncmFwaGljIFN5c3RlbSAoU0FNT1MpIHByb2dyYW0uXG5cbklNUE9SVEFOVDogQUxXQVlTIFVTRSBUSEUgUVVBTElUWSBGTEFHIERBVEEhIEVhY2ggZGF0YSB2YXJpYWJsZSdzIG1ldGFkYXRhIGluY2x1ZGVzIGEgcWNpbmRleCBhdHRyaWJ1dGUgd2hpY2ggaW5kaWNhdGVzIGEgY2hhcmFjdGVyIG51bWJlciBpbiB0aGUgZmxhZyBkYXRhLiAgQUxXQVlTIGNoZWNrIHRoZSBmbGFnIGRhdGEgZm9yIGVhY2ggcm93IG9mIGRhdGEgdG8gc2VlIHdoaWNoIGRhdGEgaXMgZ29vZCAoZmxhZz0nWicpIGFuZCB3aGljaCBkYXRhIGlzbid0LiAgRm9yIGV4YW1wbGUsIHRvIGV4dHJhY3QganVzdCBkYXRhIHdoZXJlIHRpbWUgKHFjaW5kZXg9MSksIGxhdGl0dWRlIChxY2luZGV4PTIpLCBsb25naXR1ZGUgKHFjaW5kZXg9MyksIGFuZCBhaXJUZW1wZXJhdHVyZSAocWNpbmRleD0xMikgYXJlICdnb29kJyBkYXRhLCBpbmNsdWRlIHRoaXMgY29uc3RyYWludCBpbiB5b3VyIEVSRERBUCBxdWVyeTpcbiAgZmxhZz1+XCJaWlouLi4uLi4uLlouKlwiXG5pbiB5b3VyIHF1ZXJ5LiAgXG5cIj1+XCIgaW5kaWNhdGVzIHRoaXMgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24gY29uc3RyYWludC5cblRoZSAnWidzIGFyZSBsaXRlcmFsIGNoYXJhY3RlcnMuICBJbiB0aGlzIGRhdGFzZXQsICdaJyBpbmRpY2F0ZXMgJ2dvb2QnIGRhdGEuIFxuVGhlICcuJ3Mgc2F5IHRvIG1hdGNoIGFueSBjaGFyYWN0ZXIuICBcblRoZSAnKicgc2F5cyB0byBtYXRjaCB0aGUgcHJldmlvdXMgY2hhcmFjdGVyIDAgb3IgbW9yZSB0aW1lcy4gIFxuU2VlIHRoZSB0dXRvcmlhbCBmb3IgcmVndWxhciBleHByZXNzaW9ucyBhdFxuaHR0cDovL3d3dy52b2dlbGxhLmNvbS90dXRvcmlhbHMvSmF2YVJlZ3VsYXJFeHByZXNzaW9ucy9hcnRpY2xlLmh0bWxcblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2VfaWRcbmV4cG9jb2RlXG5mYWNpbGl0eVxuSURcbklNT1xucGxhdGZvcm1cbnBsYXRmb3JtX3ZlcnNpb25cbnNpdGVcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuYWlyUHJlc3N1cmUgKEF0bW9zcGhlcmljIFByZXNzdXJlLCBtaWxsaWJhcilcbi4uLiAoMTMgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZnN1Tm9hYVNoaXBXVEVKX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9mc3VOb2FhU2hpcFdURUpfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZnN1Tm9hYVNoaXBXVEVKL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zYW1vcy5jb2Fwcy5mc3UuZWR1L2h0bWwvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2ZzdU5vYWFTaGlwV1RFSi5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZnN1Tm9hYVNoaXBXVEVKJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkZTVSIsICJmc3VOb2FhU2hpcFdURUoiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVERNLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURE0iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVERNLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5PQUEgU2hpcCBNaWxsZXIgRnJlZW1hbiBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhLCBRdWFsaXR5IENvbnRyb2xsZWQiLCAiTk9BQSBTaGlwIE1pbGxlciBGcmVlbWFuIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEgKGRlbGF5ZWQgfjEwIGRheXMgZm9yIHF1YWxpdHkgY29udHJvbCkgYXJlIGZyb20gdGhlIFNoaXBib2FyZCBBdXRvbWF0ZWQgTWV0ZW9yb2xvZ2ljYWwgYW5kIE9jZWFub2dyYXBoaWMgU3lzdGVtIChTQU1PUykgcHJvZ3JhbS5cblxuSU1QT1JUQU5UOiBBTFdBWVMgVVNFIFRIRSBRVUFMSVRZIEZMQUcgREFUQSEgRWFjaCBkYXRhIHZhcmlhYmxlJ3MgbWV0YWRhdGEgaW5jbHVkZXMgYSBxY2luZGV4IGF0dHJpYnV0ZSB3aGljaCBpbmRpY2F0ZXMgYSBjaGFyYWN0ZXIgbnVtYmVyIGluIHRoZSBmbGFnIGRhdGEuICBBTFdBWVMgY2hlY2sgdGhlIGZsYWcgZGF0YSBmb3IgZWFjaCByb3cgb2YgZGF0YSB0byBzZWUgd2hpY2ggZGF0YSBpcyBnb29kIChmbGFnPSdaJykgYW5kIHdoaWNoIGRhdGEgaXNuJ3QuICBGb3IgZXhhbXBsZSwgdG8gZXh0cmFjdCBqdXN0IGRhdGEgd2hlcmUgdGltZSAocWNpbmRleD0xKSwgbGF0aXR1ZGUgKHFjaW5kZXg9MiksIGxvbmdpdHVkZSAocWNpbmRleD0zKSwgYW5kIGFpclRlbXBlcmF0dXJlIChxY2luZGV4PTEyKSBhcmUgJ2dvb2QnIGRhdGEsIGluY2x1ZGUgdGhpcyBjb25zdHJhaW50IGluIHlvdXIgRVJEREFQIHF1ZXJ5OlxuICBmbGFnPX5cIlpaWi4uLi4uLi4uWi4qXCJcbmluIHlvdXIgcXVlcnkuICBcblwiPX5cIiBpbmRpY2F0ZXMgdGhpcyBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBjb25zdHJhaW50LlxuVGhlICdaJ3MgYXJlIGxpdGVyYWwgY2hhcmFjdGVycy4gIEluIHRoaXMgZGF0YXNldCwgJ1onIGluZGljYXRlcyAnZ29vZCcgZGF0YS4gXG5UaGUgJy4ncyBzYXkgdG8gbWF0Y2ggYW55IGNoYXJhY3Rlci4gIFxuVGhlICcqJyBzYXlzIHRvIG1hdGNoIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIgMCBvciBtb3JlIHRpbWVzLiAgXG5TZWUgdGhlIHR1dG9yaWFsIGZvciByZWd1bGFyIGV4cHJlc3Npb25zIGF0XG5odHRwOi8vd3d3LnZvZ2VsbGEuY29tL3R1dG9yaWFscy9KYXZhUmVndWxhckV4cHJlc3Npb25zL2FydGljbGUuaHRtbFxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZV9pZFxuZXhwb2NvZGVcbmZhY2lsaXR5XG5JRFxuSU1PXG5wbGF0Zm9ybVxucGxhdGZvcm1fdmVyc2lvblxuc2l0ZVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5haXJQcmVzc3VyZSAoQXRtb3NwaGVyaWMgUHJlc3N1cmUsIG1pbGxpYmFyKVxuLi4uICgxMyBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9mc3VOb2FhU2hpcFdURE1fZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2ZzdU5vYWFTaGlwV1RETV9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9mc3VOb2FhU2hpcFdURE0vaW5kZXguanNvbiIsICJodHRwczovL3NhbW9zLmNvYXBzLmZzdS5lZHUvaHRtbC8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZnN1Tm9hYVNoaXBXVERNLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1mc3VOb2FhU2hpcFdURE0mc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiRlNVIiwgImZzdU5vYWFTaGlwV1RETSJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURVJucnQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RFUm5ydCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURVJucnQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTk9BQSBTaGlwIE5hbmN5IEZvc3RlciBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhLCBOZWFyIFJlYWwgVGltZSIsICJOT0FBIFNoaXAgTmFuY3kgRm9zdGVyIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEgKE5lYXIgUmVhbCBUaW1lLCB1cGRhdGVkIGRhaWx5KSBhcmUgZnJvbSB0aGUgU2hpcGJvYXJkIEF1dG9tYXRlZCBNZXRlb3JvbG9naWNhbCBhbmQgT2NlYW5vZ3JhcGhpYyBTeXN0ZW0gKFNBTU9TKSBwcm9ncmFtLlxuXG5JTVBPUlRBTlQ6IEFMV0FZUyBVU0UgVEhFIFFVQUxJVFkgRkxBRyBEQVRBISBFYWNoIGRhdGEgdmFyaWFibGUncyBtZXRhZGF0YSBpbmNsdWRlcyBhIHFjaW5kZXggYXR0cmlidXRlIHdoaWNoIGluZGljYXRlcyBhIGNoYXJhY3RlciBudW1iZXIgaW4gdGhlIGZsYWcgZGF0YS4gIEFMV0FZUyBjaGVjayB0aGUgZmxhZyBkYXRhIGZvciBlYWNoIHJvdyBvZiBkYXRhIHRvIHNlZSB3aGljaCBkYXRhIGlzIGdvb2QgKGZsYWc9J1onKSBhbmQgd2hpY2ggZGF0YSBpc24ndC4gIEZvciBleGFtcGxlLCB0byBleHRyYWN0IGp1c3QgZGF0YSB3aGVyZSB0aW1lIChxY2luZGV4PTEpLCBsYXRpdHVkZSAocWNpbmRleD0yKSwgbG9uZ2l0dWRlIChxY2luZGV4PTMpLCBhbmQgYWlyVGVtcGVyYXR1cmUgKHFjaW5kZXg9MTIpIGFyZSAnZ29vZCcgZGF0YSwgaW5jbHVkZSB0aGlzIGNvbnN0cmFpbnQgaW4geW91ciBFUkREQVAgcXVlcnk6XG4gIGZsYWc9flwiWlpaLi4uLi4uLi5aLipcIlxuaW4geW91ciBxdWVyeS4gIFxuXCI9flwiIGluZGljYXRlcyB0aGlzIGlzIGEgcmVndWxhciBleHByZXNzaW9uIGNvbnN0cmFpbnQuXG5UaGUgJ1oncyBhcmUgbGl0ZXJhbCBjaGFyYWN0ZXJzLiAgSW4gdGhpcyBkYXRhc2V0LCAnWicgaW5kaWNhdGVzICdnb29kJyBkYXRhLiBcblRoZSAnLidzIHNheSB0byBtYXRjaCBhbnkgY2hhcmFjdGVyLiAgXG5UaGUgJyonIHNheXMgdG8gbWF0Y2ggdGhlIHByZXZpb3VzIGNoYXJhY3RlciAwIG9yIG1vcmUgdGltZXMuICBcblNlZSB0aGUgdHV0b3JpYWwgZm9yIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXRcbmh0dHA6Ly93d3cudm9nZWxsYS5jb20vdHV0b3JpYWxzL0phdmFSZWd1bGFyRXhwcmVzc2lvbnMvYXJ0aWNsZS5odG1sXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlX2lkXG5leHBvY29kZVxuZmFjaWxpdHlcbklEXG5JTU9cbnBsYXRmb3JtXG5wbGF0Zm9ybV92ZXJzaW9uXG5zaXRlXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmFpclByZXNzdXJlIChBdG1vc3BoZXJpYyBQcmVzc3VyZSwgbWlsbGliYXIpXG4uLi4gKDE0IG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2ZzdU5vYWFTaGlwV1RFUm5ydF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZnN1Tm9hYVNoaXBXVEVSbnJ0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2ZzdU5vYWFTaGlwV1RFUm5ydC9pbmRleC5qc29uIiwgImh0dHBzOi8vc2Ftb3MuY29hcHMuZnN1LmVkdS9odG1sLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9mc3VOb2FhU2hpcFdURVJucnQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWZzdU5vYWFTaGlwV1RFUm5ydCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJGU1UiLCAiZnN1Tm9hYVNoaXBXVEVSbnJ0Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RFUi5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVSIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RFUi5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOT0FBIFNoaXAgTmFuY3kgRm9zdGVyIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEsIFF1YWxpdHkgQ29udHJvbGxlZCIsICJOT0FBIFNoaXAgTmFuY3kgRm9zdGVyIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEgKGRlbGF5ZWQgfjEwIGRheXMgZm9yIHF1YWxpdHkgY29udHJvbCkgYXJlIGZyb20gdGhlIFNoaXBib2FyZCBBdXRvbWF0ZWQgTWV0ZW9yb2xvZ2ljYWwgYW5kIE9jZWFub2dyYXBoaWMgU3lzdGVtIChTQU1PUykgcHJvZ3JhbS5cblxuSU1QT1JUQU5UOiBBTFdBWVMgVVNFIFRIRSBRVUFMSVRZIEZMQUcgREFUQSEgRWFjaCBkYXRhIHZhcmlhYmxlJ3MgbWV0YWRhdGEgaW5jbHVkZXMgYSBxY2luZGV4IGF0dHJpYnV0ZSB3aGljaCBpbmRpY2F0ZXMgYSBjaGFyYWN0ZXIgbnVtYmVyIGluIHRoZSBmbGFnIGRhdGEuICBBTFdBWVMgY2hlY2sgdGhlIGZsYWcgZGF0YSBmb3IgZWFjaCByb3cgb2YgZGF0YSB0byBzZWUgd2hpY2ggZGF0YSBpcyBnb29kIChmbGFnPSdaJykgYW5kIHdoaWNoIGRhdGEgaXNuJ3QuICBGb3IgZXhhbXBsZSwgdG8gZXh0cmFjdCBqdXN0IGRhdGEgd2hlcmUgdGltZSAocWNpbmRleD0xKSwgbGF0aXR1ZGUgKHFjaW5kZXg9MiksIGxvbmdpdHVkZSAocWNpbmRleD0zKSwgYW5kIGFpclRlbXBlcmF0dXJlIChxY2luZGV4PTEyKSBhcmUgJ2dvb2QnIGRhdGEsIGluY2x1ZGUgdGhpcyBjb25zdHJhaW50IGluIHlvdXIgRVJEREFQIHF1ZXJ5OlxuICBmbGFnPX5cIlpaWi4uLi4uLi4uWi4qXCJcbmluIHlvdXIgcXVlcnkuICBcblwiPX5cIiBpbmRpY2F0ZXMgdGhpcyBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBjb25zdHJhaW50LlxuVGhlICdaJ3MgYXJlIGxpdGVyYWwgY2hhcmFjdGVycy4gIEluIHRoaXMgZGF0YXNldCwgJ1onIGluZGljYXRlcyAnZ29vZCcgZGF0YS4gXG5UaGUgJy4ncyBzYXkgdG8gbWF0Y2ggYW55IGNoYXJhY3Rlci4gIFxuVGhlICcqJyBzYXlzIHRvIG1hdGNoIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIgMCBvciBtb3JlIHRpbWVzLiAgXG5TZWUgdGhlIHR1dG9yaWFsIGZvciByZWd1bGFyIGV4cHJlc3Npb25zIGF0XG5odHRwOi8vd3d3LnZvZ2VsbGEuY29tL3R1dG9yaWFscy9KYXZhUmVndWxhckV4cHJlc3Npb25zL2FydGljbGUuaHRtbFxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZV9pZFxuZXhwb2NvZGVcbmZhY2lsaXR5XG5JRFxuSU1PXG5wbGF0Zm9ybVxucGxhdGZvcm1fdmVyc2lvblxuc2l0ZVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5haXJQcmVzc3VyZSAoQXRtb3NwaGVyaWMgUHJlc3N1cmUsIG1pbGxpYmFyKVxuLi4uICgxNCBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9mc3VOb2FhU2hpcFdURVJfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2ZzdU5vYWFTaGlwV1RFUl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9mc3VOb2FhU2hpcFdURVIvaW5kZXguanNvbiIsICJodHRwczovL3NhbW9zLmNvYXBzLmZzdS5lZHUvaHRtbC8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZnN1Tm9hYVNoaXBXVEVSLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1mc3VOb2FhU2hpcFdURVImc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiRlNVIiwgImZzdU5vYWFTaGlwV1RFUiJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdUREhucnQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RESG5ydCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdUREhucnQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTk9BQSBTaGlwIE9rZWFub3MgRXhwbG9yZXIgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSwgTmVhciBSZWFsIFRpbWUiLCAiTk9BQSBTaGlwIE9rZWFub3MgRXhwbG9yZXIgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSAoTmVhciBSZWFsIFRpbWUsIHVwZGF0ZWQgZGFpbHkpIGFyZSBmcm9tIHRoZSBTaGlwYm9hcmQgQXV0b21hdGVkIE1ldGVvcm9sb2dpY2FsIGFuZCBPY2Vhbm9ncmFwaGljIFN5c3RlbSAoU0FNT1MpIHByb2dyYW0uXG5cbklNUE9SVEFOVDogQUxXQVlTIFVTRSBUSEUgUVVBTElUWSBGTEFHIERBVEEhIEVhY2ggZGF0YSB2YXJpYWJsZSdzIG1ldGFkYXRhIGluY2x1ZGVzIGEgcWNpbmRleCBhdHRyaWJ1dGUgd2hpY2ggaW5kaWNhdGVzIGEgY2hhcmFjdGVyIG51bWJlciBpbiB0aGUgZmxhZyBkYXRhLiAgQUxXQVlTIGNoZWNrIHRoZSBmbGFnIGRhdGEgZm9yIGVhY2ggcm93IG9mIGRhdGEgdG8gc2VlIHdoaWNoIGRhdGEgaXMgZ29vZCAoZmxhZz0nWicpIGFuZCB3aGljaCBkYXRhIGlzbid0LiAgRm9yIGV4YW1wbGUsIHRvIGV4dHJhY3QganVzdCBkYXRhIHdoZXJlIHRpbWUgKHFjaW5kZXg9MSksIGxhdGl0dWRlIChxY2luZGV4PTIpLCBsb25naXR1ZGUgKHFjaW5kZXg9MyksIGFuZCBhaXJUZW1wZXJhdHVyZSAocWNpbmRleD0xMikgYXJlICdnb29kJyBkYXRhLCBpbmNsdWRlIHRoaXMgY29uc3RyYWludCBpbiB5b3VyIEVSRERBUCBxdWVyeTpcbiAgZmxhZz1+XCJaWlouLi4uLi4uLlouKlwiXG5pbiB5b3VyIHF1ZXJ5LiAgXG5cIj1+XCIgaW5kaWNhdGVzIHRoaXMgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24gY29uc3RyYWludC5cblRoZSAnWidzIGFyZSBsaXRlcmFsIGNoYXJhY3RlcnMuICBJbiB0aGlzIGRhdGFzZXQsICdaJyBpbmRpY2F0ZXMgJ2dvb2QnIGRhdGEuIFxuVGhlICcuJ3Mgc2F5IHRvIG1hdGNoIGFueSBjaGFyYWN0ZXIuICBcblRoZSAnKicgc2F5cyB0byBtYXRjaCB0aGUgcHJldmlvdXMgY2hhcmFjdGVyIDAgb3IgbW9yZSB0aW1lcy4gIFxuU2VlIHRoZSB0dXRvcmlhbCBmb3IgcmVndWxhciBleHByZXNzaW9ucyBhdFxuaHR0cDovL3d3dy52b2dlbGxhLmNvbS90dXRvcmlhbHMvSmF2YVJlZ3VsYXJFeHByZXNzaW9ucy9hcnRpY2xlLmh0bWxcblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2VfaWRcbmV4cG9jb2RlXG5mYWNpbGl0eVxuSURcbklNT1xucGxhdGZvcm1cbnBsYXRmb3JtX3ZlcnNpb25cbnNpdGVcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuYWlyUHJlc3N1cmUgKEF0bW9zcGhlcmljIFByZXNzdXJlLCBtaWxsaWJhcilcbi4uLiAoMTMgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZnN1Tm9hYVNoaXBXVERIbnJ0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9mc3VOb2FhU2hpcFdUREhucnRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZnN1Tm9hYVNoaXBXVERIbnJ0L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zYW1vcy5jb2Fwcy5mc3UuZWR1L2h0bWwvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2ZzdU5vYWFTaGlwV1RESG5ydC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZnN1Tm9hYVNoaXBXVERIbnJ0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkZTVSIsICJmc3VOb2FhU2hpcFdUREhucnQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVERILnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdUREgiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVERILmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5PQUEgU2hpcCBPa2Vhbm9zIEV4cGxvcmVyIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEsIFF1YWxpdHkgQ29udHJvbGxlZCIsICJOT0FBIFNoaXAgT2tlYW5vcyBFeHBsb3JlciBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhIChkZWxheWVkIH4xMCBkYXlzIGZvciBxdWFsaXR5IGNvbnRyb2wpIGFyZSBmcm9tIHRoZSBTaGlwYm9hcmQgQXV0b21hdGVkIE1ldGVvcm9sb2dpY2FsIGFuZCBPY2Vhbm9ncmFwaGljIFN5c3RlbSAoU0FNT1MpIHByb2dyYW0uXG5cbklNUE9SVEFOVDogQUxXQVlTIFVTRSBUSEUgUVVBTElUWSBGTEFHIERBVEEhIEVhY2ggZGF0YSB2YXJpYWJsZSdzIG1ldGFkYXRhIGluY2x1ZGVzIGEgcWNpbmRleCBhdHRyaWJ1dGUgd2hpY2ggaW5kaWNhdGVzIGEgY2hhcmFjdGVyIG51bWJlciBpbiB0aGUgZmxhZyBkYXRhLiAgQUxXQVlTIGNoZWNrIHRoZSBmbGFnIGRhdGEgZm9yIGVhY2ggcm93IG9mIGRhdGEgdG8gc2VlIHdoaWNoIGRhdGEgaXMgZ29vZCAoZmxhZz0nWicpIGFuZCB3aGljaCBkYXRhIGlzbid0LiAgRm9yIGV4YW1wbGUsIHRvIGV4dHJhY3QganVzdCBkYXRhIHdoZXJlIHRpbWUgKHFjaW5kZXg9MSksIGxhdGl0dWRlIChxY2luZGV4PTIpLCBsb25naXR1ZGUgKHFjaW5kZXg9MyksIGFuZCBhaXJUZW1wZXJhdHVyZSAocWNpbmRleD0xMikgYXJlICdnb29kJyBkYXRhLCBpbmNsdWRlIHRoaXMgY29uc3RyYWludCBpbiB5b3VyIEVSRERBUCBxdWVyeTpcbiAgZmxhZz1+XCJaWlouLi4uLi4uLlouKlwiXG5pbiB5b3VyIHF1ZXJ5LiAgXG5cIj1+XCIgaW5kaWNhdGVzIHRoaXMgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24gY29uc3RyYWludC5cblRoZSAnWidzIGFyZSBsaXRlcmFsIGNoYXJhY3RlcnMuICBJbiB0aGlzIGRhdGFzZXQsICdaJyBpbmRpY2F0ZXMgJ2dvb2QnIGRhdGEuIFxuVGhlICcuJ3Mgc2F5IHRvIG1hdGNoIGFueSBjaGFyYWN0ZXIuICBcblRoZSAnKicgc2F5cyB0byBtYXRjaCB0aGUgcHJldmlvdXMgY2hhcmFjdGVyIDAgb3IgbW9yZSB0aW1lcy4gIFxuU2VlIHRoZSB0dXRvcmlhbCBmb3IgcmVndWxhciBleHByZXNzaW9ucyBhdFxuaHR0cDovL3d3dy52b2dlbGxhLmNvbS90dXRvcmlhbHMvSmF2YVJlZ3VsYXJFeHByZXNzaW9ucy9hcnRpY2xlLmh0bWxcblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2VfaWRcbmV4cG9jb2RlXG5mYWNpbGl0eVxuSURcbklNT1xucGxhdGZvcm1cbnBsYXRmb3JtX3ZlcnNpb25cbnNpdGVcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuYWlyUHJlc3N1cmUgKEF0bW9zcGhlcmljIFByZXNzdXJlLCBtaWxsaWJhcilcbi4uLiAoMTMgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZnN1Tm9hYVNoaXBXVERIX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9mc3VOb2FhU2hpcFdUREhfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZnN1Tm9hYVNoaXBXVERIL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zYW1vcy5jb2Fwcy5mc3UuZWR1L2h0bWwvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2ZzdU5vYWFTaGlwV1RESC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZnN1Tm9hYVNoaXBXVERIJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkZTVSIsICJmc3VOb2FhU2hpcFdUREgiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVERPbnJ0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURE9ucnQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVERPbnJ0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5PQUEgU2hpcCBPcmVnb24gSUkgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSwgTmVhciBSZWFsIFRpbWUiLCAiTk9BQSBTaGlwIE9yZWdvbiBJSSBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhIChOZWFyIFJlYWwgVGltZSwgdXBkYXRlZCBkYWlseSkgYXJlIGZyb20gdGhlIFNoaXBib2FyZCBBdXRvbWF0ZWQgTWV0ZW9yb2xvZ2ljYWwgYW5kIE9jZWFub2dyYXBoaWMgU3lzdGVtIChTQU1PUykgcHJvZ3JhbS5cblxuSU1QT1JUQU5UOiBBTFdBWVMgVVNFIFRIRSBRVUFMSVRZIEZMQUcgREFUQSEgRWFjaCBkYXRhIHZhcmlhYmxlJ3MgbWV0YWRhdGEgaW5jbHVkZXMgYSBxY2luZGV4IGF0dHJpYnV0ZSB3aGljaCBpbmRpY2F0ZXMgYSBjaGFyYWN0ZXIgbnVtYmVyIGluIHRoZSBmbGFnIGRhdGEuICBBTFdBWVMgY2hlY2sgdGhlIGZsYWcgZGF0YSBmb3IgZWFjaCByb3cgb2YgZGF0YSB0byBzZWUgd2hpY2ggZGF0YSBpcyBnb29kIChmbGFnPSdaJykgYW5kIHdoaWNoIGRhdGEgaXNuJ3QuICBGb3IgZXhhbXBsZSwgdG8gZXh0cmFjdCBqdXN0IGRhdGEgd2hlcmUgdGltZSAocWNpbmRleD0xKSwgbGF0aXR1ZGUgKHFjaW5kZXg9MiksIGxvbmdpdHVkZSAocWNpbmRleD0zKSwgYW5kIGFpclRlbXBlcmF0dXJlIChxY2luZGV4PTEyKSBhcmUgJ2dvb2QnIGRhdGEsIGluY2x1ZGUgdGhpcyBjb25zdHJhaW50IGluIHlvdXIgRVJEREFQIHF1ZXJ5OlxuICBmbGFnPX5cIlpaWi4uLi4uLi4uWi4qXCJcbmluIHlvdXIgcXVlcnkuICBcblwiPX5cIiBpbmRpY2F0ZXMgdGhpcyBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBjb25zdHJhaW50LlxuVGhlICdaJ3MgYXJlIGxpdGVyYWwgY2hhcmFjdGVycy4gIEluIHRoaXMgZGF0YXNldCwgJ1onIGluZGljYXRlcyAnZ29vZCcgZGF0YS4gXG5UaGUgJy4ncyBzYXkgdG8gbWF0Y2ggYW55IGNoYXJhY3Rlci4gIFxuVGhlICcqJyBzYXlzIHRvIG1hdGNoIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIgMCBvciBtb3JlIHRpbWVzLiAgXG5TZWUgdGhlIHR1dG9yaWFsIGZvciByZWd1bGFyIGV4cHJlc3Npb25zIGF0XG5odHRwOi8vd3d3LnZvZ2VsbGEuY29tL3R1dG9yaWFscy9KYXZhUmVndWxhckV4cHJlc3Npb25zL2FydGljbGUuaHRtbFxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZV9pZFxuZXhwb2NvZGVcbmZhY2lsaXR5XG5JRFxuSU1PXG5wbGF0Zm9ybVxucGxhdGZvcm1fdmVyc2lvblxuc2l0ZVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5haXJQcmVzc3VyZSAoQXRtb3NwaGVyaWMgUHJlc3N1cmUsIG1pbGxpYmFyKVxuLi4uICgxMyBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9mc3VOb2FhU2hpcFdURE9ucnRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2ZzdU5vYWFTaGlwV1RET25ydF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9mc3VOb2FhU2hpcFdURE9ucnQvaW5kZXguanNvbiIsICJodHRwczovL3NhbW9zLmNvYXBzLmZzdS5lZHUvaHRtbC8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZnN1Tm9hYVNoaXBXVERPbnJ0LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1mc3VOb2FhU2hpcFdURE9ucnQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiRlNVIiwgImZzdU5vYWFTaGlwV1RET25ydCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURE8uc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RETyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURE8uZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTk9BQSBTaGlwIE9yZWdvbiBJSSBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhLCBRdWFsaXR5IENvbnRyb2xsZWQiLCAiTk9BQSBTaGlwIE9yZWdvbiBJSSBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhIChkZWxheWVkIH4xMCBkYXlzIGZvciBxdWFsaXR5IGNvbnRyb2wpIGFyZSBmcm9tIHRoZSBTaGlwYm9hcmQgQXV0b21hdGVkIE1ldGVvcm9sb2dpY2FsIGFuZCBPY2Vhbm9ncmFwaGljIFN5c3RlbSAoU0FNT1MpIHByb2dyYW0uXG5cbklNUE9SVEFOVDogQUxXQVlTIFVTRSBUSEUgUVVBTElUWSBGTEFHIERBVEEhIEVhY2ggZGF0YSB2YXJpYWJsZSdzIG1ldGFkYXRhIGluY2x1ZGVzIGEgcWNpbmRleCBhdHRyaWJ1dGUgd2hpY2ggaW5kaWNhdGVzIGEgY2hhcmFjdGVyIG51bWJlciBpbiB0aGUgZmxhZyBkYXRhLiAgQUxXQVlTIGNoZWNrIHRoZSBmbGFnIGRhdGEgZm9yIGVhY2ggcm93IG9mIGRhdGEgdG8gc2VlIHdoaWNoIGRhdGEgaXMgZ29vZCAoZmxhZz0nWicpIGFuZCB3aGljaCBkYXRhIGlzbid0LiAgRm9yIGV4YW1wbGUsIHRvIGV4dHJhY3QganVzdCBkYXRhIHdoZXJlIHRpbWUgKHFjaW5kZXg9MSksIGxhdGl0dWRlIChxY2luZGV4PTIpLCBsb25naXR1ZGUgKHFjaW5kZXg9MyksIGFuZCBhaXJUZW1wZXJhdHVyZSAocWNpbmRleD0xMikgYXJlICdnb29kJyBkYXRhLCBpbmNsdWRlIHRoaXMgY29uc3RyYWludCBpbiB5b3VyIEVSRERBUCBxdWVyeTpcbiAgZmxhZz1+XCJaWlouLi4uLi4uLlouKlwiXG5pbiB5b3VyIHF1ZXJ5LiAgXG5cIj1+XCIgaW5kaWNhdGVzIHRoaXMgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24gY29uc3RyYWludC5cblRoZSAnWidzIGFyZSBsaXRlcmFsIGNoYXJhY3RlcnMuICBJbiB0aGlzIGRhdGFzZXQsICdaJyBpbmRpY2F0ZXMgJ2dvb2QnIGRhdGEuIFxuVGhlICcuJ3Mgc2F5IHRvIG1hdGNoIGFueSBjaGFyYWN0ZXIuICBcblRoZSAnKicgc2F5cyB0byBtYXRjaCB0aGUgcHJldmlvdXMgY2hhcmFjdGVyIDAgb3IgbW9yZSB0aW1lcy4gIFxuU2VlIHRoZSB0dXRvcmlhbCBmb3IgcmVndWxhciBleHByZXNzaW9ucyBhdFxuaHR0cDovL3d3dy52b2dlbGxhLmNvbS90dXRvcmlhbHMvSmF2YVJlZ3VsYXJFeHByZXNzaW9ucy9hcnRpY2xlLmh0bWxcblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2VfaWRcbmV4cG9jb2RlXG5mYWNpbGl0eVxuSURcbklNT1xucGxhdGZvcm1cbnBsYXRmb3JtX3ZlcnNpb25cbnNpdGVcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuYWlyUHJlc3N1cmUgKEF0bW9zcGhlcmljIFByZXNzdXJlLCBtaWxsaWJhcilcbi4uLiAoMTMgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZnN1Tm9hYVNoaXBXVERPX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9mc3VOb2FhU2hpcFdURE9faXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZnN1Tm9hYVNoaXBXVERPL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zYW1vcy5jb2Fwcy5mc3UuZWR1L2h0bWwvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2ZzdU5vYWFTaGlwV1RETy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZnN1Tm9hYVNoaXBXVERPJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkZTVSIsICJmc3VOb2FhU2hpcFdURE8iXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVQbnJ0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURVBucnQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVQbnJ0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5PQUEgU2hpcCBPc2NhciBEeXNvbiBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhLCBOZWFyIFJlYWwgVGltZSIsICJOT0FBIFNoaXAgT3NjYXIgRHlzb24gVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSAoTmVhciBSZWFsIFRpbWUsIHVwZGF0ZWQgZGFpbHkpIGFyZSBmcm9tIHRoZSBTaGlwYm9hcmQgQXV0b21hdGVkIE1ldGVvcm9sb2dpY2FsIGFuZCBPY2Vhbm9ncmFwaGljIFN5c3RlbSAoU0FNT1MpIHByb2dyYW0uXG5cbklNUE9SVEFOVDogQUxXQVlTIFVTRSBUSEUgUVVBTElUWSBGTEFHIERBVEEhIEVhY2ggZGF0YSB2YXJpYWJsZSdzIG1ldGFkYXRhIGluY2x1ZGVzIGEgcWNpbmRleCBhdHRyaWJ1dGUgd2hpY2ggaW5kaWNhdGVzIGEgY2hhcmFjdGVyIG51bWJlciBpbiB0aGUgZmxhZyBkYXRhLiAgQUxXQVlTIGNoZWNrIHRoZSBmbGFnIGRhdGEgZm9yIGVhY2ggcm93IG9mIGRhdGEgdG8gc2VlIHdoaWNoIGRhdGEgaXMgZ29vZCAoZmxhZz0nWicpIGFuZCB3aGljaCBkYXRhIGlzbid0LiAgRm9yIGV4YW1wbGUsIHRvIGV4dHJhY3QganVzdCBkYXRhIHdoZXJlIHRpbWUgKHFjaW5kZXg9MSksIGxhdGl0dWRlIChxY2luZGV4PTIpLCBsb25naXR1ZGUgKHFjaW5kZXg9MyksIGFuZCBhaXJUZW1wZXJhdHVyZSAocWNpbmRleD0xMikgYXJlICdnb29kJyBkYXRhLCBpbmNsdWRlIHRoaXMgY29uc3RyYWludCBpbiB5b3VyIEVSRERBUCBxdWVyeTpcbiAgZmxhZz1+XCJaWlouLi4uLi4uLlouKlwiXG5pbiB5b3VyIHF1ZXJ5LlxuJz1+JyBpbmRpY2F0ZXMgdGhpcyBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBjb25zdHJhaW50LlxuVGhlICdaJ3MgYXJlIGxpdGVyYWwgY2hhcmFjdGVycy4gIEluIHRoaXMgZGF0YXNldCwgJ1onIGluZGljYXRlcyAnZ29vZCcgZGF0YS5cblRoZSAnLidzIHNheSB0byBtYXRjaCBhbnkgY2hhcmFjdGVyLlxuVGhlICcqJyBzYXlzIHRvIG1hdGNoIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIgMCBvciBtb3JlIHRpbWVzLlxuKERvbid0IGluY2x1ZGUgYmFja3NsYXNoZXMgaW4geW91ciBxdWVyeS4pXG5TZWUgdGhlIHR1dG9yaWFsIGZvciByZWd1bGFyIGV4cHJlc3Npb25zIGF0XG5odHRwOi8vd3d3LnZvZ2VsbGEuY29tL3R1dG9yaWFscy9KYXZhUmVndWxhckV4cHJlc3Npb25zL2FydGljbGUuaHRtbFxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZV9pZFxuZXhwb2NvZGVcbmZhY2lsaXR5XG5JRFxuSU1PXG5wbGF0Zm9ybVxucGxhdGZvcm1fdmVyc2lvblxuc2l0ZVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG4uLi4gKDE0IG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2ZzdU5vYWFTaGlwV1RFUG5ydF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZnN1Tm9hYVNoaXBXVEVQbnJ0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2ZzdU5vYWFTaGlwV1RFUG5ydC9pbmRleC5qc29uIiwgImh0dHBzOi8vc2Ftb3MuY29hcHMuZnN1LmVkdS9odG1sLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9mc3VOb2FhU2hpcFdURVBucnQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWZzdU5vYWFTaGlwV1RFUG5ydCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJGU1UiLCAiZnN1Tm9hYVNoaXBXVEVQbnJ0Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RFUC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVQIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RFUC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOT0FBIFNoaXAgT3NjYXIgRHlzb24gVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSwgUXVhbGl0eSBDb250cm9sbGVkIiwgIk5PQUEgU2hpcCBPc2NhciBEeXNvbiBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhIChkZWxheWVkIH4xMCBkYXlzIGZvciBxdWFsaXR5IGNvbnRyb2wpIGFyZSBmcm9tIHRoZSBTaGlwYm9hcmQgQXV0b21hdGVkIE1ldGVvcm9sb2dpY2FsIGFuZCBPY2Vhbm9ncmFwaGljIFN5c3RlbSAoU0FNT1MpIHByb2dyYW0uXG5cbklNUE9SVEFOVDogQUxXQVlTIFVTRSBUSEUgUVVBTElUWSBGTEFHIERBVEEhIEVhY2ggZGF0YSB2YXJpYWJsZSdzIG1ldGFkYXRhIGluY2x1ZGVzIGEgcWNpbmRleCBhdHRyaWJ1dGUgd2hpY2ggaW5kaWNhdGVzIGEgY2hhcmFjdGVyIG51bWJlciBpbiB0aGUgZmxhZyBkYXRhLiAgQUxXQVlTIGNoZWNrIHRoZSBmbGFnIGRhdGEgZm9yIGVhY2ggcm93IG9mIGRhdGEgdG8gc2VlIHdoaWNoIGRhdGEgaXMgZ29vZCAoZmxhZz0nWicpIGFuZCB3aGljaCBkYXRhIGlzbid0LiAgRm9yIGV4YW1wbGUsIHRvIGV4dHJhY3QganVzdCBkYXRhIHdoZXJlIHRpbWUgKHFjaW5kZXg9MSksIGxhdGl0dWRlIChxY2luZGV4PTIpLCBsb25naXR1ZGUgKHFjaW5kZXg9MyksIGFuZCBhaXJUZW1wZXJhdHVyZSAocWNpbmRleD0xMikgYXJlICdnb29kJyBkYXRhLCBpbmNsdWRlIHRoaXMgY29uc3RyYWludCBpbiB5b3VyIEVSRERBUCBxdWVyeTpcbiAgZmxhZz1+XCJaWlouLi4uLi4uLlouKlwiXG5pbiB5b3VyIHF1ZXJ5LlxuJz1+JyBpbmRpY2F0ZXMgdGhpcyBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBjb25zdHJhaW50LlxuVGhlICdaJ3MgYXJlIGxpdGVyYWwgY2hhcmFjdGVycy4gIEluIHRoaXMgZGF0YXNldCwgJ1onIGluZGljYXRlcyAnZ29vZCcgZGF0YS5cblRoZSAnLidzIHNheSB0byBtYXRjaCBhbnkgY2hhcmFjdGVyLlxuVGhlICcqJyBzYXlzIHRvIG1hdGNoIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIgMCBvciBtb3JlIHRpbWVzLlxuKERvbid0IGluY2x1ZGUgYmFja3NsYXNoZXMgaW4geW91ciBxdWVyeS4pXG5TZWUgdGhlIHR1dG9yaWFsIGZvciByZWd1bGFyIGV4cHJlc3Npb25zIGF0XG5odHRwOi8vd3d3LnZvZ2VsbGEuY29tL3R1dG9yaWFscy9KYXZhUmVndWxhckV4cHJlc3Npb25zL2FydGljbGUuaHRtbFxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZV9pZFxuZXhwb2NvZGVcbmZhY2lsaXR5XG5JRFxuSU1PXG5wbGF0Zm9ybVxucGxhdGZvcm1fdmVyc2lvblxuc2l0ZVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG4uLi4gKDE0IG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2ZzdU5vYWFTaGlwV1RFUF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZnN1Tm9hYVNoaXBXVEVQX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2ZzdU5vYWFTaGlwV1RFUC9pbmRleC5qc29uIiwgImh0dHBzOi8vc2Ftb3MuY29hcHMuZnN1LmVkdS9odG1sLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9mc3VOb2FhU2hpcFdURVAucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWZzdU5vYWFTaGlwV1RFUCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJGU1UiLCAiZnN1Tm9hYVNoaXBXVEVQIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RFRW5ydC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVFbnJ0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RFRW5ydC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOT0FBIFNoaXAgT3NjYXIgRWx0b24gU2V0dGUgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSwgTmVhciBSZWFsIFRpbWUiLCAiTk9BQSBTaGlwIE9zY2FyIEVsdG9uIFNldHRlIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEgKE5lYXIgUmVhbCBUaW1lLCB1cGRhdGVkIGRhaWx5KSBhcmUgZnJvbSB0aGUgU2hpcGJvYXJkIEF1dG9tYXRlZCBNZXRlb3JvbG9naWNhbCBhbmQgT2NlYW5vZ3JhcGhpYyBTeXN0ZW0gKFNBTU9TKSBwcm9ncmFtLlxuXG5JTVBPUlRBTlQ6IEFMV0FZUyBVU0UgVEhFIFFVQUxJVFkgRkxBRyBEQVRBISBFYWNoIGRhdGEgdmFyaWFibGUncyBtZXRhZGF0YSBpbmNsdWRlcyBhIHFjaW5kZXggYXR0cmlidXRlIHdoaWNoIGluZGljYXRlcyBhIGNoYXJhY3RlciBudW1iZXIgaW4gdGhlIGZsYWcgZGF0YS4gIEFMV0FZUyBjaGVjayB0aGUgZmxhZyBkYXRhIGZvciBlYWNoIHJvdyBvZiBkYXRhIHRvIHNlZSB3aGljaCBkYXRhIGlzIGdvb2QgKGZsYWc9J1onKSBhbmQgd2hpY2ggZGF0YSBpc24ndC4gIEZvciBleGFtcGxlLCB0byBleHRyYWN0IGp1c3QgZGF0YSB3aGVyZSB0aW1lIChxY2luZGV4PTEpLCBsYXRpdHVkZSAocWNpbmRleD0yKSwgbG9uZ2l0dWRlIChxY2luZGV4PTMpLCBhbmQgYWlyVGVtcGVyYXR1cmUgKHFjaW5kZXg9MTIpIGFyZSAnZ29vZCcgZGF0YSwgaW5jbHVkZSB0aGlzIGNvbnN0cmFpbnQgaW4geW91ciBFUkREQVAgcXVlcnk6XG4gIGZsYWc9flwiWlpaLi4uLi4uLi5aLipcIlxuaW4geW91ciBxdWVyeS4gIFxuXCI9flwiIGluZGljYXRlcyB0aGlzIGlzIGEgcmVndWxhciBleHByZXNzaW9uIGNvbnN0cmFpbnQuXG5UaGUgJ1oncyBhcmUgbGl0ZXJhbCBjaGFyYWN0ZXJzLiAgSW4gdGhpcyBkYXRhc2V0LCAnWicgaW5kaWNhdGVzICdnb29kJyBkYXRhLiBcblRoZSAnLidzIHNheSB0byBtYXRjaCBhbnkgY2hhcmFjdGVyLiAgXG5UaGUgJyonIHNheXMgdG8gbWF0Y2ggdGhlIHByZXZpb3VzIGNoYXJhY3RlciAwIG9yIG1vcmUgdGltZXMuICBcblNlZSB0aGUgdHV0b3JpYWwgZm9yIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXRcbmh0dHA6Ly93d3cudm9nZWxsYS5jb20vdHV0b3JpYWxzL0phdmFSZWd1bGFyRXhwcmVzc2lvbnMvYXJ0aWNsZS5odG1sXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlX2lkXG5leHBvY29kZVxuZmFjaWxpdHlcbklEXG5JTU9cbnBsYXRmb3JtXG5wbGF0Zm9ybV92ZXJzaW9uXG5zaXRlXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmFpclByZXNzdXJlIChBdG1vc3BoZXJpYyBQcmVzc3VyZSwgbWlsbGliYXIpXG4uLi4gKDEzIG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2ZzdU5vYWFTaGlwV1RFRW5ydF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZnN1Tm9hYVNoaXBXVEVFbnJ0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2ZzdU5vYWFTaGlwV1RFRW5ydC9pbmRleC5qc29uIiwgImh0dHBzOi8vc2Ftb3MuY29hcHMuZnN1LmVkdS9odG1sLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9mc3VOb2FhU2hpcFdURUVucnQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWZzdU5vYWFTaGlwV1RFRW5ydCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJGU1UiLCAiZnN1Tm9hYVNoaXBXVEVFbnJ0Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RFRS5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVFIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RFRS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOT0FBIFNoaXAgT3NjYXIgRWx0b24gU2V0dGUgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSwgUXVhbGl0eSBDb250cm9sbGVkIiwgIk5PQUEgU2hpcCBPc2NhciBFbHRvbiBTZXR0ZSBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhIChkZWxheWVkIH4xMCBkYXlzIGZvciBxdWFsaXR5IGNvbnRyb2wpIGFyZSBmcm9tIHRoZSBTaGlwYm9hcmQgQXV0b21hdGVkIE1ldGVvcm9sb2dpY2FsIGFuZCBPY2Vhbm9ncmFwaGljIFN5c3RlbSAoU0FNT1MpIHByb2dyYW0uXG5cbklNUE9SVEFOVDogQUxXQVlTIFVTRSBUSEUgUVVBTElUWSBGTEFHIERBVEEhIEVhY2ggZGF0YSB2YXJpYWJsZSdzIG1ldGFkYXRhIGluY2x1ZGVzIGEgcWNpbmRleCBhdHRyaWJ1dGUgd2hpY2ggaW5kaWNhdGVzIGEgY2hhcmFjdGVyIG51bWJlciBpbiB0aGUgZmxhZyBkYXRhLiAgQUxXQVlTIGNoZWNrIHRoZSBmbGFnIGRhdGEgZm9yIGVhY2ggcm93IG9mIGRhdGEgdG8gc2VlIHdoaWNoIGRhdGEgaXMgZ29vZCAoZmxhZz0nWicpIGFuZCB3aGljaCBkYXRhIGlzbid0LiAgRm9yIGV4YW1wbGUsIHRvIGV4dHJhY3QganVzdCBkYXRhIHdoZXJlIHRpbWUgKHFjaW5kZXg9MSksIGxhdGl0dWRlIChxY2luZGV4PTIpLCBsb25naXR1ZGUgKHFjaW5kZXg9MyksIGFuZCBhaXJUZW1wZXJhdHVyZSAocWNpbmRleD0xMikgYXJlICdnb29kJyBkYXRhLCBpbmNsdWRlIHRoaXMgY29uc3RyYWludCBpbiB5b3VyIEVSRERBUCBxdWVyeTpcbiAgZmxhZz1+XCJaWlouLi4uLi4uLlouKlwiXG5pbiB5b3VyIHF1ZXJ5LiAgXG5cIj1+XCIgaW5kaWNhdGVzIHRoaXMgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24gY29uc3RyYWludC5cblRoZSAnWidzIGFyZSBsaXRlcmFsIGNoYXJhY3RlcnMuICBJbiB0aGlzIGRhdGFzZXQsICdaJyBpbmRpY2F0ZXMgJ2dvb2QnIGRhdGEuIFxuVGhlICcuJ3Mgc2F5IHRvIG1hdGNoIGFueSBjaGFyYWN0ZXIuICBcblRoZSAnKicgc2F5cyB0byBtYXRjaCB0aGUgcHJldmlvdXMgY2hhcmFjdGVyIDAgb3IgbW9yZSB0aW1lcy4gIFxuU2VlIHRoZSB0dXRvcmlhbCBmb3IgcmVndWxhciBleHByZXNzaW9ucyBhdFxuaHR0cDovL3d3dy52b2dlbGxhLmNvbS90dXRvcmlhbHMvSmF2YVJlZ3VsYXJFeHByZXNzaW9ucy9hcnRpY2xlLmh0bWxcblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2VfaWRcbmV4cG9jb2RlXG5mYWNpbGl0eVxuSURcbklNT1xucGxhdGZvcm1cbnBsYXRmb3JtX3ZlcnNpb25cbnNpdGVcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuYWlyUHJlc3N1cmUgKEF0bW9zcGhlcmljIFByZXNzdXJlLCBtaWxsaWJhcilcbi4uLiAoMTMgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZnN1Tm9hYVNoaXBXVEVFX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9mc3VOb2FhU2hpcFdURUVfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZnN1Tm9hYVNoaXBXVEVFL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zYW1vcy5jb2Fwcy5mc3UuZWR1L2h0bWwvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2ZzdU5vYWFTaGlwV1RFRS5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZnN1Tm9hYVNoaXBXVEVFJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkZTVSIsICJmc3VOb2FhU2hpcFdURUUiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVERMbnJ0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURExucnQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVERMbnJ0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5PQUEgU2hpcCBQaXNjZXMgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSwgTmVhciBSZWFsIFRpbWUiLCAiTk9BQSBTaGlwIFBpc2NlcyBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhIChOZWFyIFJlYWwgVGltZSwgdXBkYXRlZCBkYWlseSkgYXJlIGZyb20gdGhlIFNoaXBib2FyZCBBdXRvbWF0ZWQgTWV0ZW9yb2xvZ2ljYWwgYW5kIE9jZWFub2dyYXBoaWMgU3lzdGVtIChTQU1PUykgcHJvZ3JhbS5cblxuSU1QT1JUQU5UOiBBTFdBWVMgVVNFIFRIRSBRVUFMSVRZIEZMQUcgREFUQSEgRWFjaCBkYXRhIHZhcmlhYmxlJ3MgbWV0YWRhdGEgaW5jbHVkZXMgYSBxY2luZGV4IGF0dHJpYnV0ZSB3aGljaCBpbmRpY2F0ZXMgYSBjaGFyYWN0ZXIgbnVtYmVyIGluIHRoZSBmbGFnIGRhdGEuICBBTFdBWVMgY2hlY2sgdGhlIGZsYWcgZGF0YSBmb3IgZWFjaCByb3cgb2YgZGF0YSB0byBzZWUgd2hpY2ggZGF0YSBpcyBnb29kIChmbGFnPSdaJykgYW5kIHdoaWNoIGRhdGEgaXNuJ3QuICBGb3IgZXhhbXBsZSwgdG8gZXh0cmFjdCBqdXN0IGRhdGEgd2hlcmUgdGltZSAocWNpbmRleD0xKSwgbGF0aXR1ZGUgKHFjaW5kZXg9MiksIGxvbmdpdHVkZSAocWNpbmRleD0zKSwgYW5kIGFpclRlbXBlcmF0dXJlIChxY2luZGV4PTEyKSBhcmUgJ2dvb2QnIGRhdGEsIGluY2x1ZGUgdGhpcyBjb25zdHJhaW50IGluIHlvdXIgRVJEREFQIHF1ZXJ5OlxuICBmbGFnPX5cIlpaWi4uLi4uLi4uWi4qXCJcbmluIHlvdXIgcXVlcnkuICBcblwiPX5cIiBpbmRpY2F0ZXMgdGhpcyBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBjb25zdHJhaW50LlxuVGhlICdaJ3MgYXJlIGxpdGVyYWwgY2hhcmFjdGVycy4gIEluIHRoaXMgZGF0YXNldCwgJ1onIGluZGljYXRlcyAnZ29vZCcgZGF0YS4gXG5UaGUgJy4ncyBzYXkgdG8gbWF0Y2ggYW55IGNoYXJhY3Rlci4gIFxuVGhlICcqJyBzYXlzIHRvIG1hdGNoIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIgMCBvciBtb3JlIHRpbWVzLiAgXG5TZWUgdGhlIHR1dG9yaWFsIGZvciByZWd1bGFyIGV4cHJlc3Npb25zIGF0XG5odHRwOi8vd3d3LnZvZ2VsbGEuY29tL3R1dG9yaWFscy9KYXZhUmVndWxhckV4cHJlc3Npb25zL2FydGljbGUuaHRtbFxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZV9pZFxuZXhwb2NvZGVcbmZhY2lsaXR5XG5JRFxuSU1PXG5wbGF0Zm9ybVxucGxhdGZvcm1fdmVyc2lvblxuc2l0ZVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5haXJQcmVzc3VyZSAoQXRtb3NwaGVyaWMgUHJlc3N1cmUsIG1pbGxpYmFyKVxuLi4uICgxMyBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9mc3VOb2FhU2hpcFdURExucnRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2ZzdU5vYWFTaGlwV1RETG5ydF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9mc3VOb2FhU2hpcFdURExucnQvaW5kZXguanNvbiIsICJodHRwczovL3NhbW9zLmNvYXBzLmZzdS5lZHUvaHRtbC8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZnN1Tm9hYVNoaXBXVERMbnJ0LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1mc3VOb2FhU2hpcFdURExucnQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiRlNVIiwgImZzdU5vYWFTaGlwV1RETG5ydCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdUREwuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RETCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdUREwuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTk9BQSBTaGlwIFBpc2NlcyBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhLCBRdWFsaXR5IENvbnRyb2xsZWQiLCAiTk9BQSBTaGlwIFBpc2NlcyBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhIChkZWxheWVkIH4xMCBkYXlzIGZvciBxdWFsaXR5IGNvbnRyb2wpIGFyZSBmcm9tIHRoZSBTaGlwYm9hcmQgQXV0b21hdGVkIE1ldGVvcm9sb2dpY2FsIGFuZCBPY2Vhbm9ncmFwaGljIFN5c3RlbSAoU0FNT1MpIHByb2dyYW0uXG5cbklNUE9SVEFOVDogQUxXQVlTIFVTRSBUSEUgUVVBTElUWSBGTEFHIERBVEEhIEVhY2ggZGF0YSB2YXJpYWJsZSdzIG1ldGFkYXRhIGluY2x1ZGVzIGEgcWNpbmRleCBhdHRyaWJ1dGUgd2hpY2ggaW5kaWNhdGVzIGEgY2hhcmFjdGVyIG51bWJlciBpbiB0aGUgZmxhZyBkYXRhLiAgQUxXQVlTIGNoZWNrIHRoZSBmbGFnIGRhdGEgZm9yIGVhY2ggcm93IG9mIGRhdGEgdG8gc2VlIHdoaWNoIGRhdGEgaXMgZ29vZCAoZmxhZz0nWicpIGFuZCB3aGljaCBkYXRhIGlzbid0LiAgRm9yIGV4YW1wbGUsIHRvIGV4dHJhY3QganVzdCBkYXRhIHdoZXJlIHRpbWUgKHFjaW5kZXg9MSksIGxhdGl0dWRlIChxY2luZGV4PTIpLCBsb25naXR1ZGUgKHFjaW5kZXg9MyksIGFuZCBhaXJUZW1wZXJhdHVyZSAocWNpbmRleD0xMikgYXJlICdnb29kJyBkYXRhLCBpbmNsdWRlIHRoaXMgY29uc3RyYWludCBpbiB5b3VyIEVSRERBUCBxdWVyeTpcbiAgZmxhZz1+XCJaWlouLi4uLi4uLlouKlwiXG5pbiB5b3VyIHF1ZXJ5LiAgXG5cIj1+XCIgaW5kaWNhdGVzIHRoaXMgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24gY29uc3RyYWludC5cblRoZSAnWidzIGFyZSBsaXRlcmFsIGNoYXJhY3RlcnMuICBJbiB0aGlzIGRhdGFzZXQsICdaJyBpbmRpY2F0ZXMgJ2dvb2QnIGRhdGEuIFxuVGhlICcuJ3Mgc2F5IHRvIG1hdGNoIGFueSBjaGFyYWN0ZXIuICBcblRoZSAnKicgc2F5cyB0byBtYXRjaCB0aGUgcHJldmlvdXMgY2hhcmFjdGVyIDAgb3IgbW9yZSB0aW1lcy4gIFxuU2VlIHRoZSB0dXRvcmlhbCBmb3IgcmVndWxhciBleHByZXNzaW9ucyBhdFxuaHR0cDovL3d3dy52b2dlbGxhLmNvbS90dXRvcmlhbHMvSmF2YVJlZ3VsYXJFeHByZXNzaW9ucy9hcnRpY2xlLmh0bWxcblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2VfaWRcbmV4cG9jb2RlXG5mYWNpbGl0eVxuSURcbklNT1xucGxhdGZvcm1cbnBsYXRmb3JtX3ZlcnNpb25cbnNpdGVcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuYWlyUHJlc3N1cmUgKEF0bW9zcGhlcmljIFByZXNzdXJlLCBtaWxsaWJhcilcbi4uLiAoMTMgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZnN1Tm9hYVNoaXBXVERMX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9mc3VOb2FhU2hpcFdURExfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZnN1Tm9hYVNoaXBXVERML2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zYW1vcy5jb2Fwcy5mc3UuZWR1L2h0bWwvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2ZzdU5vYWFTaGlwV1RETC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZnN1Tm9hYVNoaXBXVERMJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkZTVSIsICJmc3VOb2FhU2hpcFdUREwiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVGbnJ0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURUZucnQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVGbnJ0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5PQUEgU2hpcCBSYWluaWVyIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEsIE5lYXIgUmVhbCBUaW1lIiwgIk5PQUEgU2hpcCBSYWluaWVyIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEgKE5lYXIgUmVhbCBUaW1lLCB1cGRhdGVkIGRhaWx5KSBhcmUgZnJvbSB0aGUgU2hpcGJvYXJkIEF1dG9tYXRlZCBNZXRlb3JvbG9naWNhbCBhbmQgT2NlYW5vZ3JhcGhpYyBTeXN0ZW0gKFNBTU9TKSBwcm9ncmFtLlxuXG5JTVBPUlRBTlQ6IEFMV0FZUyBVU0UgVEhFIFFVQUxJVFkgRkxBRyBEQVRBISBFYWNoIGRhdGEgdmFyaWFibGUncyBtZXRhZGF0YSBpbmNsdWRlcyBhIHFjaW5kZXggYXR0cmlidXRlIHdoaWNoIGluZGljYXRlcyBhIGNoYXJhY3RlciBudW1iZXIgaW4gdGhlIGZsYWcgZGF0YS4gIEFMV0FZUyBjaGVjayB0aGUgZmxhZyBkYXRhIGZvciBlYWNoIHJvdyBvZiBkYXRhIHRvIHNlZSB3aGljaCBkYXRhIGlzIGdvb2QgKGZsYWc9J1onKSBhbmQgd2hpY2ggZGF0YSBpc24ndC4gIEZvciBleGFtcGxlLCB0byBleHRyYWN0IGp1c3QgZGF0YSB3aGVyZSB0aW1lIChxY2luZGV4PTEpLCBsYXRpdHVkZSAocWNpbmRleD0yKSwgbG9uZ2l0dWRlIChxY2luZGV4PTMpLCBhbmQgYWlyVGVtcGVyYXR1cmUgKHFjaW5kZXg9MTIpIGFyZSAnZ29vZCcgZGF0YSwgaW5jbHVkZSB0aGlzIGNvbnN0cmFpbnQgaW4geW91ciBFUkREQVAgcXVlcnk6XG4gIGZsYWc9flwiWlpaLi4uLi4uLi5aLipcIlxuaW4geW91ciBxdWVyeS4gIFxuXCI9flwiIGluZGljYXRlcyB0aGlzIGlzIGEgcmVndWxhciBleHByZXNzaW9uIGNvbnN0cmFpbnQuXG5UaGUgJ1oncyBhcmUgbGl0ZXJhbCBjaGFyYWN0ZXJzLiAgSW4gdGhpcyBkYXRhc2V0LCAnWicgaW5kaWNhdGVzICdnb29kJyBkYXRhLiBcblRoZSAnLidzIHNheSB0byBtYXRjaCBhbnkgY2hhcmFjdGVyLiAgXG5UaGUgJyonIHNheXMgdG8gbWF0Y2ggdGhlIHByZXZpb3VzIGNoYXJhY3RlciAwIG9yIG1vcmUgdGltZXMuICBcblNlZSB0aGUgdHV0b3JpYWwgZm9yIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXRcbmh0dHA6Ly93d3cudm9nZWxsYS5jb20vdHV0b3JpYWxzL0phdmFSZWd1bGFyRXhwcmVzc2lvbnMvYXJ0aWNsZS5odG1sXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlX2lkXG5leHBvY29kZVxuZmFjaWxpdHlcbklEXG5JTU9cbnBsYXRmb3JtXG5wbGF0Zm9ybV92ZXJzaW9uXG5zaXRlXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmFpclByZXNzdXJlIChBdG1vc3BoZXJpYyBQcmVzc3VyZSwgbWlsbGliYXIpXG4uLi4gKDEzIG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2ZzdU5vYWFTaGlwV1RFRm5ydF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZnN1Tm9hYVNoaXBXVEVGbnJ0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2ZzdU5vYWFTaGlwV1RFRm5ydC9pbmRleC5qc29uIiwgImh0dHBzOi8vc2Ftb3MuY29hcHMuZnN1LmVkdS9odG1sLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9mc3VOb2FhU2hpcFdURUZucnQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWZzdU5vYWFTaGlwV1RFRm5ydCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJGU1UiLCAiZnN1Tm9hYVNoaXBXVEVGbnJ0Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RFRi5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVGIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RFRi5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOT0FBIFNoaXAgUmFpbmllciBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhLCBRdWFsaXR5IENvbnRyb2xsZWQiLCAiTk9BQSBTaGlwIFJhaW5pZXIgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSAoZGVsYXllZCB+MTAgZGF5cyBmb3IgcXVhbGl0eSBjb250cm9sKSBhcmUgZnJvbSB0aGUgU2hpcGJvYXJkIEF1dG9tYXRlZCBNZXRlb3JvbG9naWNhbCBhbmQgT2NlYW5vZ3JhcGhpYyBTeXN0ZW0gKFNBTU9TKSBwcm9ncmFtLlxuXG5JTVBPUlRBTlQ6IEFMV0FZUyBVU0UgVEhFIFFVQUxJVFkgRkxBRyBEQVRBISBFYWNoIGRhdGEgdmFyaWFibGUncyBtZXRhZGF0YSBpbmNsdWRlcyBhIHFjaW5kZXggYXR0cmlidXRlIHdoaWNoIGluZGljYXRlcyBhIGNoYXJhY3RlciBudW1iZXIgaW4gdGhlIGZsYWcgZGF0YS4gIEFMV0FZUyBjaGVjayB0aGUgZmxhZyBkYXRhIGZvciBlYWNoIHJvdyBvZiBkYXRhIHRvIHNlZSB3aGljaCBkYXRhIGlzIGdvb2QgKGZsYWc9J1onKSBhbmQgd2hpY2ggZGF0YSBpc24ndC4gIEZvciBleGFtcGxlLCB0byBleHRyYWN0IGp1c3QgZGF0YSB3aGVyZSB0aW1lIChxY2luZGV4PTEpLCBsYXRpdHVkZSAocWNpbmRleD0yKSwgbG9uZ2l0dWRlIChxY2luZGV4PTMpLCBhbmQgYWlyVGVtcGVyYXR1cmUgKHFjaW5kZXg9MTIpIGFyZSAnZ29vZCcgZGF0YSwgaW5jbHVkZSB0aGlzIGNvbnN0cmFpbnQgaW4geW91ciBFUkREQVAgcXVlcnk6XG4gIGZsYWc9flwiWlpaLi4uLi4uLi5aLipcIlxuaW4geW91ciBxdWVyeS4gIFxuXCI9flwiIGluZGljYXRlcyB0aGlzIGlzIGEgcmVndWxhciBleHByZXNzaW9uIGNvbnN0cmFpbnQuXG5UaGUgJ1oncyBhcmUgbGl0ZXJhbCBjaGFyYWN0ZXJzLiAgSW4gdGhpcyBkYXRhc2V0LCAnWicgaW5kaWNhdGVzICdnb29kJyBkYXRhLiBcblRoZSAnLidzIHNheSB0byBtYXRjaCBhbnkgY2hhcmFjdGVyLiAgXG5UaGUgJyonIHNheXMgdG8gbWF0Y2ggdGhlIHByZXZpb3VzIGNoYXJhY3RlciAwIG9yIG1vcmUgdGltZXMuICBcblNlZSB0aGUgdHV0b3JpYWwgZm9yIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXRcbmh0dHA6Ly93d3cudm9nZWxsYS5jb20vdHV0b3JpYWxzL0phdmFSZWd1bGFyRXhwcmVzc2lvbnMvYXJ0aWNsZS5odG1sXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlX2lkXG5leHBvY29kZVxuZmFjaWxpdHlcbklEXG5JTU9cbnBsYXRmb3JtXG5wbGF0Zm9ybV92ZXJzaW9uXG5zaXRlXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmFpclByZXNzdXJlIChBdG1vc3BoZXJpYyBQcmVzc3VyZSwgbWlsbGliYXIpXG4uLi4gKDEzIG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2ZzdU5vYWFTaGlwV1RFRl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZnN1Tm9hYVNoaXBXVEVGX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2ZzdU5vYWFTaGlwV1RFRi9pbmRleC5qc29uIiwgImh0dHBzOi8vc2Ftb3MuY29hcHMuZnN1LmVkdS9odG1sLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9mc3VOb2FhU2hpcFdURUYucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWZzdU5vYWFTaGlwV1RFRiZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJGU1UiLCAiZnN1Tm9hYVNoaXBXVEVGIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RFQ25ydC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVDbnJ0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RFQ25ydC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOT0FBIFNoaXAgUm9uYWxkIEJyb3duIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEsIE5lYXIgUmVhbCBUaW1lIiwgIk5PQUEgU2hpcCBSb25hbGQgQnJvd24gVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSAoTmVhciBSZWFsIFRpbWUsIHVwZGF0ZWQgZGFpbHkpIGFyZSBmcm9tIHRoZSBTaGlwYm9hcmQgQXV0b21hdGVkIE1ldGVvcm9sb2dpY2FsIGFuZCBPY2Vhbm9ncmFwaGljIFN5c3RlbSAoU0FNT1MpIHByb2dyYW0uXG5cbklNUE9SVEFOVDogQUxXQVlTIFVTRSBUSEUgUVVBTElUWSBGTEFHIERBVEEhIEVhY2ggZGF0YSB2YXJpYWJsZSdzIG1ldGFkYXRhIGluY2x1ZGVzIGEgcWNpbmRleCBhdHRyaWJ1dGUgd2hpY2ggaW5kaWNhdGVzIGEgY2hhcmFjdGVyIG51bWJlciBpbiB0aGUgZmxhZyBkYXRhLiAgQUxXQVlTIGNoZWNrIHRoZSBmbGFnIGRhdGEgZm9yIGVhY2ggcm93IG9mIGRhdGEgdG8gc2VlIHdoaWNoIGRhdGEgaXMgZ29vZCAoZmxhZz0nWicpIGFuZCB3aGljaCBkYXRhIGlzbid0LiAgRm9yIGV4YW1wbGUsIHRvIGV4dHJhY3QganVzdCBkYXRhIHdoZXJlIHRpbWUgKHFjaW5kZXg9MSksIGxhdGl0dWRlIChxY2luZGV4PTIpLCBsb25naXR1ZGUgKHFjaW5kZXg9MyksIGFuZCBhaXJUZW1wZXJhdHVyZSAocWNpbmRleD0xMikgYXJlICdnb29kJyBkYXRhLCBpbmNsdWRlIHRoaXMgY29uc3RyYWludCBpbiB5b3VyIEVSRERBUCBxdWVyeTpcbiAgZmxhZz1+XCJaWlouLi4uLi4uLlouKlwiXG5pbiB5b3VyIHF1ZXJ5LiAgXG5cIj1+XCIgaW5kaWNhdGVzIHRoaXMgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24gY29uc3RyYWludC5cblRoZSAnWidzIGFyZSBsaXRlcmFsIGNoYXJhY3RlcnMuICBJbiB0aGlzIGRhdGFzZXQsICdaJyBpbmRpY2F0ZXMgJ2dvb2QnIGRhdGEuIFxuVGhlICcuJ3Mgc2F5IHRvIG1hdGNoIGFueSBjaGFyYWN0ZXIuICBcblRoZSAnKicgc2F5cyB0byBtYXRjaCB0aGUgcHJldmlvdXMgY2hhcmFjdGVyIDAgb3IgbW9yZSB0aW1lcy4gIFxuU2VlIHRoZSB0dXRvcmlhbCBmb3IgcmVndWxhciBleHByZXNzaW9ucyBhdFxuaHR0cDovL3d3dy52b2dlbGxhLmNvbS90dXRvcmlhbHMvSmF2YVJlZ3VsYXJFeHByZXNzaW9ucy9hcnRpY2xlLmh0bWxcblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2VfaWRcbmV4cG9jb2RlXG5mYWNpbGl0eVxuSURcbklNT1xucGxhdGZvcm1cbnBsYXRmb3JtX3ZlcnNpb25cbnNpdGVcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuYWlyUHJlc3N1cmUgKEF0bW9zcGhlcmljIFByZXNzdXJlLCBtaWxsaWJhcilcbi4uLiAoMTQgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZnN1Tm9hYVNoaXBXVEVDbnJ0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9mc3VOb2FhU2hpcFdURUNucnRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZnN1Tm9hYVNoaXBXVEVDbnJ0L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zYW1vcy5jb2Fwcy5mc3UuZWR1L2h0bWwvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2ZzdU5vYWFTaGlwV1RFQ25ydC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZnN1Tm9hYVNoaXBXVEVDbnJ0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkZTVSIsICJmc3VOb2FhU2hpcFdURUNucnQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVDLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURUMiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVDLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5PQUEgU2hpcCBSb25hbGQgQnJvd24gVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSwgUXVhbGl0eSBDb250cm9sbGVkIiwgIk5PQUEgU2hpcCBSb25hbGQgQnJvd24gVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSAoZGVsYXllZCB+MTAgZGF5cyBmb3IgcXVhbGl0eSBjb250cm9sKSBhcmUgZnJvbSB0aGUgU2hpcGJvYXJkIEF1dG9tYXRlZCBNZXRlb3JvbG9naWNhbCBhbmQgT2NlYW5vZ3JhcGhpYyBTeXN0ZW0gKFNBTU9TKSBwcm9ncmFtLlxuXG5JTVBPUlRBTlQ6IEFMV0FZUyBVU0UgVEhFIFFVQUxJVFkgRkxBRyBEQVRBISBFYWNoIGRhdGEgdmFyaWFibGUncyBtZXRhZGF0YSBpbmNsdWRlcyBhIHFjaW5kZXggYXR0cmlidXRlIHdoaWNoIGluZGljYXRlcyBhIGNoYXJhY3RlciBudW1iZXIgaW4gdGhlIGZsYWcgZGF0YS4gIEFMV0FZUyBjaGVjayB0aGUgZmxhZyBkYXRhIGZvciBlYWNoIHJvdyBvZiBkYXRhIHRvIHNlZSB3aGljaCBkYXRhIGlzIGdvb2QgKGZsYWc9J1onKSBhbmQgd2hpY2ggZGF0YSBpc24ndC4gIEZvciBleGFtcGxlLCB0byBleHRyYWN0IGp1c3QgZGF0YSB3aGVyZSB0aW1lIChxY2luZGV4PTEpLCBsYXRpdHVkZSAocWNpbmRleD0yKSwgbG9uZ2l0dWRlIChxY2luZGV4PTMpLCBhbmQgYWlyVGVtcGVyYXR1cmUgKHFjaW5kZXg9MTIpIGFyZSAnZ29vZCcgZGF0YSwgaW5jbHVkZSB0aGlzIGNvbnN0cmFpbnQgaW4geW91ciBFUkREQVAgcXVlcnk6XG4gIGZsYWc9flwiWlpaLi4uLi4uLi5aLipcIlxuaW4geW91ciBxdWVyeS4gIFxuXCI9flwiIGluZGljYXRlcyB0aGlzIGlzIGEgcmVndWxhciBleHByZXNzaW9uIGNvbnN0cmFpbnQuXG5UaGUgJ1oncyBhcmUgbGl0ZXJhbCBjaGFyYWN0ZXJzLiAgSW4gdGhpcyBkYXRhc2V0LCAnWicgaW5kaWNhdGVzICdnb29kJyBkYXRhLiBcblRoZSAnLidzIHNheSB0byBtYXRjaCBhbnkgY2hhcmFjdGVyLiAgXG5UaGUgJyonIHNheXMgdG8gbWF0Y2ggdGhlIHByZXZpb3VzIGNoYXJhY3RlciAwIG9yIG1vcmUgdGltZXMuICBcblNlZSB0aGUgdHV0b3JpYWwgZm9yIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXRcbmh0dHA6Ly93d3cudm9nZWxsYS5jb20vdHV0b3JpYWxzL0phdmFSZWd1bGFyRXhwcmVzc2lvbnMvYXJ0aWNsZS5odG1sXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlX2lkXG5leHBvY29kZVxuZmFjaWxpdHlcbklEXG5JTU9cbnBsYXRmb3JtXG5wbGF0Zm9ybV92ZXJzaW9uXG5zaXRlXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmFpclByZXNzdXJlIChBdG1vc3BoZXJpYyBQcmVzc3VyZSwgbWlsbGliYXIpXG4uLi4gKDE0IG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2ZzdU5vYWFTaGlwV1RFQ19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZnN1Tm9hYVNoaXBXVEVDX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2ZzdU5vYWFTaGlwV1RFQy9pbmRleC5qc29uIiwgImh0dHBzOi8vc2Ftb3MuY29hcHMuZnN1LmVkdS9odG1sLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9mc3VOb2FhU2hpcFdURUMucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWZzdU5vYWFTaGlwV1RFQyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJGU1UiLCAiZnN1Tm9hYVNoaXBXVEVDIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZE5waC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkTnBoIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZE5waC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOb3J0aCBQYWNpZmljIEhpZ2gsIDE5NjcgLSBwcmVzZW50IiwgIlZhcmlhdGlvbnMgaW4gbGFyZ2Utc2NhbGUgYXRtb3NwaGVyaWMgZm9yY2luZyBpbmZsdWVuY2UgdXB3ZWxsaW5nIGR5bmFtaWNzIGFuZCBlY29zeXN0ZW0gcHJvZHVjdGl2aXR5IGluIHRoZSBDYWxpZm9ybmlhIEN1cnJlbnQgU3lzdGVtIChDQ1MpLiBJbiB0aGlzIHBhcGVyLCB3ZSBjaGFyYWN0ZXJpemUgaW50ZXJhbm51YWwgdmFyaWFiaWxpdHkgb2YgdGhlIE5vcnRoIFBhY2lmaWMgSGlnaCBvdmVyIDQwIHllYXJzIGFuZCBpbnZlc3RpZ2F0ZSBob3cgdmFyaWF0aW9uIGluIGl0cyBhbXBsaXR1ZGUgYW5kIHBvc2l0aW9uIGFmZmVjdCB1cHdlbGxpbmcgYW5kIGJpb2xvZ3kuIFdlIGRldmVsb3AgYSB3aW50ZXIgdXB3ZWxsaW5nIFwicHJlLWNvbmRpdGlvbmluZ1wiIGluZGV4IGFuZCBkZW1vbnN0cmF0ZSBpdHMgdXRpbGl0eSB0byB1bmRlcnN0YW5kaW5nIGJpb2xvZ2ljYWwgcHJvY2Vzc2VzLiBWYXJpYXRpb24gaW4gdGhlIHdpbnRlciBOUEggY2FuIGJlIHdlbGwgZGVzY3JpYmVkIGJ5IGl0cyBhcmVhbCBleHRlbnQgYW5kIG1heGltdW0gcHJlc3N1cmUsIHdoaWNoIGluIHR1cm4gaXMgcHJlZGljdGl2ZSBvZiB3aW50ZXIgdXB3ZWxsaW5nLiBPdXIgd2ludGVyIHByZS1jb25kaXRpb25pbmcgaW5kZXggZXhwbGFpbmVkIDY0JSBvZiB0aGUgdmFyaWF0aW9uIGluIGJpb2xvZ2ljYWwgcmVzcG9uc2VzIChmaXNoIGFuZCBzZWFiaXJkcykuIFVuZGVyc3RhbmRpbmcgY2hhcmFjdGVyaXN0aWNzIG9mIHRoZSBOUEggaW4gd2ludGVyIGlzIHRoZXJlZm9yZSBjcml0aWNhbCB0byBwcmVkaWN0aW5nIGJpb2xvZ2ljYWwgcmVzcG9uc2VzIGluIHRoZSBDQ1MuXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnllYXJcbm1vbnRoIChNb250aCAoMSAtIDEyKSlcbmxvbmdpdHVkZSAoTG9uZ2l0dWRlIG9mIHRoZSBDZW50ZXIgb2YgdGhlIE5QSCwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKExhdGl0dWRlIG9mIHRoZSBDZW50ZXIgb2YgdGhlIE5QSCwgZGVncmVlc19ub3J0aClcbmFyZWEgKEFyZWFsIEV4dGVudCBvZiB0aGUgMTAyMCBoUGEgQ29udG91ciwga20yKVxubWF4U0xQIChNYXhpbXVtIFNlYSBMZXZlbCBQcmVzc3VyZSwgaFBhKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZE5waF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkTnBoX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZE5waC9pbmRleC5qc29uIiwgImh0dHBzOi8vb25saW5lbGlicmFyeS53aWxleS5jb20vZG9pLzEwLjEwMDIvZ3JsLjUwMTAwL2Fic3RyYWN0IiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZE5waC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkTnBoJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgRVJEIiwgImVyZE5waCJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkUGN1aSIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRQY3VpLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5vcnRoIFBhY2lmaWMgSGlnaCwgUHJlLWNvbmRpdGlvbmluZyBDdW11bGF0aXZlIFVwd2VsbGluZyBJbmRleCwgMTk2NyAtIHByZXNlbnQiLCAiVmFyaWF0aW9ucyBpbiBsYXJnZS1zY2FsZSBhdG1vc3BoZXJpYyBmb3JjaW5nIGluZmx1ZW5jZSB1cHdlbGxpbmcgZHluYW1pY3MgYW5kIGVjb3N5c3RlbSBwcm9kdWN0aXZpdHkgaW4gdGhlIENhbGlmb3JuaWEgQ3VycmVudCBTeXN0ZW0gKENDUykuIEluIHRoaXMgcGFwZXIsIHdlIGNoYXJhY3Rlcml6ZSBpbnRlcmFubnVhbCB2YXJpYWJpbGl0eSBvZiB0aGUgTm9ydGggUGFjaWZpYyBIaWdoIG92ZXIgNDAgeWVhcnMgYW5kIGludmVzdGlnYXRlIGhvdyB2YXJpYXRpb24gaW4gaXRzIGFtcGxpdHVkZSBhbmQgcG9zaXRpb24gYWZmZWN0IHVwd2VsbGluZyBhbmQgYmlvbG9neS4gV2UgZGV2ZWxvcCBhIHdpbnRlciB1cHdlbGxpbmcgXCJwcmUtY29uZGl0aW9uaW5nXCIgaW5kZXggYW5kIGRlbW9uc3RyYXRlIGl0cyB1dGlsaXR5IHRvIHVuZGVyc3RhbmRpbmcgYmlvbG9naWNhbCBwcm9jZXNzZXMuIFZhcmlhdGlvbiBpbiB0aGUgd2ludGVyIE5QSCBjYW4gYmUgd2VsbCBkZXNjcmliZWQgYnkgaXRzIGFyZWFsIGV4dGVudCBhbmQgbWF4aW11bSBwcmVzc3VyZSwgd2hpY2ggaW4gdHVybiBpcyBwcmVkaWN0aXZlIG9mIHdpbnRlciB1cHdlbGxpbmcuIE91ciB3aW50ZXIgcHJlLWNvbmRpdGlvbmluZyBpbmRleCBleHBsYWluZWQgNjQlIG9mIHRoZSB2YXJpYXRpb24gaW4gYmlvbG9naWNhbCByZXNwb25zZXMgKGZpc2ggYW5kIHNlYWJpcmRzKS4gVW5kZXJzdGFuZGluZyBjaGFyYWN0ZXJpc3RpY3Mgb2YgdGhlIE5QSCBpbiB3aW50ZXIgaXMgdGhlcmVmb3JlIGNyaXRpY2FsIHRvIHByZWRpY3RpbmcgYmlvbG9naWNhbCByZXNwb25zZXMgaW4gdGhlIENDUy5cblxuY2RtX2RhdGFfdHlwZSA9IE90aGVyXG5WQVJJQUJMRVM6XG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxucGN1aTMzTiAoUENVSSBhdCAzM04sIG1eMyBzXi0xIDEwMG1eLTEpXG5wY3VpMzZOIChQQ1VJIGF0IDM2TiwgbV4zIHNeLTEgMTAwbV4tMSlcbnBjdWkzOU4gKFBDVUkgYXQgMzlOLCBtXjMgc14tMSAxMDBtXi0xKVxucGN1aTQyTiAoUENVSSBhdCA0Mk4sIG1eMyBzXi0xIDEwMG1eLTEpXG5wY3VpNDVOIChQQ1VJIGF0IDQ1TiwgbV4zIHNeLTEgMTAwbV4tMSlcbnBjdWk0OE4gKFBDVUkgYXQgNDhOLCBtXjMgc14tMSAxMDBtXi0xKVxuIiwgIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRQY3VpL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vbmxpbmVsaWJyYXJ5LndpbGV5LmNvbS9kb2kvMTAuMTAwMi9ncmwuNTAxMDAvYWJzdHJhY3QiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkUGN1aS5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkUGN1aSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIEVSRCIsICJlcmRQY3VpIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF80M2E4XzZkNmRfOTA1Mi5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0XzQzYThfNmQ2ZF85MDUyIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF80M2E4XzZkNmRfOTA1Mi5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOb3J0aHdlc3Rlcm4gSGF3YWlpYW4gSXNsYW5kcywgQ29yYWwgUmVlZiBNb25pdG9yaW5nLCBGaXNoIFN1cnZleXMsIEJlbHQgVHJhbnNlY3RzIChCTFQpIiwgIlBhcGFoYW5hdW1va3Vha2VhIE1hcmluZSBOYXRpb25hbCBNb251bWVudCAoUE1OTSkgRmlzaCBTdG9jayBEYXRhIGZyb20gUmFwaWQgRWNvbG9naWNhbCBBc3Nlc3NtZW50cyAoUkVBcylcblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbm1pbmltdW1EZXB0aEluTWV0ZXJzXG5tYXhpbXVtRGVwdGhJbk1ldGVyc1xuaXNsYW5kR3JvdXBcbnZlcm5hY3VsYXJOYW1lXG5zY2llbnRpZmljTmFtZVxub2lkXG5tb2RpZmllZFxuZGF0YXNldElEXG5kYXRhc2V0TmFtZVxuaW5zdGl0dXRpb25Db2RlXG5jb2xsZWN0aW9uQ29kZVxuaW5zdGl0dXRpb25JRFxuY29sbGVjdGlvbklEXG5vd25lckluc3RpdHV0aW9uQ29kZVxuYmFzaXNPZlJlY29yZFxuY2F0YWxvZ051bWJlclxudGF4b25SYW5rXG52ZXJiYXRpbUNvb3JkaW5hdGVzXG52ZXJiYXRpbVNSU1xuZ2VvZGV0aWNEYXR1bVxuY29vcmRpbmF0ZVVuY2VydGFpbnR5SW5NZXRlcnNcbmdlb3JlZmVyZW5jZWRCeVxuZ2VvcmVmZXJlbmNlUHJvdG9jb2xcbi4uLiAoNTAgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvaGF3YWlpX3NvZXN0XzQzYThfNmQ2ZF85MDUyX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9oYXdhaWlfc29lc3RfNDNhOF82ZDZkXzkwNTJfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vaGF3YWlpX3NvZXN0XzQzYThfNmQ2ZF85MDUyL2luZGV4Lmpzb24iLCAiaHR0cDovL3d3dy5wYXBhaGFuYXVtb2t1YWtlYS5nb3YvcmVzZWFyY2gvd2VsY29tZS5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2hhd2FpaV9zb2VzdF80M2E4XzZkNmRfOTA1Mi5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9aGF3YWlpX3NvZXN0XzQzYThfNmQ2ZF85MDUyJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIlVTRE9DL05PQUEvTk9TL1BNTk0iLCAiaGF3YWlpX3NvZXN0XzQzYThfNmQ2ZF85MDUyIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF82OGYyX2QxN2RfZDQxMy5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0XzY4ZjJfZDE3ZF9kNDEzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF82OGYyX2QxN2RfZDQxMy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOb3J0aHdlc3Rlcm4gSGF3YWlpYW4gSXNsYW5kcywgQ29yYWwgUmVlZiBNb25pdG9yaW5nLCBGaXNoIFN1cnZleXMsIEJlbHQgVHJhbnNlY3RzICh2QkxUKSIsICJQYXBhaGFuYXVtb2t1YWtlYSBNYXJpbmUgTmF0aW9uYWwgTW9udW1lbnQgKFBNTk0pIEZpc2ggU3RvY2sgRGF0YSBmcm9tIFJhcGlkIEVjb2xvZ2ljYWwgQXNzZXNzbWVudHMgKFJFQXMpXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5taW5pbXVtRGVwdGhJbk1ldGVyc1xubWF4aW11bURlcHRoSW5NZXRlcnNcbmlzbGFuZEdyb3VwXG52ZXJuYWN1bGFyTmFtZVxuc2NpZW50aWZpY05hbWVcbm9pZFxubW9kaWZpZWRcbmRhdGFzZXRJRFxuZGF0YXNldE5hbWVcbmluc3RpdHV0aW9uQ29kZVxuY29sbGVjdGlvbkNvZGVcbmluc3RpdHV0aW9uSURcbmNvbGxlY3Rpb25JRFxub3duZXJJbnN0aXR1dGlvbkNvZGVcbmJhc2lzT2ZSZWNvcmRcbmNhdGFsb2dOdW1iZXJcbnRheG9uUmFua1xudmVyYmF0aW1Db29yZGluYXRlc1xudmVyYmF0aW1TUlNcbmdlb2RldGljRGF0dW1cbmNvb3JkaW5hdGVVbmNlcnRhaW50eUluTWV0ZXJzXG5nZW9yZWZlcmVuY2VkQnlcbmdlb3JlZmVyZW5jZVByb3RvY29sXG4uLi4gKDUwIG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2hhd2FpaV9zb2VzdF82OGYyX2QxN2RfZDQxM19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvaGF3YWlpX3NvZXN0XzY4ZjJfZDE3ZF9kNDEzX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2hhd2FpaV9zb2VzdF82OGYyX2QxN2RfZDQxMy9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cucGFwYWhhbmF1bW9rdWFrZWEuZ292L3Jlc2VhcmNoL3dlbGNvbWUuaHRtbCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9oYXdhaWlfc29lc3RfNjhmMl9kMTdkX2Q0MTMucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWhhd2FpaV9zb2VzdF82OGYyX2QxN2RfZDQxMyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJVU0RPQy9OT0FBL05PUy9QTU5NIiwgImhhd2FpaV9zb2VzdF82OGYyX2QxN2RfZDQxMyJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfZWMxY18xYWE0X2RkYWYuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF9lYzFjXzFhYTRfZGRhZiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfZWMxY18xYWE0X2RkYWYuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTm9ydGh3ZXN0ZXJuIEhhd2FpaWFuIElzbGFuZHMsIENvcmFsIFJlZWYgTW9uaXRvcmluZywgRmlzaCBTdXJ2ZXlzLCBTdGF0aW9uYXJ5IFBvaW50IENvdW50cyAoblNQQykiLCAiUGFwYWhhbmF1bW9rdWFrZWEgTWFyaW5lIE5hdGlvbmFsIE1vbnVtZW50IChQTU5NKSBGaXNoIFN0b2NrIERhdGEgZnJvbSBSYXBpZCBFY29sb2dpY2FsIEFzc2Vzc21lbnRzIChSRUFzKVxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubWluaW11bURlcHRoSW5NZXRlcnNcbm1heGltdW1EZXB0aEluTWV0ZXJzXG5pc2xhbmRHcm91cFxudmVybmFjdWxhck5hbWVcbnNjaWVudGlmaWNOYW1lXG5vaWRcbm1vZGlmaWVkXG5kYXRhc2V0SURcbmRhdGFzZXROYW1lXG5pbnN0aXR1dGlvbkNvZGVcbmNvbGxlY3Rpb25Db2RlXG5pbnN0aXR1dGlvbklEXG5jb2xsZWN0aW9uSURcbm93bmVySW5zdGl0dXRpb25Db2RlXG5iYXNpc09mUmVjb3JkXG5jYXRhbG9nTnVtYmVyXG50YXhvblJhbmtcbnZlcmJhdGltQ29vcmRpbmF0ZXNcbnZlcmJhdGltU1JTXG5nZW9kZXRpY0RhdHVtXG5jb29yZGluYXRlVW5jZXJ0YWludHlJbk1ldGVyc1xuZ2VvcmVmZXJlbmNlZEJ5XG5nZW9yZWZlcmVuY2VQcm90b2NvbFxuLi4uICg1MCBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9oYXdhaWlfc29lc3RfZWMxY18xYWE0X2RkYWZfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2hhd2FpaV9zb2VzdF9lYzFjXzFhYTRfZGRhZl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9oYXdhaWlfc29lc3RfZWMxY18xYWE0X2RkYWYvaW5kZXguanNvbiIsICJodHRwOi8vd3d3LnBhcGFoYW5hdW1va3Vha2VhLmdvdi9yZXNlYXJjaC93ZWxjb21lLmh0bWwiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvaGF3YWlpX3NvZXN0X2VjMWNfMWFhNF9kZGFmLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1oYXdhaWlfc29lc3RfZWMxY18xYWE0X2RkYWYmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiVVNET0MvTk9BQS9OT1MvUE1OTSIsICJoYXdhaWlfc29lc3RfZWMxY18xYWE0X2RkYWYiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9zQ29vcHNDQS5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9zQ29vcHNDQSIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NDb29wc0NBLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5PUyBDTy1PUFMgQWN0aXZlIEN1cnJlbnRzIERhdGEsIDYtTWludXRlIiwgIlRoaXMgZGF0YXNldCBoYXMgc3VyZmFjZSBBY3RpdmUgQ3VycmVudHMgZGF0YSBmcm9tIE5PQUEgTk9TIENlbnRlciBmb3Jcbk9wZXJhdGlvbmFsIE9jZWFub2dyYXBoaWMgUHJvZHVjdHMgYW5kIFNlcnZpY2VzIChDTy1PUFMpLlxuXG5XQVJOSU5HOiBUaGVzZSByYXcgZGF0YSBoYXZlIG5vdCBiZWVuIHN1YmplY3RlZCB0byB0aGUgTmF0aW9uYWwgT2NlYW4gU2VydmljZXNcbihOT1MpIFF1YWxpdHkgQ29udHJvbCBwcm9jZWR1cmVzLCBhbmQgZG8gbm90IG5lY2Vzc2FyaWx5IG1lZXQgdGhlIGNyaXRlcmlhIGFuZFxuc3RhbmRhcmRzIG9mIG9mZmljaWFsIE5PUyBkYXRhLiBUaGV5IGFyZSByZWxlYXNlZCBmb3IgbGltaXRlZCBwdWJsaWMgdXNlIHdpdGhcbmFwcHJvcHJpYXRlIGNhdXRpb24uXG5cbldBUk5JTkc6XG4qIFF1ZXJpZXMgZm9yIGRhdGEgTVVTVCBpbmNsdWRlIHN0YXRpb25JRD0gYW5kIHRpbWU+PS5cbiogUXVlcmllcyBVU1VBTExZIGluY2x1ZGUgdGltZTw9ICh0aGUgZGVmYXVsdCBlbmQgdGltZSBjb3JyZXNwb25kcyB0byAnbm93JykuXG4qIFF1ZXJpZXMgTVVTVCBiZSBmb3IgbGVzcyB0aGFuIDMwIGRheXMgd29ydGggb2YgZGF0YS5cbiogVGhlIGRhdGEgc291cmNlIGlzbid0IGNvbXBsZXRlbHkgcmVsaWFibGUuIElmIHlvdXIgcmVxdWVzdCByZXR1cm5zIG5vIGRhdGFcbiAgd2hlbiB5b3UgdGhpbmsgaXQgc2hvdWxkOlxuICAqIFRyeSByZXZpc2luZyB0aGUgcmVxdWVzdCAoZS5nLiwgYSBkaWZmZXJlbnQgdGltZSByYW5nZSkuXG4gICogVGhlIGxpc3Qgb2Ygc3RhdGlvbnMgb2ZmZXJpbmcgdGhpcyBkYXRhIG1heSBiZSBpbmNvcnJlY3QuXG4gICogU29tZXRpbWVzIGEgc3RhdGlvbiBvciB0aGUgZW50aXJlIGRhdGEgc2VydmljZSBpcyB1bmF2YWlsYWJsZS5cbiAgICBXYWl0IGEgd2hpbGUgYW5kIHRyeSBhZ2Fpbi5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbnN0YXRpb25JRCAoU3RhdGlvbiBJRClcbnN0YXRpb25OYW1lIChTdGF0aW9uIE5hbWUpXG5kYXRlRXN0YWJsaXNoZWQgKERhdGUgRXN0YWJsaXNoZWQsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbkNTIChDdXJyZW50IFNwZWVkLCBrbm90cylcbkNEIChDdXJyZW50IERpcmVjdGlvbiwgZGVncmVlc190cnVlKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL25vc0Nvb3BzQ0FfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL25vc0Nvb3BzQ0FfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vbm9zQ29vcHNDQS9pbmRleC5qc29uIiwgImh0dHA6Ly90aWRlc2FuZGN1cnJlbnRzLm5vYWEuZ292LyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9ub3NDb29wc0NBLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1ub3NDb29wc0NBJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgTk9TIENPLU9QUyIsICJub3NDb29wc0NBIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc0Nvb3BzTUFULnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NDb29wc01BVCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NDb29wc01BVC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOT1MgQ08tT1BTIE1ldGVvcm9sb2dpY2FsIERhdGEsIEFpciBUZW1wZXJhdHVyZSwgNi1NaW51dGUiLCAiVGhpcyBkYXRhc2V0IGhhcyBBaXIgVGVtcGVyYXR1cmUgZGF0YSBmcm9tIE5PQUEgTk9TIENlbnRlciBmb3IgT3BlcmF0aW9uYWxcbk9jZWFub2dyYXBoaWMgUHJvZHVjdHMgYW5kIFNlcnZpY2VzIChDTy1PUFMpLlxuXG5XQVJOSU5HOiBUaGVzZSBwcmVsaW1pbmFyeSBkYXRhIGhhdmUgbm90IGJlZW4gc3ViamVjdGVkIHRvIHRoZSBOYXRpb25hbCBPY2VhblxuU2VydmljZXMgKE5PUykgUXVhbGl0eSBDb250cm9sIHByb2NlZHVyZXMsIGFuZCBkbyBub3QgbmVjZXNzYXJpbHkgbWVldCB0aGVcbmNyaXRlcmlhIGFuZCBzdGFuZGFyZHMgb2Ygb2ZmaWNpYWwgTk9TIGRhdGEuIFRoZXkgYXJlIHJlbGVhc2VkIGZvciBsaW1pdGVkXG5wdWJsaWMgdXNlIHdpdGggYXBwcm9wcmlhdGUgY2F1dGlvbi5cblxuV0FSTklORzpcbiogUXVlcmllcyBmb3IgZGF0YSBNVVNUIGluY2x1ZGUgc3RhdGlvbklEPSBhbmQgdGltZT49LlxuKiBRdWVyaWVzIFVTVUFMTFkgaW5jbHVkZSB0aW1lPD0gKHRoZSBkZWZhdWx0IGVuZCB0aW1lIGNvcnJlc3BvbmRzIHRvICdub3cnKS5cbiogUXVlcmllcyBNVVNUIGJlIGZvciBsZXNzIHRoYW4gMzAgZGF5cyB3b3J0aCBvZiBkYXRhLlxuKiBUaGUgZGF0YSBzb3VyY2UgaXNuJ3QgY29tcGxldGVseSByZWxpYWJsZS4gSWYgeW91ciByZXF1ZXN0IHJldHVybnMgbm8gZGF0YVxuICB3aGVuIHlvdSB0aGluayBpdCBzaG91bGQ6XG4gICogVHJ5IHJldmlzaW5nIHRoZSByZXF1ZXN0IChlLmcuLCBhIGRpZmZlcmVudCB0aW1lIHJhbmdlKS5cbiAgKiBUaGUgbGlzdCBvZiBzdGF0aW9ucyBvZmZlcmluZyB0aGlzIGRhdGEgbWF5IGJlIGluY29ycmVjdC5cbiAgKiBTb21ldGltZXMgYSBzdGF0aW9uIG9yIHRoZSBlbnRpcmUgZGF0YSBzZXJ2aWNlIGlzIHVuYXZhaWxhYmxlLlxuICAgIFdhaXQgYSB3aGlsZSBhbmQgdHJ5IGFnYWluLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuc3RhdGlvbklEIChTdGF0aW9uIElEKVxuc3RhdGlvbk5hbWUgKFN0YXRpb24gTmFtZSlcbnN0YXRlXG5kYXRlRXN0YWJsaXNoZWQgKERhdGUgRXN0YWJsaXNoZWQsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zaGVmSUQgKFNIRUYgSUQpXG5kZXBsb3ltZW50IChEZXBsb3ltZW50IERlc2lnbmF0aW9uKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kY3AgKERhdGEgQ29sbGVjdGlvbiBQbGF0Zm9ybSlcbi4uLiAoNSBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9ub3NDb29wc01BVF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvbm9zQ29vcHNNQVRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vbm9zQ29vcHNNQVQvaW5kZXguanNvbiIsICJodHRwOi8vdGlkZXNhbmRjdXJyZW50cy5ub2FhLmdvdi8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3Mvbm9zQ29vcHNNQVQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPW5vc0Nvb3BzTUFUJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgTk9TIENPLU9QUyIsICJub3NDb29wc01BVCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NDb29wc01CUC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9zQ29vcHNNQlAiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9zQ29vcHNNQlAuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTk9TIENPLU9QUyBNZXRlb3JvbG9naWNhbCBEYXRhLCBCYXJvbWV0cmljIFByZXNzdXJlLCA2LU1pbnV0ZSIsICJUaGlzIGRhdGFzZXQgaGFzIEJhcm9tZXRyaWMgUHJlc3N1cmUgZGF0YSBmcm9tIE5PQUEgTk9TIENlbnRlciBmb3IgT3BlcmF0aW9uYWxcbk9jZWFub2dyYXBoaWMgUHJvZHVjdHMgYW5kIFNlcnZpY2VzIChDTy1PUFMpLlxuXG5XQVJOSU5HOiBUaGVzZSBwcmVsaW1pbmFyeSBkYXRhIGhhdmUgbm90IGJlZW4gc3ViamVjdGVkIHRvIHRoZSBOYXRpb25hbCBPY2VhblxuU2VydmljZXMgKE5PUykgUXVhbGl0eSBDb250cm9sIHByb2NlZHVyZXMsIGFuZCBkbyBub3QgbmVjZXNzYXJpbHkgbWVldCB0aGVcbmNyaXRlcmlhIGFuZCBzdGFuZGFyZHMgb2Ygb2ZmaWNpYWwgTk9TIGRhdGEuIFRoZXkgYXJlIHJlbGVhc2VkIGZvciBsaW1pdGVkXG5wdWJsaWMgdXNlIHdpdGggYXBwcm9wcmlhdGUgY2F1dGlvbi5cblxuV0FSTklORzpcbiogUXVlcmllcyBmb3IgZGF0YSBNVVNUIGluY2x1ZGUgc3RhdGlvbklEPSBhbmQgdGltZT49LlxuKiBRdWVyaWVzIFVTVUFMTFkgaW5jbHVkZSB0aW1lPD0gKHRoZSBkZWZhdWx0IGVuZCB0aW1lIGNvcnJlc3BvbmRzIHRvICdub3cnKS5cbiogUXVlcmllcyBNVVNUIGJlIGZvciBsZXNzIHRoYW4gMzAgZGF5cyB3b3J0aCBvZiBkYXRhLlxuKiBUaGUgZGF0YSBzb3VyY2UgaXNuJ3QgY29tcGxldGVseSByZWxpYWJsZS4gSWYgeW91ciByZXF1ZXN0IHJldHVybnMgbm8gZGF0YVxuICB3aGVuIHlvdSB0aGluayBpdCBzaG91bGQ6XG4gICogVHJ5IHJldmlzaW5nIHRoZSByZXF1ZXN0IChlLmcuLCBhIGRpZmZlcmVudCB0aW1lIHJhbmdlKS5cbiAgKiBUaGUgbGlzdCBvZiBzdGF0aW9ucyBvZmZlcmluZyB0aGlzIGRhdGEgbWF5IGJlIGluY29ycmVjdC5cbiAgKiBTb21ldGltZXMgYSBzdGF0aW9uIG9yIHRoZSBlbnRpcmUgZGF0YSBzZXJ2aWNlIGlzIHVuYXZhaWxhYmxlLlxuICAgIFdhaXQgYSB3aGlsZSBhbmQgdHJ5IGFnYWluLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuc3RhdGlvbklEIChTdGF0aW9uIElEKVxuc3RhdGlvbk5hbWUgKFN0YXRpb24gTmFtZSlcbnN0YXRlXG5kYXRlRXN0YWJsaXNoZWQgKERhdGUgRXN0YWJsaXNoZWQsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zaGVmSUQgKFNIRUYgSUQpXG5kZXBsb3ltZW50IChEZXBsb3ltZW50IERlc2lnbmF0aW9uKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kY3AgKERhdGEgQ29sbGVjdGlvbiBQbGF0Zm9ybSlcbi4uLiAoNSBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9ub3NDb29wc01CUF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvbm9zQ29vcHNNQlBfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vbm9zQ29vcHNNQlAvaW5kZXguanNvbiIsICJodHRwOi8vdGlkZXNhbmRjdXJyZW50cy5ub2FhLmdvdi8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3Mvbm9zQ29vcHNNQlAucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPW5vc0Nvb3BzTUJQJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgTk9TIENPLU9QUyIsICJub3NDb29wc01CUCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NDb29wc01DLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NDb29wc01DIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc0Nvb3BzTUMuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTk9TIENPLU9QUyBNZXRlb3JvbG9naWNhbCBEYXRhLCBDb25kdWN0aXZpdHksIDYtTWludXRlIiwgIlRoaXMgZGF0YXNldCBoYXMgQ29uZHVjdGl2aXR5IGRhdGEgZnJvbSBOT0FBIE5PUyBDZW50ZXIgZm9yIE9wZXJhdGlvbmFsXG5PY2Vhbm9ncmFwaGljIFByb2R1Y3RzIGFuZCBTZXJ2aWNlcyAoQ08tT1BTKS5cblxuV0FSTklORzogVGhlc2UgcHJlbGltaW5hcnkgZGF0YSBoYXZlIG5vdCBiZWVuIHN1YmplY3RlZCB0byB0aGUgTmF0aW9uYWwgT2NlYW5cblNlcnZpY2VzIChOT1MpIFF1YWxpdHkgQ29udHJvbCBwcm9jZWR1cmVzLCBhbmQgZG8gbm90IG5lY2Vzc2FyaWx5IG1lZXQgdGhlXG5jcml0ZXJpYSBhbmQgc3RhbmRhcmRzIG9mIG9mZmljaWFsIE5PUyBkYXRhLiBUaGV5IGFyZSByZWxlYXNlZCBmb3IgbGltaXRlZFxucHVibGljIHVzZSB3aXRoIGFwcHJvcHJpYXRlIGNhdXRpb24uXG5cbldBUk5JTkc6XG4qIFF1ZXJpZXMgZm9yIGRhdGEgTVVTVCBpbmNsdWRlIHN0YXRpb25JRD0gYW5kIHRpbWU+PS5cbiogUXVlcmllcyBVU1VBTExZIGluY2x1ZGUgdGltZTw9ICh0aGUgZGVmYXVsdCBlbmQgdGltZSBjb3JyZXNwb25kcyB0byAnbm93JykuXG4qIFF1ZXJpZXMgTVVTVCBiZSBmb3IgbGVzcyB0aGFuIDMwIGRheXMgd29ydGggb2YgZGF0YS5cbiogVGhlIGRhdGEgc291cmNlIGlzbid0IGNvbXBsZXRlbHkgcmVsaWFibGUuIElmIHlvdXIgcmVxdWVzdCByZXR1cm5zIG5vIGRhdGFcbiAgd2hlbiB5b3UgdGhpbmsgaXQgc2hvdWxkOlxuICAqIFRyeSByZXZpc2luZyB0aGUgcmVxdWVzdCAoZS5nLiwgYSBkaWZmZXJlbnQgdGltZSByYW5nZSkuXG4gICogVGhlIGxpc3Qgb2Ygc3RhdGlvbnMgb2ZmZXJpbmcgdGhpcyBkYXRhIG1heSBiZSBpbmNvcnJlY3QuXG4gICogU29tZXRpbWVzIGEgc3RhdGlvbiBvciB0aGUgZW50aXJlIGRhdGEgc2VydmljZSBpcyB1bmF2YWlsYWJsZS5cbiAgICBXYWl0IGEgd2hpbGUgYW5kIHRyeSBhZ2Fpbi5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbnN0YXRpb25JRCAoU3RhdGlvbiBJRClcbnN0YXRpb25OYW1lIChTdGF0aW9uIE5hbWUpXG5zdGF0ZVxuZGF0ZUVzdGFibGlzaGVkIChEYXRlIEVzdGFibGlzaGVkLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuc2hlZklEIChTSEVGIElEKVxuZGVwbG95bWVudCAoRGVwbG95bWVudCBEZXNpZ25hdGlvbilcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGNwIChEYXRhIENvbGxlY3Rpb24gUGxhdGZvcm0pXG4uLi4gKDUgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvbm9zQ29vcHNNQ19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvbm9zQ29vcHNNQ19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9ub3NDb29wc01DL2luZGV4Lmpzb24iLCAiaHR0cDovL3RpZGVzYW5kY3VycmVudHMubm9hYS5nb3YvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL25vc0Nvb3BzTUMucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPW5vc0Nvb3BzTUMmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBOT1MgQ08tT1BTIiwgIm5vc0Nvb3BzTUMiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9zQ29vcHNNUkYuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc0Nvb3BzTVJGIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc0Nvb3BzTVJGLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5PUyBDTy1PUFMgTWV0ZW9yb2xvZ2ljYWwgRGF0YSwgUmFpbiBGYWxsLCA2LU1pbnV0ZSIsICJUaGlzIGRhdGFzZXQgaGFzIFJhaW4gRmFsbCBkYXRhIGZyb20gTk9BQSBOT1MgQ2VudGVyIGZvciBPcGVyYXRpb25hbFxuT2NlYW5vZ3JhcGhpYyBQcm9kdWN0cyBhbmQgU2VydmljZXMgKENPLU9QUykuXG5cbldBUk5JTkc6IFRoZXNlIHByZWxpbWluYXJ5IGRhdGEgaGF2ZSBub3QgYmVlbiBzdWJqZWN0ZWQgdG8gdGhlIE5hdGlvbmFsIE9jZWFuXG5TZXJ2aWNlcyAoTk9TKSBRdWFsaXR5IENvbnRyb2wgcHJvY2VkdXJlcywgYW5kIGRvIG5vdCBuZWNlc3NhcmlseSBtZWV0IHRoZVxuY3JpdGVyaWEgYW5kIHN0YW5kYXJkcyBvZiBvZmZpY2lhbCBOT1MgZGF0YS4gVGhleSBhcmUgcmVsZWFzZWQgZm9yIGxpbWl0ZWRcbnB1YmxpYyB1c2Ugd2l0aCBhcHByb3ByaWF0ZSBjYXV0aW9uLlxuXG5XQVJOSU5HOlxuKiBRdWVyaWVzIGZvciBkYXRhIE1VU1QgaW5jbHVkZSBzdGF0aW9uSUQ9IGFuZCB0aW1lPj0uXG4qIFF1ZXJpZXMgVVNVQUxMWSBpbmNsdWRlIHRpbWU8PSAodGhlIGRlZmF1bHQgZW5kIHRpbWUgY29ycmVzcG9uZHMgdG8gJ25vdycpLlxuKiBRdWVyaWVzIE1VU1QgYmUgZm9yIGxlc3MgdGhhbiAzMCBkYXlzIHdvcnRoIG9mIGRhdGEuXG4qIFRoZSBkYXRhIHNvdXJjZSBpc24ndCBjb21wbGV0ZWx5IHJlbGlhYmxlLiBJZiB5b3VyIHJlcXVlc3QgcmV0dXJucyBubyBkYXRhXG4gIHdoZW4geW91IHRoaW5rIGl0IHNob3VsZDpcbiAgKiBUcnkgcmV2aXNpbmcgdGhlIHJlcXVlc3QgKGUuZy4sIGEgZGlmZmVyZW50IHRpbWUgcmFuZ2UpLlxuICAqIFRoZSBsaXN0IG9mIHN0YXRpb25zIG9mZmVyaW5nIHRoaXMgZGF0YSBtYXkgYmUgaW5jb3JyZWN0LlxuICAqIFNvbWV0aW1lcyBhIHN0YXRpb24gb3IgdGhlIGVudGlyZSBkYXRhIHNlcnZpY2UgaXMgdW5hdmFpbGFibGUuXG4gICAgV2FpdCBhIHdoaWxlIGFuZCB0cnkgYWdhaW4uXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5zdGF0aW9uSUQgKFN0YXRpb24gSUQpXG5zdGF0aW9uTmFtZSAoU3RhdGlvbiBOYW1lKVxuc3RhdGVcbmRhdGVFc3RhYmxpc2hlZCAoRGF0ZSBFc3RhYmxpc2hlZCwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNoZWZJRCAoU0hFRiBJRClcbmRlcGxveW1lbnQgKERlcGxveW1lbnQgRGVzaWduYXRpb24pXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRjcCAoRGF0YSBDb2xsZWN0aW9uIFBsYXRmb3JtKVxuLi4uICg0IG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL25vc0Nvb3BzTVJGX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9ub3NDb29wc01SRl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9ub3NDb29wc01SRi9pbmRleC5qc29uIiwgImh0dHA6Ly90aWRlc2FuZGN1cnJlbnRzLm5vYWEuZ292LyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9ub3NDb29wc01SRi5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9bm9zQ29vcHNNUkYmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBOT1MgQ08tT1BTIiwgIm5vc0Nvb3BzTVJGIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc0Nvb3BzTVJILnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NDb29wc01SSCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NDb29wc01SSC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOT1MgQ08tT1BTIE1ldGVvcm9sb2dpY2FsIERhdGEsIFJlbGF0aXZlIEh1bWlkaXR5LCA2LU1pbnV0ZSIsICJUaGlzIGRhdGFzZXQgaGFzIFJlbGF0aXZlIEh1bWlkaXR5IGRhdGEgZnJvbSBOT0FBIE5PUyBDZW50ZXIgZm9yIE9wZXJhdGlvbmFsXG5PY2Vhbm9ncmFwaGljIFByb2R1Y3RzIGFuZCBTZXJ2aWNlcyAoQ08tT1BTKS5cblxuV0FSTklORzogVGhlc2UgcHJlbGltaW5hcnkgZGF0YSBoYXZlIG5vdCBiZWVuIHN1YmplY3RlZCB0byB0aGUgTmF0aW9uYWwgT2NlYW5cblNlcnZpY2VzIChOT1MpIFF1YWxpdHkgQ29udHJvbCBwcm9jZWR1cmVzLCBhbmQgZG8gbm90IG5lY2Vzc2FyaWx5IG1lZXQgdGhlXG5jcml0ZXJpYSBhbmQgc3RhbmRhcmRzIG9mIG9mZmljaWFsIE5PUyBkYXRhLiBUaGV5IGFyZSByZWxlYXNlZCBmb3IgbGltaXRlZFxucHVibGljIHVzZSB3aXRoIGFwcHJvcHJpYXRlIGNhdXRpb24uXG5cbldBUk5JTkc6XG4qIFF1ZXJpZXMgZm9yIGRhdGEgTVVTVCBpbmNsdWRlIHN0YXRpb25JRD0gYW5kIHRpbWU+PS5cbiogUXVlcmllcyBVU1VBTExZIGluY2x1ZGUgdGltZTw9ICh0aGUgZGVmYXVsdCBlbmQgdGltZSBjb3JyZXNwb25kcyB0byAnbm93JykuXG4qIFF1ZXJpZXMgTVVTVCBiZSBmb3IgbGVzcyB0aGFuIDMwIGRheXMgd29ydGggb2YgZGF0YS5cbiogVGhlIGRhdGEgc291cmNlIGlzbid0IGNvbXBsZXRlbHkgcmVsaWFibGUuIElmIHlvdXIgcmVxdWVzdCByZXR1cm5zIG5vIGRhdGFcbiAgd2hlbiB5b3UgdGhpbmsgaXQgc2hvdWxkOlxuICAqIFRyeSByZXZpc2luZyB0aGUgcmVxdWVzdCAoZS5nLiwgYSBkaWZmZXJlbnQgdGltZSByYW5nZSkuXG4gICogVGhlIGxpc3Qgb2Ygc3RhdGlvbnMgb2ZmZXJpbmcgdGhpcyBkYXRhIG1heSBiZSBpbmNvcnJlY3QuXG4gICogU29tZXRpbWVzIGEgc3RhdGlvbiBvciB0aGUgZW50aXJlIGRhdGEgc2VydmljZSBpcyB1bmF2YWlsYWJsZS5cbiAgICBXYWl0IGEgd2hpbGUgYW5kIHRyeSBhZ2Fpbi5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbnN0YXRpb25JRCAoU3RhdGlvbiBJRClcbnN0YXRpb25OYW1lIChTdGF0aW9uIE5hbWUpXG5zdGF0ZVxuZGF0ZUVzdGFibGlzaGVkIChEYXRlIEVzdGFibGlzaGVkLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuc2hlZklEIChTSEVGIElEKVxuZGVwbG95bWVudCAoRGVwbG95bWVudCBEZXNpZ25hdGlvbilcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGNwIChEYXRhIENvbGxlY3Rpb24gUGxhdGZvcm0pXG4uLi4gKDUgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvbm9zQ29vcHNNUkhfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL25vc0Nvb3BzTVJIX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL25vc0Nvb3BzTVJIL2luZGV4Lmpzb24iLCAiaHR0cDovL3RpZGVzYW5kY3VycmVudHMubm9hYS5nb3YvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL25vc0Nvb3BzTVJILnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1ub3NDb29wc01SSCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIE5PUyBDTy1PUFMiLCAibm9zQ29vcHNNUkgiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9zQ29vcHNNVi5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9zQ29vcHNNViIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NDb29wc01WLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5PUyBDTy1PUFMgTWV0ZW9yb2xvZ2ljYWwgRGF0YSwgVmlzaWJpbGl0eSwgNi1NaW51dGUiLCAiVGhpcyBkYXRhc2V0IGhhcyBWaXNpYmlsaXR5IGRhdGEgZnJvbSBOT0FBIE5PUyBDZW50ZXIgZm9yIE9wZXJhdGlvbmFsXG5PY2Vhbm9ncmFwaGljIFByb2R1Y3RzIGFuZCBTZXJ2aWNlcyAoQ08tT1BTKS5cblxuV0FSTklORzogVGhlc2UgcHJlbGltaW5hcnkgZGF0YSBoYXZlIG5vdCBiZWVuIHN1YmplY3RlZCB0byB0aGUgTmF0aW9uYWwgT2NlYW5cblNlcnZpY2VzIChOT1MpIFF1YWxpdHkgQ29udHJvbCBwcm9jZWR1cmVzLCBhbmQgZG8gbm90IG5lY2Vzc2FyaWx5IG1lZXQgdGhlXG5jcml0ZXJpYSBhbmQgc3RhbmRhcmRzIG9mIG9mZmljaWFsIE5PUyBkYXRhLiBUaGV5IGFyZSByZWxlYXNlZCBmb3IgbGltaXRlZFxucHVibGljIHVzZSB3aXRoIGFwcHJvcHJpYXRlIGNhdXRpb24uXG5cbldBUk5JTkc6XG4qIFF1ZXJpZXMgZm9yIGRhdGEgTVVTVCBpbmNsdWRlIHN0YXRpb25JRD0gYW5kIHRpbWU+PS5cbiogUXVlcmllcyBVU1VBTExZIGluY2x1ZGUgdGltZTw9ICh0aGUgZGVmYXVsdCBlbmQgdGltZSBjb3JyZXNwb25kcyB0byAnbm93JykuXG4qIFF1ZXJpZXMgTVVTVCBiZSBmb3IgbGVzcyB0aGFuIDMwIGRheXMgd29ydGggb2YgZGF0YS5cbiogVGhlIGRhdGEgc291cmNlIGlzbid0IGNvbXBsZXRlbHkgcmVsaWFibGUuIElmIHlvdXIgcmVxdWVzdCByZXR1cm5zIG5vIGRhdGFcbiAgd2hlbiB5b3UgdGhpbmsgaXQgc2hvdWxkOlxuICAqIFRyeSByZXZpc2luZyB0aGUgcmVxdWVzdCAoZS5nLiwgYSBkaWZmZXJlbnQgdGltZSByYW5nZSkuXG4gICogVGhlIGxpc3Qgb2Ygc3RhdGlvbnMgb2ZmZXJpbmcgdGhpcyBkYXRhIG1heSBiZSBpbmNvcnJlY3QuXG4gICogU29tZXRpbWVzIGEgc3RhdGlvbiBvciB0aGUgZW50aXJlIGRhdGEgc2VydmljZSBpcyB1bmF2YWlsYWJsZS5cbiAgICBXYWl0IGEgd2hpbGUgYW5kIHRyeSBhZ2Fpbi5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbnN0YXRpb25JRCAoU3RhdGlvbiBJRClcbnN0YXRpb25OYW1lIChTdGF0aW9uIE5hbWUpXG5zdGF0ZVxuZGF0ZUVzdGFibGlzaGVkIChEYXRlIEVzdGFibGlzaGVkLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuc2hlZklEIChTSEVGIElEKVxuZGVwbG95bWVudCAoRGVwbG95bWVudCBEZXNpZ25hdGlvbilcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuVmlzIChWaXNpYmlsaXR5IGluIEFpciwgbmF1dGljYWxfbWlsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvbm9zQ29vcHNNVl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvbm9zQ29vcHNNVl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9ub3NDb29wc01WL2luZGV4Lmpzb24iLCAiaHR0cDovL3RpZGVzYW5kY3VycmVudHMubm9hYS5nb3YvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL25vc0Nvb3BzTVYucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPW5vc0Nvb3BzTVYmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBOT1MgQ08tT1BTIiwgIm5vc0Nvb3BzTVYiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9zQ29vcHNNV1Quc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc0Nvb3BzTVdUIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc0Nvb3BzTVdULmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5PUyBDTy1PUFMgTWV0ZW9yb2xvZ2ljYWwgRGF0YSwgV2F0ZXIgVGVtcGVyYXR1cmUsIDYtTWludXRlIiwgIlRoaXMgZGF0YXNldCBoYXMgV2F0ZXIgVGVtcGVyYXR1cmUgZGF0YSBmcm9tIE5PQUEgTk9TIENlbnRlciBmb3IgT3BlcmF0aW9uYWxcbk9jZWFub2dyYXBoaWMgUHJvZHVjdHMgYW5kIFNlcnZpY2VzIChDTy1PUFMpLlxuXG5XQVJOSU5HOiBUaGVzZSBwcmVsaW1pbmFyeSBkYXRhIGhhdmUgbm90IGJlZW4gc3ViamVjdGVkIHRvIHRoZSBOYXRpb25hbCBPY2VhblxuU2VydmljZXMgKE5PUykgUXVhbGl0eSBDb250cm9sIHByb2NlZHVyZXMsIGFuZCBkbyBub3QgbmVjZXNzYXJpbHkgbWVldCB0aGVcbmNyaXRlcmlhIGFuZCBzdGFuZGFyZHMgb2Ygb2ZmaWNpYWwgTk9TIGRhdGEuIFRoZXkgYXJlIHJlbGVhc2VkIGZvciBsaW1pdGVkXG5wdWJsaWMgdXNlIHdpdGggYXBwcm9wcmlhdGUgY2F1dGlvbi5cblxuV0FSTklORzpcbiogUXVlcmllcyBmb3IgZGF0YSBNVVNUIGluY2x1ZGUgc3RhdGlvbklEPSBhbmQgdGltZT49LlxuKiBRdWVyaWVzIFVTVUFMTFkgaW5jbHVkZSB0aW1lPD0gKHRoZSBkZWZhdWx0IGVuZCB0aW1lIGNvcnJlc3BvbmRzIHRvICdub3cnKS5cbiogUXVlcmllcyBNVVNUIGJlIGZvciBsZXNzIHRoYW4gMzAgZGF5cyB3b3J0aCBvZiBkYXRhLlxuKiBUaGUgZGF0YSBzb3VyY2UgaXNuJ3QgY29tcGxldGVseSByZWxpYWJsZS4gSWYgeW91ciByZXF1ZXN0IHJldHVybnMgbm8gZGF0YVxuICB3aGVuIHlvdSB0aGluayBpdCBzaG91bGQ6XG4gICogVHJ5IHJldmlzaW5nIHRoZSByZXF1ZXN0IChlLmcuLCBhIGRpZmZlcmVudCB0aW1lIHJhbmdlKS5cbiAgKiBUaGUgbGlzdCBvZiBzdGF0aW9ucyBvZmZlcmluZyB0aGlzIGRhdGEgbWF5IGJlIGluY29ycmVjdC5cbiAgKiBTb21ldGltZXMgYSBzdGF0aW9uIG9yIHRoZSBlbnRpcmUgZGF0YSBzZXJ2aWNlIGlzIHVuYXZhaWxhYmxlLlxuICAgIFdhaXQgYSB3aGlsZSBhbmQgdHJ5IGFnYWluLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuc3RhdGlvbklEIChTdGF0aW9uIElEKVxuc3RhdGlvbk5hbWUgKFN0YXRpb24gTmFtZSlcbnN0YXRlXG5kYXRlRXN0YWJsaXNoZWQgKERhdGUgRXN0YWJsaXNoZWQsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zaGVmSUQgKFNIRUYgSUQpXG5kZXBsb3ltZW50IChEZXBsb3ltZW50IERlc2lnbmF0aW9uKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kY3AgKERhdGEgQ29sbGVjdGlvbiBQbGF0Zm9ybSlcbi4uLiAoNSBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9ub3NDb29wc01XVF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvbm9zQ29vcHNNV1RfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vbm9zQ29vcHNNV1QvaW5kZXguanNvbiIsICJodHRwOi8vdGlkZXNhbmRjdXJyZW50cy5ub2FhLmdvdi8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3Mvbm9zQ29vcHNNV1QucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPW5vc0Nvb3BzTVdUJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgTk9TIENPLU9QUyIsICJub3NDb29wc01XVCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NDb29wc01XLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NDb29wc01XIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc0Nvb3BzTVcuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTk9TIENPLU9QUyBNZXRlb3JvbG9naWNhbCBEYXRhLCBXaW5kLCA2LU1pbnV0ZSIsICJUaGlzIGRhdGFzZXQgaGFzIFdpbmQgZGF0YSBmcm9tIE5PQUEgTk9TIENlbnRlciBmb3IgT3BlcmF0aW9uYWwgT2NlYW5vZ3JhcGhpY1xuUHJvZHVjdHMgYW5kIFNlcnZpY2VzIChDTy1PUFMpLlxuXG5XQVJOSU5HOiBUaGVzZSBwcmVsaW1pbmFyeSBkYXRhIGhhdmUgbm90IGJlZW4gc3ViamVjdGVkIHRvIHRoZSBOYXRpb25hbCBPY2VhblxuU2VydmljZXMgKE5PUykgUXVhbGl0eSBDb250cm9sIHByb2NlZHVyZXMsIGFuZCBkbyBub3QgbmVjZXNzYXJpbHkgbWVldCB0aGVcbmNyaXRlcmlhIGFuZCBzdGFuZGFyZHMgb2Ygb2ZmaWNpYWwgTk9TIGRhdGEuIFRoZXkgYXJlIHJlbGVhc2VkIGZvciBsaW1pdGVkXG5wdWJsaWMgdXNlIHdpdGggYXBwcm9wcmlhdGUgY2F1dGlvbi5cblxuV0FSTklORzpcbiogUXVlcmllcyBmb3IgZGF0YSBNVVNUIGluY2x1ZGUgc3RhdGlvbklEPSBhbmQgdGltZT49LlxuKiBRdWVyaWVzIFVTVUFMTFkgaW5jbHVkZSB0aW1lPD0gKHRoZSBkZWZhdWx0IGVuZCB0aW1lIGNvcnJlc3BvbmRzIHRvICdub3cnKS5cbiogUXVlcmllcyBNVVNUIGJlIGZvciBsZXNzIHRoYW4gMzAgZGF5cyB3b3J0aCBvZiBkYXRhLlxuKiBUaGUgZGF0YSBzb3VyY2UgaXNuJ3QgY29tcGxldGVseSByZWxpYWJsZS4gSWYgeW91ciByZXF1ZXN0IHJldHVybnMgbm8gZGF0YVxuICB3aGVuIHlvdSB0aGluayBpdCBzaG91bGQ6XG4gICogVHJ5IHJldmlzaW5nIHRoZSByZXF1ZXN0IChlLmcuLCBhIGRpZmZlcmVudCB0aW1lIHJhbmdlKS5cbiAgKiBUaGUgbGlzdCBvZiBzdGF0aW9ucyBvZmZlcmluZyB0aGlzIGRhdGEgbWF5IGJlIGluY29ycmVjdC5cbiAgKiBTb21ldGltZXMgYSBzdGF0aW9uIG9yIHRoZSBlbnRpcmUgZGF0YSBzZXJ2aWNlIGlzIHVuYXZhaWxhYmxlLlxuICAgIFdhaXQgYSB3aGlsZSBhbmQgdHJ5IGFnYWluLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuc3RhdGlvbklEIChTdGF0aW9uIElEKVxuc3RhdGlvbk5hbWUgKFN0YXRpb24gTmFtZSlcbnN0YXRlXG5kYXRlRXN0YWJsaXNoZWQgKERhdGUgRXN0YWJsaXNoZWQsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zaGVmSUQgKFNIRUYgSUQpXG5kZXBsb3ltZW50IChEZXBsb3ltZW50IERlc2lnbmF0aW9uKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kY3AgKERhdGEgQ29sbGVjdGlvbiBQbGF0Zm9ybSlcbi4uLiAoNiBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9ub3NDb29wc01XX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9ub3NDb29wc01XX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL25vc0Nvb3BzTVcvaW5kZXguanNvbiIsICJodHRwOi8vdGlkZXNhbmRjdXJyZW50cy5ub2FhLmdvdi8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3Mvbm9zQ29vcHNNVy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9bm9zQ29vcHNNVyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIE5PUyBDTy1PUFMiLCAibm9zQ29vcHNNVyJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NDb29wc1dMVFBITC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9zQ29vcHNXTFRQSEwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9zQ29vcHNXTFRQSEwuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTk9TIENPLU9QUyBXYXRlciBMZXZlbCBEYXRhLCBIaWdoIExvdyBUaWRlIFByZWRpY3Rpb24iLCAiVGhpcyBkYXRhc2V0IGhhcyBIaWdoIExvdyBUaWRlIFByZWRpY3Rpb25zIGZyb20gTk9BQSBOT1MgQ2VudGVyIGZvciBPcGVyYXRpb25hbFxuT2NlYW5vZ3JhcGhpYyBQcm9kdWN0cyBhbmQgU2VydmljZXMgKENPLU9QUykuXG5cblRoZSBvZmZpY2lhbCBUaWRlIGFuZCBUaWRhbCBDdXJyZW50IHByZWRpY3Rpb24gdGFibGVzIGFyZSBwdWJsaXNoZWQgYW5udWFsbHkgb25cbk9jdG9iZXIgMSwgZm9yIHRoZSBmb2xsb3dpbmcgY2FsZW5kYXIgeWVhci4gVGlkZSBhbmQgVGlkYWwgQ3VycmVudCBwcmVkaWN0aW9uc1xuZ2VuZXJhdGVkIHByaW9yIHRvIHRoZSBwdWJsaXNoaW5nIGRhdGUgb2YgdGhlIG9mZmljaWFsIHRhYmxlcyBhcmUgc3ViamVjdCB0b1xuY2hhbmdlLiBUaGUgZW5jbG9zZWQgZGF0YSBhcmUgYmFzZWQgdXBvbiB0aGUgbGF0ZXN0IGluZm9ybWF0aW9uIGF2YWlsYWJsZSBhcyBvZlxudGhlIGRhdGUgb2YgeW91ciByZXF1ZXN0LiBUaWRlIGFuZCBUaWRhbCBDdXJyZW50IHByZWRpY3Rpb25zIGdlbmVyYXRlZCBtYXlcbmRpZmZlciBmcm9tIHRoZSBvZmZpY2lhbCBwcmVkaWN0aW9ucyBpZiBpbmZvcm1hdGlvbiBmb3IgdGhlIHN0YXRpb24gcmVxdWVzdGVkXG5oYXMgYmVlbiB1cGRhdGVkIHNpbmNlIHRoZSBwdWJsaXNoaW5nIGRhdGUgb2YgdGhlIG9mZmljaWFsIHRhYmxlcy5cblxuV0FSTklORzpcbiogUXVlcmllcyBmb3IgZGF0YSBNVVNUIGluY2x1ZGUgc3RhdGlvbklEPSwgdGltZT49IGFuZCB0aW1lPD0uXG4gIFF1ZXJpZXMgTVVTVCBiZSBmb3IgbGVzcyB0aGFuIDMwIGRheXMgd29ydGggb2YgZGF0YS5cbiogVGhpcyBkYXRhc2V0IG9ubHkgcmV0dXJucyBkYXRhIGZvciB0aGUgTUxMVyAoTWVhbiBMb3dlci1Mb3cgV2F0ZXIpIGRhdHVtLlxuKiBUaGUgZGF0YSBzb3VyY2UgaXNuJ3QgY29tcGxldGVseSByZWxpYWJsZS4gSWYgeW91ciByZXF1ZXN0IHJldHVybnMgbm8gZGF0YVxuICB3aGVuIHlvdSB0aGluayBpdCBzaG91bGQ6XG4gICogVHJ5IHJldmlzaW5nIHRoZSByZXF1ZXN0IChlLmcuLCBhIGRpZmZlcmVudCB0aW1lIHJhbmdlKS5cbiAgKiBUaGUgbGlzdCBvZiBzdGF0aW9ucyBvZmZlcmluZyB0aGlzIGRhdGEgbWF5IGJlIGluY29ycmVjdC5cbiAgKiBTb21ldGltZXMgYSBzdGF0aW9uIG9yIHRoZSBlbnRpcmUgZGF0YSBzZXJ2aWNlIGlzIHVuYXZhaWxhYmxlLlxuICAgIFdhaXQgYSB3aGlsZSBhbmQgdHJ5IGFnYWluLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuc3RhdGlvbklEIChTdGF0aW9uIElEKVxuc3RhdGlvbk5hbWUgKFN0YXRpb24gTmFtZSlcbnN0YXRlXG5kYXRlRXN0YWJsaXNoZWQgKERhdGUgRXN0YWJsaXNoZWQsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zaGVmSUQgKFNIRUYgSUQpXG5kZXBsb3ltZW50IChEZXBsb3ltZW50IERlc2lnbmF0aW9uKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG4uLi4gKDUgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvbm9zQ29vcHNXTFRQSExfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL25vc0Nvb3BzV0xUUEhMX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL25vc0Nvb3BzV0xUUEhML2luZGV4Lmpzb24iLCAiaHR0cDovL3RpZGVzYW5kY3VycmVudHMubm9hYS5nb3YvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL25vc0Nvb3BzV0xUUEhMLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1ub3NDb29wc1dMVFBITCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIE5PUyBDTy1PUFMiLCAibm9zQ29vcHNXTFRQSEwiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9zQ29vcHNXTFIxLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NDb29wc1dMUjEiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9zQ29vcHNXTFIxLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5PUyBDTy1PUFMgV2F0ZXIgTGV2ZWwgRGF0YSwgUHJlbGltaW5hcnksIDEtTWludXRlIiwgIlRoaXMgZGF0YXNldCBoYXMgcmVjZW50LCBwcmVsaW1pbmFyeSAobm90IHF1YWxpdHktY29udHJvbGxlZCksIDEtbWludXRlLCB3YXRlciBsZXZlbFxuKHRpZGUpIGRhdGEgZnJvbSBOT0FBIE5PUyBDZW50ZXIgZm9yIE9wZXJhdGlvbmFsIE9jZWFub2dyYXBoaWMgUHJvZHVjdHMgYW5kIFNlcnZpY2VzXG4oQ08tT1BTKS5cblxuV0FSTklORzogVGhlc2UgcmF3IGRhdGEgaGF2ZSBub3QgYmVlbiBzdWJqZWN0ZWQgdG8gdGhlIE5hdGlvbmFsIE9jZWFuIFNlcnZpY2Unc1xucXVhbGl0eSBjb250cm9sIG9yIHF1YWxpdHkgYXNzdXJhbmNlIHByb2NlZHVyZXMgYW5kIGRvIG5vdCBtZWV0IHRoZSBjcml0ZXJpYSBhbmRcbnN0YW5kYXJkcyBvZiBvZmZpY2lhbCBOYXRpb25hbCBPY2VhbiBTZXJ2aWNlIGRhdGEuIFRoZXkgYXJlIHJlbGVhc2VkIGZvciBsaW1pdGVkXG5wdWJsaWMgdXNlIGFzIHByZWxpbWluYXJ5IGRhdGEgdG8gYmUgdXNlZCBvbmx5IHdpdGggYXBwcm9wcmlhdGUgY2F1dGlvbi5cblxuV0FSTklORzpcbiogUXVlcmllcyBmb3IgZGF0YSBNVVNUIGluY2x1ZGUgc3RhdGlvbklEPSwgZGF0dW09LCBhbmQgdGltZT49LlxuKiBRdWVyaWVzIGZvciBkYXRhIFVTVUFMTFkgaW5jbHVkZSB0aW1lPD0uXG4qIFF1ZXJpZXMgTVVTVCBiZSBmb3IgbGVzcyB0aGFuIDMwIGRheXMgd29ydGggb2YgZGF0YS5cbiAgVGhlIGRlZmF1bHQgdGltZTw9IHZhbHVlIGNvcnJlc3BvbmRzIHRvICdub3cnLlxuKiBEaWZmZXJlbnQgc3RhdGlvbnMgc3VwcG9ydCBkaWZmZXJlbnQgZGF0dW1zLlxuICBVc2UgRVJEREFQJ3MgU3Vic2V0IHdlYiBwYWdlIHRvIGZpbmQgb3V0IHdoaWNoIGRhdHVtcyBhIGdpdmVuIHN0YXRpb24gc3VwcG9ydHMuXG4qIFRoZSBkYXRhIHNvdXJjZSBpc24ndCBjb21wbGV0ZWx5IHJlbGlhYmxlLiBJZiB5b3VyIHJlcXVlc3QgcmV0dXJucyBubyBkYXRhXG4gIHdoZW4geW91IHRoaW5rIGl0IHNob3VsZDpcbiAgKiBNYWtlIHN1cmUgdGhlIHN0YXRpb24geW91IHNwZWNpZmllZCBzdXBwb3J0cyB0aGUgZGF0dW0geW91IHNwZWNpZmllZC5cbiAgKiBUcnkgcmV2aXNpbmcgdGhlIHJlcXVlc3QgKGUuZy4sIGEgZGlmZmVyZW50IGRhdHVtIG9yIGEgZGlmZmVyZW50IHRpbWUgcmFuZ2UpLlxuICAqIFRoZSBsaXN0IG9mIHN0YXRpb25zIG9mZmVyaW5nIHRoaXMgZGF0YSAob3IgdGhlIGxpc3Qgb2YgZGF0dW1zKSBtYXkgYmUgaW5jb3JyZWN0LlxuICAqIFNvbWV0aW1lcyBhIHN0YXRpb24gb3IgdGhlIGVudGlyZSBkYXRhIHNlcnZpY2UgaXMgdW5hdmFpbGFibGUuXG4gICAgV2FpdCBhIHdoaWxlIGFuZCB0cnkgYWdhaW4uXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5zdGF0aW9uSUQgKFN0YXRpb24gSUQpXG5zdGF0aW9uTmFtZSAoU3RhdGlvbiBOYW1lKVxuc3RhdGVcbmRhdGVFc3RhYmxpc2hlZCAoRGF0ZSBFc3RhYmxpc2hlZCwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNoZWZJRCAoU0hFRiBJRClcbi4uLiAoOCBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9ub3NDb29wc1dMUjFfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL25vc0Nvb3BzV0xSMV9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9ub3NDb29wc1dMUjEvaW5kZXguanNvbiIsICJodHRwOi8vdGlkZXNhbmRjdXJyZW50cy5ub2FhLmdvdi8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3Mvbm9zQ29vcHNXTFIxLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1ub3NDb29wc1dMUjEmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBOT1MgQ08tT1BTIiwgIm5vc0Nvb3BzV0xSMSJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NDb29wc1dMUjYuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc0Nvb3BzV0xSNiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NDb29wc1dMUjYuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTk9TIENPLU9QUyBXYXRlciBMZXZlbCBEYXRhLCBQcmVsaW1pbmFyeSwgNi1NaW51dGUiLCAiVGhpcyBkYXRhc2V0IGhhcyByZWNlbnQsIHByZWxpbWluYXJ5IChub3QgcXVhbGl0eS1jb250cm9sbGVkKSwgNi1taW51dGUsIHdhdGVyIGxldmVsXG4odGlkZSkgZGF0YSBmcm9tIE5PQUEgTk9TIENlbnRlciBmb3IgT3BlcmF0aW9uYWwgT2NlYW5vZ3JhcGhpYyBQcm9kdWN0cyBhbmQgU2VydmljZXNcbihDTy1PUFMpLlxuXG5XQVJOSU5HOiBUaGVzZSByYXcgZGF0YSBoYXZlIG5vdCBiZWVuIHN1YmplY3RlZCB0byB0aGUgTmF0aW9uYWwgT2NlYW4gU2VydmljZSdzXG5xdWFsaXR5IGNvbnRyb2wgb3IgcXVhbGl0eSBhc3N1cmFuY2UgcHJvY2VkdXJlcyBhbmQgZG8gbm90IG1lZXQgdGhlIGNyaXRlcmlhIGFuZFxuc3RhbmRhcmRzIG9mIG9mZmljaWFsIE5hdGlvbmFsIE9jZWFuIFNlcnZpY2UgZGF0YS4gVGhleSBhcmUgcmVsZWFzZWQgZm9yIGxpbWl0ZWRcbnB1YmxpYyB1c2UgYXMgcHJlbGltaW5hcnkgZGF0YSB0byBiZSB1c2VkIG9ubHkgd2l0aCBhcHByb3ByaWF0ZSBjYXV0aW9uLlxuXG5XQVJOSU5HOlxuKiBRdWVyaWVzIGZvciBkYXRhIE1VU1QgaW5jbHVkZSBzdGF0aW9uSUQ9LCBkYXR1bT0sIHRpbWU+PS5cbiogUXVlcmllcyBmb3IgZGF0YSBVU1VBTExZIGluY2x1ZGUgdGltZTw9LlxuKiBRdWVyaWVzIE1VU1QgYmUgZm9yIGxlc3MgdGhhbiAzMCBkYXlzIHdvcnRoIG9mIGRhdGEuXG4gIFRoZSBkZWZhdWx0IHRpbWU8PSB2YWx1ZSBjb3JyZXNwb25kcyB0byAnbm93Jy5cbiogRGlmZmVyZW50IHN0YXRpb25zIHN1cHBvcnQgZGlmZmVyZW50IGRhdHVtcy5cbiAgVXNlIEVSRERBUCdzIFN1YnNldCB3ZWIgcGFnZSB0byBmaW5kIG91dCB3aGljaCBkYXR1bXMgYSBnaXZlbiBzdGF0aW9uIHN1cHBvcnRzLlxuKiBUaGUgZGF0YSBzb3VyY2UgaXNuJ3QgY29tcGxldGVseSByZWxpYWJsZS4gSWYgeW91ciByZXF1ZXN0IHJldHVybnMgbm8gZGF0YVxuICB3aGVuIHlvdSB0aGluayBpdCBzaG91bGQ6XG4gICogTWFrZSBzdXJlIHRoZSBzdGF0aW9uIHlvdSBzcGVjaWZpZWQgc3VwcG9ydHMgdGhlIGRhdHVtIHlvdSBzcGVjaWZpZWQuXG4gICogVHJ5IHJldmlzaW5nIHRoZSByZXF1ZXN0IChlLmcuLCBhIGRpZmZlcmVudCBkYXR1bSBvciBhIGRpZmZlcmVudCB0aW1lIHJhbmdlKS5cbiAgKiBUaGUgbGlzdCBvZiBzdGF0aW9ucyBvZmZlcmluZyB0aGlzIGRhdGEgKG9yIHRoZSBsaXN0IG9mIGRhdHVtcykgbWF5IGJlIGluY29ycmVjdC5cbiAgKiBTb21ldGltZXMgYSBzdGF0aW9uIG9yIHRoZSBlbnRpcmUgZGF0YSBzZXJ2aWNlIGlzIHVuYXZhaWxhYmxlLlxuICAgIFdhaXQgYSB3aGlsZSBhbmQgdHJ5IGFnYWluLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuc3RhdGlvbklEIChTdGF0aW9uIElEKVxuc3RhdGlvbk5hbWUgKFN0YXRpb24gTmFtZSlcbnN0YXRlXG5kYXRlRXN0YWJsaXNoZWQgKERhdGUgRXN0YWJsaXNoZWQsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zaGVmSUQgKFNIRUYgSUQpXG4uLi4gKDEzIG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL25vc0Nvb3BzV0xSNl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvbm9zQ29vcHNXTFI2X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL25vc0Nvb3BzV0xSNi9pbmRleC5qc29uIiwgImh0dHA6Ly90aWRlc2FuZGN1cnJlbnRzLm5vYWEuZ292LyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9ub3NDb29wc1dMUjYucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPW5vc0Nvb3BzV0xSNiZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIE5PUyBDTy1PUFMiLCAibm9zQ29vcHNXTFI2Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc0Nvb3BzV0xUUDYuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc0Nvb3BzV0xUUDYiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9zQ29vcHNXTFRQNi5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOT1MgQ08tT1BTIFdhdGVyIExldmVsIERhdGEsIFRpZGUgUHJlZGljdGlvbiwgNi1NaW51dGUiLCAiVGhpcyBkYXRhc2V0IGhhcyBIaWdoIExvdyBUaWRlIFByZWRpY3Rpb25zIGZyb20gTk9BQSBOT1MgQ2VudGVyIGZvciBPcGVyYXRpb25hbFxuT2NlYW5vZ3JhcGhpYyBQcm9kdWN0cyBhbmQgU2VydmljZXMgKENPLU9QUykuXG5cblRoZSBvZmZpY2lhbCBUaWRlIGFuZCBUaWRhbCBDdXJyZW50IHByZWRpY3Rpb24gdGFibGVzIGFyZSBwdWJsaXNoZWQgYW5udWFsbHkgb25cbk9jdG9iZXIgMSwgZm9yIHRoZSBmb2xsb3dpbmcgY2FsZW5kYXIgeWVhci4gVGlkZSBhbmQgVGlkYWwgQ3VycmVudCBwcmVkaWN0aW9uc1xuZ2VuZXJhdGVkIHByaW9yIHRvIHRoZSBwdWJsaXNoaW5nIGRhdGUgb2YgdGhlIG9mZmljaWFsIHRhYmxlcyBhcmUgc3ViamVjdCB0b1xuY2hhbmdlLiBUaGUgZW5jbG9zZWQgZGF0YSBhcmUgYmFzZWQgdXBvbiB0aGUgbGF0ZXN0IGluZm9ybWF0aW9uIGF2YWlsYWJsZSBhcyBvZlxudGhlIGRhdGUgb2YgeW91ciByZXF1ZXN0LiBUaWRlIGFuZCBUaWRhbCBDdXJyZW50IHByZWRpY3Rpb25zIGdlbmVyYXRlZCBtYXlcbmRpZmZlciBmcm9tIHRoZSBvZmZpY2lhbCBwcmVkaWN0aW9ucyBpZiBpbmZvcm1hdGlvbiBmb3IgdGhlIHN0YXRpb24gcmVxdWVzdGVkXG5oYXMgYmVlbiB1cGRhdGVkIHNpbmNlIHRoZSBwdWJsaXNoaW5nIGRhdGUgb2YgdGhlIG9mZmljaWFsIHRhYmxlcy5cblxuV0FSTklORzpcbiogUXVlcmllcyBmb3IgZGF0YSBNVVNUIGluY2x1ZGUgc3RhdGlvbklEPSwgdGltZT49IGFuZCB0aW1lPD0uXG4gIFF1ZXJpZXMgTVVTVCBiZSBmb3IgbGVzcyB0aGFuIDMwIGRheXMgd29ydGggb2YgZGF0YS5cbiogVGhpcyBkYXRhc2V0IG9ubHkgcmV0dXJucyBkYXRhIGZvciB0aGUgTUxMVyAoTWVhbiBMb3dlci1Mb3cgV2F0ZXIpIGRhdHVtLlxuKiBUaGUgZGF0YSBzb3VyY2UgaXNuJ3QgY29tcGxldGVseSByZWxpYWJsZS4gSWYgeW91ciByZXF1ZXN0IHJldHVybnMgbm8gZGF0YVxuICB3aGVuIHlvdSB0aGluayBpdCBzaG91bGQ6XG4gICogVHJ5IHJldmlzaW5nIHRoZSByZXF1ZXN0IChlLmcuLCBhIGRpZmZlcmVudCB0aW1lIHJhbmdlKS5cbiAgKiBUaGUgbGlzdCBvZiBzdGF0aW9ucyBvZmZlcmluZyB0aGlzIGRhdGEgbWF5IGJlIGluY29ycmVjdC5cbiAgKiBTb21ldGltZXMgYSBzdGF0aW9uIG9yIHRoZSBlbnRpcmUgZGF0YSBzZXJ2aWNlIGlzIHVuYXZhaWxhYmxlLlxuICAgIFdhaXQgYSB3aGlsZSBhbmQgdHJ5IGFnYWluLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuc3RhdGlvbklEIChTdGF0aW9uIElEKVxuc3RhdGlvbk5hbWUgKFN0YXRpb24gTmFtZSlcbnN0YXRlXG5kYXRlRXN0YWJsaXNoZWQgKERhdGUgRXN0YWJsaXNoZWQsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zaGVmSUQgKFNIRUYgSUQpXG5kZXBsb3ltZW50IChEZXBsb3ltZW50IERlc2lnbmF0aW9uKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG4uLi4gKDQgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvbm9zQ29vcHNXTFRQNl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvbm9zQ29vcHNXTFRQNl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9ub3NDb29wc1dMVFA2L2luZGV4Lmpzb24iLCAiaHR0cDovL3RpZGVzYW5kY3VycmVudHMubm9hYS5nb3YvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL25vc0Nvb3BzV0xUUDYucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPW5vc0Nvb3BzV0xUUDYmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBOT1MgQ08tT1BTIiwgIm5vc0Nvb3BzV0xUUDYiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9zQ29vcHNXTFRQNjAuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc0Nvb3BzV0xUUDYwIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc0Nvb3BzV0xUUDYwLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5PUyBDTy1PUFMgV2F0ZXIgTGV2ZWwgRGF0YSwgVGlkZSBQcmVkaWN0aW9uLCA2MC1NaW51dGUiLCAiVGhpcyBkYXRhc2V0IGhhcyBIaWdoIExvdyBUaWRlIFByZWRpY3Rpb25zIGZyb20gTk9BQSBOT1MgQ2VudGVyIGZvciBPcGVyYXRpb25hbFxuT2NlYW5vZ3JhcGhpYyBQcm9kdWN0cyBhbmQgU2VydmljZXMgKENPLU9QUykuXG5cblRoZSBvZmZpY2lhbCBUaWRlIGFuZCBUaWRhbCBDdXJyZW50IHByZWRpY3Rpb24gdGFibGVzIGFyZSBwdWJsaXNoZWQgYW5udWFsbHkgb25cbk9jdG9iZXIgMSwgZm9yIHRoZSBmb2xsb3dpbmcgY2FsZW5kYXIgeWVhci4gVGlkZSBhbmQgVGlkYWwgQ3VycmVudCBwcmVkaWN0aW9uc1xuZ2VuZXJhdGVkIHByaW9yIHRvIHRoZSBwdWJsaXNoaW5nIGRhdGUgb2YgdGhlIG9mZmljaWFsIHRhYmxlcyBhcmUgc3ViamVjdCB0b1xuY2hhbmdlLiBUaGUgZW5jbG9zZWQgZGF0YSBhcmUgYmFzZWQgdXBvbiB0aGUgbGF0ZXN0IGluZm9ybWF0aW9uIGF2YWlsYWJsZSBhcyBvZlxudGhlIGRhdGUgb2YgeW91ciByZXF1ZXN0LiBUaWRlIGFuZCBUaWRhbCBDdXJyZW50IHByZWRpY3Rpb25zIGdlbmVyYXRlZCBtYXlcbmRpZmZlciBmcm9tIHRoZSBvZmZpY2lhbCBwcmVkaWN0aW9ucyBpZiBpbmZvcm1hdGlvbiBmb3IgdGhlIHN0YXRpb24gcmVxdWVzdGVkXG5oYXMgYmVlbiB1cGRhdGVkIHNpbmNlIHRoZSBwdWJsaXNoaW5nIGRhdGUgb2YgdGhlIG9mZmljaWFsIHRhYmxlcy5cblxuV0FSTklORzpcbiogUXVlcmllcyBmb3IgZGF0YSBNVVNUIGluY2x1ZGUgc3RhdGlvbklEPSwgdGltZT49IGFuZCB0aW1lPD0uXG4gIFF1ZXJpZXMgTVVTVCBiZSBmb3IgbGVzcyB0aGFuIDMwIGRheXMgd29ydGggb2YgZGF0YS5cbiogVGhpcyBkYXRhc2V0IG9ubHkgcmV0dXJucyBkYXRhIGZvciB0aGUgTUxMVyAoTWVhbiBMb3dlci1Mb3cgV2F0ZXIpIGRhdHVtLlxuKiBUaGUgZGF0YSBzb3VyY2UgaXNuJ3QgY29tcGxldGVseSByZWxpYWJsZS4gSWYgeW91ciByZXF1ZXN0IHJldHVybnMgbm8gZGF0YVxuICB3aGVuIHlvdSB0aGluayBpdCBzaG91bGQ6XG4gICogVHJ5IHJldmlzaW5nIHRoZSByZXF1ZXN0IChlLmcuLCBhIGRpZmZlcmVudCB0aW1lIHJhbmdlKS5cbiAgKiBUaGUgbGlzdCBvZiBzdGF0aW9ucyBvZmZlcmluZyB0aGlzIGRhdGEgbWF5IGJlIGluY29ycmVjdC5cbiAgKiBTb21ldGltZXMgYSBzdGF0aW9uIG9yIHRoZSBlbnRpcmUgZGF0YSBzZXJ2aWNlIGlzIHVuYXZhaWxhYmxlLlxuICAgIFdhaXQgYSB3aGlsZSBhbmQgdHJ5IGFnYWluLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuc3RhdGlvbklEIChTdGF0aW9uIElEKVxuc3RhdGlvbk5hbWUgKFN0YXRpb24gTmFtZSlcbnN0YXRlXG5kYXRlRXN0YWJsaXNoZWQgKERhdGUgRXN0YWJsaXNoZWQsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zaGVmSUQgKFNIRUYgSUQpXG5kZXBsb3ltZW50IChEZXBsb3ltZW50IERlc2lnbmF0aW9uKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG4uLi4gKDQgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvbm9zQ29vcHNXTFRQNjBfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL25vc0Nvb3BzV0xUUDYwX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL25vc0Nvb3BzV0xUUDYwL2luZGV4Lmpzb24iLCAiaHR0cDovL3RpZGVzYW5kY3VycmVudHMubm9hYS5nb3YvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL25vc0Nvb3BzV0xUUDYwLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1ub3NDb29wc1dMVFA2MCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIE5PUyBDTy1PUFMiLCAibm9zQ29vcHNXTFRQNjAiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9zQ29vcHNXTFY2LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NDb29wc1dMVjYiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9zQ29vcHNXTFY2LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5PUyBDTy1PUFMgV2F0ZXIgTGV2ZWwgRGF0YSwgVmVyaWZpZWQsIDYtTWludXRlIiwgIlRoaXMgZGF0YXNldCBoYXMgdmVyaWZpZWQgKHF1YWxpdHktY29udHJvbGxlZCksIDYtbWludXRlLCB3YXRlciBsZXZlbCAodGlkZSlcbmRhdGEgZnJvbSBOT0FBIE5PUyBDZW50ZXIgZm9yIE9wZXJhdGlvbmFsIE9jZWFub2dyYXBoaWMgUHJvZHVjdHMgYW5kIFNlcnZpY2VzXG4oQ08tT1BTKS4gIFRoaXMgaXMgYSBkZWxheWVkIGRhdGFzZXQsIG5vdCBhIG5lYXItcmVhbC10aW1lIGRhdGFzZXQuXG5cbldBUk5JTkc6XG4qIFF1ZXJpZXMgZm9yIGRhdGEgTVVTVCBpbmNsdWRlIHN0YXRpb25JRD0sIGRhdHVtPSwgdGltZT49LCBhbmQgdGltZTw9LlxuKiBRdWVyaWVzIE1VU1QgYmUgZm9yIGxlc3MgdGhhbiAzMCBkYXlzIHdvcnRoIG9mIGRhdGEuXG4qIERpZmZlcmVudCBzdGF0aW9ucyBzdXBwb3J0IGRpZmZlcmVudCBkYXR1bXMuXG4gIFVzZSBFUkREQVAncyBTdWJzZXQgd2ViIHBhZ2UgdG8gZmluZCBvdXQgd2hpY2ggZGF0dW1zIGEgZ2l2ZW4gc3RhdGlvbiBzdXBwb3J0cy5cbiogVGhlIGRhdGEgc291cmNlIGlzbid0IGNvbXBsZXRlbHkgcmVsaWFibGUuIElmIHlvdXIgcmVxdWVzdCByZXR1cm5zIG5vIGRhdGFcbiAgd2hlbiB5b3UgdGhpbmsgaXQgc2hvdWxkOlxuICAqIE1ha2Ugc3VyZSB0aGUgc3RhdGlvbiB5b3Ugc3BlY2lmaWVkIHN1cHBvcnRzIHRoZSBkYXR1bSB5b3Ugc3BlY2lmaWVkLlxuICAqIFRyeSByZXZpc2luZyB0aGUgcmVxdWVzdCAoZS5nLiwgYSBkaWZmZXJlbnQgZGF0dW0gb3IgYSBkaWZmZXJlbnQgdGltZSByYW5nZSkuXG4gICogVGhlIGxpc3Qgb2Ygc3RhdGlvbnMgb2ZmZXJpbmcgdGhpcyBkYXRhIChvciB0aGUgbGlzdCBvZiBkYXR1bXMpIG1heSBiZSBpbmNvcnJlY3QuXG4gICogU29tZXRpbWVzIGEgc3RhdGlvbiBvciB0aGUgZW50aXJlIGRhdGEgc2VydmljZSBpcyB1bmF2YWlsYWJsZS5cbiAgICBXYWl0IGEgd2hpbGUgYW5kIHRyeSBhZ2Fpbi5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbnN0YXRpb25JRCAoU3RhdGlvbiBJRClcbnN0YXRpb25OYW1lIChTdGF0aW9uIE5hbWUpXG5zdGF0ZVxuZGF0ZUVzdGFibGlzaGVkIChEYXRlIEVzdGFibGlzaGVkLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuc2hlZklEIChTSEVGIElEKVxuZGVwbG95bWVudCAoRGVwbG95bWVudCBEZXNpZ25hdGlvbilcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGF0dW1cbndhdGVyTGV2ZWwgKFdhdGVyIExldmVsLCBtKVxuc2lnbWEgKFN0YW5kYXJkIERldmlhdGlvbiBvZiBXYXRlciBMZXZlbCwgbSlcbi4uLiAoNCBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9ub3NDb29wc1dMVjZfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL25vc0Nvb3BzV0xWNl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9ub3NDb29wc1dMVjYvaW5kZXguanNvbiIsICJodHRwOi8vdGlkZXNhbmRjdXJyZW50cy5ub2FhLmdvdi8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3Mvbm9zQ29vcHNXTFY2LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1ub3NDb29wc1dMVjYmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBOT1MgQ08tT1BTIiwgIm5vc0Nvb3BzV0xWNiJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NDb29wc1dMVkhMLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NDb29wc1dMVkhMIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc0Nvb3BzV0xWSEwuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTk9TIENPLU9QUyBXYXRlciBMZXZlbCBEYXRhLCBWZXJpZmllZCwgSGlnaCBMb3ciLCAiVGhpcyBkYXRhc2V0IGhhcyB2ZXJpZmllZCAocXVhbGl0eS1jb250cm9sbGVkKSwgZGFpbHksIGhpZ2ggbG93IHdhdGVyIGxldmVsXG4odGlkZSkgZGF0YSBmcm9tIE5PQUEgTk9TIENlbnRlciBmb3IgT3BlcmF0aW9uYWwgT2NlYW5vZ3JhcGhpYyBQcm9kdWN0cyBhbmRcblNlcnZpY2VzIChDTy1PUFMpLiBUaGlzIGlzIGEgZGVsYXllZCBkYXRhc2V0LCBub3QgYSBuZWFyLXJlYWwtdGltZSBkYXRhc2V0LlxuXG5XQVJOSU5HOlxuKiBRdWVyaWVzIGZvciBkYXRhIE1VU1QgaW5jbHVkZSBzdGF0aW9uSUQ9LCBkYXR1bT0sIHRpbWU+PSwgYW5kIHRpbWU8PS5cbiogUXVlcmllcyBNVVNUIGJlIGZvciBsZXNzIHRoYW4gMzAgZGF5cyB3b3J0aCBvZiBkYXRhLlxuKiBEaWZmZXJlbnQgc3RhdGlvbnMgc3VwcG9ydCBkaWZmZXJlbnQgZGF0dW1zLlxuICBVc2UgRVJEREFQJ3MgU3Vic2V0IHdlYiBwYWdlIHRvIGZpbmQgb3V0IHdoaWNoIGRhdHVtcyBhIGdpdmVuIHN0YXRpb24gc3VwcG9ydHMuXG4qIFRoZSBkYXRhIHNvdXJjZSBpc24ndCBjb21wbGV0ZWx5IHJlbGlhYmxlLiBJZiB5b3VyIHJlcXVlc3QgcmV0dXJucyBubyBkYXRhXG4gIHdoZW4geW91IHRoaW5rIGl0IHNob3VsZDpcbiAgKiBNYWtlIHN1cmUgdGhlIHN0YXRpb24geW91IHNwZWNpZmllZCBzdXBwb3J0cyB0aGUgZGF0dW0geW91IHNwZWNpZmllZC5cbiAgKiBUcnkgcmV2aXNpbmcgdGhlIHJlcXVlc3QgKGUuZy4sIGEgZGlmZmVyZW50IGRhdHVtIG9yIGEgZGlmZmVyZW50IHRpbWUgcmFuZ2UpLlxuICAqIFRoZSBsaXN0IG9mIHN0YXRpb25zIG9mZmVyaW5nIHRoaXMgZGF0YSAob3IgdGhlIGxpc3Qgb2YgZGF0dW1zKSBtYXkgYmUgaW5jb3JyZWN0LlxuICAqIFNvbWV0aW1lcyBhIHN0YXRpb24gb3IgdGhlIGVudGlyZSBkYXRhIHNlcnZpY2UgaXMgdW5hdmFpbGFibGUuXG4gICAgV2FpdCBhIHdoaWxlIGFuZCB0cnkgYWdhaW4uXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5zdGF0aW9uSUQgKFN0YXRpb24gSUQpXG5zdGF0aW9uTmFtZSAoU3RhdGlvbiBOYW1lKVxuc3RhdGVcbmRhdGVFc3RhYmxpc2hlZCAoRGF0ZSBFc3RhYmxpc2hlZCwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNoZWZJRCAoU0hFRiBJRClcbmRlcGxveW1lbnQgKERlcGxveW1lbnQgRGVzaWduYXRpb24pXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRhdHVtXG53YXRlckxldmVsIChXYXRlciBMZXZlbCwgbSlcbnR5cGUgKERlc2lnbmF0aW9uIG9mIFdhdGVyIGxldmVsIEhlaWdodClcbkkgKEluZmVycmVkIEZsYWcpXG5MIChMaW1pdCBGbGFnKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL25vc0Nvb3BzV0xWSExfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL25vc0Nvb3BzV0xWSExfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vbm9zQ29vcHNXTFZITC9pbmRleC5qc29uIiwgImh0dHA6Ly90aWRlc2FuZGN1cnJlbnRzLm5vYWEuZ292LyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9ub3NDb29wc1dMVkhMLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1ub3NDb29wc1dMVkhMJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgTk9TIENPLU9QUyIsICJub3NDb29wc1dMVkhMIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc0Nvb3BzV0xWNjAuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc0Nvb3BzV0xWNjAiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9zQ29vcHNXTFY2MC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOT1MgQ08tT1BTIFdhdGVyIExldmVsIERhdGEsIFZlcmlmaWVkLCBIb3VybHkiLCAiVGhpcyBkYXRhc2V0IGhhcyB2ZXJpZmllZCAocXVhbGl0eS1jb250cm9sbGVkKSwgaG91cmx5LCB3YXRlciBsZXZlbCAodGlkZSkgZGF0YVxuZnJvbSBOT0FBIE5PUyBDZW50ZXIgZm9yIE9wZXJhdGlvbmFsIE9jZWFub2dyYXBoaWMgUHJvZHVjdHMgYW5kIFNlcnZpY2VzXG4oQ08tT1BTKS4gICBUaGlzIGlzIGEgZGVsYXllZCBkYXRhc2V0LCBub3QgYSBuZWFyLXJlYWwtdGltZSBkYXRhc2V0LlxuXG5XQVJOSU5HOlxuKiBRdWVyaWVzIGZvciBkYXRhIE1VU1QgaW5jbHVkZSBzdGF0aW9uSUQ9LCBkYXR1bT0sIHRpbWU+PSwgYW5kIHRpbWU8PS5cbiogUXVlcmllcyBNVVNUIGJlIGZvciBsZXNzIHRoYW4gMzAgZGF5cyB3b3J0aCBvZiBkYXRhLlxuKiBEaWZmZXJlbnQgc3RhdGlvbnMgc3VwcG9ydCBkaWZmZXJlbnQgZGF0dW1zLlxuICBVc2UgRVJEREFQJ3MgU3Vic2V0IHdlYiBwYWdlIHRvIGZpbmQgb3V0IHdoaWNoIGRhdHVtcyBhIGdpdmVuIHN0YXRpb24gc3VwcG9ydHMuXG4qIFRoZSBkYXRhIHNvdXJjZSBpc24ndCBjb21wbGV0ZWx5IHJlbGlhYmxlLiBJZiB5b3VyIHJlcXVlc3QgcmV0dXJucyBubyBkYXRhXG4gIHdoZW4geW91IHRoaW5rIGl0IHNob3VsZDpcbiAgKiBNYWtlIHN1cmUgdGhlIHN0YXRpb24geW91IHNwZWNpZmllZCBzdXBwb3J0cyB0aGUgZGF0dW0geW91IHNwZWNpZmllZC5cbiAgKiBUcnkgcmV2aXNpbmcgdGhlIHJlcXVlc3QgKGUuZy4sIGEgZGlmZmVyZW50IGRhdHVtIG9yIGEgZGlmZmVyZW50IHRpbWUgcmFuZ2UpLlxuICAqIFRoZSBsaXN0IG9mIHN0YXRpb25zIG9mZmVyaW5nIHRoaXMgZGF0YSAob3IgdGhlIGxpc3Qgb2YgZGF0dW1zKSBtYXkgYmUgaW5jb3JyZWN0LlxuICAqIFNvbWV0aW1lcyBhIHN0YXRpb24gb3IgdGhlIGVudGlyZSBkYXRhIHNlcnZpY2UgaXMgdW5hdmFpbGFibGUuXG4gICAgV2FpdCBhIHdoaWxlIGFuZCB0cnkgYWdhaW4uXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5zdGF0aW9uSUQgKFN0YXRpb24gSUQpXG5zdGF0aW9uTmFtZSAoU3RhdGlvbiBOYW1lKVxuc3RhdGVcbmRhdGVFc3RhYmxpc2hlZCAoRGF0ZSBFc3RhYmxpc2hlZCwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNoZWZJRCAoU0hFRiBJRClcbmRlcGxveW1lbnQgKERlcGxveW1lbnQgRGVzaWduYXRpb24pXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRhdHVtXG53YXRlckxldmVsIChXYXRlciBMZXZlbCwgbSlcbnNpZ21hIChTdGFuZGFyZCBEZXZpYXRpb24gb2YgV2F0ZXIgTGV2ZWwsIG0pXG5JIChJbmZlcnJlZCBGbGFnKVxuTCAoTGltaXQgRmxhZylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9ub3NDb29wc1dMVjYwX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9ub3NDb29wc1dMVjYwX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL25vc0Nvb3BzV0xWNjAvaW5kZXguanNvbiIsICJodHRwOi8vdGlkZXNhbmRjdXJyZW50cy5ub2FhLmdvdi8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3Mvbm9zQ29vcHNXTFY2MC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9bm9zQ29vcHNXTFY2MCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIE5PUyBDTy1PUFMiLCAibm9zQ29vcHNXTFY2MCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ud2lvb3NDb3JhbC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbndpb29zQ29yYWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbndpb29zQ29yYWwuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTldGU0MgQ29yYWwgRGF0YSBDb2xsZWN0ZWQgb2ZmIFdlc3QgQ29hc3Qgb2YgVVMgKDE5ODAtMjAwNSkiLCAiVGhpcyBkYXRhIGNvbnRhaW5zIHRoZSBsb2NhdGlvbnMgb2Ygc29tZSBvYnNlcnZhdGlvbnMgb2ZcbmNvbGQtd2F0ZXIvZGVlcC1zZWEgY29yYWxzIG9mZiB0aGUgd2VzdCBjb2FzdCBvZiB0aGUgVW5pdGVkIFN0YXRlcy5cblJlY29yZHMgb2YgY29yYWwgY2F0Y2ggb3JpZ2luYXRlIGZyb20gYm90dG9tIHRyYXdsIHN1cnZleXMgY29uZHVjdGVkXG5mcm9tIDE5ODAgdG8gMjAwMSBieSB0aGUgQWxhc2thIEZpc2hlcmllcyBTY2llbmNlIENlbnRlciAoQUZTQykgYW5kXG4yMDAxIHRvIDIwMDUgYnkgdGhlIE5vcnRod2VzdCBGaXNoZXJpZXMgU2NpZW5jZSBDZW50ZXIgKE5XRlNDKS5cbkxvY2F0aW9uYWwgaW5mb3JtYXRpb24gcmVwcmVzZW50IHRoZSB2ZXNzZWwgbWlkIHBvc2l0aW9ucyAoZm9yIEFGU0NcbnN1cnZleSB0cmF3bHMpIG9yIFwiYmVzdCBwb3NpdGlvblwiIChpLmUuLCBwcmlvcml0eSBvcmRlcjogMSkgZ2VhclxubWlkcG9pbnQgMikgdmVzc2VsIG1pZHBvaW50LCAzKSB2ZXNzZWwgc3RhcnQgcG9pbnQsIDQpIHZlc3NlbCBlbmRcbnBvaW50LCA1KSBzdGF0aW9uIGNvb3JkaW5hdGVzIGZvciBOV0ZTQyBzdXJ2ZXkgdHJhd2xzKSBjb25kdWN0ZWQgYXNcbnBhcnQgb2YgcmVndWxhciBzdXJ2ZXlzIG9mIGdyb3VuZGZpc2ggb2ZmIHRoZSBjb2FzdHMgb2YgV2FzaGluZ3Rvbixcbk9yZWdvbiBhbmQgQ2FsaWZvcm5pYSBieSBOT0FBIEZpc2hlcmllcy4gT25seSByZWNvcmRzIHdoZXJlIGNvcmFsc1xud2VyZSBpZGVudGlmaWVkIGluIHRoZSB0b3RhbCBjYXRjaCBhcmUgaW5jbHVkZWQuIEVhY2ggY2F0Y2ggc2FtcGxlXG5vZiBjb3JhbCB3YXMgaWRlbnRpZmllZCBkb3duIHRvIHRoZSBtb3N0IHNwZWNpZmljIHRheG9ub21pYyBsZXZlbFxucG9zc2libGUgYnkgdGhlIGJpb2xvZ2lzdHMgb25ib2FyZCwgdGhlcmVmb3JlIGlkZW50aWZpY2F0aW9uIHdhc1xuZGVwZW5kZW50IG9uIHRoZWlyIGV4cGVydGlzZS4gV2hlbiBwb3NpdGl2ZSBpZGVudGlmaWNhdGlvbiB3YXMgbm90XG5wb3NzaWJsZSwgc2FtcGxlcyB3ZXJlIHNvbWV0aW1lcyBhcmNoaXZlZCBmb3IgZnV0dXJlIGlkZW50aWZpY2F0aW9uXG5ieSBzeXN0ZW1hdGlzdCBleHBlcnRzLiBEYXRhIHdlcmUgY29tcGlsZWQgYnkgdGhlIE5XRlNDLCBGaXNoZXJ5XG5SZXNvdXJjZSBBbmFseXNpcyAmIE1vbml0b3JpbmcgRGl2aXNpb25cblxuUHVycG9zZSAtIEV4YW1pbmF0aW9uIG9mIHRoZSBzcGF0aWFsIGFuZCB0ZW1wb3JhbCBkaXN0cmlidXRpb25zIG9mXG5vYnNlcnZhdGlvbnMgb2YgY29sZC13YXRlci9kZWVwLXNlYSBjb3JhbHMgb2ZmIHRoZSB3ZXN0IGNvYXN0IG9mIHRoZVxuVW5pdGVkIFN0YXRlcywgaW5jbHVkaW5nIHdhdGVycyBvZmYgdGhlIHN0YXRlcyBvZiBXYXNoaW5ndG9uLCBPcmVnb24sXG5hbmQgQ2FsaWZvcm5pYS4gSXQgaXMgaW1wb3J0YW50IHRvIG5vdGUgdGhhdCB0aGVzZSByZWNvcmRzIHJlcHJlc2VudFxub25seSBwcmVzZW5jZSBvZiBjb3JhbHMgaW4gdGhlIGFyZWEgc3dlcHQgYnkgdGhlIHRyYXdsIGdlYXIuIFNpbmNlXG5ib3R0b20gdHJhd2xzIHVzZWQgZHVyaW5nIHRoZXNlIHN1cnZleXMgYXJlIG5vdCBkZXNpZ25lZCB0byBzYW1wbGVcbmVwaWJlbnRoaWMgaW52ZXJ0ZWJyYXRlcywgYWJzZW5jZSBvZiBjb3JhbHMgaW4gdGhlIGNhdGNoIGRvZXMgbm90XG5uZWNlc3NhcnkgbWVhbiB0aGV5IGRvIG5vdCBvY2N1cHkgdGhlIGFyZWEgc3dlcHQgYnkgdGhlIHRyYXdsIGdlYXIuXG5cbkRhdGEgQ3JlZGl0cyAtIE5PQUEgRmlzaGVyaWVzLCBBbGFza2EgRmlzaGVyaWVzIFNjaWVuY2UgQ2VudGVyLFxuUmVzb3VyY2UgQXNzZXNzbWVudCAmIENvbnNlcnZhdGlvbiBFbmdpbmVlcmluZyBEaXZpc2lvbiAoUkFDRSkgTk9BQVxuRmlzaGVyaWVzLCBOb3J0aHdlc3QgRmlzaGVyaWVzIFNjaWVuY2UgQ2VudGVyLCBGaXNoZXJ5IFJlc291cmNlXG5BbmFseXNpcyAmIE1vbml0b3JpbmcgRGl2aXNpb24gKEZSQU0pXG5cbkNvbnRhY3Q6IEN1cnQgV2hpdG1pcmUsIE5PQUEgTldGU0MsIEN1cnQuV2hpdG1pcmVAbm9hYS5nb3ZcblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbi4uLiAoMTIgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvbndpb29zQ29yYWxfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL253aW9vc0NvcmFsX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL253aW9vc0NvcmFsL2luZGV4Lmpzb24iLCAiaHR0cDovL253aW9vcy5jb2FzLm9yZWdvbnN0YXRlLmVkdTo4MDgwL2RvZHMvZHJkcy9Db3JhbCUyMDE5ODAtMjAwNS5pbmZvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL253aW9vc0NvcmFsLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1ud2lvb3NDb3JhbCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIE5XRlNDIiwgIm53aW9vc0NvcmFsIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL253aW9vc0dyb3VuZGZpc2guc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL253aW9vc0dyb3VuZGZpc2giLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbndpb29zR3JvdW5kZmlzaC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOV0ZTQyBHcm91bmRmaXNoIERhdGEgZm9yIFUuUy4gV2VzdCBDb2FzdCAoMjAwMy0yMDA1KSIsICJUaGUgZGF0YSBhdmFpbGFibGUgZm9yIGRvd25sb2FkaW5nIGlzIHN1bW1hcml6ZWQgZGF0YSBmcm9tIHRoZSAyMDAzLTIwMDVcblUuUy4gV2VzdCBDb2FzdCBCb3R0b20gVHJhd2wgU3VydmV5IChXQ0dUUykgb2YgR3JvdW5kZmlzaCBSZXNvdXJjZXMgb2ZmXG5XYXNoaW5ndG9uLCBPcmVnb24gYW5kIENhbGlmb3JuaWEuXG5cblRoZSBOb3J0aHdlc3QgRmlzaGVyaWVzIFNjaWVuY2UgQ2VudGVyJ3MgRmlzaGVyeSBSZXNvdXJjZSBBbmFseXNpcyBhbmRcbk1vbml0b3JpbmcgRGl2aXNpb24gKEZSQU0pIGNvbXBsZXRlZCB0aGUgc2l4dGggaW4gYW4gYW5udWFsIHNlcmllcyBvZlxuZ3JvdW5kZmlzaCBib3R0b20gdHJhd2wgc3VydmV5cyBpbiAyMDAzLiBUaGUgc3VydmV5IHdhcyBjb25kdWN0ZWQgSnVuZVxuMjQgdG8gT2N0b2JlciAyMywgMjAwMyBhbmQgdGFyZ2V0ZWQgdGhlIGNvbW1lcmNpYWwgZ3JvdW5kZmlzaCByZXNvdXJjZXNcbmluaGFiaXRpbmcgZGVwdGhzIG9mIDU1IHRvIDEsMjgwIG1ldGVycyBbbV0sICgzMCAtIDcwMCBmYXRob21zIFtmbV0pXG5mcm9tIHRoZSBhcmVhIG9mZiBDYXBlIEZsYXR0ZXJ5LCBXYXNoaW5ndG9uIChsYXRpdHVkZSBbbGF0Ll0gNDhcdTAwYjAxMCdOKVxudG8gdGhlIFUuUy4tTWV4aWNhbiBib3JkZXIgKGxhdC4gMzJcdTAwYjAzMCdOKSB1c2luZyBjaGFydGVyZWQgV2VzdCBDb2FzdFxuY29tbWVyY2lhbCB0cmF3bGVycy4gVGhlc2Ugb25nb2luZyBzZXJpZXMgb2YgYW5udWFsIHN1cnZleXMsIGNvbmR1Y3RlZFxuYnkgRlJBTSBzaW5jZSAxOTk4LCBhcmUgZGVzaWduZWQgdG8gbW9uaXRvciBsb25nLXRlcm0gdHJlbmRzIGluXG5kaXN0cmlidXRpb24gYW5kIGFidW5kYW5jZSBvZiB3ZXN0IGNvYXN0IGdyb3VuZGZpc2gsIGVzcGVjaWFsbHkgdGhvc2VcbnNwZWNpZXMgb2YgbWFuYWdlbWVudCBjb25jZXJuLiBUaGUgMjAwMyBzdXJ2ZXkgcmVwcmVzZW50cyB0aGUgZmlyc3RcbnllYXIgaW4gd2hpY2ggdGhlIGRlcHRoIHJhbmdlIHdhcyBleHBhbmRlZCB0byBpbmNsdWRlIGJvdGggdGhlXG5jb250aW5lbnRhbCBzaGVsZiAoNTUgLSAxODMgbSkgYW5kIGNvbnRpbmVudGFsIHNsb3BlICgxODMgLSAxLDI4MCBtKVxuYXJlYSBhbmQgdGhlIGZpcnN0IHllYXIgaW4gd2hpY2ggYSBzdHJhdGlmaWVkLXJhbmRvbSBzYW1wbGluZyBkZXNpZ25cbndhcyBhZG9wdGVkLlxuXG5JbiAyMDAzLCBhIHRvdGFsIG9mIDU3NCBzdWNjZXNzZnVsIHRvd3Mgd2VyZSBjb21wbGV0ZWQgb3V0IG9mIDY0M1xuYXR0ZW1wdHMuIFNpbXJhZCBJVEkgbmV0IG1lbnN1cmF0aW9uIGRhdGEsIGFzIHdlbGwgYXMgZ2xvYmFsXG5wb3NpdGlvbmluZyBzeXN0ZW0gKEdQUykgbmF2aWdhdGlvbiBkYXRhIGFuZCBib3R0b20gY29udGFjdCBzZW5zb3JcbmRhdGEsIHVzZWQgdG8gZG9jdW1lbnQgcGVyZm9ybWFuY2UgKGUuZy4gYm90dG9tIHRlbmRpbmcpLCB3ZXJlXG5vYnRhaW5lZCBmb3IgbW9zdCB0b3dzLlxuXG5BbiBBYmVyZGVlbi1zdHlsZSBuZXQgd2l0aCBhIHNtYWxsIG1lc2ggKDJcIiBzdHJldGNoZWQgbWVhc3VyZSBvciBsZXNzKVxubGluZXIgaW4gdGhlIGNvZGVuZCAodG8gcmV0YWluIHNtYWxsZXIgc3BlY2ltZW5zKSB3YXMgdXNlZCB0byBzYW1wbGVcbmZpc2ggYmlvbWFzcy4gIFRhcmdldCBkdXJhdGlvbiBvZiBlYWNoIHRvdyB3YXMgMTUgbWludXRlcy4gVG93XG5kdXJhdGlvbiB3YXMgdGhlIHRpbWUgYmV0d2VlbiB0b3VjaGRvd24gYW5kIGxpZnQtb2ZmIG9mIHRoZSB0cmF3bCBuZXRcbmZyb20gdGhlIHNlYWZsb29yIGJhc2VkIG9uIHJlYWRpbmdzIGZyb20gYm90dG9tIGNvbnRhY3Qgc2Vuc29ycy5cblxuQ2F0Y2hlcyB3ZXJlIHNvcnRlZCB0byBzcGVjaWVzLCBhZ2dyZWdhdGUgb3Igb3RoZXIgYXBwcm9wcmlhdGVcbnRheG9ub21pYyBsZXZlbCBhbmQgdGhlbiB3ZWlnaGVkIHVzaW5nIGFuIGVsZWN0cm9uaWMsXG5tb3Rpb24tY29tcGVuc2F0ZWQgc2NhbGUuICBBIHRvdGFsIG9mIDUxNyBzcGVjaWVzIG9yIGZhbWlsaWVzIChmaXNoXG5hbmQgaW52ZXJ0ZWJyYXRlcykgd2VyZSBpZGVudGlmaWVkIHdpdGhpbiB0aGUgc3VydmV5IGFyZWEuIEFsdGhvdWdoXG5iaW9sb2dpY2FsIHNhbXBsaW5nIGVmZm9ydCBjb250aW51ZXMgdG8gaW5jbHVkZSBEb3ZlciBzb2xlXG4oTWljcm9zdG9tdXMgcGFjaWZpY3VzKSwgc2hvcnRzcGluZSB0aG9ybnloZWFkIChTZWJhc3RvbG9idXNcbmFsYXNjYW51cyksIGxvbmdzcGluZSB0aG9ybnloZWFkIChTZWJhc3RvbG9idXMgYWx0aXZlbGlzKSwgYW5kXG5zYWJsZWZpc2ggKEFub3Bsb3BvbWEgZmltYnJpYSksIGZvY3VzIGhhcyBpbmNyZWFzaW5nbHkgc2hpZnRlZCB0b1xuZW5jb21wYXNzIGFsbCBncm91bmRmaXNoIHNwZWNpZXMgb2YgbWFuYWdlbWVudCBjb25jZXJuLiBVcCB0byAxMDBcbmxlbmd0aCBtZWFzdXJlbWVudHMsIHNleCBkZXRlcm1pbmF0aW9ucywgYW5kIGluZGl2aWR1YWwgd2VpZ2h0c1xuYW5kIHVwIHRvIDI1IGFnZSBzdHJ1Y3R1cmVzIHdlcmUgY29sbGVjdGVkIHBlciBoYXVsIGZvciB0aGVzZSBzcGVjaWVzLlxuXG5jZG1fZGF0YV90eXBlID0gVHJhamVjdG9yeVxuVkFSSUFCTEVTOlxuaGF1bF9pZCAoSGF1bCBJZGVudGlmaWVyKVxuLi4uICg5IG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL253aW9vc0dyb3VuZGZpc2hfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL253aW9vc0dyb3VuZGZpc2hfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vbndpb29zR3JvdW5kZmlzaC9pbmRleC5qc29uIiwgImh0dHA6Ly9ud2lvb3MuY29hcy5vcmVnb25zdGF0ZS5lZHU6ODA4MC9kb2RzL2RyZHMvR3JvdW5kZmlzaCUyMFN1cnZleSUyMDIwMDMtMjAwNS5pbmZvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL253aW9vc0dyb3VuZGZpc2gucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPW53aW9vc0dyb3VuZGZpc2gmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBOV0ZTQyIsICJud2lvb3NHcm91bmRmaXNoIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL253aW9vc0h1ZEZpc2hEZXRhaWxzLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ud2lvb3NIdWRGaXNoRGV0YWlscyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ud2lvb3NIdWRGaXNoRGV0YWlscy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOV0ZTQyBIVUQgRmlzaCBTcGVjaWVzIERldGFpbHMiLCAiSGFiaXRhdCBVc2UgRGF0YWJhc2UgKEhVRCkgRmlzaCBTcGVjaWVzIERldGFpbHMgY29tcGlsZWQgYnkgdGhlIE5vcnRod2VzdCBGaXNoZXJpZXMgU2NpZW5jZSBDZW50ZXIgKE5XRlNDKSwgRmlzaGVyeSBSZXNvdXJjZSBBbmFseXNpcyAmIE1vbml0b3JpbmcgRGl2aXNpb24uIFRoaXMgZGF0YWJhc2UgZGV0YWlscyBtYXJpbmUgaGFiaXRhdCBwcmVmZXJlbmNlcyBmb3IgZmlzaCBzcGVjaWVzIGNvdmVyZWQgdW5kZXIgRmlzaGVyaWVzIE1hbmFnZW1lbnQgUGxhbnMgKEZNUHMpLlxuXG5jZG1fZGF0YV90eXBlID0gT3RoZXJcblZBUklBQkxFUzpcbnNwZWNpZXNfaWRcbmNvbW1vbl9uYW1lXG5zY2llbnRpZmljX25hbWVcbmxpZmVfc3RhZ2VcbmFic29sdXRlX21pbl9kZXB0aCAobSlcbnByZWZlcnJlZF9taW5fZGVwdGggKG0pXG5hYnNvbHV0ZV9tYXhfZGVwdGggKG0pXG5wcmVmZXJyZWRfbWF4X2RlcHRoIChtKVxuYWJzb2x1dGVfbWluX3RlbXAgKEFic29sdXRlIE1pbiBUZW1wZXJhdHVyZSwgZGVncmVlX0MpXG5wcmVmZXJyZWRfbWluX3RlbXAgKFByZWZlcnJlZCBNaW4gVGVtcGVyYXR1cmUsIGRlZ3JlZV9DKVxuYWJzb2x1dGVfbWF4X3RlbXAgKEFic29sdXRlIE1heCBUZW1wZXJhdHVyZSwgZGVncmVlX0MpXG5wcmVmZXJyZWRfbWF4X3RlbXAgKFByZWZlcnJlZCBNYXggVGVtcGVyYXR1cmUsIGRlZ3JlZV9DKVxuYWJzb2x1dGVfbWluX2xhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxucHJlZmVycmVkX21pbl9sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmFic29sdXRlX21heF9sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbnByZWZlcnJlZF9tYXhfbGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG4iLCAiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL253aW9vc0h1ZEZpc2hEZXRhaWxzL2luZGV4Lmpzb24iLCAiaHR0cDovL253aW9vcy5jb2FzLm9yZWdvbnN0YXRlLmVkdTo4MDgwL2RvZHMvZHJkcy9IVUQlMjBGaXNoJTIwU3BlY2llcyUyMERldGFpbHMuaW5mbyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9ud2lvb3NIdWRGaXNoRGV0YWlscy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9bndpb29zSHVkRmlzaERldGFpbHMmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBOV0ZTQyIsICJud2lvb3NIdWRGaXNoRGV0YWlscyJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ud2lvb3NIdWRGaXNoT2NjdXIuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL253aW9vc0h1ZEZpc2hPY2N1ciIsICIiLCAiIiwgIiIsICJwdWJsaWMiLCAiTldGU0MgSFVEIEZpc2ggU3BlY2llcyBPY2N1cnJlbmNlIiwgIkhhYml0YXQgVXNlIERhdGFiYXNlIChIVUQpIEZpc2ggU3BlY2llcyBPY2N1cnJlbmNlIGRhdGEgY29tcGlsZWQgYnkgdGhlIE5vcnRod2VzdCBGaXNoZXJpZXMgU2NpZW5jZSBDZW50ZXIgKE5XRlNDKSwgRmlzaGVyeSBSZXNvdXJjZSBBbmFseXNpcyAmIE1vbml0b3JpbmcgRGl2aXNpb24uIFRoaXMgZGF0YWJhc2UgZGV0YWlscyBtYXJpbmUgaGFiaXRhdCBwcmVmZXJlbmNlcyBmb3IgZmlzaCBzcGVjaWVzIGNvdmVyZWQgdW5kZXIgRmlzaGVyaWVzIE1hbmFnZW1lbnQgUGxhbnMgKEZNUHMpLlxuXG5jZG1fZGF0YV90eXBlID0gT3RoZXJcblZBUklBQkxFUzpcbmNvbW1vbl9uYW1lXG5zY2llbnRpZmljX25hbWVcbmxpZmVfc3RhZ2VcbmdlbmRlclxuaGFiaXRhdF9hc3NvY2lhdGlvblxuc2Vhc29uXG5sZXZlbF8xX2hhYml0YXRcbmxldmVsXzJfaGFiaXRhdFxubGV2ZWxfM19oYWJpdGF0XG5sZXZlbF80X2hhYml0YXRcbmFjdGl2aXR5XG5hY3Rpdml0eV9hc3NvY2lhdGlvblxuIiwgIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9ud2lvb3NIdWRGaXNoT2NjdXIvaW5kZXguanNvbiIsICJodHRwOi8vbndpb29zLmNvYXMub3JlZ29uc3RhdGUuZWR1OjgwODAvZG9kcy9kcmRzL0hVRCUyMEZpc2glMjBTcGVjaWVzJTIwT2NjdXJyZW5jZS5pbmZvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL253aW9vc0h1ZEZpc2hPY2N1ci5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9bndpb29zSHVkRmlzaE9jY3VyJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgTldGU0MiLCAibndpb29zSHVkRmlzaE9jY3VyIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL253aW9vc0h1ZFByZWRQcmV5LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ud2lvb3NIdWRQcmVkUHJleSIsICIiLCAiIiwgIiIsICJwdWJsaWMiLCAiTldGU0MgSFVEIFByZWRhdG9ycyBhbmQgUHJleSIsICJIYWJpdGF0IFVzZSBEYXRhYmFzZSAoSFVEKSBQcmVkYXRvcnMgYW5kIFByZXkgZGF0YSBjb21waWxlZCBieSB0aGUgTm9ydGh3ZXN0IEZpc2hlcmllcyBTY2llbmNlIENlbnRlciAoTldGU0MpLCBGaXNoZXJ5IFJlc291cmNlIEFuYWx5c2lzICYgTW9uaXRvcmluZyBEaXZpc2lvbi4gVGhpcyBkYXRhYmFzZSBkZXRhaWxzIG1hcmluZSBoYWJpdGF0IHByZWZlcmVuY2VzIGZvciBmaXNoIHNwZWNpZXMgY292ZXJlZCB1bmRlciBGaXNoZXJpZXMgTWFuYWdlbWVudCBQbGFucyAoRk1QcykuXG5cbmNkbV9kYXRhX3R5cGUgPSBPdGhlclxuVkFSSUFCTEVTOlxuZWNvcmVnaW9uXG5zZWFzb25cbmxldmVsXzFfaGFiaXRhdFxubGV2ZWxfMl9oYWJpdGF0XG5sZXZlbF8zX2hhYml0YXRcbmxldmVsXzRfaGFiaXRhdFxuc2NpZW50aWZpY19uYW1lXG5nZW5kZXJcbmxpZmVfc3RhZ2VcbnByZXlfbmFtZVxucHJleV9nZW5kZXJcbnByZXlfbGlmZV9zdGFnZVxucHJlZGF0b3JfbmFtZVxucHJlZGF0b3JfZ2VuZGVyXG5wcmVkYXRvcl9saWZlX3N0YWdlXG4iLCAiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL253aW9vc0h1ZFByZWRQcmV5L2luZGV4Lmpzb24iLCAiaHR0cDovL253aW9vcy5jb2FzLm9yZWdvbnN0YXRlLmVkdTo4MDgwL2RvZHMvZHJkcy9IVUQlMjBQcmVkYXRvcnMlMjBhbmQlMjBQcmV5LmluZm8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3Mvbndpb29zSHVkUHJlZFByZXkucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPW53aW9vc0h1ZFByZWRQcmV5JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgTldGU0MiLCAibndpb29zSHVkUHJlZFByZXkiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbndpb29zSHVkUmVmLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ud2lvb3NIdWRSZWYiLCAiIiwgIiIsICIiLCAicHVibGljIiwgIk5XRlNDIEhVRCBSZWZlcmVuY2VzIiwgIkhhYml0YXQgVXNlIERhdGFiYXNlIChIVUQpIFJlZmVyZW5jZXMgY29tcGlsZWQgYnkgdGhlIE5vcnRod2VzdCBGaXNoZXJpZXMgU2NpZW5jZSBDZW50ZXIgKE5XRlNDKSwgRmlzaGVyeSBSZXNvdXJjZSBBbmFseXNpcyAmIE1vbml0b3JpbmcgRGl2aXNpb24uIFRoaXMgZGF0YWJhc2UgZGV0YWlscyBtYXJpbmUgaGFiaXRhdCBwcmVmZXJlbmNlcyBmb3IgZmlzaCBzcGVjaWVzIGNvdmVyZWQgdW5kZXIgRmlzaGVyaWVzIE1hbmFnZW1lbnQgUGxhbnMgKEZNUHMpLlxuXG5jZG1fZGF0YV90eXBlID0gT3RoZXJcblZBUklBQkxFUzpcbnNlYXNvblxubGV2ZWxfMV9oYWJpdGF0XG5sZXZlbF8yX2hhYml0YXRcbmxldmVsXzNfaGFiaXRhdFxubGV2ZWxfNF9oYWJpdGF0XG5zY2llbnRpZmljX25hbWVcbmdlbmRlclxubGlmZV9zdGFnZVxucmVmZXJlbmNlX3RvXG5yZWZlcmVuY2VfdHlwZVxuYXV0aG9yc1xucHVibGljYXRpb25feWVhclxucmVmZXJlbmNlX25hbWVcbmVkaXRvclxucHVibGljYXRpb25fbmFtZVxucHVibGlzaGVyX2NpdHlcbnB1Ymxpc2hlclxudm9sdW1lXG5udW1iZXJcbnJlZmVyZW5jZWRfcGFnZXNcbnRoZXNpc190eXBlXG4iLCAiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL253aW9vc0h1ZFJlZi9pbmRleC5qc29uIiwgImh0dHA6Ly9ud2lvb3MuY29hcy5vcmVnb25zdGF0ZS5lZHU6ODA4MC9kb2RzL2RyZHMvSFVEJTIwUmVmZXJlbmNlcy5pbmZvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL253aW9vc0h1ZFJlZi5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9bndpb29zSHVkUmVmJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgTldGU0MiLCAibndpb29zSHVkUmVmIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL253aW9vc09ic0ZpeGVkMjAwMi5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbndpb29zT2JzRml4ZWQyMDAyIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL253aW9vc09ic0ZpeGVkMjAwMi5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOV0ZTQyBPYnNlcnZlciBGaXhlZCBHZWFyIERhdGEsIG9mZiBXZXN0IENvYXN0IG9mIFVTLCAyMDAyLTIwMDYiLCAiT2JzZXJ2ZXIgRml4ZWQgR2VhciBEYXRhIGNvbGxlY3RlZCBkdXJpbmcgMjAwMi0yMDA2IG9mZiBXZXN0IENvYXN0IG9mIFVTLlxuXG5UaGlzIGRhdGEgcHJvZHVjdCBvcmlnaW5hdGVzIGZyb20gZGF0YSBjb2xsZWN0ZWQgYnkgZmlzaGVyeSBvYnNlcnZlcnMgaW4gdGhlIFdlc3QgQ29hc3QgR3JvdW5kZmlzaCBPYnNlcnZlciBQcm9ncmFtIChXQ0dPUCksIEZpc2hlcnkgUmVzb3VyY2UgQW5hbHlzaXMgYW5kIE1vbml0b3JpbmcgRGl2aXNpb24gKEZSQU0pIGF0IHRoZSBOb3J0aHdlc3QgRmlzaGVyaWVzIFNjaWVuY2UgQ2VudGVyLCBOT0FBIEZpc2hlcmllcy4gVGhlIFdDR09QJ3MgZ29hbCBpcyB0byBpbXByb3ZlIHRvdGFsIGNhdGNoIGVzdGltYXRlcyBieSBjb2xsZWN0aW5nIGluZm9ybWF0aW9uIG9uIHRoZSBkaXNjYXJkZWQgY2F0Y2ggKGZpc2ggcmV0dXJuZWQgb3ZlcmJvYXJkIGF0LXNlYSkgb2Ygd2VzdCBjb2FzdCBncm91bmRmaXNoIHNwZWNpZXMuIEFsbCBkYXRhIHdlcmUgY29sbGVjdGVkIGFjY29yZGluZyB0byBzdGFuZGFyZCBwcm90b2NvbHMgYW5kIGRhdGEgcXVhbGl0eSBjb250cm9sIGVzdGFibGlzaGVkIGJ5IHRoZSBXQ0dPUC4gVGhlIG9ic2VydmVkIHBvcnRpb24gb2Ygb3ZlcmFsbCBjYXRjaCBvciBsYW5kaW5ncyBpbiBhIGZpc2hlcnkgdmFyaWVzIGJ5IGNvdmVyYWdlIGxldmVsLiBTaW5jZSBhbGwgZmlzaGluZyBvcGVyYXRpb25zIGFyZSBub3Qgb2JzZXJ2ZWQsIG5laXRoZXIgdGhlIG1hcHMgbm9yIHRoZSBkYXRhIGNhbiBiZSB1c2VkIHRvIGNoYXJhY3Rlcml6ZSB0aGUgZmlzaGVyeSBjb21wbGV0ZWx5LiBUaGlzIGlzIGVzcGVjaWFsbHkgdHJ1ZSBmb3IgcmFyZWx5LW9jY3VycmluZyBzcGVjaWVzIGFuZCB3aGVuIG9ic2VydmVkIHNhbXBsZSBzaXplcyBhcmUgc21hbGwuIFdlIHVyZ2UgY2F1dGlvbiB3aGVuIHV0aWxpemluZyB0aGVzZSBkYXRhIGR1ZSB0byB0aGUgY29tcGxleGl0eSBvZiBncm91bmRmaXNoIG1hbmFnZW1lbnQgYW5kIGZsZWV0IGhhcnZlc3QgZHluYW1pY3MuIEdyaWQgY2VsbHMgcmVwcmVzZW50aW5nIGxlc3MgdGhhbiAzIHZlc3NlbHMgYW5kIGxlc3MgdGhhbiAxMCBoYXVscyBvciBzZXRzIGFyZSBub3Qgc2hvd24gZHVlIHRvIGNvbmZpZGVudGlhbGl0eSBhbmQgdG8gZW5zdXJlIGFkZXF1YXRlIHNhbXBsZSBzaXplLiBJbiB0aGUgbGltaXRlZC1lbnRyeSBmaXhlZCBnZWFyIGZpc2hlcnksIHNwZWNpZXMgZGlzY2FyZCByYXRlcyAoc3BlY2llcyBkaXNjYXJkIHdlaWdodCAvIGdyb3VuZGZpc2ggdG90YWwgY2F0Y2ggKGRpc2NhcmQgKyByZXRhaW5lZCB3ZWlnaHQpKSBhcmUgY2F0ZWdvcml6ZWQgYnkgYXBwcm94aW1hdGUgcXVhcnRpbGUgcmFuZ2VzIGFuZCBnZW8tcmVmZXJlbmNlZCB0byAyMCB4IDIwIGtpbG9tZXRlciBncmlkIGNlbGxzLiBUaGUgb2JzZXJ2ZWQgZml4ZWQgZ2VhciBzZXQgbG9jYXRpb24gKHN0YXJ0IGxvY2F0aW9uIG9mIGZpc2hpbmcpIHdhcyB1c2VkIHRvIGFsbG9jYXRlIGRhdGEgdG8gMjAgeCAyMCBraWxvbWV0ZXIgZ3JpZCBjZWxscyBmb3IgY2FsY3VsYXRpb24uIFNpeHRlZW4gc3BlY2llcyB3ZXJlIHJlcHJlc2VudGVkIGJhc2VkIG9uIGNvbWJpbmVkIG9ic2VydmVyIGRhdGEgZnJvbSAyMDAyLTIwMDYuIFRoZSBzcGVjaWVzIGluY2x1ZGVkIGluIHRoaXMgZGF0YSBwcm9kdWN0IGFyZSBkb3ZlciBzb2xlIChNaWNyb3N0b211cyBwYWNpZmljdXMpLCBzYWJsZWZpc2ggKEFub3Bsb3BvbWEgZmltYnJpYSksIGxvbmdzcGluZSB0aG9ybnloZWFkIChTZWJhc3RvbG9idXMgYWx0aXZlbGlzKSwgc2hvcnRzcGluZSB0aG9ybnloZWFkIChTZWJhc3RvbG9idXMgYWxhc2NhbnVzKSwgbGluZ2NvZCAoT3BoaW9kb24gZWxvbmdhdHVzKSwgYXJyb3d0b290aCBmbG91bmRlciAoQXRoZXJlc3RoZXMgc3RvbWlhcyksIHBldHJhbGUgc29sZSAoRW9wc2V0dGEgam9yZGFuaSksIGFuZCB0aGUgcm9ja2Zpc2hlcyAoZ2VudXMgU2ViYXN0ZXMpLCBkYXJrYmxvdGNoZWQgcm9ja2Zpc2ggKFMuIGNyYW1lcmkpLCBQYWNpZmljIG9jZWFuIHBlcmNoIChTLiBhbHV0dXMpLCBjaGlsaXBlcHBlciAoUy4gZ29vZGVpKSwgY293Y29kIChTLiBsZXZpcyksIGJvY2FjY2lvIChTLiBwYXVjaXNwaW5pcyksIGNhbmFyeSByb2NrZmlzaCAoUy4gcGlubmlnZXIpLCB3aWRvdyByb2NrZmlzaCAoUy4gZW50b21lbGFzKSwgeWVsbG93ZXllIHJvY2tmaXNoIChTLiBydWJlcnJpbXVzKSwgYW5kIHllbGxvd3RhaWwgcm9ja2Zpc2ggKFMuIGZsYXZpZHVzKS5cblxuUHVycG9zZTogVGhpcyBkYXRhIHByb2R1Y3Qgd2FzIGRldmVsb3BlZCB0byBwcm92aWRlIGJhc2ljIGdyb3VuZGZpc2ggZGlzY2FyZCBkaXN0cmlidXRpb24gaW5mb3JtYXRpb24gZm9yIGEgd2lkZSB2YXJpZXR5IG9mIGF1ZGllbmNlcy4gIFRoZSBXZXN0IENvYXN0IEdyb3VuZGZpc2ggT2JzZXJ2ZXIgUHJvZ3JhbSBjb25kdWN0cyBzYW1wbGluZyBvZiBncm91bmRmaXNoIGRpc2NhcmRlZCBieSBjb21tZXJjaWFsIGZpc2hlcmllcyBhbG9uZyB0aGUgZW50aXJlIGNvbnRpbmVudGFsIFUuUy4gV2VzdCBDb2FzdC4gIFRoZSBzZXZlbnRlZW4gc3BlY2llcyBpbmNsdWRlZCBpbiB0aGlzIGRhdGEgcHJvZHVjdCBhcmUgYW1vbmcgdGhvc2Ugb2YgbW9zdCBpbnRlcmVzdCB0byB0aGUgZmlzaGVyaWVzIG1hbmFnZW1lbnQgYW5kIGNvbW1lcmNpYWwgZmlzaGluZyBjb21tdW5pdGllcy5cblxuRGF0YSBDcmVkaXRzOiBOT0FBIEZpc2hlcmllcywgTm9ydGh3ZXN0IEZpc2hlcmllcyBTY2llbmNlIENlbnRlciwgRmlzaGVyeSBSZXNvdXJjZSBBbmFseXNpcyAmIE1vbml0b3JpbmcgRGl2aXNpb24sIFdlc3QgQ29hc3QgR3JvdW5kZmlzaCBPYnNlcnZlciBQcm9ncmFtLCBTZWF0dGxlLCBXQS5cblxuY2RtX2RhdGFfdHlwZSA9IE90aGVyXG5WQVJJQUJMRVM6XG5sb25naXR1ZGUgKExvbmdpdHVkZSAoQ2VudGVyIG9mIDIweDIwIGttIEdyaWQgQ2VsbCksIGRlZ3JlZXNfZWFzdClcbi4uLiAoOCBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9ud2lvb3NPYnNGaXhlZDIwMDJfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL253aW9vc09ic0ZpeGVkMjAwMl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9ud2lvb3NPYnNGaXhlZDIwMDIvaW5kZXguanNvbiIsICJodHRwOi8vbndpb29zLmNvYXMub3JlZ29uc3RhdGUuZWR1OjgwODAvZG9kcy9kcmRzL09ic2VydmVyJTIwRml4ZWQlMjBHZWFyJTIwMjAwMiUyMDIwMDYuaW5mbyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9ud2lvb3NPYnNGaXhlZDIwMDIucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPW53aW9vc09ic0ZpeGVkMjAwMiZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIE5XRlNDIiwgIm53aW9vc09ic0ZpeGVkMjAwMiJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ud2lvb3NPYnNUcmF3bDIwMDIuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL253aW9vc09ic1RyYXdsMjAwMiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ud2lvb3NPYnNUcmF3bDIwMDIuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTldGU0MgT2JzZXJ2ZXIgVHJhd2wgRGF0YSwgb2ZmIFdlc3QgQ29hc3Qgb2YgVVMsIDIwMDItMjAwNiIsICJPYnNlcnZlciBUcmF3bCBEYXRhIGNvbGxlY3RlZCBkdXJpbmcgMjAwMi0yMDA2IG9mZiBXZXN0IENvYXN0IG9mIFVTLlxuXG5UaGlzIGRhdGEgcHJvZHVjdCBvcmlnaW5hdGVzIGZyb20gZGF0YSBjb2xsZWN0ZWQgYnkgZmlzaGVyeSBvYnNlcnZlcnMgaW4gdGhlIFdlc3QgQ29hc3QgR3JvdW5kZmlzaCBPYnNlcnZlciBQcm9ncmFtIChXQ0dPUCksIEZpc2hlcnkgUmVzb3VyY2UgQW5hbHlzaXMgYW5kIE1vbml0b3JpbmcgRGl2aXNpb24gKEZSQU0pIGF0IHRoZSBOb3J0aHdlc3QgRmlzaGVyaWVzIFNjaWVuY2UgQ2VudGVyLCBOT0FBIEZpc2hlcmllcy4gIFRoZSBXQ0dPUCdzIGdvYWwgaXMgdG8gaW1wcm92ZSB0b3RhbCBjYXRjaCBlc3RpbWF0ZXMgYnkgY29sbGVjdGluZyBpbmZvcm1hdGlvbiBvbiB0aGUgZGlzY2FyZGVkIGNhdGNoIChmaXNoIHJldHVybmVkIG92ZXJib2FyZCBhdC1zZWEpIG9mIHdlc3QgY29hc3QgZ3JvdW5kZmlzaCBzcGVjaWVzLiAgQWxsIGRhdGEgd2VyZSBjb2xsZWN0ZWQgYWNjb3JkaW5nIHRvIHN0YW5kYXJkIHByb3RvY29scyBhbmQgZGF0YSBxdWFsaXR5IGNvbnRyb2wgZXN0YWJsaXNoZWQgYnkgdGhlIFdDR09QLiAgVGhlIG9ic2VydmVkIHBvcnRpb24gb2Ygb3ZlcmFsbCBjYXRjaCBvciBsYW5kaW5ncyBpbiBhIGZpc2hlcnkgdmFyaWVzIGJ5IGNvdmVyYWdlIGxldmVsLiAgU2luY2UgYWxsIGZpc2hpbmcgb3BlcmF0aW9ucyBhcmUgbm90IG9ic2VydmVkLCBuZWl0aGVyIHRoZSBtYXBzIG5vciB0aGUgZGF0YSBjYW4gYmUgdXNlZCB0byBjaGFyYWN0ZXJpemUgdGhlIGZpc2hlcnkgY29tcGxldGVseS4gIFRoaXMgaXMgZXNwZWNpYWxseSB0cnVlIGZvciByYXJlbHktb2NjdXJyaW5nIHNwZWNpZXMgYW5kIHdoZW4gb2JzZXJ2ZWQgc2FtcGxlIHNpemVzIGFyZSBzbWFsbC4gIFdlIHVyZ2UgY2F1dGlvbiB3aGVuIHV0aWxpemluZyB0aGVzZSBkYXRhIGR1ZSB0byB0aGUgY29tcGxleGl0eSBvZiBncm91bmRmaXNoIG1hbmFnZW1lbnQgYW5kIGZsZWV0IGhhcnZlc3QgZHluYW1pY3MuICBHcmlkIGNlbGxzIHJlcHJlc2VudGluZyBsZXNzIHRoYW4gMyB2ZXNzZWxzIGFuZCBsZXNzIHRoYW4gMTAgaGF1bHMgb3Igc2V0cyBhcmUgbm90IHNob3duIGR1ZSB0byBjb25maWRlbnRpYWxpdHkgYW5kIHRvIGVuc3VyZSBhZGVxdWF0ZSBzYW1wbGUgc2l6ZS4gIEluIHRoZSBsaW1pdGVkLWVudHJ5IGdyb3VuZGZpc2ggYm90dG9tIHRyYXdsIGZpc2hlcnksIHNwZWNpZXMgZGlzY2FyZCByYXRlcyAoc3BlY2llcyBkaXNjYXJkIHdlaWdodCAvIGdyb3VuZGZpc2ggdG90YWwgY2F0Y2ggKGRpc2NhcmQgKyByZXRhaW5lZCB3ZWlnaHQpKSBhcmUgY2F0ZWdvcml6ZWQgYnkgYXBwcm94aW1hdGUgcXVhcnRpbGUgcmFuZ2VzIGFuZCBnZW8tcmVmZXJlbmNlZCB0byAxMCB4IDEwIGtpbG9tZXRlciBncmlkIGNlbGxzLiAgVGhlIG9ic2VydmVkIHRyYXdsIHRvd2xpbmUgKGxpbmUgZHJhd24gZnJvbSB0aGUgc3RhcnQgdG8gZW5kIGxvY2F0aW9uIG9mIGEgdHJhd2wgdG93KSB3YXMgdXNlZCB0byBhbGxvY2F0ZSBkYXRhIHRvIDEwIHggMTAga2lsb21ldGVyIGdyaWQgY2VsbHMgZm9yIGNhbGN1bGF0aW9uLiAgU2V2ZW50ZWVuIHNwZWNpZXMgd2VyZSByZXByZXNlbnRlZCBiYXNlZCBvbiBjb21iaW5lZCBvYnNlcnZlciBkYXRhIGZyb20gMjAwMi0yMDA2LiAgVGhlIHNwZWNpZXMgaW5jbHVkZWQgaW4gdGhpcyBkYXRhIHByb2R1Y3QgYXJlIGRvdmVyIHNvbGUgKE1pY3Jvc3RvbXVzIHBhY2lmaWN1cyksIHNhYmxlZmlzaCAoQW5vcGxvcG9tYSBmaW1icmlhKSwgbG9uZ3NwaW5lIHRob3JueWhlYWQgKFNlYmFzdG9sb2J1cyBhbHRpdmVsaXMpLCBzaG9ydHNwaW5lIHRob3JueWhlYWQgKFNlYmFzdG9sb2J1cyBhbGFzY2FudXMpLCBsaW5nY29kIChPcGhpb2RvbiBlbG9uZ2F0dXMpLCBhcnJvd3Rvb3RoIGZsb3VuZGVyIChBdGhlcmVzdGhlcyBzdG9taWFzKSwgRW5nbGlzaCBzb2xlIChQYXJvcGhyeXMgdmV0dWx1cyksIHBldHJhbGUgc29sZSAoRW9wc2V0dGEgam9yZGFuaSksIGFuZCB0aGUgcm9ja2Zpc2hlcyAoZ2VudXMgU2ViYXN0ZXMpLCBkYXJrYmxvdGNoZWQgcm9ja2Zpc2ggKFMuIGNyYW1lcmkpLCBQYWNpZmljIG9jZWFuIHBlcmNoIChTLiBhbHV0dXMpLCBjaGlsaXBlcHBlciAoUy4gZ29vZGVpKSwgY293Y29kIChTLiBsZXZpcyksIGJvY2FjY2lvIChTLiBwYXVjaXNwaW5pcyksIGNhbmFyeSByb2NrZmlzaCAoUy4gcGlubmlnZXIpLCB3aWRvdyByb2NrZmlzaCAoUy4gZW50b21lbGFzKSwgeWVsbG93ZXllIHJvY2tmaXNoIChTLiBydWJlcnJpbXVzKSwgYW5kIHllbGxvd3RhaWwgcm9ja2Zpc2ggKFMuIGZsYXZpZHVzKS5cblxuUHVycG9zZTogVGhpcyBkYXRhIHByb2R1Y3Qgd2FzIGRldmVsb3BlZCB0byBwcm92aWRlIGJhc2ljIGdyb3VuZGZpc2ggZGlzY2FyZCBkaXN0cmlidXRpb24gaW5mb3JtYXRpb24gZm9yIGEgd2lkZSB2YXJpZXR5IG9mIGF1ZGllbmNlcy4gIFRoZSBXZXN0IENvYXN0IEdyb3VuZGZpc2ggT2JzZXJ2ZXIgUHJvZ3JhbSBjb25kdWN0cyBzYW1wbGluZyBvZiBncm91bmRmaXNoIGRpc2NhcmRlZCBieSBjb21tZXJjaWFsIGZpc2hlcmllcyBhbG9uZyB0aGUgZW50aXJlIGNvbnRpbmVudGFsIFUuUy4gV2VzdCBDb2FzdC4gIFRoZSBzZXZlbnRlZW4gc3BlY2llcyBpbmNsdWRlZCBpbiB0aGlzIGRhdGEgcHJvZHVjdCBhcmUgYW1vbmcgdGhvc2Ugb2YgbW9zdCBpbnRlcmVzdCB0byB0aGUgZmlzaGVyaWVzIG1hbmFnZW1lbnQgYW5kIGNvbW1lcmNpYWwgZmlzaGluZyBjb21tdW5pdGllcy5cblxuRGF0YSBDcmVkaXRzOiBOT0FBIEZpc2hlcmllcywgTm9ydGh3ZXN0IEZpc2hlcmllcyBTY2llbmNlIENlbnRlciwgRmlzaGVyeSBSZXNvdXJjZSBBbmFseXNpcyAmIE1vbml0b3JpbmcgRGl2aXNpb24sIFdlc3QgQ29hc3QgR3JvdW5kZmlzaCBPYnNlcnZlciBQcm9ncmFtLCBTZWF0dGxlLCBXQS5cblxuY2RtX2RhdGFfdHlwZSA9IE90aGVyXG5WQVJJQUJMRVM6XG5sb25naXR1ZGUgKExvbmdpdHVkZSAoQ2VudGVyIG9mIDEweDEwIGttIEdyaWQgQ2VsbCksIGRlZ3JlZXNfZWFzdClcbi4uLiAoOCBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9ud2lvb3NPYnNUcmF3bDIwMDJfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL253aW9vc09ic1RyYXdsMjAwMl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9ud2lvb3NPYnNUcmF3bDIwMDIvaW5kZXguanNvbiIsICJodHRwOi8vbndpb29zLmNvYXMub3JlZ29uc3RhdGUuZWR1OjgwODAvZG9kcy9kcmRzL09ic2VydmVyJTIwVHJhd2wlMjAyMDAyJTIwMjAwNi5pbmZvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL253aW9vc09ic1RyYXdsMjAwMi5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9bndpb29zT2JzVHJhd2wyMDAyJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgTldGU0MiLCAibndpb29zT2JzVHJhd2wyMDAyIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2tlb18xMjFmX2EzZDBfM2MwYS5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAva2VvXzEyMWZfYTNkMF8zYzBhIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2tlb18xMjFmX2EzZDBfM2MwYS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJPY2VhblNJVEVTIEtFTyBkYWlseSBpbi1zaXR1IGRhdGEiLCAiVGhpcyBmaWxlIGNvbnRhaW5zIGRhaWx5IHJlYWwtdGltZSBhbmQgZGVsYXllZC1tb2RlIGluLXNpdHUgZGF0YSBmcm9tIHRoZSBLdXJvc2hpbyBFeHRlbnNpb24gT2JzZXJ2YXRvcnkgKEtFTykgc2l0ZSBub21pbmFsbHkgYXQgMzIuM04sMTQ0LjZFLCBpbiB0aGUgS3Vyb3NoaW8gRXh0ZW5zaW9uIHJlY2lyY3VsYXRpb24gZ3lyZS4gVGhlIGFjdHVhbCBhbmNob3IgcG9zaXRpb24gaXMgZGlmZmVyZW50IGZvciBlYWNoIGRlcGxveW1lbnQsIGFuZCB0aGlzIGlzIGEgc2xhY2sgbGluZSBtb29yaW5nIHdpdGggYSB3YXRjaCBjaXJjbGUgcmFkaXVzIGdyZWF0ZXIgdGhhbiA1a20uIEZvciB1c2VycyBwZXJmb3JtaW5nIGludGVyIGNvbXBhcmlzb25zLCBpdCBtYXkgYmUgaW1wb3J0YW50IHRvIHVzZSB0aGUgYWN0dWFsIHBvc2l0aW9uIG9mIHRoZSBidW95IGZyb20gdGhlIEdsb2JhbCBQb3NpdGlvbmluZyBTeXN0ZW0gKEdQUykgZGF0YS4gVGhpcyBtb29yaW5nIGhhcyBiZWVuIGluc3RydW1lbnRlZCB3aXRoIHVwcGVyIG9jZWFuIGFuZCBzdXJmYWNlIHNlbnNvcnMgc2luY2UgSnVuZSAyMDA0LiBJbmNsdWRlZCBpbiB0aGlzIGZpbGUgYXJlIHNlYSB0ZW1wZXJhdHVyZXMgYW5kIHByZXNzdXJlcyBmcm9tIHRoZSBzdXJmYWNlIHRvIDUyNW0gZGVwdGgsIHNhbGluaXR5IGFuZCBkZW5zaXR5IChzaWdtYS10aGV0YSkgZnJvbSB0aGUgc3VyZmFjZSB0byA0MDBtIGRlcHRoLCBzZWEgY3VycmVudHMgdG8gMzVtIGRlcHRoLCBhIHZhcmlldHkgb2Ygc3VyZmFjZSBvYnNlcnZhdGlvbnMgZm9yIG5ldCBhaXItc2VhIGZsdXhlcyBvZiBoZWF0LCBtb2lzdHVyZSwgYW5kIG1vbWVudHVtIGluY2x1ZGluZyB3aW5kcywgc29sYXIgYW5kIGxvbmd3YXZlIHJhZGlhdGlvbiwgcmFpbiwgYWlyIHRlbXBlcmF0dXJlLCByZWxhdGl2ZSBodW1pZGl0eSwgYW5kIGJhcm9tZXRyaWMgcHJlc3N1cmUuIE5vdGUgdGhhdCBiZWNhdXNlIHRoaXMgaXMgYSBzbGFjay1saW5lIG1vb3JpbmcsIHN1YnN1cmZhY2Ugc2Vuc29yIGRlcHRocyB2YXJ5IHdpdGggdGltZSwgYW5kIGhlbmNlIG9uZSBtdXN0IHVzZSB0aGUgb2JzZXJ2ZWQgYW5kIGNhbGN1bGF0ZWQgd2F0ZXIgcHJlc3N1cmVzIHRvIGNvbXB1dGUgc2Vuc29yIGRlcHRocy4gQWxzbywgZHVlIHRvIHRoZSByZWxhdGl2ZWx5IGxhcmdlIHNjb3BlIGFuZCBkaWZmZXJlbnQgYW5jaG9yIHBvc2l0aW9ucywgdGhlIHBvc2l0aW9ucyBvZiB0aGUgYnVveSBhdCB0aGUgc3VyZmFjZSBhcmUgaW5jbHVkZWQgYXMgdGltZSBzZXJpZXMgb2YgbGF0aXR1ZGUgYW5kIGxvbmdpdHVkZS5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbndtb19wbGF0Zm9ybV9jb2RlXG5zaXRlX2NvZGVcbnNpdGVfaWQgKE9jZWFuU0lURVMgc3RhdGlvbiBJRClcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0ZW1wIChEZXB0aCBvZiBlYWNoIG1lYXN1cmVtZW50LCBtZXRlcnMpXG5sYXRpdHVkZSAoTGF0aXR1ZGUgb2YgZWFjaCBsb2NhdGlvbiwgZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoTG9uZ2l0dWRlIG9mIGVhY2ggbG9jYXRpb24sIGRlZ3JlZXNfZWFzdClcblRFTVAgKHRlbXBlcmF0dXJlLCBkZWdyZWVfQ2Vsc2l1cylcblRFTVBfUUMgKHF1YWxpdHkgZmxhZylcblRFTVBfRE0gKG1ldGhvZCBvZiBkYXRhIHByb2Nlc3NpbmcpXG5kZXB0aCAobSlcblBSRVMgKHdhdGVyIHByZXNzdXJlLCBvYnNlcnZlZCBhbmQgY2FsY3VsYXRlZCwgZGVjaWJhcilcblBSRVNfUUMgKHF1YWxpdHkgZmxhZylcblBSRVNfRE0gKG1ldGhvZCBvZiBkYXRhIHByb2Nlc3NpbmcpXG4uLi4gKDUzIG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2tlb18xMjFmX2EzZDBfM2MwYV9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwva2VvXzEyMWZfYTNkMF8zYzBhX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2tlb18xMjFmX2EzZDBfM2MwYS9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3Yvb2NzLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9rZW9fMTIxZl9hM2QwXzNjMGEucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWtlb18xMjFmX2EzZDBfM2MwYSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBL1BNRUwiLCAia2VvXzEyMWZfYTNkMF8zYzBhIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL250YXNfZmx1eF82MmZjXzlhMjBfMTQzMi5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbnRhc19mbHV4XzYyZmNfOWEyMF8xNDMyIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL250YXNfZmx1eF82MmZjXzlhMjBfMTQzMi5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJPY2VhblNJVEVTIE5UQVMgc3VyZmFjZSBtb29yaW5nIGZsdXhlcyBjYWxjdWxhdGVkIHdpdGggQ29hcmUgMy4wIGFsZ29yaXRobSIsICJPY2VhblNpdGVzIHRpbWUtc2VyaWVzIEZMVVggIGRhdGEgZnJvbSBOVEFTIHN0YXRpb25cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5RQiAoc2Vuc2libGUgaGVhdCBmbHV4LCBXL20yKVxuUUggKGxhdGVudCBoZWF0IGZsdXgsIFcvbTIpXG5RTiAobmV0IGhlYXQgZmx1eCwgVy9tMilcblFMIChuZXQgbG9uZ3dhdmUsIFcvbTIpXG5RUyAobmV0IHNob3J0d2F2ZSwgVy9tMilcblRBVURJUiAod2luZCBzdHJlc3MgZGlyZWN0aW9uLCBkZWdyZWUgTilcblRBVU1BRyAod2luZCBzdHJlc3MgbWFnbml0dWRlLCBOL21eMilcblRTS0lOIChTU1QgYWRqdXN0ZWQgdG8gc2tpbiwgZGVncmVlKVxuV1NfSCAod2luZCBzcGVlZCBhZGp1c3RlZCB0byAxMG0sIG0vcylcblFRX0ggKHNwZWNpZmljIGh1bWlkaXR5IGFkanVzdGVkIHRvIDJtLCBnL2tnKVxuVEFfSCAoYWlyIHRlbXBlcmF0dXJlIGFkanVzdGVkIHRvIDJtLCBkZWdyZWVfQylcblRBVUUgKGVhc3Qgd2luZCBzdHJlc3MsIE4vbV4yKVxuVEFVTiAobm9ydGggd2luZCBzdHJlc3MsIE4vbV4yKVxuU1RBQklMSVRZIChzdGFiaWxpdHkgcGFyYW1ldGVyLCAxKVxuZGVwdGggKGRlcHRoIGNvb3JkaW5hdGUgb2YgdHNraW4sIG0pXG53bW9fcGxhdGZvcm1fY29kZVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9udGFzX2ZsdXhfNjJmY185YTIwXzE0MzJfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL250YXNfZmx1eF82MmZjXzlhMjBfMTQzMl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9udGFzX2ZsdXhfNjJmY185YTIwXzE0MzIvaW5kZXguanNvbiIsICJodHRwOi8vdW9wLndob2kuZWR1L3Byb2plY3RzL3N0cmF0dXMiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvbnRhc19mbHV4XzYyZmNfOWEyMF8xNDMyLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1udGFzX2ZsdXhfNjJmY185YTIwXzE0MzImc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiV0hPSSIsICJudGFzX2ZsdXhfNjJmY185YTIwXzE0MzIiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbnRhc19tZXRfOGQ3M18xYmMxX2VjOGEuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL250YXNfbWV0XzhkNzNfMWJjMV9lYzhhIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL250YXNfbWV0XzhkNzNfMWJjMV9lYzhhLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk9jZWFuU0lURVMgTlRBUyBzdXJmYWNlIG1vb3JpbmcgTUVUIGRhdGEiLCAiT2NlYW5TaXRlcyB0aW1lLXNlcmllcyBNRVQgZGF0YSBmcm9tIE5UQVMgc3RhdGlvblxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbkFJUlQgKGFpciB0ZW1wZXJhdHVyZSwgZGVncmVlX0MpXG5SRUxIIChyZWxhdGl2ZSBodW1pZGl0eSwgcGVyY2VudClcbkFUTVMgKGJhcm9tZXRyaWMgcHJlc3N1cmUsIG1pbGxpYmFycylcbkxXIChzdXJmYWNlIGRvd253ZWxsaW5nIGxvbmd3YXZlIHJhZGlhdGlvbiwgVyBtLTIpXG5TVyAoc2hvcnR3YXZlIHJhZGlhdGlvbiwgVyBtLTIpXG5SQUlOIChwcmVjaXBpdGF0aW9uIHJhdGUsIG1tL2hvdXIpXG5VV05EIChXaW5kIFZlbG9jaXR5IEVhc3QsIG1ldGVycy9zZWNvbmQpXG5WV05EICh3aW5kIHZlbG9jaXR5IG5vcnRoLCBtZXRlcnMvc2Vjb25kKVxuVEVNUCAoc2VhIHRlbXBlcmF0dXJlLCBkZWdyZWVfQylcblBTQUwgKHNlYSB3YXRlciBwcmFjdGljYWwgc2FsaW5pdHksIDEpXG5DTkRDIChjb25kdWN0aXZpdHksIFMgbS0xKVxuVUNVUiAoRWFzdHdhcmQgU2VhIFdhdGVyIFZlbG9jaXR5LCBTIG0tMSlcblZDVVIgKE5vcnRod2FyZCBTZWEgV2F0ZXIgVmVsb2NpdHksIFMgbS0xKVxubGF0aXR1ZGUgKGFwcHJveGltYXRlIGxhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChhcHByb3hpbWF0ZSBsb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbndtb19wbGF0Zm9ybV9jb2RlXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvbnRhc19tZXRfOGQ3M18xYmMxX2VjOGFfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL250YXNfbWV0XzhkNzNfMWJjMV9lYzhhX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL250YXNfbWV0XzhkNzNfMWJjMV9lYzhhL2luZGV4Lmpzb24iLCAiaHR0cDovL3VvcC53aG9pLmVkdS9wcm9qZWN0cy9zdHJhdHVzIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL250YXNfbWV0XzhkNzNfMWJjMV9lYzhhLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1udGFzX21ldF84ZDczXzFiYzFfZWM4YSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJXSE9JIiwgIm50YXNfbWV0XzhkNzNfMWJjMV9lYzhhIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BhcGFfOGJiNV9kY2Q1Xzk4MWYuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BhcGFfOGJiNV9kY2Q1Xzk4MWYiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcGFwYV84YmI1X2RjZDVfOTgxZi5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJPY2VhblNJVEVTIFBBUEEgZGFpbHkgaW4tc2l0dSBkYXRhIiwgIlRoaXMgZmlsZSBjb250YWlucyBkYWlseSByZWFsLXRpbWUgYW5kIGRlbGF5ZWQtbW9kZSBpbi1zaXR1IGRhdGEgZnJvbSBzdGF0aW9uIFBhcGEgYXQgNTBOLDE0NVcgaW4gdGhlIE5vcnRoIFBhY2lmaWMuIFRoaXMgdGF1dC1saW5lIG1vb3JpbmcgaGFzIGJlZW4gaW5zdHJ1bWVudGVkIHdpdGggdXBwZXIgb2NlYW4gYW5kIHN1cmZhY2Ugc2Vuc29ycyBzaW5jZSBKdW5lIDIwMDcuIEluY2x1ZGVkIGluIHRoaXMgZmlsZSBhcmUgc2VhIHRlbXBlcmF0dXJlcyBmcm9tIHRoZSBzdXJmYWNlIHRvIDMwMCBtZXRlcnMgZGVwdGgsIHNhbGluaXR5IGFuZCBkZW5zaXR5IChzaWdtYS10aGV0YSkgZnJvbSB0aGUgc3VyZmFjZSB0byAyMDBtIGRlcHRoLCBzZWEgY3VycmVudHMgYXQgNW0gYW5kIDM1bSBkZXB0aCwgYWNvdXN0aWMgZG9wcGxlciBwcm9maWxlcyBvZiB6b25hbCBhbmQgbWVyaWRpb25hbCBvY2VhbiBjdXJyZW50IHRvIGZyb20gMzAgdG8gMTU4IG1ldGVycyBkZXB0aCwgYW5kIGEgdmFyaWV0eSBvZiBzdXJmYWNlIG9ic2VydmF0aW9ucyBmb3IgbmV0IGFpci1zZWEgZmx1eGVzIG9mIGhlYXQsIG1vaXN0dXJlLCBhbmQgbW9tZW50dW0gaW5jbHVkaW5nIHdpbmRzLCBzb2xhciBhbmQgbG9uZ3dhdmUgcmFkaWF0aW9uLCByYWluLCBhaXIgdGVtcGVyYXR1cmUsIHJlbGF0aXZlIGh1bWlkaXR5LCBhbmQgYmFyb21ldHJpYyBwcmVzc3VyZS4gVGltZSBzZXJpZXMgb2YgYnVveSBsYXRpdHVkZSBhbmQgbG9uZ2l0dWRlIGFyZSBpbmNsdWRlZCBhcyB3ZWxsLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxud21vX3BsYXRmb3JtX2NvZGVcbnNpdGVfY29kZVxuc2l0ZV9pZCAoT2NlYW5TSVRFUyBzdGF0aW9uIElEKVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChEZXB0aCBvZiBlYWNoIG1lYXN1cmVtZW50LCBtKVxubGF0aXR1ZGUgKExhdGl0dWRlIG9mIGVhY2ggbG9jYXRpb24sIGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKExvbmdpdHVkZSBvZiBlYWNoIGxvY2F0aW9uLCBkZWdyZWVzX2Vhc3QpXG5URU1QICh0ZW1wZXJhdHVyZSwgZGVncmVlX0NlbHNpdXMpXG5URU1QX1FDIChxdWFsaXR5IGZsYWcpXG5URU1QX0RNIChtZXRob2Qgb2YgZGF0YSBwcm9jZXNzaW5nKVxuZGVwY3VyIChEZXB0aCBvZiBlYWNoIG1lYXN1cmVtZW50LCBtKVxuVUNVUlxuVkNVUiAobWVyaWRpb25hbCBjdXJyZW50LCBjbS9zKVxuQ1NQRCAoY3VycmVudCBzcGVlZCwgY20vcylcbkNTUERfUUMgKHF1YWxpdHkgZmxhZylcbkNTUERfRE0gKG1ldGhvZCBvZiBkYXRhIHByb2Nlc3NpbmcpXG5DRElSIChjdXJyZW50IGRpcmVjdGlvbiAob2NlYW5vZ3JhcGhpYyBjb252ZW50aW9uLCBmbG93aW5nIHRvKSwgZGVncmVlKVxuQ0RJUl9RQyAocXVhbGl0eSBmbGFnKVxuQ0RJUl9ETSAobWV0aG9kIG9mIGRhdGEgcHJvY2Vzc2luZylcbmRlcHBzYWwgKERlcHRoIG9mIGVhY2ggbWVhc3VyZW1lbnQsIG0pXG4uLi4gKDQzIG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BhcGFfOGJiNV9kY2Q1Xzk4MWZfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BhcGFfOGJiNV9kY2Q1Xzk4MWZfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcGFwYV84YmI1X2RjZDVfOTgxZi9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3Yvb2NzLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wYXBhXzhiYjVfZGNkNV85ODFmLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wYXBhXzhiYjVfZGNkNV85ODFmJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEvUE1FTCIsICJwYXBhXzhiYjVfZGNkNV85ODFmIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BpcmF0YV81OTIyXzdkY2RfNzIxOS5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcGlyYXRhXzU5MjJfN2RjZF83MjE5IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BpcmF0YV81OTIyXzdkY2RfNzIxOS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJPY2VhblNJVEVTIFBJUkFUQSBkYWlseSBpbi1zaXR1IGRhdGEiLCAiVGhpcyBmaWxlIGNvbnRhaW5zIGRhaWx5IHJlYWwtdGltZSBhbmQgZGVsYXllZC1tb2RlIGluLXNpdHUgZGF0YSBmcm9tIG9uZSBvZiB0aGUgVHJvcGljYWwgQXRtb3NwaGVyZS9PY2VhbiAoVEFPKS9UUklUT04sIFBpbG90IFJlc2VhcmNoIE1vb3JlZCBBcnJheSBpbiB0aGUgVHJvcGljYWwgQXRsYW50aWMgKFBJUkFUQSksIG9yIFJlc2VhcmNoIE1vb3JlZCBBcnJheSBmb3IgQWZyaWNhbi1Bc2lhbi1BdXN0cmFsaWFuIE1vbnNvb24gQW5hbHlzaXMgYW5kIFByZWRpY3Rpb24gKFJBTUEpIG1vb3Jpbmcgc2l0ZXMgaW4gdGhlIHRyb3BpY2FsIG9jZWFucy4gSW5jbHVkZWQgaW4gdGhpcyBmaWxlIGFyZSBzZWEgdGVtcGVyYXR1cmVzIGZyb20gdGhlIHN1cmZhY2UgdG8gNTAwIG1ldGVycyBhdCBtb3N0IHNpdGVzIGFuZCBkZWVwZXIgYXQgb3RoZXJzLCBzYWxpbml0eSBhbmQgcG90ZW50aWFsIGRlbnNpdHkgKHNpZ21hLXRoZXRhKSBhdCB0aGUgc2VhIHN1cmZhY2UgYW5kIGRlZXBlciBhdCBzb21lIHNpdGVzLCBzZWEgY3VycmVudHMgYXQgMTBtIGRlcHRoIGFuZCBkZWVwZXIgYXQgc29tZSBzaXRlcywgYSB2YXJpZXR5IG9mIHN1cmZhY2Ugb2JzZXJ2YXRpb25zIGluY2x1ZGluZyB3aW5kcywgYWlyIHRlbXBlcmF0dXJlLCByZWxhdGl2ZSBodW1pZGl0eSwgc2hvcnR3YXZlIHNvbGFyIHJhZGlhdGlvbiwgbG9uZ3dhdmUgcmFkaWF0aW9uLCByYWluIHJhdGUsIGJhcm9tZXRyaWMgcHJlc3N1cmUuIEJ1b3kgcG9zaXRpb25zIGFyZSBhbHNvIGluY2x1ZGVkIGFzIHRpbWUgc2VyaWVzIG9mIGxhdGl0dWRlIGFuZCBsb25naXR1ZGUuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG53bW9fcGxhdGZvcm1fY29kZVxuc2l0ZV9jb2RlXG5zaXRlX2lkIChPY2VhblNJVEVTIHN0YXRpb24gSUQpXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKERlcHRoIG9mIGVhY2ggVEVNUCBtZWFzdXJlbWVudCwgbSlcbmRlcGN1ciAoRGVwdGggb2YgZWFjaCBjdXJyZW50IG1lYXN1cmVtZW50KVxubGF0aXR1ZGUgKExhdGl0dWRlIG9mIGVhY2ggbG9jYXRpb24sIGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKExvbmdpdHVkZSBvZiBlYWNoIGxvY2F0aW9uLCBkZWdyZWVzX2Vhc3QpXG5kZXBwc2FsIChEZXB0aCBvZiBlYWNoIFNhbGluaXR5IG1lYXN1cmVtZW50KVxuVEVNUCAodGVtcGVyYXR1cmUsIGRlZ3JlZV9DZWxzaXVzKVxuVEVNUF9RQyAocXVhbGl0eSBmbGFnKVxuVEVNUF9ETSAobWV0aG9kIG9mIGRhdGEgcHJvY2Vzc2luZylcblBTQUwgKHNlYV93YXRlcl9wcmFjdGljYWxfc2FsaW5pdHkpXG5QU0FMX1FDXG5QU0FMX0RNIChtZXRob2Qgb2YgZGF0YSBwcm9jZXNzaW5nKVxuZGVwZGVuIChEZXB0aCBvZiBlYWNoIGRlbnNpdHkgbWVhc3VyZW1lbnQpXG5oZWlnaHR3aW5kIChhbHRpdHVkZSwgbWV0ZXJzKVxuVVdORCAoem9uYWwgd2luZClcblZXTkQgKG1lcmlkaW9uYWwgd2luZCwgbS9zKVxuLi4uICg0NCBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9waXJhdGFfNTkyMl83ZGNkXzcyMTlfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BpcmF0YV81OTIyXzdkY2RfNzIxOV9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9waXJhdGFfNTkyMl83ZGNkXzcyMTkvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9waXJhdGFfNTkyMl83ZGNkXzcyMTkucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBpcmF0YV81OTIyXzdkY2RfNzIxOSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBL1BNRUwiLCAicGlyYXRhXzU5MjJfN2RjZF83MjE5Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3JhbWFfM2MxNV8zNDEwXzc4MGEuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3JhbWFfM2MxNV8zNDEwXzc4MGEiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcmFtYV8zYzE1XzM0MTBfNzgwYS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJPY2VhblNJVEVTIFJBTUEgZGFpbHkgaW4tc2l0dSBkYXRhIiwgIk9jZWFuU0lURVMgZGFpbHkgaW4tc2l0dSBkYXRhLiBPY2VhblNJVEVTIEdsb2JhbCBUcm9waWNhbCBNb29yZWQgQnVveSBBcnJheSBSZXNlYXJjaCBNb29yZWQgQXJyYXkgZm9yIEFmcmljYW4tQXNpYW4tQXVzdHJhbGlhbiBNb25zb29uIEFuYWx5c2lzIGFuZCBQcmVkaWN0aW9uIChSQU1BKSBkYXRhIGZyb20gUGFjaWZpYyBNYXJpbmUgRW52aXJvbm1lbnRhbCBMYWJvcmF0b3J5IChQTUVMKVxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxud21vX3BsYXRmb3JtX2NvZGVcbnNpdGVfY29kZVxuc2l0ZV9pZCAoT2NlYW5TSVRFUyBzdGF0aW9uIElEKVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdGl0dWRlIChMYXRpdHVkZSBvZiBlYWNoIGxvY2F0aW9uLCBkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChMb25naXR1ZGUgb2YgZWFjaCBsb2NhdGlvbiwgZGVncmVlc19lYXN0KVxuZGVwY3VyIChEZXB0aCBvZiBlYWNoIG1lYXN1cmVtZW50LCBtZXRlcnMpXG5VQ1VSICh6b25hbCBjdXJyZW50LCBjbS9zKVxuVkNVUiAobWVyaWRpb25hbCBjdXJyZW50LCBjbS9zKVxuQ1NQRCAoY3VycmVudCBzcGVlZCwgY20vcylcbkNTUERfUUMgKHF1YWxpdHkgZmxhZylcbkNTUERfRE0gKG1ldGhvZCBvZiBkYXRhIHByb2Nlc3NpbmcpXG5DRElSIChjdXJyZW50IGRpcmVjdGlvbiAob2NlYW5vZ3JhcGhpYyBjb252ZW50aW9uLCBmbG93aW5nIHRvKSwgZGVncmVlKVxuQ0RJUl9RQyAocXVhbGl0eSBmbGFnKVxuQ0RJUl9ETSAobWV0aG9kIG9mIGRhdGEgcHJvY2Vzc2luZylcblRFTVAgKHRlbXBlcmF0dXJlLCBkZWdyZWVfQ2Vsc2l1cylcblRFTVBfUUMgKHF1YWxpdHkgZmxhZylcbmRlcHRoIChEZXB0aCBvZiBlYWNoIG1lYXN1cmVtZW50LCBtKVxuZGVwcHNhbCAoRGVwdGggb2YgZWFjaCBtZWFzdXJlbWVudCwgbWV0ZXJzKVxuUFNBTCAoc2FsaW5pdHksIFBTVSlcblBTQUxfUUMgKHF1YWxpdHkgZmxhZylcblBTQUxfRE0gKG1ldGhvZCBvZiBkYXRhIHByb2Nlc3NpbmcpXG5kZXBkZW4gKERlcHRoIG9mIGVhY2ggbWVhc3VyZW1lbnQsIG1ldGVycylcbkRFTiAoc2lnbWEtdGhldGEgKHBvdGVudGlhbCBkZW5zaXR5KSwga2cvbSoqMylcbkRFTl9RQyAocXVhbGl0eSBmbGFnKVxuLi4uICgzNyBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9yYW1hXzNjMTVfMzQxMF83ODBhX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9yYW1hXzNjMTVfMzQxMF83ODBhX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3JhbWFfM2MxNV8zNDEwXzc4MGEvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9yYW1hXzNjMTVfMzQxMF83ODBhLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1yYW1hXzNjMTVfMzQxMF83ODBhJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIlBNRUwgR2xvYmFsIFRyb3BpY2FsIE1vb3JlZCBCdW95IEFycmF5IiwgInJhbWFfM2MxNV8zNDEwXzc4MGEiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvc3RyYXR1c19mbHV4Xzk3NzBfN2YxOF9iMzE0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9zdHJhdHVzX2ZsdXhfOTc3MF83ZjE4X2IzMTQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvc3RyYXR1c19mbHV4Xzk3NzBfN2YxOF9iMzE0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk9jZWFuU0lURVMgU3RyYXR1cyBzdXJmYWNlIG1vb3JpbmcgZmx1eGVzIGNhbGN1bGF0ZWQgd2l0aCBDb2FyZSAzLjAgYWxnb3JpdGhtIiwgIk9jZWFuU2l0ZXMgdGltZS1zZXJpZXMgZmx1eCBkYXRhIGZyb20gU3RyYXR1cyBzdGF0aW9uXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuUUIgKHNlbnNpYmxlIGhlYXQgZmx1eCwgVy9tMilcblFIIChsYXRlbnQgaGVhdCBmbHV4LCBXL20yKVxuUU4gKG5ldCBoZWF0IGZsdXgsIFcvbTIpXG5RTCAobmV0IGxvbmd3YXZlLCBXL20yKVxuUVMgKG5ldCBzaG9ydHdhdmUsIFcvbTIpXG5UQVVESVIgKHdpbmQgc3RyZXNzIGRpcmVjdGlvbiwgZGVncmVlIE4pXG5UQVVNQUcgKHdpbmQgc3RyZXNzIG1hZ25pdHVkZSwgTi9tXjIpXG5UU0tJTiAoU1NUIGFkanVzdGVkIHRvIHNraW4sIGRlZ3JlZSlcbldTX0ggKHdpbmQgc3BlZWQgYWRqdXN0ZWQgdG8gMTBtLCBtL3MpXG5RUV9IIChzcGVjaWZpYyBodW1pZGl0eSBhZGp1c3RlZCB0byAybSwgZy9rZylcblRBX0ggKGFpciB0ZW1wZXJhdHVyZSBhZGp1c3RlZCB0byAybSwgZGVncmVlX0MpXG5UQVVFIChlYXN0IHdpbmQgc3RyZXNzLCBOL21eMilcblRBVU4gKG5vcnRoIHdpbmQgc3RyZXNzLCBOL21eMilcblNUQUJJTElUWSAoc3RhYmlsaXR5IHBhcmFtZXRlciwgMSlcbmRlcHRoIChkZXB0aCBjb29yZGluYXRlIG9mIHRza2luLCBtKVxud21vX3BsYXRmb3JtX2NvZGVcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvc3RyYXR1c19mbHV4Xzk3NzBfN2YxOF9iMzE0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9zdHJhdHVzX2ZsdXhfOTc3MF83ZjE4X2IzMTRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vc3RyYXR1c19mbHV4Xzk3NzBfN2YxOF9iMzE0L2luZGV4Lmpzb24iLCAiaHR0cDovL3VvcC53aG9pLmVkdS9wcm9qZWN0cy9zdHJhdHVzIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3N0cmF0dXNfZmx1eF85NzcwXzdmMThfYjMxNC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9c3RyYXR1c19mbHV4Xzk3NzBfN2YxOF9iMzE0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIldIT0kiLCAic3RyYXR1c19mbHV4Xzk3NzBfN2YxOF9iMzE0Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3N0cmF0dXNfbWV0X2FiNDNfZTYyYV81NDk0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9zdHJhdHVzX21ldF9hYjQzX2U2MmFfNTQ5NCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9zdHJhdHVzX21ldF9hYjQzX2U2MmFfNTQ5NC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJPY2VhblNJVEVTIFN0cmF0dXMgc3VyZmFjZSBtb29yaW5nIE1FVCBkYXRhIiwgIk9jZWFuU2l0ZXMgdGltZS1zZXJpZXMgZGF0YSBmcm9tIFN0cmF0dXMgc3RhdGlvblxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbkFJUlQgKGFpciB0ZW1wZXJhdHVyZSwgZGVncmVlX0MpXG5SRUxIIChyZWxhdGl2ZSBodW1pZGl0eSwgcGVyY2VudClcbkFUTVMgKGJhcm9tZXRyaWMgcHJlc3N1cmUsIG1pbGxpYmFycylcbkxXIChzdXJmYWNlIGRvd253ZWxsaW5nIGxvbmd3YXZlIHJhZGlhdGlvbiwgVyBtLTIpXG5TVyAoc2hvcnR3YXZlIHJhZGlhdGlvbiwgVyBtLTIpXG5SQUlOIChwcmVjaXBpdGF0aW9uIHJhdGUsIG1tL2hvdXIpXG5VV05EIChXaW5kIFZlbG9jaXR5IEVhc3QsIG1ldGVycy9zZWNvbmQpXG5WV05EICh3aW5kIHZlbG9jaXR5IG5vcnRoLCBtZXRlcnMvc2Vjb25kKVxuVEVNUCAoc2VhIHRlbXBlcmF0dXJlLCBkZWdyZWVfQylcblBTQUwgKHNlYSB3YXRlciBwcmFjdGljYWwgc2FsaW5pdHksIC4wMDEpXG5DTkRDIChjb25kdWN0aXZpdHksIFMgbS0xKVxuVUNVUiAoRWFzdHdhcmQgU2VhIFdhdGVyIFZlbG9jaXR5LCBTIG0tMSlcblZDVVIgKE5vcnRod2FyZCBTZWEgV2F0ZXIgVmVsb2NpdHksIFMgbS0xKVxubGF0aXR1ZGUgKGFwcHJveGltYXRlIGxhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChhcHByb3hpbWF0ZSBsb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbndtb19wbGF0Zm9ybV9jb2RlXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvc3RyYXR1c19tZXRfYWI0M19lNjJhXzU0OTRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3N0cmF0dXNfbWV0X2FiNDNfZTYyYV81NDk0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3N0cmF0dXNfbWV0X2FiNDNfZTYyYV81NDk0L2luZGV4Lmpzb24iLCAiaHR0cDovL3VvcC53aG9pLmVkdS9wcm9qZWN0cy9zdHJhdHVzIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3N0cmF0dXNfbWV0X2FiNDNfZTYyYV81NDk0LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1zdHJhdHVzX21ldF9hYjQzX2U2MmFfNTQ5NCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJXSE9JIiwgInN0cmF0dXNfbWV0X2FiNDNfZTYyYV81NDk0Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3Rhb182ZWI0X2U3NzNfMmZiYy5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvdGFvXzZlYjRfZTc3M18yZmJjIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3Rhb182ZWI0X2U3NzNfMmZiYy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJPY2VhblNJVEVTIFRBTyBkYWlseSBpbi1zaXR1IGRhdGEiLCAiVGhpcyBmaWxlIGNvbnRhaW5zIGRhaWx5IHJlYWwtdGltZSBhbmQgZGVsYXllZC1tb2RlIGluLXNpdHUgZGF0YSBmcm9tIG9uZSBvZiB0aGUgZmx1eCByZWZlcmVuY2UgbW9vcmluZyBzaXRlcyBpbiB0aGUgdHJvcGljYWwgb2NlYW5zLiBJbmNsdWRlZCBpbiB0aGlzIGZpbGUgYXJlIHNlYSB0ZW1wZXJhdHVyZXMgZnJvbSB0aGUgc3VyZmFjZSB0byA1MDBtIGRlcHRoLCBzYWxpbml0eSBhbmQgZGVuc2l0eSAoc2lnbWEtdGhldGEpIGZyb20gdGhlIHN1cmZhY2UgdG8gdHlwaWNhbGx5IDEyMG0gZGVwdGgsIHNlYSBjdXJyZW50cyB0eXBpY2FsbHkgYXQgMTBtIGRlcHRoIGFuZCBhdCBzb21lIHNpdGVzIGRlZXBlciwgYSB2YXJpZXR5IG9mIHN1cmZhY2Ugb2JzZXJ2YXRpb25zIGZvciBuZXQgYWlyLXNlYSBmbHV4ZXMgb2YgaGVhdCwgbW9pc3R1cmUsIGFuZCBtb21lbnR1bSBpbmNsdWRpbmcgd2luZHMsIHNvbGFyIGFuZCBsb25nd2F2ZSByYWRpYXRpb24sIHJhaW4sIGFpciB0ZW1wZXJhdHVyZSwgcmVsYXRpdmUgaHVtaWRpdHksIGFuZCBzZWEgbGV2ZWwgYWlycHJlc3N1cmUuIEJ1b3kgcG9zaXRpb25zIGFyZSBhbHNvIGluY2x1ZGVkIGFzIHRpbWUgc2VyaWVzIG9mIGxhdGl0dWRlIGFuZCBsb25naXR1ZGUuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG53bW9fcGxhdGZvcm1fY29kZVxuc2l0ZV9jb2RlXG5zaXRlX2lkIChPY2VhblNJVEVTIHN0YXRpb24gSUQpXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKERlcHRoIG9mIGVhY2ggbWVhc3VyZW1lbnQsIG0pXG5sYXRpdHVkZSAoTGF0aXR1ZGUgb2YgZWFjaCBsb2NhdGlvbiwgZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoTG9uZ2l0dWRlIG9mIGVhY2ggbG9jYXRpb24sIGRlZ3JlZXNfZWFzdClcblRFTVAgKHRlbXBlcmF0dXJlLCBkZWdyZWVfQ2Vsc2l1cylcblRFTVBfUUMgKHF1YWxpdHkgZmxhZylcblRFTVBfRE0gKG1ldGhvZCBvZiBkYXRhIHByb2Nlc3NpbmcpXG5kZXBjdXIgKERlcHRoIG9mIGVhY2ggbWVhc3VyZW1lbnQsIG1ldGVycylcblVDVVIgKHpvbmFsIGN1cnJlbnQsIGNtL3MpXG5WQ1VSIChtZXJpZGlvbmFsIGN1cnJlbnQsIGNtL3MpXG5DU1BEIChjdXJyZW50IHNwZWVkLCBjbS9zKVxuQ1NQRF9RQyAocXVhbGl0eSBmbGFnKVxuQ1NQRF9ETSAobWV0aG9kIG9mIGRhdGEgcHJvY2Vzc2luZylcbkNESVIgKGN1cnJlbnQgZGlyZWN0aW9uIChvY2Vhbm9ncmFwaGljIGNvbnZlbnRpb24sIGZsb3dpbmcgdG8pLCBkZWdyZWUpXG5DRElSX1FDIChxdWFsaXR5IGZsYWcpXG5DRElSX0RNIChtZXRob2Qgb2YgZGF0YSBwcm9jZXNzaW5nKVxuZGVwcHNhbCAoRGVwdGggb2YgZWFjaCBtZWFzdXJlbWVudCwgbWV0ZXJzKVxuUFNBTCAoc2FsaW5pdHksIFBTVSlcbi4uLiAoNDIgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvdGFvXzZlYjRfZTc3M18yZmJjX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC90YW9fNmViNF9lNzczXzJmYmNfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vdGFvXzZlYjRfZTc3M18yZmJjL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvdGFvXzZlYjRfZTc3M18yZmJjLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD10YW9fNmViNF9lNzczXzJmYmMmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQS9QTUVMIiwgInRhb182ZWI0X2U3NzNfMmZiYyJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC93aG90c19mbHV4X2Y4MmZfNDY4NF9hNzRmLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC93aG90c19mbHV4X2Y4MmZfNDY4NF9hNzRmIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3dob3RzX2ZsdXhfZjgyZl80Njg0X2E3NGYuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiT2NlYW5TSVRFUyBXSE9UUyBzdXJmYWNlIG1vb3JpbmcgZmx1eGVzIGNhbGN1bGF0ZWQgd2l0aCBDb2FyZSAzLjAgYWxnb3JpdGhtIiwgIk9jZWFuU2l0ZXMgdGltZS1zZXJpZXMgRkxVWCAgZGF0YSBmcm9tIFdIT1RTIHN0YXRpb25cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5RQiAoc2Vuc2libGUgaGVhdCBmbHV4LCBXL20yKVxuUUggKGxhdGVudCBoZWF0IGZsdXgsIFcvbTIpXG5RTiAobmV0IGhlYXQgZmx1eCwgVy9tMilcblFMIChuZXQgbG9uZ3dhdmUsIFcvbTIpXG5RUyAobmV0IHNob3J0d2F2ZSwgVy9tMilcblRBVURJUiAod2luZCBzdHJlc3MgZGlyZWN0aW9uLCBkZWdyZWUgTilcblRBVU1BRyAod2luZCBzdHJlc3MgbWFnbml0dWRlLCBOL21eMilcblRTS0lOIChTU1QgYWRqdXN0ZWQgdG8gc2tpbiwgZGVncmVlKVxuV1NfSCAod2luZCBzcGVlZCBhZGp1c3RlZCB0byAxMG0sIG0vcylcblFRX0ggKHNwZWNpZmljIGh1bWlkaXR5IGFkanVzdGVkIHRvIDJtLCBnL2tnKVxuVEFfSCAoYWlyIHRlbXBlcmF0dXJlIGFkanVzdGVkIHRvIDJtLCBkZWdyZWVfQylcblRBVUUgKGVhc3Qgd2luZCBzdHJlc3MsIE4vbV4yKVxuVEFVTiAobm9ydGggd2luZCBzdHJlc3MsIE4vbV4yKVxuU1RBQklMSVRZIChzdGFiaWxpdHkgcGFyYW1ldGVyLCAxKVxuZGVwdGggKGRlcHRoIGNvb3JkaW5hdGUgb2YgdHNraW4sIG0pXG53bW9fcGxhdGZvcm1fY29kZVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC93aG90c19mbHV4X2Y4MmZfNDY4NF9hNzRmX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC93aG90c19mbHV4X2Y4MmZfNDY4NF9hNzRmX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3dob3RzX2ZsdXhfZjgyZl80Njg0X2E3NGYvaW5kZXguanNvbiIsICJodHRwOi8vdW9wLndob2kuZWR1L3Byb2plY3RzL3N0cmF0dXMiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3Mvd2hvdHNfZmx1eF9mODJmXzQ2ODRfYTc0Zi5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9d2hvdHNfZmx1eF9mODJmXzQ2ODRfYTc0ZiZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJXSE9JIiwgIndob3RzX2ZsdXhfZjgyZl80Njg0X2E3NGYiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvd2hvdHNfbWV0X2YxODNfZWUwNl84YjYzLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC93aG90c19tZXRfZjE4M19lZTA2XzhiNjMiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvd2hvdHNfbWV0X2YxODNfZWUwNl84YjYzLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk9jZWFuU0lURVMgV0hPVFMgc3VyZmFjZSBtb29yaW5nIE1FVCBkYXRhIiwgIk9jZWFuU2l0ZXMgdGltZS1zZXJpZXMgTUVUICBkYXRhIGZyb20gV0hPVFMgc3RhdGlvblxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbkFJUlQgKGFpciB0ZW1wZXJhdHVyZSwgZGVncmVlX0MpXG5SRUxIIChyZWxhdGl2ZSBodW1pZGl0eSwgcGVyY2VudClcbkFUTVMgKGJhcm9tZXRyaWMgcHJlc3N1cmUsIG1pbGxpYmFycylcbkxXIChzdXJmYWNlIGRvd253ZWxsaW5nIGxvbmd3YXZlIHJhZGlhdGlvbiwgVyBtLTIpXG5TVyAoc2hvcnR3YXZlIHJhZGlhdGlvbiwgVyBtLTIpXG5SQUlOIChwcmVjaXBpdGF0aW9uIHJhdGUsIG1tL2hvdXIpXG5VV05EIChXaW5kIFZlbG9jaXR5IEVhc3QsIG1ldGVycy9zZWNvbmQpXG5WV05EICh3aW5kIHZlbG9jaXR5IG5vcnRoLCBtZXRlcnMvc2Vjb25kKVxuVEVNUCAoc2VhIHRlbXBlcmF0dXJlLCBkZWdyZWVfQylcblBTQUwgKHNlYSB3YXRlciBwcmFjdGljYWwgc2FsaW5pdHksIC4wMDEpXG5DTkRDIChjb25kdWN0aXZpdHksIFMgbS0xKVxuVUNVUiAoRWFzdHdhcmQgU2VhIFdhdGVyIFZlbG9jaXR5LCBTIG0tMSlcblZDVVIgKE5vcnRod2FyZCBTZWEgV2F0ZXIgVmVsb2NpdHksIFMgbS0xKVxubGF0aXR1ZGUgKGFwcHJveGltYXRlIGxhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChhcHByb3hpbWF0ZSBsb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbndtb19wbGF0Zm9ybV9jb2RlXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvd2hvdHNfbWV0X2YxODNfZWUwNl84YjYzX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC93aG90c19tZXRfZjE4M19lZTA2XzhiNjNfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vd2hvdHNfbWV0X2YxODNfZWUwNl84YjYzL2luZGV4Lmpzb24iLCAiaHR0cDovL3VvcC53aG9pLmVkdS9wcm9qZWN0cy9zdHJhdHVzIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3dob3RzX21ldF9mMTgzX2VlMDZfOGI2My5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9d2hvdHNfbWV0X2YxODNfZWUwNl84YjYzJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIldIT0kiLCAid2hvdHNfbWV0X2YxODNfZWUwNl84YjYzIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL09TTUNfUFJPRklMRVJTLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9PU01DX1BST0ZJTEVSUyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9PU01DX1BST0ZJTEVSUy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJPU01DIEFyZ28gUHJvZmlsZSBkYXRhIiwgIk9TTUMgQXJnbyBQcm9maWxlIGRhdGFcblxuY2RtX2RhdGFfdHlwZSA9IFByb2ZpbGVcblZBUklBQkxFUzpcbnBsYXRmb3JtX2NvZGVcbm9yZ2FuaXphdGlvbl9uYW1lXG5jb3VudHJ5X25hbWVcbnBsYXRmb3JtX3R5cGVfbmFtZVxudGltZSAoT0JTRVJWQVRJT04gREFURSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnBhcmFtZXRlcl9uYW1lXG5kYWlseV9vYnNfY291bnRcbm9ic2VydmF0aW9uX2RlcHRoXG5vYnNlcnZhdGlvbl92YWx1ZVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9PU01DX1BST0ZJTEVSU19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvT1NNQ19QUk9GSUxFUlNfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vT1NNQ19QUk9GSUxFUlMvaW5kZXguanNvbiIsICJ3d3cub3NtYy5ub2FhLmdvdiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9PU01DX1BST0ZJTEVSUy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9T1NNQ19QUk9GSUxFUlMmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiT1NNQyIsICJPU01DX1BST0ZJTEVSUyJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9PU01DX2ZsYXR0ZW5lZC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvT1NNQ19mbGF0dGVuZWQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvT1NNQ19mbGF0dGVuZWQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiT1NNQyBmbGF0dGVuZWQgb2JzZXJ2YXRpb25zIGZyb20gR1RTIiwgIk9TTUMgZmxhdHRlbmVkIG9ic2VydmF0aW9ucyBmcm9tIEdUUywgcHJvdmlkaW5nIHR1cGxlZCBkYXRhIGF2YWlsYWJpbGl0eVxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbnBsYXRmb3JtX2lkXG5wbGF0Zm9ybV9jb2RlXG5wbGF0Zm9ybV90eXBlXG5jb3VudHJ5XG50aW1lIChvYnNlcnZhdGlvbiBkYXRlLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbm9ic2VydmF0aW9uX2RlcHRoXG5zc3QgKHNlYSBzdXJmYWNlIHRlbXBlcmF0dXJlLCBEZWcgQylcbmF0bXAgKGFpciB0ZW1wZXJhdHVyZSwgRGVnIEMpXG5wcmVjaXAgKHByZWNpcGl0YXRpb24sIG1tKVxuenRtcCAocHJvZmlsZSB3YXRlciB0ZW1wZXJhdHVyZSwgRGVnIEMpXG56c2FsIChwcm9maWxlIHNhbGluaXR5KVxuc2xwIChzZWEgbGV2ZWwgcHJlc3N1cmUsIGhQYSlcbndpbmRzcGQgKHdpbmQgc3BlZWQsIG0vcylcbndpbmRkaXIgKHdpbmQgZnJvbSBkaXJlY3Rpb24sIERlZyB0cnVlKVxud3ZodCAoc2VhIHN1cmZhY2Ugd2F2ZSBzaWduaWZpY2FudCBoZWlnaHQsIG0pXG53YXRlcmxldmVsIChtKVxuY2xvdWRzIChjbG91ZCBjb3Zlciwgb2t0YXMpXG5kZXdwb2ludCAoZGV3IHBvaW50IHRlbXBlcmF0dXJlLCBEZWcgQylcbnVvIChlYXN0d2FyZCBzZWEgd2F0ZXIgdmVsb2NpdHksIG0gcy0xKVxudm8gKG5vcnRod2FyZCBzZWEgd2F0ZXIgdmVsb2NpdHksIG0gcy0xKVxud28gKHVwd2FyZCBzZWEgd2F0ZXIgdmVsb2NpdHksIG0gcy0xKVxucmFpbmZhbGxfcmF0ZSAobSBzLTEpXG5odXIgKHJlbGF0aXZlIGh1bWlkaXR5KVxuc2VhX3dhdGVyX2VsZWNfY29uZHVjdGl2aXR5IChzZWEgd2F0ZXIgZWxlY3RyaWNhbCBjb25kdWN0aXZpdHksIFMgbS0xKVxuc2VhX3dhdGVyX3ByZXNzdXJlIChkYmFyKVxuLi4uICg3IG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL09TTUNfZmxhdHRlbmVkX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9PU01DX2ZsYXR0ZW5lZF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9PU01DX2ZsYXR0ZW5lZC9pbmRleC5qc29uIiwgInd3dy5vc21jLm5vYWEuZ292IiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL09TTUNfZmxhdHRlbmVkLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1PU01DX2ZsYXR0ZW5lZCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJPU01DIiwgIk9TTUNfZmxhdHRlbmVkIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL09TTUNfUG9pbnRzLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9PU01DX1BvaW50cyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9PU01DX1BvaW50cy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJPU01DIG5vcm1hbGl6ZWQgb2JzZXJ2YXRpb25zIGZyb20gR1RTIiwgIk9TTUMgbm9ybWFsaXplZCBJbi1zaXR1IFJlYWwgdGltZSBHVFMgZGF0YVxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcblBMQVRGT1JNX0NPREUgKFN0YXRpb24gSUQpXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbnBsYXRmb3JtXG5wYXJhbWV0ZXJcbk9CU0VSVkFUSU9OX1ZBTFVFXG5PQlNFUlZBVElPTl9ERVBUSFxuQ09VTlRSWV9OQU1FXG5vcmdhbml6YXRpb25fbmFtZVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL09TTUNfUG9pbnRzX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9PU01DX1BvaW50c19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9PU01DX1BvaW50cy9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cub3NtYy5ub2FhLmdvdiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9PU01DX1BvaW50cy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9T1NNQ19Qb2ludHMmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiT1NNQyIsICJPU01DX1BvaW50cyJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9PU01DVjRfRFVPX1BST0ZJTEVTLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9PU01DVjRfRFVPX1BST0ZJTEVTIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL09TTUNWNF9EVU9fUFJPRklMRVMuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiT1NNQyBQcm9maWxlcyIsICJPU01DIHByb2ZpbGVzIGZyb20gR1RTXG5cbmNkbV9kYXRhX3R5cGUgPSBQcm9maWxlXG5WQVJJQUJMRVM6XG5wbGF0Zm9ybV9jb2RlXG5wbGF0Zm9ybV90eXBlXG5jb3VudHJ5XG50aW1lIChPQlNFUlZBVElPTiBEQVRFLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmRlcHRoIChPQlNFUlZBVElPTiBERVBUSCwgbSlcbnp0bXAgKHByb2ZpbGUgd2F0ZXIgdGVtcGVyYXR1cmUsIERlZyBDKVxuenNhbCAoU2VhIFdhdGVyIFNhbGluaXR5KVxuc2VhX3dhdGVyX2VsZWNfY29uZHVjdGl2aXR5IChTZWEgV2F0ZXIgRWxlY3RyaWNhbCBDb25kdWN0aXZpdHksIFMgbS0xKVxuc2VhX3dhdGVyX3ByZXNzdXJlIChkYmFyKVxubm9ydGh3YXJkX3NlYV93YXRlcl92ZWxvY2l0eSAobSBzLTEpXG5lYXN0d2FyZF9zZWFfd2F0ZXJfdmVsb2NpdHkgKG0gcy0xKVxudXB3YXJkX3NlYV93YXRlcl92ZWxvY2l0eSAobSBzLTEpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvT1NNQ1Y0X0RVT19QUk9GSUxFU19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvT1NNQ1Y0X0RVT19QUk9GSUxFU19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9PU01DVjRfRFVPX1BST0ZJTEVTL2luZGV4Lmpzb24iLCAid3d3Lm9zbWMubm9hYS5nb3YiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvT1NNQ1Y0X0RVT19QUk9GSUxFUy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9T1NNQ1Y0X0RVT19QUk9GSUxFUyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJPU01DIiwgIk9TTUNWNF9EVU9fUFJPRklMRVMiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvT1NNQ1Y0X0RVT19TVVJGQUNFX1RSQUpFQ1RPUlkuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL09TTUNWNF9EVU9fU1VSRkFDRV9UUkFKRUNUT1JZIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL09TTUNWNF9EVU9fU1VSRkFDRV9UUkFKRUNUT1JZLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk9TTUMgc3VyZmFjZSB0cmFqZWN0b3J5IGRhdGEiLCAiU3VyZmFjZSB0cmFqZWN0b3J5IGRhdGEgZnJvbSBHVFNcblxuY2RtX2RhdGFfdHlwZSA9IFRyYWplY3RvcnlcblZBUklBQkxFUzpcbnBsYXRmb3JtX2lkXG5wbGF0Zm9ybV9jb2RlXG5wbGF0Zm9ybV90eXBlXG5jb3VudHJ5XG50aW1lIChPQlNFUlZBVElPTiBEQVRFLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbm9ic2VydmF0aW9uX2RlcHRoXG5zc3QgKHNlYSBzdXJmYWNlIHRlbXBlcmF0dXJlLCBEZWcgQylcbmF0bXAgKGFpciB0ZW1wZXJhdHVyZSwgRGVnIEMpXG5wcmVjaXAgKHByZWNpcGl0YXRpb24sIG1tKVxuenRtcCAocHJvZmlsZSB3YXRlciB0ZW1wZXJhdHVyZSwgRGVnIEMpXG56c2FsIChwcm9maWxlIHNhbGluaXR5KVxuc3NzXG5zbHAgKHNlYSBsZXZlbCBwcmVzc3VyZSwgaFBhKVxud2luZHNwZCAod2luZCBzcGVlZCwgbS9zKVxud2luZGRpciAoV2luZCBGcm9tIERpcmVjdGlvbiwgRGVnIHRydWUpXG53dmh0IChTZWEgU3VyZmFjZSBXYXZlIFNpZ25pZmljYW50IEhlaWdodCwgbSlcbndhdGVybGV2ZWwgKG0pXG5jbG91ZHMgKGNsb3VkIGNvdmVyLCBva3RhcylcbmRld3BvaW50IChkZXcgcG9pbnQgdGVtcGVyYXR1cmUsIERlZyBDKVxuZWFzdHdhcmRfc2VhX3dhdGVyX3ZlbG9jaXR5IChtIHMtMSlcbm5vcnRod2FyZF9zZWFfd2F0ZXJfdmVsb2NpdHkgKG0gcy0xKVxudXB3YXJkX3NlYV93YXRlcl92ZWxvY2l0eSAobSBzLTEpXG5yYWluZmFsbF9yYXRlIChtIHMtMSlcbnJlbGF0aXZlX2h1bWlkaXR5XG5zZWFfd2F0ZXJfZWxlY3RyaWNhbF9jb25kIChzZWEgd2F0ZXIgZWxlY3RyaWNhbCBjb25kdWN0aXZpdHksIFMgbS0xKVxuLi4uICg4IG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL09TTUNWNF9EVU9fU1VSRkFDRV9UUkFKRUNUT1JZX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9PU01DVjRfRFVPX1NVUkZBQ0VfVFJBSkVDVE9SWV9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9PU01DVjRfRFVPX1NVUkZBQ0VfVFJBSkVDVE9SWS9pbmRleC5qc29uIiwgInd3dy5vc21jLm5vYWEuZ292IiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL09TTUNWNF9EVU9fU1VSRkFDRV9UUkFKRUNUT1JZLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1PU01DVjRfRFVPX1NVUkZBQ0VfVFJBSkVDVE9SWSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJPU01DIiwgIk9TTUNWNF9EVU9fU1VSRkFDRV9UUkFKRUNUT1JZIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL09TTUNWNF9EVU9fVElNRV9TRVJJRVMuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL09TTUNWNF9EVU9fVElNRV9TRVJJRVMiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvT1NNQ1Y0X0RVT19USU1FX1NFUklFUy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJPU01DIFRpbWVTZXJpZXMgZGF0YSIsICJPU01DIFRpbWVTZXJpZXMgZGF0YVxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxucGxhdGZvcm1faWRcbnBsYXRmb3JtX2NvZGVcbnBsYXRmb3JtX3R5cGUgKFBMQVRGT1IgVFlQRSlcbmNvdW50cnlcbnRpbWUgKE9CU0VSVkFUSU9OIERBVEUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5vYnNlcnZhdGlvbl9kZXB0aFxuc3N0XG5hdG1wXG5wcmVjaXBcbnp0bXBcbnpzYWwgKFNlYSBXYXRlciBTYWxpbml0eSlcbnNzcyAoU2VhIFdhdGVyIFNhbGluaXR5KVxuc2xwIChTdXJmYWNlIEFpciBQcmVzc3VyZSlcbndpbmRzcGRcbndpbmRkaXIgKFdpbmQgRnJvbSBEaXJlY3Rpb24pXG53dmh0IChTZWEgU3VyZmFjZSBXYXZlIFNpZ25pZmljYW50IEhlaWdodClcbndhdGVybGV2ZWxcbmNsb3Vkc1xuZGV3cG9pbnRcbmVhc3R3YXJkX3NlYV93YXRlcl92ZWxcbm5vcnRod2FyZF9zZWFfd2F0ZXJfdmVsXG51cHdhcmRfc2VhX3dhdGVyX3ZlbFxucmFpbmZhbGxfcmF0ZVxucmVsYXRpdmVfaHVtaWRpdHlcbnNlYV93YXRlcl9lbGVjdHJpY2FsX2NvbmRcbnNlYV93YXRlcl9wcmVzc3VyZVxuc3VyZmFjZV9kd253ZWxsaW5nX2xuZ3dhdmVcbi4uLiAoNyBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9PU01DVjRfRFVPX1RJTUVfU0VSSUVTX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9PU01DVjRfRFVPX1RJTUVfU0VSSUVTX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL09TTUNWNF9EVU9fVElNRV9TRVJJRVMvaW5kZXguanNvbiIsICJ3d3cub3NtYy5ub2FhLmdvdiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9PU01DVjRfRFVPX1RJTUVfU0VSSUVTLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1PU01DVjRfRFVPX1RJTUVfU0VSSUVTJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk9TTUMiLCAiT1NNQ1Y0X0RVT19USU1FX1NFUklFUyJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfNDE3ZF8zM2FkX2RlYWQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF80MTdkXzMzYWRfZGVhZCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfNDE3ZF8zM2FkX2RlYWQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiUGFjaWZpYyBJc2xhbmQgTmV0d29yayBNYXJpbmUgRmlzaCBNb25pdG9yaW5nIERhdGFzZXQgLSBTdXJ2ZXlzIiwgIk5hdGlvbmFsIFBhcmsgU2VydmljZSBGaXNoIFN0b2NrIERhdGFcblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbm1pbmltdW1EZXB0aEluTWV0ZXJzXG5tYXhpbXVtRGVwdGhJbk1ldGVyc1xuaXNsYW5kR3JvdXBcbnZlcm5hY3VsYXJOYW1lXG5zY2llbnRpZmljTmFtZVxub2lkXG5tb2RpZmllZFxuZGF0YXNldElEXG5kYXRhc2V0TmFtZVxuaW5zdGl0dXRpb25Db2RlXG5jb2xsZWN0aW9uQ29kZVxuaGlnaGVySW5zdGl0dXRpb25Db2RlXG5vd25lckluc3RpdHV0aW9uQ29kZVxuYmFzaXNPZlJlY29yZFxuY2F0YWxvZ051bWJlclxudGF4b25SYW5rXG52ZXJiYXRpbUNvb3JkaW5hdGVzXG52ZXJiYXRpbVNSU1xuZ2VvZGV0aWNEYXR1bVxuY29vcmRpbmF0ZVVuY2VydGFpbnR5SW5NZXRlcnNcbmdlb3JlZmVyZW5jZWRCeVxuZ2VvcmVmZXJlbmNlUHJvdG9jb2xcbndhdGVyQm9keVxuaXNsYW5kXG4uLi4gKDY3IG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2hhd2FpaV9zb2VzdF80MTdkXzMzYWRfZGVhZF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvaGF3YWlpX3NvZXN0XzQxN2RfMzNhZF9kZWFkX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2hhd2FpaV9zb2VzdF80MTdkXzMzYWRfZGVhZC9pbmRleC5qc29uIiwgImh0dHA6Ly9zY2llbmNlLm5hdHVyZS5ucHMuZ292L2ltL3VuaXRzL3BhY24vbW9uaXRvcmluZy92c19maXNoX21hcmluZS5jZm0iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvaGF3YWlpX3NvZXN0XzQxN2RfMzNhZF9kZWFkLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1oYXdhaWlfc29lc3RfNDE3ZF8zM2FkX2RlYWQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiVVNET0kvTlBTL05SU1MvSU1EL1BBQ04iLCAiaGF3YWlpX3NvZXN0XzQxN2RfMzNhZF9kZWFkIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF8zMWJiX2VlZTlfZWYwYS5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0XzMxYmJfZWVlOV9lZjBhIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF8zMWJiX2VlZTlfZWYwYS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJQYWNpZmljIElzbGFuZCBOZXR3b3JrIE1hcmluZSBGaXNoIE1vbml0b3JpbmcgRGF0YXNldCAtIFRyYW5zZWN0cyIsICJUaGUgYmVudGhpYyBtYXJpbmUgY29tbXVuaXR5IGluIHRoZSBQYWNpZmljIElzbGFuZCBOZXR3b3JrIChQQUNOKSBpcyBhIGNvbXBsZXggZWNvbG9naWMgc3lzdGVtIGFuZCBhIGRpdmVyc2UgdGF4b25vbWljIGVudmlyb25tZW50LCBpbmNsdWRpbmcgYWxnYWUgYW5kIGNvcmFscyBhbmQgb3RoZXIgaW52ZXJ0ZWJyYXRlcy4gUmVlZi1idWlsZGluZyBjb3JhbHMgYXJlIHRoZSBwcmltYXJ5IGFyY2hpdGVjdHVyYWwgb3JnYW5pc20gYW5kIGFyZSBzZW5zaXRpdmUgdG8gZW52aXJvbm1lbnRhbCBkZWdyYWRhdGlvbjsgdGhlcmVmb3JlLCB0aGV5IGFyZSBhIGdvb2QgaW5kaWNhdG9yIG9mIG92ZXJhbGwgaGVhbHRoIGZvciBuZWFyc2hvcmUgbWFyaW5lIGVjb3N5c3RlbXMuIFByaW1hcnkgc3RyZXNzb3JzIHRvIGNvcmFsIHJlZWZzIGluY2x1ZGUgZGlzZWFzZSwgYmxlYWNoaW5nLCBzZWRpbWVudGF0aW9uLCBldXRyb3BoaWNhdGlvbiwgc3Rvcm1zLCBhbmQgZ2xvYmFsIGNsaW1hdGUgY2hhbmdlLiBUaGUgVW5pdGVkIE5hdGlvbnMgRW52aXJvbm1lbnQgUHJvZ3JhbW1lIChVTkVQKSBoYXMgcHJvcG9zZWQgdXNpbmcgY29yYWwgcmVlZnMgYXMgYSB3b3JsZHdpZGUgaW5kaWNhdG9yIGVjb3N5c3RlbSBmb3IgZ2xvYmFsIGNsaW1hdGUgY2hhbmdlIChTcGFsZGluZyBldCBhbC4gMjAwNCkuIEZvciB0aGVzZSByZWFzb25zLCB0aGUgUEFDTiBoYXMgY2hvc2VuIHRvIGltcGxlbWVudCBsb25nIHRlcm0gbW9uaXRvcmluZyBvZiBiZW50aGljIG1hcmluZSBjb21tdW5pdGllcy4gQmVudGhpYyBtYXJpbmUgY29tbXVuaXRpZXMgaXMgbW9zdCBjbG9zZWx5IGxpbmtlZCB3aXRoIG1hcmluZSBmaXNoLCBhbmQgbW9uaXRvcmluZyBlZmZvcnRzIHdpbGwgYmUgY29uZHVjdGVkIGF0IHRoZSBzYW1lIHRpbWUgYW5kIGxvY2F0aW9uIHRvIG1heGltaXplIGRhdGEgdmFsdWVcblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbm1pbmltdW1EZXB0aEluTWV0ZXJzXG5tYXhpbXVtRGVwdGhJbk1ldGVyc1xuaXNsYW5kR3JvdXBcbnZlcm5hY3VsYXJOYW1lXG5zY2llbnRpZmljTmFtZVxub2lkXG5tb2RpZmllZFxuZGF0YXNldElEXG5kYXRhc2V0TmFtZVxuaW5zdGl0dXRpb25Db2RlXG5jb2xsZWN0aW9uQ29kZVxuaW5zdGl0dXRpb25JRFxuY29sbGVjdGlvbklEXG5vd25lckluc3RpdHV0aW9uQ29kZVxuYmFzaXNPZlJlY29yZFxuLi4uICg1OCBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9oYXdhaWlfc29lc3RfMzFiYl9lZWU5X2VmMGFfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2hhd2FpaV9zb2VzdF8zMWJiX2VlZTlfZWYwYV9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9oYXdhaWlfc29lc3RfMzFiYl9lZWU5X2VmMGEvaW5kZXguanNvbiIsICJodHRwOi8vc2NpZW5jZS5uYXR1cmUubnBzLmdvdi9pbS91bml0cy9wYWNuL21vbml0b3JpbmcvdnNfZmlzaF9tYXJpbmUuY2ZtIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2hhd2FpaV9zb2VzdF8zMWJiX2VlZTlfZWYwYS5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9aGF3YWlpX3NvZXN0XzMxYmJfZWVlOV9lZjBhJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIlVTRE9JL05QUy9OUlNTL0lNRC9QQUNOIiwgImhhd2FpaV9zb2VzdF8zMWJiX2VlZTlfZWYwYSJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0XzU2NzNfNTE3ZF8zYjhjIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF81NjczXzUxN2RfM2I4Yy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJQYWNJT09TIE5lYXJzaG9yZSBTZW5zb3IgMDEgKE5TMDEpOiBXYWlraWtpIFlhY2h0IENsdWIsIE9haHUsIEhhd2FpaSIsICJUaGUgbmVhcnNob3JlIHNlbnNvcnMgYXJlIHBhcnQgb2YgdGhlIFBhY2lmaWMgSXNsYW5kcyBPY2VhbiBPYnNlcnZpbmcgU3lzdGVtIChQYWNJT09TKSBhbmQgYXJlIGRlc2lnbmVkIHRvIG1lYXN1cmUgYSB2YXJpZXR5IG9mIG9jZWFuIHBhcmFtZXRlcnMgYXQgZml4ZWQgcG9pbnQgbG9jYXRpb25zIGFsb25nIHRoZSBzb3V0aCBzaG9yZSBvZiBPYWh1LiBOUzAxIGlzIGxvY2F0ZWQgYXQgdGhlIFdhaWtpa2kgWWFjaHQgQ2x1YiBhbmQgaXMgZml4ZWQgdG8gdGhlIGJyaWRnZSBwaWVyLiBUaGUgaW5zdHJ1bWVudCBpcyBhIFNlYS1CaXJkIEVsZWN0cm9uaWNzIG1vZGVsIDE2KyBWMiBjb3VwbGVkIHdpdGggYSBXRVQgTGFicyBFQ08tRkxOVFVTIGNvbWJpbmF0aW9uIHNlbnNvci4gVGhlIHBhY2thZ2UgaXMgZml4ZWQgdG8gYSBwaWxpbmcgfjAuNW0gYmVsb3cgbWVhbiBzZWEgbGV2ZWwuXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChkZXB0aCBiZWxvdyBtZWFuIHNlYSBsZXZlbCwgbSlcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG50ZW1wZXJhdHVyZSAoQ2Vsc2l1cylcbmNvbmR1Y3Rpdml0eSAoUyBtLTEpXG50dXJiaWRpdHkgKE5UVSlcbmNobG9yb3BoeWxsIChrZyBtLTMpXG5zYWxpbml0eSAoMWUtMylcbnByZXNzdXJlIChkYmFyKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2hhd2FpaV9zb2VzdF81NjczXzUxN2RfM2I4Y19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvaGF3YWlpX3NvZXN0XzU2NzNfNTE3ZF8zYjhjX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2hhd2FpaV9zb2VzdF81NjczXzUxN2RfM2I4Yy9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cucGFjaW9vcy5oYXdhaWkuZWR1L3dhdGVyL3NlbnNvci13YWlraWtpLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9oYXdhaWlfc29lc3RfNTY3M181MTdkXzNiOGMucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWhhd2FpaV9zb2VzdF81NjczXzUxN2RfM2I4YyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJVbml2ZXJzaXR5IG9mIEhhd2FpaSIsICJoYXdhaWlfc29lc3RfNTY3M181MTdkXzNiOGMiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF8xMjczX2ZhZDFfMDQwNCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfMTI3M19mYWQxXzA0MDQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiUGFjSU9PUyBOZWFyc2hvcmUgU2Vuc29yIDAyIChOUzAyKTogSGF3YWlpIFlhY2h0IENsdWIsIE9haHUsIEhhd2FpaSIsICJUaGUgbmVhcnNob3JlIHNlbnNvcnMgYXJlIHBhcnQgb2YgdGhlIFBhY2lmaWMgSXNsYW5kcyBPY2VhbiBPYnNlcnZpbmcgU3lzdGVtIChQYWNJT09TKSBhbmQgYXJlIGRlc2lnbmVkIHRvIG1lYXN1cmUgYSB2YXJpZXR5IG9mIG9jZWFuIHBhcmFtZXRlcnMgYXQgZml4ZWQgcG9pbnQgbG9jYXRpb25zIGFsb25nIHRoZSBzb3V0aCBzaG9yZSBvZiBPYWh1LiBOUzAyIGlzIGxvY2F0ZWQgYXQgYSBmbG9hdGluZyBkb2NrIG9mZiB0aGUgSGF3YWlpIFlhY2h0IENsdWIuIFRoZSBpbnN0cnVtZW50IGlzIGEgU2VhLUJpcmQgRWxlY3Ryb25pY3MgbW9kZWwgMTYrIFYyIGNvdXBsZWQgd2l0aCBhIFdFVCBMYWJzIEVDTy1GTE5UVVMgY29tYmluYXRpb24gc2Vuc29yLiBUaGUgcGFja2FnZSBpcyBmaXhlZCB0byBhIGZsb2F0aW5nIGRvY2sganVzdCBiZWxvdyB0aGUgb2NlYW4gc3VyZmFjZS5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKGRlcHRoIGJlbG93IG1lYW4gc2VhIGxldmVsLCBtKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbnRlbXBlcmF0dXJlIChUZW1wZXJhdHVyZSAocHJvY2Vzc2VkKSwgQ2Vsc2l1cylcbnRlbXBlcmF0dXJlX3JhdyAoVGVtcGVyYXR1cmUgKHJhdyksIENlbHNpdXMpXG50ZW1wZXJhdHVyZV9kbV9xZCAoVGVtcGVyYXR1cmUgcXVhbGl0eSBkZXNjcmlwdG9yKVxuY29uZHVjdGl2aXR5IChDb25kdWN0aXZpdHkgKHByb2Nlc3NlZCksIFMgbS0xKVxuY29uZHVjdGl2aXR5X3JhdyAoQ29uZHVjdGl2aXR5IChyYXcpLCBTIG0tMSlcbmNvbmR1Y3Rpdml0eV9kbV9xZCAoQ29uZHVjdGl2aXR5IHF1YWxpdHkgZGVzY3JpcHRvcilcbnR1cmJpZGl0eSAoVHVyYmlkaXR5IChwcm9jZXNzZWQpLCBOVFUpXG50dXJiaWRpdHlfcmF3IChUdXJiaWRpdHkgKHJhdyksIE5UVSlcbnR1cmJpZGl0eV9kbV9xZCAoVHVyYmlkaXR5IHF1YWxpdHkgZGVzY3JpcHRvcilcbmNobG9yb3BoeWxsIChDaGxvcm9waHlsbCAocHJvY2Vzc2VkKSwga2cgbS0zKVxuY2hsb3JvcGh5bGxfcmF3IChDaGxvcm9waHlsbCAocmF3KSwga2cgbS0zKVxuY2hsb3JvcGh5bGxfZG1fcWQgKENobG9yb3BoeWxsIHF1YWxpdHkgZGVzY3JpcHRvcilcbnNhbGluaXR5IChTYWxpbml0eSAocHJvY2Vzc2VkKSwgMWUtMylcbnNhbGluaXR5X3JhdyAoU2FsaW5pdHkgKHJhdyksIDFlLTMpXG5zYWxpbml0eV9kbV9xZCAoU2FsaW5pdHkgcXVhbGl0eSBkZXNjcmlwdG9yKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2hhd2FpaV9zb2VzdF8xMjczX2ZhZDFfMDQwNF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvaGF3YWlpX3NvZXN0XzEyNzNfZmFkMV8wNDA0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2hhd2FpaV9zb2VzdF8xMjczX2ZhZDFfMDQwNC9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cucGFjaW9vcy5oYXdhaWkuZWR1L3dhdGVyL3NlbnNvci1oYXdhaWl5YWNodGNsdWIvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2hhd2FpaV9zb2VzdF8xMjczX2ZhZDFfMDQwNC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9aGF3YWlpX3NvZXN0XzEyNzNfZmFkMV8wNDA0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIlVuaXZlcnNpdHkgb2YgSGF3YWlpIiwgImhhd2FpaV9zb2VzdF8xMjczX2ZhZDFfMDQwNCJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0X2Q3ODdfMWMzNV8yMDhkIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF9kNzg3XzFjMzVfMjA4ZC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJQYWNJT09TIE5lYXJzaG9yZSBTZW5zb3IgMDMgKE5TMDMpOiBIaWx0b24gSGF3YWlpYW4gUGllciwgT2FodSwgSGF3YWlpIiwgIlRoZSBuZWFyc2hvcmUgc2Vuc29ycyBhcmUgcGFydCBvZiB0aGUgUGFjaWZpYyBJc2xhbmRzIE9jZWFuIE9ic2VydmluZyBTeXN0ZW0gKFBhY0lPT1MpIGFuZCBhcmUgZGVzaWduZWQgdG8gbWVhc3VyZSBhIHZhcmlldHkgb2Ygb2NlYW4gcGFyYW1ldGVycyBhdCBmaXhlZCBwb2ludCBsb2NhdGlvbnMgYWxvbmcgdGhlIHNvdXRoIHNob3JlIG9mIE9haHUuIE5TMDMgaXMgbG9jYXRlZCBhdCB0aGUgQXRsYW50aXMgUGllciBvZmYgdGhlIEhpbHRvbiBIYXdhaWlhbiBWaWxsYWdlLiBUaGUgaW5zdHJ1bWVudCBpcyBhIFNlYS1CaXJkIEVsZWN0cm9uaWNzIG1vZGVsIDM3U01QLiBUaGUgcGFja2FnZSBpcyBsb2NhdGVkIGF0IGFwcHJveGltYXRlbHkgMi4wIG1ldGVycyBiZWxvdyBtZWFuIHNlYSBsZXZlbC5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKGRlcHRoIGJlbG93IG1lYW4gc2VhIGxldmVsLCBtKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbnRlbXBlcmF0dXJlIChUZW1wZXJhdHVyZSAocHJvY2Vzc2VkKSwgQ2Vsc2l1cylcbnRlbXBlcmF0dXJlX3JhdyAoVGVtcGVyYXR1cmUgKHJhdyksIENlbHNpdXMpXG50ZW1wZXJhdHVyZV9kbV9xZCAoVGVtcGVyYXR1cmUgcXVhbGl0eSBkZXNjcmlwdG9yKVxuY29uZHVjdGl2aXR5IChDb25kdWN0aXZpdHkgKHByb2Nlc3NlZCksIFMgbS0xKVxuY29uZHVjdGl2aXR5X3JhdyAoQ29uZHVjdGl2aXR5IChyYXcpLCBTIG0tMSlcbmNvbmR1Y3Rpdml0eV9kbV9xZCAoQ29uZHVjdGl2aXR5IHF1YWxpdHkgZGVzY3JpcHRvcilcbnNhbGluaXR5IChTYWxpbml0eSAocHJvY2Vzc2VkKSwgMWUtMylcbnNhbGluaXR5X3JhdyAoU2FsaW5pdHkgKHJhdyksIDFlLTMpXG5zYWxpbml0eV9kbV9xZCAoU2FsaW5pdHkgcXVhbGl0eSBkZXNjcmlwdG9yKVxucHJlc3N1cmUgKFByZXNzdXJlIChwcm9jZXNzZWQpLCBkYmFyKVxucHJlc3N1cmVfcmF3IChQcmVzc3VyZSAocmF3KSwgZGJhcilcbnByZXNzdXJlX2RtX3FkIChQcmVzc3VyZSBxdWFsaXR5IGRlc2NyaXB0b3IpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvaGF3YWlpX3NvZXN0X2Q3ODdfMWMzNV8yMDhkX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9oYXdhaWlfc29lc3RfZDc4N18xYzM1XzIwOGRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vaGF3YWlpX3NvZXN0X2Q3ODdfMWMzNV8yMDhkL2luZGV4Lmpzb24iLCAiaHR0cDovL3d3dy5wYWNpb29zLmhhd2FpaS5lZHUvd2F0ZXIvc2Vuc29yLWF0bGFudGlzLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9oYXdhaWlfc29lc3RfZDc4N18xYzM1XzIwOGQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWhhd2FpaV9zb2VzdF9kNzg3XzFjMzVfMjA4ZCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJVbml2ZXJzaXR5IG9mIEhhd2FpaSIsICJoYXdhaWlfc29lc3RfZDc4N18xYzM1XzIwOGQiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF9jOWY5X2MyMzJfMWZlOSIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfYzlmOV9jMjMyXzFmZTkuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiUGFjSU9PUyBOZWFyc2hvcmUgU2Vuc29yIDA0IChOUzA0KTogV2Fpa2lraSBBcXVhcml1bSwgT2FodSwgSGF3YWlpIiwgIlRoZSBuZWFyc2hvcmUgc2Vuc29ycyBhcmUgcGFydCBvZiB0aGUgUGFjaWZpYyBJc2xhbmRzIE9jZWFuIE9ic2VydmluZyBTeXN0ZW0gKFBhY0lPT1MpIGFuZCBhcmUgZGVzaWduZWQgdG8gbWVhc3VyZSBhIHZhcmlldHkgb2Ygb2NlYW4gcGFyYW1ldGVycyBhdCBmaXhlZCBwb2ludCBsb2NhdGlvbnMgYWxvbmcgdGhlIHNvdXRoIHNob3JlIG9mIE9haHUuIE5TMDQgaXMgbG9jYXRlZCBqdXN0IG9mZiB0aGUgV2Fpa2lraSBBcXVhcml1bSBhbmQgaXMgZml4ZWQgdG8gdGhlIHBpZXIuIFRoZSBpbnN0cnVtZW50IGlzIGEgU2VhLUJpcmQgRWxlY3Ryb25pY3MgbW9kZWwgMzdTTVAuIFRoZSBwYWNrYWdlIGlzIG1vdW50ZWQgb24gdGhlIGJvdHRvbSBpbiBhcHByb3hpbWF0ZWx5IDIuMCB0byAyLjUgbWV0ZXJzIG9jZWFuIGRlcHRoLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAoZGVwdGggYmVsb3cgbWVhbiBzZWEgbGV2ZWwsIG0pXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxudGVtcGVyYXR1cmUgKFRlbXBlcmF0dXJlIChwcm9jZXNzZWQpLCBDZWxzaXVzKVxudGVtcGVyYXR1cmVfcmF3IChUZW1wZXJhdHVyZSAocmF3KSwgQ2Vsc2l1cylcbnRlbXBlcmF0dXJlX2RtX3FkIChUZW1wZXJhdHVyZSBxdWFsaXR5IGRlc2NyaXB0b3IpXG5jb25kdWN0aXZpdHkgKENvbmR1Y3Rpdml0eSAocHJvY2Vzc2VkKSwgUyBtLTEpXG5jb25kdWN0aXZpdHlfcmF3IChDb25kdWN0aXZpdHkgKHJhdyksIFMgbS0xKVxuY29uZHVjdGl2aXR5X2RtX3FkIChDb25kdWN0aXZpdHkgcXVhbGl0eSBkZXNjcmlwdG9yKVxuc2FsaW5pdHkgKFNhbGluaXR5IChwcm9jZXNzZWQpLCAxZS0zKVxuc2FsaW5pdHlfcmF3IChTYWxpbml0eSAocmF3KSwgMWUtMylcbnNhbGluaXR5X2RtX3FkIChTYWxpbml0eSBxdWFsaXR5IGRlc2NyaXB0b3IpXG5wcmVzc3VyZSAoUHJlc3N1cmUgKHByb2Nlc3NlZCksIGRiYXIpXG5wcmVzc3VyZV9yYXcgKFByZXNzdXJlIChyYXcpLCBkYmFyKVxucHJlc3N1cmVfZG1fcWQgKFByZXNzdXJlIHF1YWxpdHkgZGVzY3JpcHRvcilcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9oYXdhaWlfc29lc3RfYzlmOV9jMjMyXzFmZTlfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2hhd2FpaV9zb2VzdF9jOWY5X2MyMzJfMWZlOV9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9oYXdhaWlfc29lc3RfYzlmOV9jMjMyXzFmZTkvaW5kZXguanNvbiIsICJodHRwOi8vd3d3LnBhY2lvb3MuaGF3YWlpLmVkdS93YXRlci9zZW5zb3Itd2Fpa2lraWFxdWFyaXVtLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9oYXdhaWlfc29lc3RfYzlmOV9jMjMyXzFmZTkucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWhhd2FpaV9zb2VzdF9jOWY5X2MyMzJfMWZlOSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJVbml2ZXJzaXR5IG9mIEhhd2FpaSIsICJoYXdhaWlfc29lc3RfYzlmOV9jMjMyXzFmZTkiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF9iNTVmX2E4ZjJfYWQ3MCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfYjU1Zl9hOGYyX2FkNzAuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiUGFjSU9PUyBOZWFyc2hvcmUgU2Vuc29yIDA1IChOUzA1KTogUGFnbyBQYWdvLCBBbWVyaWNhbiBTYW1vYSIsICJUaGUgbmVhcnNob3JlIHNlbnNvcnMgYXJlIHBhcnQgb2YgdGhlIFBhY2lmaWMgSXNsYW5kcyBPY2VhbiBPYnNlcnZpbmcgU3lzdGVtIChQYWNJT09TKSBhbmQgYXJlIGRlc2lnbmVkIHRvIG1lYXN1cmUgYSB2YXJpZXR5IG9mIG9jZWFuIHBhcmFtZXRlcnMgYXQgZml4ZWQgcG9pbnQgbG9jYXRpb25zLiBOUzA1IGlzIGxvY2F0ZWQgYXQgdGhlIERlcGFydG1lbnQgb2YgTWFyaW5lIGFuZCBXaWxkbGlmZSBSZXNvdXJjZXMgKERNV1IpIGRvY2sgaW4gUGFnbyBQYWdvIEhhcmJvciwgQW1lcmljYW4gU2Ftb2EgYW5kIGlzIG1vdW50ZWQgdG8gdGhlIGJvdHRvbSBpbiBhYm91dCAyIG1ldGVycyBvZiB3YXRlci4gVGhlIGluc3RydW1lbnQgaXMgYSBTZWEtQmlyZCBFbGVjdHJvbmljcyBtb2RlbCAxNisgVjIgY291cGxlZCB3aXRoIGEgV0VUIExhYnMgRUNPLUZMTlRVUyBjb21iaW5hdGlvbiBzZW5zb3IuXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChkZXB0aCBiZWxvdyBtZWFuIHNlYSBsZXZlbCwgbSlcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG50ZW1wZXJhdHVyZSAoQ2Vsc2l1cylcbmNvbmR1Y3Rpdml0eSAoUyBtLTEpXG50dXJiaWRpdHkgKE5UVSlcbmNobG9yb3BoeWxsIChrZyBtLTMpXG5zYWxpbml0eSAoMWUtMylcbnByZXNzdXJlIChkYmFyKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2hhd2FpaV9zb2VzdF9iNTVmX2E4ZjJfYWQ3MF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvaGF3YWlpX3NvZXN0X2I1NWZfYThmMl9hZDcwX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2hhd2FpaV9zb2VzdF9iNTVmX2E4ZjJfYWQ3MC9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cucGFjaW9vcy5oYXdhaWkuZWR1L3dhdGVyL3NlbnNvci1wYWdvcGFnby8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvaGF3YWlpX3NvZXN0X2I1NWZfYThmMl9hZDcwLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1oYXdhaWlfc29lc3RfYjU1Zl9hOGYyX2FkNzAmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiVW5pdmVyc2l0eSBvZiBIYXdhaWkiLCAiaGF3YWlpX3NvZXN0X2I1NWZfYThmMl9hZDcwIl0sCiAgICAgIFsiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfOGY1OV9jMjljX2Q4MjAiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0XzhmNTlfYzI5Y19kODIwLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlBhY0lPT1MgTmVhcnNob3JlIFNlbnNvciAwNiAoTlMwNik6IFBvaG5wZWksIE1pY3JvbmVzaWEiLCAiVGhlIG5lYXJzaG9yZSBzZW5zb3JzIGFyZSBwYXJ0IG9mIHRoZSBQYWNpZmljIElzbGFuZHMgT2NlYW4gT2JzZXJ2aW5nIFN5c3RlbSAoUGFjSU9PUykgYW5kIGFyZSBkZXNpZ25lZCB0byBtZWFzdXJlIGEgdmFyaWV0eSBvZiBvY2VhbiBwYXJhbWV0ZXJzIGF0IGZpeGVkIHBvaW50IGxvY2F0aW9ucy4gTlMwNiBpcyBsb2NhdGVkIGF0IHRoZSBkb2NrIGluIFBvaG5wZWkgbGFnb29uIGFuZCBpcyBtb3VudGVkIHRvIHRoZSBib3R0b20gaW4gYWJvdXQgMSBtZXRlciBvZiB3YXRlci4gVGhlIGluc3RydW1lbnQgaXMgYSBTZWEtQmlyZCBFbGVjdHJvbmljcyBtb2RlbCAxNisgVjIgY291cGxlZCB3aXRoIGEgV0VUIExhYnMgRUNPLUZMTlRVUyBjb21iaW5hdGlvbiBzZW5zb3IuXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChkZXB0aCBiZWxvdyBtZWFuIHNlYSBsZXZlbCwgbSlcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG50ZW1wZXJhdHVyZSAoQ2Vsc2l1cylcbmNvbmR1Y3Rpdml0eSAoUyBtLTEpXG50dXJiaWRpdHkgKE5UVSlcbmNobG9yb3BoeWxsIChrZyBtLTMpXG5zYWxpbml0eSAoMWUtMylcbnByZXNzdXJlIChkYmFyKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2hhd2FpaV9zb2VzdF84ZjU5X2MyOWNfZDgyMF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvaGF3YWlpX3NvZXN0XzhmNTlfYzI5Y19kODIwX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2hhd2FpaV9zb2VzdF84ZjU5X2MyOWNfZDgyMC9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cucGFjaW9vcy5oYXdhaWkuZWR1L3dhdGVyL3NlbnNvci1wb2hucGVpLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9oYXdhaWlfc29lc3RfOGY1OV9jMjljX2Q4MjAucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWhhd2FpaV9zb2VzdF84ZjU5X2MyOWNfZDgyMCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJVbml2ZXJzaXR5IG9mIEhhd2FpaSIsICJoYXdhaWlfc29lc3RfOGY1OV9jMjljX2Q4MjAiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF83N2I3X2Y1ZGRfY2RhMyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfNzdiN19mNWRkX2NkYTMuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiUGFjSU9PUyBOZWFyc2hvcmUgU2Vuc29yIDA3IChOUzA3KTogTWFqdXJvLCBNYXJzaGFsbCBJc2xhbmRzIiwgIlRoZSBuZWFyc2hvcmUgc2Vuc29ycyBhcmUgcGFydCBvZiB0aGUgUGFjaWZpYyBJc2xhbmRzIE9jZWFuIE9ic2VydmluZyBTeXN0ZW0gKFBhY0lPT1MpIGFuZCBhcmUgZGVzaWduZWQgdG8gbWVhc3VyZSBhIHZhcmlldHkgb2Ygb2NlYW4gcGFyYW1ldGVycyBhdCBmaXhlZCBwb2ludCBsb2NhdGlvbnMuIE5TMDcgaXMgbG9jYXRlZCBhdCB0aGUgVWxpZ2EgZG9jayBpbiBNYWp1cm8sIFJlcHVibGljIG9mIHRoZSBNYXJzaGFsbCBJc2xhbmRzIGFuZCBpcyBtb3VudGVkIHRvIHRoZSBib3R0b20gaW4gYWJvdXQgMiBtZXRlcnMgb2Ygd2F0ZXIuIFRoZSBpbnN0cnVtZW50IGlzIGEgU2VhLUJpcmQgRWxlY3Ryb25pY3MgbW9kZWwgMTYrIFYyIGNvdXBsZWQgd2l0aCBhIFdFVCBMYWJzIEVDTy1GTE5UVVMgY29tYmluYXRpb24gc2Vuc29yLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAoZGVwdGggYmVsb3cgbWVhbiBzZWEgbGV2ZWwsIG0pXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxudGVtcGVyYXR1cmUgKENlbHNpdXMpXG5jb25kdWN0aXZpdHkgKFMgbS0xKVxudHVyYmlkaXR5IChOVFUpXG5jaGxvcm9waHlsbCAoa2cgbS0zKVxuc2FsaW5pdHkgKDFlLTMpXG5wcmVzc3VyZSAoZGJhcilcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9oYXdhaWlfc29lc3RfNzdiN19mNWRkX2NkYTNfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2hhd2FpaV9zb2VzdF83N2I3X2Y1ZGRfY2RhM19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9oYXdhaWlfc29lc3RfNzdiN19mNWRkX2NkYTMvaW5kZXguanNvbiIsICJodHRwOi8vd3d3LnBhY2lvb3MuaGF3YWlpLmVkdS93YXRlci9zZW5zb3ItbWFqdXJvLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9oYXdhaWlfc29lc3RfNzdiN19mNWRkX2NkYTMucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWhhd2FpaV9zb2VzdF83N2I3X2Y1ZGRfY2RhMyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJVbml2ZXJzaXR5IG9mIEhhd2FpaSIsICJoYXdhaWlfc29lc3RfNzdiN19mNWRkX2NkYTMiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF9lM2MwX2E5NTZfZGUwMSIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfZTNjMF9hOTU2X2RlMDEuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiUGFjSU9PUyBOZWFyc2hvcmUgU2Vuc29yIDA4IChOUzA4KTogS29yb3IsIFBhbGF1IiwgIlRoZSBuZWFyc2hvcmUgc2Vuc29ycyBhcmUgcGFydCBvZiB0aGUgUGFjaWZpYyBJc2xhbmRzIE9jZWFuIE9ic2VydmluZyBTeXN0ZW0gKFBhY0lPT1MpIGFuZCBhcmUgZGVzaWduZWQgdG8gbWVhc3VyZSBhIHZhcmlldHkgb2Ygb2NlYW4gcGFyYW1ldGVycyBhdCBmaXhlZCBwb2ludCBsb2NhdGlvbnMuIE5TMDggaXMgbG9jYXRlZCBhdCB0aGUgUGFsYXUgSW50ZXJuYXRpb25hbCBDb3JhbCBSZWVmIENlbnRlciAoUElDUkMpIGRvY2sgaW4gS29yb3IsIFBhbGF1IGFuZCBpcyBtb3VudGVkIHRvIHRoZSBib3R0b20gaW4gYWJvdXQgMy41IG1ldGVycyBvZiB3YXRlci4gVGhlIGluc3RydW1lbnQgaXMgYSBTZWEtQmlyZCBFbGVjdHJvbmljcyBtb2RlbCAxNisgVjIgY291cGxlZCB3aXRoIGEgV0VUIExhYnMgRUNPLUZMTlRVUyBjb21iaW5hdGlvbiBzZW5zb3IuXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChkZXB0aCBiZWxvdyBtZWFuIHNlYSBsZXZlbCwgbSlcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG50ZW1wZXJhdHVyZSAoQ2Vsc2l1cylcbmNvbmR1Y3Rpdml0eSAoUyBtLTEpXG50dXJiaWRpdHkgKE5UVSlcbmNobG9yb3BoeWxsIChrZyBtLTMpXG5zYWxpbml0eSAoMWUtMylcbnByZXNzdXJlIChkYmFyKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2hhd2FpaV9zb2VzdF9lM2MwX2E5NTZfZGUwMV9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvaGF3YWlpX3NvZXN0X2UzYzBfYTk1Nl9kZTAxX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2hhd2FpaV9zb2VzdF9lM2MwX2E5NTZfZGUwMS9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cucGFjaW9vcy5oYXdhaWkuZWR1L3dhdGVyL3NlbnNvci1rb3Jvci8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvaGF3YWlpX3NvZXN0X2UzYzBfYTk1Nl9kZTAxLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1oYXdhaWlfc29lc3RfZTNjMF9hOTU2X2RlMDEmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiVW5pdmVyc2l0eSBvZiBIYXdhaWkiLCAiaGF3YWlpX3NvZXN0X2UzYzBfYTk1Nl9kZTAxIl0sCiAgICAgIFsiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfMDExM19iNDNkX2UwMjQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0XzAxMTNfYjQzZF9lMDI0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlBhY0lPT1MgTmVhcnNob3JlIFNlbnNvciAwOSAoTlMwOSk6IENldHRpIEJheSwgR3VhbSIsICJUaGUgbmVhcnNob3JlIHNlbnNvcnMgYXJlIHBhcnQgb2YgdGhlIFBhY2lmaWMgSXNsYW5kcyBPY2VhbiBPYnNlcnZpbmcgU3lzdGVtIChQYWNJT09TKSBhbmQgYXJlIGRlc2lnbmVkIHRvIG1lYXN1cmUgYSB2YXJpZXR5IG9mIG9jZWFuIHBhcmFtZXRlcnMgYXQgZml4ZWQgcG9pbnQgbG9jYXRpb25zLiBOUzA5IGlzIGFwcHJveGltYXRlbHkgNzAgbWV0ZXJzIG9mZnNob3JlIGluIENldHRpIEJheSwgR3VhbSBhbmQgaXMgbW91bnRlZCB0byB0aGUgYm90dG9tIGluIGFib3V0IDMgbWV0ZXJzIG9mIHdhdGVyLiBUaGUgaW5zdHJ1bWVudCBpcyBhIFNlYS1CaXJkIEVsZWN0cm9uaWNzIG1vZGVsIDE2KyBWMiBjb3VwbGVkIHdpdGggYSBXRVQgTGFicyBFQ08tRkxOVFVTIGNvbWJpbmF0aW9uIHNlbnNvci5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKGRlcHRoIGJlbG93IG1lYW4gc2VhIGxldmVsLCBtKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbnRlbXBlcmF0dXJlIChDZWxzaXVzKVxuY29uZHVjdGl2aXR5IChTIG0tMSlcbnR1cmJpZGl0eSAoTlRVKVxuY2hsb3JvcGh5bGwgKGtnIG0tMylcbnNhbGluaXR5ICgxZS0zKVxucHJlc3N1cmUgKGRiYXIpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvaGF3YWlpX3NvZXN0XzAxMTNfYjQzZF9lMDI0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9oYXdhaWlfc29lc3RfMDExM19iNDNkX2UwMjRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vaGF3YWlpX3NvZXN0XzAxMTNfYjQzZF9lMDI0L2luZGV4Lmpzb24iLCAiaHR0cDovL3d3dy5wYWNpb29zLmhhd2FpaS5lZHUvd2F0ZXIvc2Vuc29yLWNldHRpLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9oYXdhaWlfc29lc3RfMDExM19iNDNkX2UwMjQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWhhd2FpaV9zb2VzdF8wMTEzX2I0M2RfZTAyNCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJVbml2ZXJzaXR5IG9mIEhhd2FpaSIsICJoYXdhaWlfc29lc3RfMDExM19iNDNkX2UwMjQiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF9mMjVlXzMxYTFfMTZmMSIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfZjI1ZV8zMWExXzE2ZjEuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiUGFjSU9PUyBOZWFyc2hvcmUgU2Vuc29yIDEwIChOUzEwKTogTWF1bmFsdWEgQmF5LCBPYWh1LCBIYXdhaWkiLCAiVGhlIG5lYXJzaG9yZSBzZW5zb3JzIGFyZSBwYXJ0IG9mIHRoZSBQYWNpZmljIElzbGFuZHMgT2NlYW4gT2JzZXJ2aW5nIFN5c3RlbSAoUGFjSU9PUykgYW5kIGFyZSBkZXNpZ25lZCB0byBtZWFzdXJlIGEgdmFyaWV0eSBvZiBvY2VhbiBwYXJhbWV0ZXJzIGF0IGZpeGVkIHBvaW50IGxvY2F0aW9ucyBhbG9uZyB0aGUgc291dGggc2hvcmUgb2YgT2FodS4gTlMxMCBpcyBsb2NhdGVkIG9mZiB0aGUgb2xkIHBpZXIgaW4gTWF1bmFsdWEgQmF5IGluIEhhd2FpaSBLYWkuIFRoZSBpbnN0cnVtZW50IGlzIGEgU2VhLUJpcmQgRWxlY3Ryb25pY3MgbW9kZWwgMTYrIFYyIGNvdXBsZWQgd2l0aCBhIFdFVCBMYWJzIEVDTy1GTE5UVVMgY29tYmluYXRpb24gc2Vuc29yLiBUaGUgcGFja2FnZSBpcyBmaXhlZCB0byB0aGUgcGllciBhdCBhYm91dCAybSBkZXB0aC5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKGRlcHRoIGJlbG93IG1lYW4gc2VhIGxldmVsLCBtKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbnRlbXBlcmF0dXJlIChUZW1wZXJhdHVyZSAocHJvY2Vzc2VkKSwgQ2Vsc2l1cylcbnRlbXBlcmF0dXJlX3JhdyAoVGVtcGVyYXR1cmUgKHJhdyksIENlbHNpdXMpXG50ZW1wZXJhdHVyZV9kbV9xZCAoVGVtcGVyYXR1cmUgcXVhbGl0eSBkZXNjcmlwdG9yKVxuY29uZHVjdGl2aXR5IChDb25kdWN0aXZpdHkgKHByb2Nlc3NlZCksIFMgbS0xKVxuY29uZHVjdGl2aXR5X3JhdyAoQ29uZHVjdGl2aXR5IChyYXcpLCBTIG0tMSlcbmNvbmR1Y3Rpdml0eV9kbV9xZCAoQ29uZHVjdGl2aXR5IHF1YWxpdHkgZGVzY3JpcHRvcilcbnR1cmJpZGl0eSAoVHVyYmlkaXR5IChwcm9jZXNzZWQpLCBOVFUpXG50dXJiaWRpdHlfcmF3IChUdXJiaWRpdHkgKHJhdyksIE5UVSlcbnR1cmJpZGl0eV9kbV9xZCAoVHVyYmlkaXR5IHF1YWxpdHkgZGVzY3JpcHRvcilcbmNobG9yb3BoeWxsIChDaGxvcm9waHlsbCAocHJvY2Vzc2VkKSwga2cgbS0zKVxuY2hsb3JvcGh5bGxfcmF3IChDaGxvcm9waHlsbCAocmF3KSwga2cgbS0zKVxuY2hsb3JvcGh5bGxfZG1fcWQgKENobG9yb3BoeWxsIHF1YWxpdHkgZGVzY3JpcHRvcilcbnNhbGluaXR5IChTYWxpbml0eSAocHJvY2Vzc2VkKSwgMWUtMylcbnNhbGluaXR5X3JhdyAoU2FsaW5pdHkgKHJhdyksIDFlLTMpXG5zYWxpbml0eV9kbV9xZCAoU2FsaW5pdHkgcXVhbGl0eSBkZXNjcmlwdG9yKVxucHJlc3N1cmUgKFByZXNzdXJlIChwcm9jZXNzZWQpLCBkYmFyKVxucHJlc3N1cmVfcmF3IChQcmVzc3VyZSAocmF3KSwgZGJhcilcbnByZXNzdXJlX2RtX3FkIChQcmVzc3VyZSBxdWFsaXR5IGRlc2NyaXB0b3IpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvaGF3YWlpX3NvZXN0X2YyNWVfMzFhMV8xNmYxX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9oYXdhaWlfc29lc3RfZjI1ZV8zMWExXzE2ZjFfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vaGF3YWlpX3NvZXN0X2YyNWVfMzFhMV8xNmYxL2luZGV4Lmpzb24iLCAiaHR0cDovL3d3dy5wYWNpb29zLmhhd2FpaS5lZHUvd2F0ZXIvc2Vuc29yLW1hdW5hbHVhLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9oYXdhaWlfc29lc3RfZjI1ZV8zMWExXzE2ZjEucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWhhd2FpaV9zb2VzdF9mMjVlXzMxYTFfMTZmMSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJVbml2ZXJzaXR5IG9mIEhhd2FpaSIsICJoYXdhaWlfc29lc3RfZjI1ZV8zMWExXzE2ZjEiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF84NjY4X2IyMDJfODIzMyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfODY2OF9iMjAyXzgyMzMuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiUGFjSU9PUyBOZWFyc2hvcmUgU2Vuc29yIDExIChOUzExKTogU2FpcGFuLCBDTk1JIiwgIlRoZSBuZWFyc2hvcmUgc2Vuc29ycyBhcmUgcGFydCBvZiB0aGUgUGFjaWZpYyBJc2xhbmRzIE9jZWFuIE9ic2VydmluZyBTeXN0ZW0gKFBhY0lPT1MpIGFuZCBhcmUgZGVzaWduZWQgdG8gbWVhc3VyZSBhIHZhcmlldHkgb2Ygb2NlYW4gcGFyYW1ldGVycyBhdCBmaXhlZCBwb2ludCBsb2NhdGlvbnMuIE5TMTEgaXMgYXBwcm94aW1hdGVseSAyMCBtZXRlcnMgb2Zmc2hvcmUgb2YgUHVudGFuIEJhYnBvdCBuZWFyIHRoZSBnb2xmIGNvdXJzZSBhdCBMYW9sYW8gQmF5IG9uIHRoZSBlYXN0IHNob3JlIG9mIFNhaXBhbiBpbiB0aGUgQ29tbW9ud2VhbHRoIG9mIHRoZSBOb3J0aGVybiBNYXJpYW5hIElzbGFuZHMgKENOTUkpIGFuZCBpcyBtb3VudGVkIHRvIHRoZSBib3R0b20gaW4gYWJvdXQgMyBtZXRlcnMgb2Ygd2F0ZXIuIFRoZSBpbnN0cnVtZW50IGlzIGEgU2VhLUJpcmQgRWxlY3Ryb25pY3MgbW9kZWwgMTYrIFYyIGNvdXBsZWQgd2l0aCBhIFdFVCBMYWJzIEVDTy1GTE5UVVMgY29tYmluYXRpb24gc2Vuc29yLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAoZGVwdGggYmVsb3cgbWVhbiBzZWEgbGV2ZWwsIG0pXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxudGVtcGVyYXR1cmUgKENlbHNpdXMpXG5jb25kdWN0aXZpdHkgKFMgbS0xKVxudHVyYmlkaXR5IChOVFUpXG5jaGxvcm9waHlsbCAoa2cgbS0zKVxuc2FsaW5pdHkgKDFlLTMpXG5wcmVzc3VyZSAoZGJhcilcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9oYXdhaWlfc29lc3RfODY2OF9iMjAyXzgyMzNfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2hhd2FpaV9zb2VzdF84NjY4X2IyMDJfODIzM19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9oYXdhaWlfc29lc3RfODY2OF9iMjAyXzgyMzMvaW5kZXguanNvbiIsICJodHRwOi8vd3d3LnBhY2lvb3MuaGF3YWlpLmVkdS93YXRlci9zZW5zb3Itc2FpcGFuLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9oYXdhaWlfc29lc3RfODY2OF9iMjAyXzgyMzMucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWhhd2FpaV9zb2VzdF84NjY4X2IyMDJfODIzMyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJVbml2ZXJzaXR5IG9mIEhhd2FpaSIsICJoYXdhaWlfc29lc3RfODY2OF9iMjAyXzgyMzMiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF9iMTBjX2FmMmRfM2ZlOCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfYjEwY19hZjJkXzNmZTguZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiUGFjSU9PUyBOZWFyc2hvcmUgU2Vuc29yIDEyIChOUzEyKTogS2FsYW1hIEJlYWNoIFBhcmssIE1hdWksIEhhd2FpaSIsICJUaGUgbmVhcnNob3JlIHNlbnNvcnMgYXJlIHBhcnQgb2YgdGhlIFBhY2lmaWMgSXNsYW5kcyBPY2VhbiBPYnNlcnZpbmcgU3lzdGVtIChQYWNJT09TKSBhbmQgYXJlIGRlc2lnbmVkIHRvIG1lYXN1cmUgYSB2YXJpZXR5IG9mIG9jZWFuIHBhcmFtZXRlcnMgYXQgZml4ZWQgcG9pbnQgbG9jYXRpb25zLiBOUzEyIGlzIGxvY2F0ZWQgYXQgS2FsYW1hIEJlYWNoIFBhcmsgaW4gS2loZWksIE1hdWkuIFRoZSBpbnN0cnVtZW50IGlzIGEgNjYwMFYyLTQgTXVsdGktcGFyYW1ldGVyIHdhdGVyIHF1YWxpdHkgbG9nZ2VyLiBUaGUgcGFja2FnZSBpcyBmaXhlZCB0byBhIG1vb3JpbmcgYXQgYWJvdXQgMS41bSBkZXB0aC5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKGRlcHRoIGJlbG93IG1lYW4gc2VhIGxldmVsLCBtKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbnRlbXBlcmF0dXJlIChDZWxzaXVzKVxuY29uZHVjdGl2aXR5IChTIG0tMSlcbnR1cmJpZGl0eSAoTlRVKVxuY2hsb3JvcGh5bGwgKGtnIG0tMylcbnNhbGluaXR5ICgxZS0zKVxud2F0ZXJfZGVwdGggKFNlbnNvciBkZXB0aCwgbSlcbnBoICgxKVxub3h5Z2VuIChEaXNzb2x2ZWQgb3h5Z2VuIGNvbmNlbnRyYXRpb24sIGtnIG0tMylcbm94eWdlbl9zYXR1cmF0aW9uIChEaXNzb2x2ZWQgb3h5Z2VuIHNhdHVyYXRpb24sIDEpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvaGF3YWlpX3NvZXN0X2IxMGNfYWYyZF8zZmU4X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9oYXdhaWlfc29lc3RfYjEwY19hZjJkXzNmZThfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vaGF3YWlpX3NvZXN0X2IxMGNfYWYyZF8zZmU4L2luZGV4Lmpzb24iLCAiaHR0cDovL3d3dy5wYWNpb29zLmhhd2FpaS5lZHUvd2F0ZXIvc2Vuc29yLWthbGFtYS8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvaGF3YWlpX3NvZXN0X2IxMGNfYWYyZF8zZmU4LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1oYXdhaWlfc29lc3RfYjEwY19hZjJkXzNmZTgmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiVW5pdmVyc2l0eSBvZiBIYXdhaWkiLCAiaGF3YWlpX3NvZXN0X2IxMGNfYWYyZF8zZmU4Il0sCiAgICAgIFsiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfMDI2Zl80YzFkXzU1ZTUiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0XzAyNmZfNGMxZF81NWU1LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlBhY0lPT1MgTmVhcnNob3JlIFNlbnNvciAxMyAoTlMxMyk6IEthaHVsdWksIE1hdWksIEhhd2FpaSIsICJUaGUgbmVhcnNob3JlIHNlbnNvcnMgYXJlIHBhcnQgb2YgdGhlIFBhY2lmaWMgSXNsYW5kcyBPY2VhbiBPYnNlcnZpbmcgU3lzdGVtIChQYWNJT09TKSBhbmQgYXJlIGRlc2lnbmVkIHRvIG1lYXN1cmUgYSB2YXJpZXR5IG9mIG9jZWFuIHBhcmFtZXRlcnMgYXQgZml4ZWQgcG9pbnQgbG9jYXRpb25zLiBOUzEzIGlzIGxvY2F0ZWQgaW4gS2FodWx1aSBIYXJib3IgaW4gTWF1aS4gVGhlIGluc3RydW1lbnQgaXMgYSA2NjAwVjItNCBNdWx0aS1wYXJhbWV0ZXIgd2F0ZXIgcXVhbGl0eSBsb2dnZXIuIFRoZSBwYWNrYWdlIGlzIGZpeGVkIHRvIGEgcGlsaW5nIGF0IGFib3V0IDEuNW0gZGVwdGguXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChkZXB0aCBiZWxvdyBtZWFuIHNlYSBsZXZlbCwgbSlcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG50ZW1wZXJhdHVyZSAoVGVtcGVyYXR1cmUgKHByb2Nlc3NlZCksIENlbHNpdXMpXG50ZW1wZXJhdHVyZV9yYXcgKFRlbXBlcmF0dXJlIChyYXcpLCBDZWxzaXVzKVxudGVtcGVyYXR1cmVfZG1fcWQgKFRlbXBlcmF0dXJlIHF1YWxpdHkgZGVzY3JpcHRvcilcbmNvbmR1Y3Rpdml0eSAoQ29uZHVjdGl2aXR5IChwcm9jZXNzZWQpLCBTIG0tMSlcbmNvbmR1Y3Rpdml0eV9yYXcgKENvbmR1Y3Rpdml0eSAocmF3KSwgUyBtLTEpXG5jb25kdWN0aXZpdHlfZG1fcWQgKENvbmR1Y3Rpdml0eSBxdWFsaXR5IGRlc2NyaXB0b3IpXG50dXJiaWRpdHkgKFR1cmJpZGl0eSAocHJvY2Vzc2VkKSwgTlRVKVxudHVyYmlkaXR5X3JhdyAoVHVyYmlkaXR5IChyYXcpLCBOVFUpXG50dXJiaWRpdHlfZG1fcWQgKFR1cmJpZGl0eSBxdWFsaXR5IGRlc2NyaXB0b3IpXG5jaGxvcm9waHlsbCAoQ2hsb3JvcGh5bGwgKHByb2Nlc3NlZCksIGtnIG0tMylcbmNobG9yb3BoeWxsX3JhdyAoQ2hsb3JvcGh5bGwgKHJhdyksIGtnIG0tMylcbmNobG9yb3BoeWxsX2RtX3FkIChDaGxvcm9waHlsbCBxdWFsaXR5IGRlc2NyaXB0b3IpXG5zYWxpbml0eSAoU2FsaW5pdHkgKHByb2Nlc3NlZCksIDFlLTMpXG5zYWxpbml0eV9yYXcgKFNhbGluaXR5IChyYXcpLCAxZS0zKVxuc2FsaW5pdHlfZG1fcWQgKFNhbGluaXR5IHF1YWxpdHkgZGVzY3JpcHRvcilcbndhdGVyX2RlcHRoIChTZW5zb3IgZGVwdGggKHByb2Nlc3NlZCksIG0pXG53YXRlcl9kZXB0aF9yYXcgKFNlbnNvciBkZXB0aCAocmF3KSwgbSlcbndhdGVyX2RlcHRoX2RtX3FkIChTZW5zb3IgZGVwdGggcXVhbGl0eSBkZXNjcmlwdG9yKVxucGggKHBIIChwcm9jZXNzZWQpLCAxKVxucGhfcmF3IChwSCAocmF3KSwgMSlcbi4uLiAoNyBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9oYXdhaWlfc29lc3RfMDI2Zl80YzFkXzU1ZTVfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2hhd2FpaV9zb2VzdF8wMjZmXzRjMWRfNTVlNV9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9oYXdhaWlfc29lc3RfMDI2Zl80YzFkXzU1ZTUvaW5kZXguanNvbiIsICJodHRwOi8vd3d3LnBhY2lvb3MuaGF3YWlpLmVkdS93YXRlci9zZW5zb3Ita2FodWx1aS8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvaGF3YWlpX3NvZXN0XzAyNmZfNGMxZF81NWU1LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1oYXdhaWlfc29lc3RfMDI2Zl80YzFkXzU1ZTUmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiVW5pdmVyc2l0eSBvZiBIYXdhaWkiLCAiaGF3YWlpX3NvZXN0XzAyNmZfNGMxZF81NWU1Il0sCiAgICAgIFsiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfMTkxZV9mZTM3X2Y5YTAiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0XzE5MWVfZmUzN19mOWEwLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlBhY0lPT1MgTmVhcnNob3JlIFNlbnNvciAxNSAoTlMxNSk6IFBhZ28gQmF5LCBHdWFtIiwgIlRoZSBuZWFyc2hvcmUgc2Vuc29ycyBhcmUgcGFydCBvZiB0aGUgUGFjaWZpYyBJc2xhbmRzIE9jZWFuIE9ic2VydmluZyBTeXN0ZW0gKFBhY0lPT1MpIGFuZCBhcmUgZGVzaWduZWQgdG8gbWVhc3VyZSBhIHZhcmlldHkgb2Ygb2NlYW4gcGFyYW1ldGVycyBhdCBmaXhlZCBwb2ludCBsb2NhdGlvbnMuIE5TMTUgaXMgaW4gUGFnbyBCYXksIEd1YW0gYW5kIGlzIG1vdW50ZWQgdG8gdGhlIGJvdHRvbSBpbiBhYm91dCAxLjUgbWV0ZXJzIG9mIHdhdGVyLiBUaGUgaW5zdHJ1bWVudCBpcyBhIFNlYS1CaXJkIEVsZWN0cm9uaWNzIG1vZGVsIDE2KyBWMiBjb3VwbGVkIHdpdGggYSBXRVQgTGFicyBFQ08tRkxOVFVTIGNvbWJpbmF0aW9uIHNlbnNvci5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKGRlcHRoIGJlbG93IG1lYW4gc2VhIGxldmVsLCBtKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbnRlbXBlcmF0dXJlIChDZWxzaXVzKVxuY29uZHVjdGl2aXR5IChTIG0tMSlcbnR1cmJpZGl0eSAoTlRVKVxuY2hsb3JvcGh5bGwgKGtnIG0tMylcbnNhbGluaXR5ICgxZS0zKVxucHJlc3N1cmUgKGRiYXIpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvaGF3YWlpX3NvZXN0XzE5MWVfZmUzN19mOWEwX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9oYXdhaWlfc29lc3RfMTkxZV9mZTM3X2Y5YTBfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vaGF3YWlpX3NvZXN0XzE5MWVfZmUzN19mOWEwL2luZGV4Lmpzb24iLCAiaHR0cDovL3d3dy5wYWNpb29zLmhhd2FpaS5lZHUvd2F0ZXIvc2Vuc29yLXBhZ28vIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2hhd2FpaV9zb2VzdF8xOTFlX2ZlMzdfZjlhMC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9aGF3YWlpX3NvZXN0XzE5MWVfZmUzN19mOWEwJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIlVuaXZlcnNpdHkgb2YgSGF3YWlpIiwgImhhd2FpaV9zb2VzdF8xOTFlX2ZlMzdfZjlhMCJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0X2Q1YmFfODMxY180NDNhIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF9kNWJhXzgzMWNfNDQzYS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJQYWNJT09TIE5lYXJzaG9yZSBTZW5zb3IgMTYgKE5TMTYpOiBXYWlsdXBlLCBPYWh1LCBIYXdhaWkiLCAiVGhlIG5lYXJzaG9yZSBzZW5zb3JzIGFyZSBwYXJ0IG9mIHRoZSBQYWNpZmljIElzbGFuZHMgT2NlYW4gT2JzZXJ2aW5nIFN5c3RlbSAoUGFjSU9PUykgYW5kIGFyZSBkZXNpZ25lZCB0byBtZWFzdXJlIGEgdmFyaWV0eSBvZiBvY2VhbiBwYXJhbWV0ZXJzIGF0IGZpeGVkIHBvaW50IGxvY2F0aW9ucyBhbG9uZyB0aGUgc291dGggc2hvcmUgb2YgT2FodS4gTlMxNiBpcyBsb2NhdGVkIG9mZiBXYWlsdXBlIGluIE1hdW5hbHVhIEJheSBpbiBBaW5hIEhhaW5hLiBUaGUgaW5zdHJ1bWVudCBpcyBhIFNlYS1CaXJkIEVsZWN0cm9uaWNzIG1vZGVsIDE2KyBWMiBjb3VwbGVkIHdpdGggYSBXRVQgTGFicyBFQ08tRkxOVFVTIGNvbWJpbmF0aW9uIHNlbnNvci4gVGhlIHBhY2thZ2UgaXMgZml4ZWQgdG8gdGhlIHBpZXIgYXQgYWJvdXQgMW0gZGVwdGguXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChkZXB0aCBiZWxvdyBtZWFuIHNlYSBsZXZlbCwgbSlcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG50ZW1wZXJhdHVyZSAoVGVtcGVyYXR1cmUgKHByb2Nlc3NlZCksIENlbHNpdXMpXG50ZW1wZXJhdHVyZV9yYXcgKFRlbXBlcmF0dXJlIChyYXcpLCBDZWxzaXVzKVxudGVtcGVyYXR1cmVfZG1fcWQgKFRlbXBlcmF0dXJlIHF1YWxpdHkgZGVzY3JpcHRvcilcbmNvbmR1Y3Rpdml0eSAoQ29uZHVjdGl2aXR5IChwcm9jZXNzZWQpLCBTIG0tMSlcbmNvbmR1Y3Rpdml0eV9yYXcgKENvbmR1Y3Rpdml0eSAocmF3KSwgUyBtLTEpXG5jb25kdWN0aXZpdHlfZG1fcWQgKENvbmR1Y3Rpdml0eSBxdWFsaXR5IGRlc2NyaXB0b3IpXG50dXJiaWRpdHkgKFR1cmJpZGl0eSAocHJvY2Vzc2VkKSwgTlRVKVxudHVyYmlkaXR5X3JhdyAoVHVyYmlkaXR5IChyYXcpLCBOVFUpXG50dXJiaWRpdHlfZG1fcWQgKFR1cmJpZGl0eSBxdWFsaXR5IGRlc2NyaXB0b3IpXG5jaGxvcm9waHlsbCAoQ2hsb3JvcGh5bGwgKHByb2Nlc3NlZCksIGtnIG0tMylcbmNobG9yb3BoeWxsX3JhdyAoQ2hsb3JvcGh5bGwgKHJhdyksIGtnIG0tMylcbmNobG9yb3BoeWxsX2RtX3FkIChDaGxvcm9waHlsbCBxdWFsaXR5IGRlc2NyaXB0b3IpXG5zYWxpbml0eSAoU2FsaW5pdHkgKHByb2Nlc3NlZCksIDFlLTMpXG5zYWxpbml0eV9yYXcgKFNhbGluaXR5IChyYXcpLCAxZS0zKVxuc2FsaW5pdHlfZG1fcWQgKFNhbGluaXR5IHF1YWxpdHkgZGVzY3JpcHRvcilcbnByZXNzdXJlIChQcmVzc3VyZSAocHJvY2Vzc2VkKSwgZGJhcilcbnByZXNzdXJlX3JhdyAoUHJlc3N1cmUgKHJhdyksIGRiYXIpXG5wcmVzc3VyZV9kbV9xZCAoUHJlc3N1cmUgcXVhbGl0eSBkZXNjcmlwdG9yKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2hhd2FpaV9zb2VzdF9kNWJhXzgzMWNfNDQzYV9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvaGF3YWlpX3NvZXN0X2Q1YmFfODMxY180NDNhX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2hhd2FpaV9zb2VzdF9kNWJhXzgzMWNfNDQzYS9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cucGFjaW9vcy5oYXdhaWkuZWR1L3dhdGVyL3NlbnNvci13YWlsdXBlLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9oYXdhaWlfc29lc3RfZDViYV84MzFjXzQ0M2EucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWhhd2FpaV9zb2VzdF9kNWJhXzgzMWNfNDQzYSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJVbml2ZXJzaXR5IG9mIEhhd2FpaSIsICJoYXdhaWlfc29lc3RfZDViYV84MzFjXzQ0M2EiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF8wOTNlX2NkNTVfNDNhMyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfMDkzZV9jZDU1XzQzYTMuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiUGFjSU9PUyBPY2VhbiBHbGlkZXJzOiBTZWFHbGlkZXIgMTE0OiBNaXNzaW9uIDMiLCAiQXMgYSBwYXJ0IG9mIFBhY0lPT1MsIG9jZWFuIGdsaWRlcnMgcHJvdmlkZSB2ZXJ5IGRldGFpbGVkIGluZm9ybWF0aW9uIGFib3V0IHRoZSBwaHlzaWNhbCBhbmQgY2hlbWljYWwgY29uZGl0aW9uIG9mIHRoZSB3YXRlcnMgYXJvdW5kIHRoZSBIYXdhaWlhbiBJc2xhbmRzLiBBZGRpdGlvbmFsbHksIHRoZXNlIGRhdGEgZ2V0IHVzZWQgaW4gY29tcHV0ZXIgbW9kZWxzIHRvIG1ha2UgcHJlZGljdGlvbnMgYWJvdXQgY3VycmVudHMuIE9jZWFuIGdsaWRlcnMgYXJlIHNtYWxsLCBmcmVlLXN3aW1taW5nLCB1bm1hbm5lZCB2ZWhpY2xlcyB0aGF0IGNhbiBjcnVpc2UgdGhlIG9jZWFuIGZvciBzZXZlcmFsIG1vbnRocyBnYXRoZXJpbmcgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHRlbXBlcmF0dXJlLCBzYWxpbml0eSwgYW5kIG90aGVyIHdhdGVyIHByb3BlcnRpZXMgYmV0d2VlbiB0aGUgc3VyZmFjZSBhbmQgMTAwMCBtIGRlcHRoLiBBIHByZXNzdXJlIHNlbnNvciBvbiB0aGUgZ2xpZGVyIGlzIGFibGUgdG8gcmVjb3JkIHRoZSBkZXB0aCB0aHJvdWdob3V0IHRoZSBkaXZlLiBCZWNhdXNlIGdsaWRlcnMgYXJlIHVubWFubmVkLCB0aGV5IGNvbW11bmljYXRlIHdpdGggc2NpZW50aXN0cyBvbiBsYW5kIHdoZW4gdGhleSBhcmUgYXQgdGhlIHN1cmZhY2UgdXNpbmcgYW4gYW50ZW5uYSBvbiB0aGUgZW5kIG9mIHRoZSBnbGlkZXIuIFRoZSBTZWFHbGlkZXIgYXV0b25vbW91cyB1bmRlcndhdGVyIHZlaGljbGUgKEFVVikgd2FzIGRlc2lnbmVkIGF0IHRoZSBVbml2ZXJzaXR5IG9mIFdhc2hpbmd0b24gKFVXKSBBcHBsaWVkIFBoeXNpY3MgTGFib3JhdG9yeSAoQVBMKS4gVGhlc2UgZGF0YSBhcmUgdGFrZW4gZnJvbSBNaXNzaW9uIDMgb2YgU2VhR2xpZGVyIDExNC5cblxuY2RtX2RhdGFfdHlwZSA9IFRyYWplY3RvcnlcblZBUklBQkxFUzpcbnRyYWplY3RvcnlcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG50ZW1wZXJhdHVyZSAoc2VhX3dhdGVyX3RlbXBlcmF0dXJlLCBDZWxzaXVzKVxuY29uZHVjdGl2aXR5IChzZWFfd2F0ZXJfZWxlY3RyaWNhbF9jb25kdWN0aXZpdHksIFMgbS0xKVxuc2FsaW5pdHkgKHNlYV93YXRlcl9zYWxpbml0eSwgMWUtMylcbmRlbnNpdHkgKHNlYV93YXRlcl9kZW5zaXR5LCBrZyBtLTMpXG5wcmVzc3VyZSAoc2VhX3dhdGVyX3ByZXNzdXJlLCBkYmFyKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2hhd2FpaV9zb2VzdF8wOTNlX2NkNTVfNDNhM19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvaGF3YWlpX3NvZXN0XzA5M2VfY2Q1NV80M2EzX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2hhd2FpaV9zb2VzdF8wOTNlX2NkNTVfNDNhMy9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cucGFjaW9vcy5oYXdhaWkuZWR1IiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2hhd2FpaV9zb2VzdF8wOTNlX2NkNTVfNDNhMy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9aGF3YWlpX3NvZXN0XzA5M2VfY2Q1NV80M2EzJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIlVuaXZlcnNpdHkgb2YgSGF3YWlpIiwgImhhd2FpaV9zb2VzdF8wOTNlX2NkNTVfNDNhMyJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0X2NjOTJfN2QyNF8wNjI3IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF9jYzkyXzdkMjRfMDYyNy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJQYWNJT09TIE9jZWFuIEdsaWRlcnM6IFNlYUdsaWRlciAxMTQ6IE1pc3Npb24gNCIsICJBcyBhIHBhcnQgb2YgUGFjSU9PUywgb2NlYW4gZ2xpZGVycyBwcm92aWRlIHZlcnkgZGV0YWlsZWQgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHBoeXNpY2FsIGFuZCBjaGVtaWNhbCBjb25kaXRpb24gb2YgdGhlIHdhdGVycyBhcm91bmQgdGhlIEhhd2FpaWFuIElzbGFuZHMuIEFkZGl0aW9uYWxseSwgdGhlc2UgZGF0YSBnZXQgdXNlZCBpbiBjb21wdXRlciBtb2RlbHMgdG8gbWFrZSBwcmVkaWN0aW9ucyBhYm91dCBjdXJyZW50cy4gT2NlYW4gZ2xpZGVycyBhcmUgc21hbGwsIGZyZWUtc3dpbW1pbmcsIHVubWFubmVkIHZlaGljbGVzIHRoYXQgY2FuIGNydWlzZSB0aGUgb2NlYW4gZm9yIHNldmVyYWwgbW9udGhzIGdhdGhlcmluZyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdGVtcGVyYXR1cmUsIHNhbGluaXR5LCBhbmQgb3RoZXIgd2F0ZXIgcHJvcGVydGllcyBiZXR3ZWVuIHRoZSBzdXJmYWNlIGFuZCAxMDAwIG0gZGVwdGguIEEgcHJlc3N1cmUgc2Vuc29yIG9uIHRoZSBnbGlkZXIgaXMgYWJsZSB0byByZWNvcmQgdGhlIGRlcHRoIHRocm91Z2hvdXQgdGhlIGRpdmUuIEJlY2F1c2UgZ2xpZGVycyBhcmUgdW5tYW5uZWQsIHRoZXkgY29tbXVuaWNhdGUgd2l0aCBzY2llbnRpc3RzIG9uIGxhbmQgd2hlbiB0aGV5IGFyZSBhdCB0aGUgc3VyZmFjZSB1c2luZyBhbiBhbnRlbm5hIG9uIHRoZSBlbmQgb2YgdGhlIGdsaWRlci4gVGhlIFNlYUdsaWRlciBhdXRvbm9tb3VzIHVuZGVyd2F0ZXIgdmVoaWNsZSAoQVVWKSB3YXMgZGVzaWduZWQgYXQgdGhlIFVuaXZlcnNpdHkgb2YgV2FzaGluZ3RvbiAoVVcpIEFwcGxpZWQgUGh5c2ljcyBMYWJvcmF0b3J5IChBUEwpLiBUaGVzZSBkYXRhIGFyZSB0YWtlbiBmcm9tIE1pc3Npb24gNCBvZiBTZWFHbGlkZXIgMTE0LlxuXG5jZG1fZGF0YV90eXBlID0gVHJhamVjdG9yeVxuVkFSSUFCTEVTOlxudHJhamVjdG9yeVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbnRlbXBlcmF0dXJlIChzZWFfd2F0ZXJfdGVtcGVyYXR1cmUsIENlbHNpdXMpXG5jb25kdWN0aXZpdHkgKHNlYV93YXRlcl9lbGVjdHJpY2FsX2NvbmR1Y3Rpdml0eSwgUyBtLTEpXG5zYWxpbml0eSAoc2VhX3dhdGVyX3NhbGluaXR5LCAxZS0zKVxuZGVuc2l0eSAoc2VhX3dhdGVyX2RlbnNpdHksIGtnIG0tMylcbnByZXNzdXJlIChzZWFfd2F0ZXJfcHJlc3N1cmUsIGRiYXIpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvaGF3YWlpX3NvZXN0X2NjOTJfN2QyNF8wNjI3X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9oYXdhaWlfc29lc3RfY2M5Ml83ZDI0XzA2MjdfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vaGF3YWlpX3NvZXN0X2NjOTJfN2QyNF8wNjI3L2luZGV4Lmpzb24iLCAiaHR0cDovL3d3dy5wYWNpb29zLmhhd2FpaS5lZHUiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvaGF3YWlpX3NvZXN0X2NjOTJfN2QyNF8wNjI3LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1oYXdhaWlfc29lc3RfY2M5Ml83ZDI0XzA2Mjcmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiVW5pdmVyc2l0eSBvZiBIYXdhaWkiLCAiaGF3YWlpX3NvZXN0X2NjOTJfN2QyNF8wNjI3Il0sCiAgICAgIFsiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfZjI4OV84MTcwX2VjNDUiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0X2YyODlfODE3MF9lYzQ1LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlBhY0lPT1MgT2NlYW4gR2xpZGVyczogU2VhR2xpZGVyIDEzOTogTWlzc2lvbiAxIiwgIkFzIGEgcGFydCBvZiBQYWNJT09TLCBvY2VhbiBnbGlkZXJzIHByb3ZpZGUgdmVyeSBkZXRhaWxlZCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgcGh5c2ljYWwgYW5kIGNoZW1pY2FsIGNvbmRpdGlvbiBvZiB0aGUgd2F0ZXJzIGFyb3VuZCB0aGUgSGF3YWlpYW4gSXNsYW5kcy4gQWRkaXRpb25hbGx5LCB0aGVzZSBkYXRhIGdldCB1c2VkIGluIGNvbXB1dGVyIG1vZGVscyB0byBtYWtlIHByZWRpY3Rpb25zIGFib3V0IGN1cnJlbnRzLiBPY2VhbiBnbGlkZXJzIGFyZSBzbWFsbCwgZnJlZS1zd2ltbWluZywgdW5tYW5uZWQgdmVoaWNsZXMgdGhhdCBjYW4gY3J1aXNlIHRoZSBvY2VhbiBmb3Igc2V2ZXJhbCBtb250aHMgZ2F0aGVyaW5nIGluZm9ybWF0aW9uIGFib3V0IHRoZSB0ZW1wZXJhdHVyZSwgc2FsaW5pdHksIGFuZCBvdGhlciB3YXRlciBwcm9wZXJ0aWVzIGJldHdlZW4gdGhlIHN1cmZhY2UgYW5kIDEwMDAgbSBkZXB0aC4gQSBwcmVzc3VyZSBzZW5zb3Igb24gdGhlIGdsaWRlciBpcyBhYmxlIHRvIHJlY29yZCB0aGUgZGVwdGggdGhyb3VnaG91dCB0aGUgZGl2ZS4gQmVjYXVzZSBnbGlkZXJzIGFyZSB1bm1hbm5lZCwgdGhleSBjb21tdW5pY2F0ZSB3aXRoIHNjaWVudGlzdHMgb24gbGFuZCB3aGVuIHRoZXkgYXJlIGF0IHRoZSBzdXJmYWNlIHVzaW5nIGFuIGFudGVubmEgb24gdGhlIGVuZCBvZiB0aGUgZ2xpZGVyLiBUaGUgU2VhR2xpZGVyIGF1dG9ub21vdXMgdW5kZXJ3YXRlciB2ZWhpY2xlIChBVVYpIHdhcyBkZXNpZ25lZCBhdCB0aGUgVW5pdmVyc2l0eSBvZiBXYXNoaW5ndG9uIChVVykgQXBwbGllZCBQaHlzaWNzIExhYm9yYXRvcnkgKEFQTCkuIFRoZXNlIGRhdGEgYXJlIHRha2VuIGZyb20gTWlzc2lvbiAxIG9mIFNlYUdsaWRlciAxMzkuXG5cbmNkbV9kYXRhX3R5cGUgPSBUcmFqZWN0b3J5XG5WQVJJQUJMRVM6XG50cmFqZWN0b3J5XG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxudGVtcGVyYXR1cmUgKHNlYV93YXRlcl90ZW1wZXJhdHVyZSwgQ2Vsc2l1cylcbmNvbmR1Y3Rpdml0eSAoc2VhX3dhdGVyX2VsZWN0cmljYWxfY29uZHVjdGl2aXR5LCBTIG0tMSlcbnNhbGluaXR5IChzZWFfd2F0ZXJfc2FsaW5pdHksIDFlLTMpXG5kZW5zaXR5IChzZWFfd2F0ZXJfZGVuc2l0eSwga2cgbS0zKVxucHJlc3N1cmUgKHNlYV93YXRlcl9wcmVzc3VyZSwgZGJhcilcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9oYXdhaWlfc29lc3RfZjI4OV84MTcwX2VjNDVfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2hhd2FpaV9zb2VzdF9mMjg5XzgxNzBfZWM0NV9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9oYXdhaWlfc29lc3RfZjI4OV84MTcwX2VjNDUvaW5kZXguanNvbiIsICJodHRwOi8vd3d3LnBhY2lvb3MuaGF3YWlpLmVkdSIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9oYXdhaWlfc29lc3RfZjI4OV84MTcwX2VjNDUucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWhhd2FpaV9zb2VzdF9mMjg5XzgxNzBfZWM0NSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJVbml2ZXJzaXR5IG9mIEhhd2FpaSIsICJoYXdhaWlfc29lc3RfZjI4OV84MTcwX2VjNDUiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF8zNmRkX2NmNGNfNzNhNiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfMzZkZF9jZjRjXzczYTYuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiUGFjSU9PUyBPY2VhbiBHbGlkZXJzOiBTZWFHbGlkZXIgMTM5OiBNaXNzaW9uIDIiLCAiQXMgYSBwYXJ0IG9mIFBhY0lPT1MsIG9jZWFuIGdsaWRlcnMgcHJvdmlkZSB2ZXJ5IGRldGFpbGVkIGluZm9ybWF0aW9uIGFib3V0IHRoZSBwaHlzaWNhbCBhbmQgY2hlbWljYWwgY29uZGl0aW9uIG9mIHRoZSB3YXRlcnMgYXJvdW5kIHRoZSBIYXdhaWlhbiBJc2xhbmRzLiBBZGRpdGlvbmFsbHksIHRoZXNlIGRhdGEgZ2V0IHVzZWQgaW4gY29tcHV0ZXIgbW9kZWxzIHRvIG1ha2UgcHJlZGljdGlvbnMgYWJvdXQgY3VycmVudHMuIE9jZWFuIGdsaWRlcnMgYXJlIHNtYWxsLCBmcmVlLXN3aW1taW5nLCB1bm1hbm5lZCB2ZWhpY2xlcyB0aGF0IGNhbiBjcnVpc2UgdGhlIG9jZWFuIGZvciBzZXZlcmFsIG1vbnRocyBnYXRoZXJpbmcgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHRlbXBlcmF0dXJlLCBzYWxpbml0eSwgYW5kIG90aGVyIHdhdGVyIHByb3BlcnRpZXMgYmV0d2VlbiB0aGUgc3VyZmFjZSBhbmQgMTAwMCBtIGRlcHRoLiBBIHByZXNzdXJlIHNlbnNvciBvbiB0aGUgZ2xpZGVyIGlzIGFibGUgdG8gcmVjb3JkIHRoZSBkZXB0aCB0aHJvdWdob3V0IHRoZSBkaXZlLiBCZWNhdXNlIGdsaWRlcnMgYXJlIHVubWFubmVkLCB0aGV5IGNvbW11bmljYXRlIHdpdGggc2NpZW50aXN0cyBvbiBsYW5kIHdoZW4gdGhleSBhcmUgYXQgdGhlIHN1cmZhY2UgdXNpbmcgYW4gYW50ZW5uYSBvbiB0aGUgZW5kIG9mIHRoZSBnbGlkZXIuIFRoZSBTZWFHbGlkZXIgYXV0b25vbW91cyB1bmRlcndhdGVyIHZlaGljbGUgKEFVVikgd2FzIGRlc2lnbmVkIGF0IHRoZSBVbml2ZXJzaXR5IG9mIFdhc2hpbmd0b24gKFVXKSBBcHBsaWVkIFBoeXNpY3MgTGFib3JhdG9yeSAoQVBMKS4gVGhlc2UgZGF0YSBhcmUgdGFrZW4gZnJvbSBNaXNzaW9uIDIgb2YgU2VhR2xpZGVyIDEzOS5cblxuY2RtX2RhdGFfdHlwZSA9IFRyYWplY3RvcnlcblZBUklBQkxFUzpcbnRyYWplY3RvcnlcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG50ZW1wZXJhdHVyZSAoc2VhX3dhdGVyX3RlbXBlcmF0dXJlLCBDZWxzaXVzKVxuY29uZHVjdGl2aXR5IChzZWFfd2F0ZXJfZWxlY3RyaWNhbF9jb25kdWN0aXZpdHksIFMgbS0xKVxuc2FsaW5pdHkgKHNlYV93YXRlcl9zYWxpbml0eSwgMWUtMylcbmRlbnNpdHkgKHNlYV93YXRlcl9kZW5zaXR5LCBrZyBtLTMpXG5wcmVzc3VyZSAoc2VhX3dhdGVyX3ByZXNzdXJlLCBkYmFyKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2hhd2FpaV9zb2VzdF8zNmRkX2NmNGNfNzNhNl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvaGF3YWlpX3NvZXN0XzM2ZGRfY2Y0Y183M2E2X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2hhd2FpaV9zb2VzdF8zNmRkX2NmNGNfNzNhNi9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cucGFjaW9vcy5oYXdhaWkuZWR1IiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2hhd2FpaV9zb2VzdF8zNmRkX2NmNGNfNzNhNi5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9aGF3YWlpX3NvZXN0XzM2ZGRfY2Y0Y183M2E2JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIlVuaXZlcnNpdHkgb2YgSGF3YWlpIiwgImhhd2FpaV9zb2VzdF8zNmRkX2NmNGNfNzNhNiJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0XzUzNTlfODY3OF84MmIxIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF81MzU5Xzg2NzhfODJiMS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJQYWNJT09TIE9jZWFuIEdsaWRlcnM6IFNlYUdsaWRlciAxMzk6IE1pc3Npb24gMyIsICJBcyBhIHBhcnQgb2YgUGFjSU9PUywgb2NlYW4gZ2xpZGVycyBwcm92aWRlIHZlcnkgZGV0YWlsZWQgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHBoeXNpY2FsIGFuZCBjaGVtaWNhbCBjb25kaXRpb24gb2YgdGhlIHdhdGVycyBhcm91bmQgdGhlIEhhd2FpaWFuIElzbGFuZHMuIEFkZGl0aW9uYWxseSwgdGhlc2UgZGF0YSBnZXQgdXNlZCBpbiBjb21wdXRlciBtb2RlbHMgdG8gbWFrZSBwcmVkaWN0aW9ucyBhYm91dCBjdXJyZW50cy4gT2NlYW4gZ2xpZGVycyBhcmUgc21hbGwsIGZyZWUtc3dpbW1pbmcsIHVubWFubmVkIHZlaGljbGVzIHRoYXQgY2FuIGNydWlzZSB0aGUgb2NlYW4gZm9yIHNldmVyYWwgbW9udGhzIGdhdGhlcmluZyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdGVtcGVyYXR1cmUsIHNhbGluaXR5LCBhbmQgb3RoZXIgd2F0ZXIgcHJvcGVydGllcyBiZXR3ZWVuIHRoZSBzdXJmYWNlIGFuZCAxMDAwIG0gZGVwdGguIEEgcHJlc3N1cmUgc2Vuc29yIG9uIHRoZSBnbGlkZXIgaXMgYWJsZSB0byByZWNvcmQgdGhlIGRlcHRoIHRocm91Z2hvdXQgdGhlIGRpdmUuIEJlY2F1c2UgZ2xpZGVycyBhcmUgdW5tYW5uZWQsIHRoZXkgY29tbXVuaWNhdGUgd2l0aCBzY2llbnRpc3RzIG9uIGxhbmQgd2hlbiB0aGV5IGFyZSBhdCB0aGUgc3VyZmFjZSB1c2luZyBhbiBhbnRlbm5hIG9uIHRoZSBlbmQgb2YgdGhlIGdsaWRlci4gVGhlIFNlYUdsaWRlciBhdXRvbm9tb3VzIHVuZGVyd2F0ZXIgdmVoaWNsZSAoQVVWKSB3YXMgZGVzaWduZWQgYXQgdGhlIFVuaXZlcnNpdHkgb2YgV2FzaGluZ3RvbiAoVVcpIEFwcGxpZWQgUGh5c2ljcyBMYWJvcmF0b3J5IChBUEwpLiBUaGVzZSBkYXRhIGFyZSB0YWtlbiBmcm9tIE1pc3Npb24gMyBvZiBTZWFHbGlkZXIgMTM5LlxuXG5jZG1fZGF0YV90eXBlID0gVHJhamVjdG9yeVxuVkFSSUFCTEVTOlxudHJhamVjdG9yeVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbnRlbXBlcmF0dXJlIChzZWFfd2F0ZXJfdGVtcGVyYXR1cmUsIENlbHNpdXMpXG5jb25kdWN0aXZpdHkgKHNlYV93YXRlcl9lbGVjdHJpY2FsX2NvbmR1Y3Rpdml0eSwgUyBtLTEpXG5zYWxpbml0eSAoc2VhX3dhdGVyX3NhbGluaXR5LCAxZS0zKVxuZGVuc2l0eSAoc2VhX3dhdGVyX2RlbnNpdHksIGtnIG0tMylcbnByZXNzdXJlIChzZWFfd2F0ZXJfcHJlc3N1cmUsIGRiYXIpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvaGF3YWlpX3NvZXN0XzUzNTlfODY3OF84MmIxX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9oYXdhaWlfc29lc3RfNTM1OV84Njc4XzgyYjFfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vaGF3YWlpX3NvZXN0XzUzNTlfODY3OF84MmIxL2luZGV4Lmpzb24iLCAiaHR0cDovL3d3dy5wYWNpb29zLmhhd2FpaS5lZHUiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvaGF3YWlpX3NvZXN0XzUzNTlfODY3OF84MmIxLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1oYXdhaWlfc29lc3RfNTM1OV84Njc4XzgyYjEmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiVW5pdmVyc2l0eSBvZiBIYXdhaWkiLCAiaGF3YWlpX3NvZXN0XzUzNTlfODY3OF84MmIxIl0sCiAgICAgIFsiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfOTJjMV9hMmIwXzU1ZmIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0XzkyYzFfYTJiMF81NWZiLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlBhY0lPT1MgT2NlYW4gR2xpZGVyczogU2VhR2xpZGVyIDEzOTogTWlzc2lvbiA2IiwgIkFzIGEgcGFydCBvZiBQYWNJT09TLCBvY2VhbiBnbGlkZXJzIHByb3ZpZGUgdmVyeSBkZXRhaWxlZCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgcGh5c2ljYWwgYW5kIGNoZW1pY2FsIGNvbmRpdGlvbiBvZiB0aGUgd2F0ZXJzIGFyb3VuZCB0aGUgSGF3YWlpYW4gSXNsYW5kcy4gQWRkaXRpb25hbGx5LCB0aGVzZSBkYXRhIGdldCB1c2VkIGluIGNvbXB1dGVyIG1vZGVscyB0byBtYWtlIHByZWRpY3Rpb25zIGFib3V0IGN1cnJlbnRzLiBPY2VhbiBnbGlkZXJzIGFyZSBzbWFsbCwgZnJlZS1zd2ltbWluZywgdW5tYW5uZWQgdmVoaWNsZXMgdGhhdCBjYW4gY3J1aXNlIHRoZSBvY2VhbiBmb3Igc2V2ZXJhbCBtb250aHMgZ2F0aGVyaW5nIGluZm9ybWF0aW9uIGFib3V0IHRoZSB0ZW1wZXJhdHVyZSwgc2FsaW5pdHksIGFuZCBvdGhlciB3YXRlciBwcm9wZXJ0aWVzIGJldHdlZW4gdGhlIHN1cmZhY2UgYW5kIDEwMDAgbSBkZXB0aC4gQSBwcmVzc3VyZSBzZW5zb3Igb24gdGhlIGdsaWRlciBpcyBhYmxlIHRvIHJlY29yZCB0aGUgZGVwdGggdGhyb3VnaG91dCB0aGUgZGl2ZS4gQmVjYXVzZSBnbGlkZXJzIGFyZSB1bm1hbm5lZCwgdGhleSBjb21tdW5pY2F0ZSB3aXRoIHNjaWVudGlzdHMgb24gbGFuZCB3aGVuIHRoZXkgYXJlIGF0IHRoZSBzdXJmYWNlIHVzaW5nIGFuIGFudGVubmEgb24gdGhlIGVuZCBvZiB0aGUgZ2xpZGVyLiBUaGUgU2VhR2xpZGVyIGF1dG9ub21vdXMgdW5kZXJ3YXRlciB2ZWhpY2xlIChBVVYpIHdhcyBkZXNpZ25lZCBhdCB0aGUgVW5pdmVyc2l0eSBvZiBXYXNoaW5ndG9uIChVVykgQXBwbGllZCBQaHlzaWNzIExhYm9yYXRvcnkgKEFQTCkuIFRoZXNlIGRhdGEgYXJlIHRha2VuIGZyb20gTWlzc2lvbiA2IG9mIFNlYUdsaWRlciAxMzkuXG5cbmNkbV9kYXRhX3R5cGUgPSBUcmFqZWN0b3J5XG5WQVJJQUJMRVM6XG50cmFqZWN0b3J5XG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxudGVtcGVyYXR1cmUgKHNlYV93YXRlcl90ZW1wZXJhdHVyZSwgQ2Vsc2l1cylcbmNvbmR1Y3Rpdml0eSAoc2VhX3dhdGVyX2VsZWN0cmljYWxfY29uZHVjdGl2aXR5LCBTIG0tMSlcbnNhbGluaXR5IChzZWFfd2F0ZXJfc2FsaW5pdHksIDFlLTMpXG5kZW5zaXR5IChzZWFfd2F0ZXJfZGVuc2l0eSwga2cgbS0zKVxucHJlc3N1cmUgKHNlYV93YXRlcl9wcmVzc3VyZSwgZGJhcilcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9oYXdhaWlfc29lc3RfOTJjMV9hMmIwXzU1ZmJfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2hhd2FpaV9zb2VzdF85MmMxX2EyYjBfNTVmYl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9oYXdhaWlfc29lc3RfOTJjMV9hMmIwXzU1ZmIvaW5kZXguanNvbiIsICJodHRwOi8vd3d3LnBhY2lvb3MuaGF3YWlpLmVkdSIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9oYXdhaWlfc29lc3RfOTJjMV9hMmIwXzU1ZmIucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWhhd2FpaV9zb2VzdF85MmMxX2EyYjBfNTVmYiZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJVbml2ZXJzaXR5IG9mIEhhd2FpaSIsICJoYXdhaWlfc29lc3RfOTJjMV9hMmIwXzU1ZmIiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF83NWIzX2U1MmNfMjZhMiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfNzViM19lNTJjXzI2YTIuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiUGFjSU9PUyBPY2VhbiBHbGlkZXJzOiBTZWFHbGlkZXIgMTM5OiBNaXNzaW9uIDciLCAiQXMgYSBwYXJ0IG9mIFBhY0lPT1MsIG9jZWFuIGdsaWRlcnMgcHJvdmlkZSB2ZXJ5IGRldGFpbGVkIGluZm9ybWF0aW9uIGFib3V0IHRoZSBwaHlzaWNhbCBhbmQgY2hlbWljYWwgY29uZGl0aW9uIG9mIHRoZSB3YXRlcnMgYXJvdW5kIHRoZSBIYXdhaWlhbiBJc2xhbmRzLiBBZGRpdGlvbmFsbHksIHRoZXNlIGRhdGEgZ2V0IHVzZWQgaW4gY29tcHV0ZXIgbW9kZWxzIHRvIG1ha2UgcHJlZGljdGlvbnMgYWJvdXQgY3VycmVudHMuIE9jZWFuIGdsaWRlcnMgYXJlIHNtYWxsLCBmcmVlLXN3aW1taW5nLCB1bm1hbm5lZCB2ZWhpY2xlcyB0aGF0IGNhbiBjcnVpc2UgdGhlIG9jZWFuIGZvciBzZXZlcmFsIG1vbnRocyBnYXRoZXJpbmcgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHRlbXBlcmF0dXJlLCBzYWxpbml0eSwgYW5kIG90aGVyIHdhdGVyIHByb3BlcnRpZXMgYmV0d2VlbiB0aGUgc3VyZmFjZSBhbmQgMTAwMCBtIGRlcHRoLiBBIHByZXNzdXJlIHNlbnNvciBvbiB0aGUgZ2xpZGVyIGlzIGFibGUgdG8gcmVjb3JkIHRoZSBkZXB0aCB0aHJvdWdob3V0IHRoZSBkaXZlLiBCZWNhdXNlIGdsaWRlcnMgYXJlIHVubWFubmVkLCB0aGV5IGNvbW11bmljYXRlIHdpdGggc2NpZW50aXN0cyBvbiBsYW5kIHdoZW4gdGhleSBhcmUgYXQgdGhlIHN1cmZhY2UgdXNpbmcgYW4gYW50ZW5uYSBvbiB0aGUgZW5kIG9mIHRoZSBnbGlkZXIuIFRoZSBTZWFHbGlkZXIgYXV0b25vbW91cyB1bmRlcndhdGVyIHZlaGljbGUgKEFVVikgd2FzIGRlc2lnbmVkIGF0IHRoZSBVbml2ZXJzaXR5IG9mIFdhc2hpbmd0b24gKFVXKSBBcHBsaWVkIFBoeXNpY3MgTGFib3JhdG9yeSAoQVBMKS4gVGhlc2UgZGF0YSBhcmUgdGFrZW4gZnJvbSBNaXNzaW9uIDcgb2YgU2VhR2xpZGVyIDEzOS5cblxuY2RtX2RhdGFfdHlwZSA9IFRyYWplY3RvcnlcblZBUklBQkxFUzpcbnRyYWplY3RvcnlcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG50ZW1wZXJhdHVyZSAoc2VhX3dhdGVyX3RlbXBlcmF0dXJlLCBDZWxzaXVzKVxuY29uZHVjdGl2aXR5IChzZWFfd2F0ZXJfZWxlY3RyaWNhbF9jb25kdWN0aXZpdHksIFMgbS0xKVxuc2FsaW5pdHkgKHNlYV93YXRlcl9zYWxpbml0eSwgMWUtMylcbmRlbnNpdHkgKHNlYV93YXRlcl9kZW5zaXR5LCBrZyBtLTMpXG5wcmVzc3VyZSAoc2VhX3dhdGVyX3ByZXNzdXJlLCBkYmFyKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2hhd2FpaV9zb2VzdF83NWIzX2U1MmNfMjZhMl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvaGF3YWlpX3NvZXN0Xzc1YjNfZTUyY18yNmEyX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2hhd2FpaV9zb2VzdF83NWIzX2U1MmNfMjZhMi9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cucGFjaW9vcy5oYXdhaWkuZWR1IiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2hhd2FpaV9zb2VzdF83NWIzX2U1MmNfMjZhMi5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9aGF3YWlpX3NvZXN0Xzc1YjNfZTUyY18yNmEyJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIlVuaXZlcnNpdHkgb2YgSGF3YWlpIiwgImhhd2FpaV9zb2VzdF83NWIzX2U1MmNfMjZhMiJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0X2E4MjZfODYzM18wMGJiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF9hODI2Xzg2MzNfMDBiYi5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJQYWNJT09TIE9jZWFuIEdsaWRlcnM6IFNlYUdsaWRlciAxMzk6IE1pc3Npb24gOCIsICJBcyBhIHBhcnQgb2YgUGFjSU9PUywgb2NlYW4gZ2xpZGVycyBwcm92aWRlIHZlcnkgZGV0YWlsZWQgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHBoeXNpY2FsIGFuZCBjaGVtaWNhbCBjb25kaXRpb24gb2YgdGhlIHdhdGVycyBhcm91bmQgdGhlIEhhd2FpaWFuIElzbGFuZHMuIEFkZGl0aW9uYWxseSwgdGhlc2UgZGF0YSBnZXQgdXNlZCBpbiBjb21wdXRlciBtb2RlbHMgdG8gbWFrZSBwcmVkaWN0aW9ucyBhYm91dCBjdXJyZW50cy4gT2NlYW4gZ2xpZGVycyBhcmUgc21hbGwsIGZyZWUtc3dpbW1pbmcsIHVubWFubmVkIHZlaGljbGVzIHRoYXQgY2FuIGNydWlzZSB0aGUgb2NlYW4gZm9yIHNldmVyYWwgbW9udGhzIGdhdGhlcmluZyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdGVtcGVyYXR1cmUsIHNhbGluaXR5LCBhbmQgb3RoZXIgd2F0ZXIgcHJvcGVydGllcyBiZXR3ZWVuIHRoZSBzdXJmYWNlIGFuZCAxMDAwIG0gZGVwdGguIEEgcHJlc3N1cmUgc2Vuc29yIG9uIHRoZSBnbGlkZXIgaXMgYWJsZSB0byByZWNvcmQgdGhlIGRlcHRoIHRocm91Z2hvdXQgdGhlIGRpdmUuIEJlY2F1c2UgZ2xpZGVycyBhcmUgdW5tYW5uZWQsIHRoZXkgY29tbXVuaWNhdGUgd2l0aCBzY2llbnRpc3RzIG9uIGxhbmQgd2hlbiB0aGV5IGFyZSBhdCB0aGUgc3VyZmFjZSB1c2luZyBhbiBhbnRlbm5hIG9uIHRoZSBlbmQgb2YgdGhlIGdsaWRlci4gVGhlIFNlYUdsaWRlciBhdXRvbm9tb3VzIHVuZGVyd2F0ZXIgdmVoaWNsZSAoQVVWKSB3YXMgZGVzaWduZWQgYXQgdGhlIFVuaXZlcnNpdHkgb2YgV2FzaGluZ3RvbiAoVVcpIEFwcGxpZWQgUGh5c2ljcyBMYWJvcmF0b3J5IChBUEwpLiBUaGVzZSBkYXRhIGFyZSB0YWtlbiBmcm9tIE1pc3Npb24gOCBvZiBTZWFHbGlkZXIgMTM5LlxuXG5jZG1fZGF0YV90eXBlID0gVHJhamVjdG9yeVxuVkFSSUFCTEVTOlxudHJhamVjdG9yeVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbnRlbXBlcmF0dXJlIChzZWFfd2F0ZXJfdGVtcGVyYXR1cmUsIENlbHNpdXMpXG5jb25kdWN0aXZpdHkgKHNlYV93YXRlcl9lbGVjdHJpY2FsX2NvbmR1Y3Rpdml0eSwgUyBtLTEpXG5zYWxpbml0eSAoc2VhX3dhdGVyX3NhbGluaXR5LCAxZS0zKVxuZGVuc2l0eSAoc2VhX3dhdGVyX2RlbnNpdHksIGtnIG0tMylcbnByZXNzdXJlIChzZWFfd2F0ZXJfcHJlc3N1cmUsIGRiYXIpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvaGF3YWlpX3NvZXN0X2E4MjZfODYzM18wMGJiX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9oYXdhaWlfc29lc3RfYTgyNl84NjMzXzAwYmJfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vaGF3YWlpX3NvZXN0X2E4MjZfODYzM18wMGJiL2luZGV4Lmpzb24iLCAiaHR0cDovL3d3dy5wYWNpb29zLmhhd2FpaS5lZHUiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvaGF3YWlpX3NvZXN0X2E4MjZfODYzM18wMGJiLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1oYXdhaWlfc29lc3RfYTgyNl84NjMzXzAwYmImc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiVW5pdmVyc2l0eSBvZiBIYXdhaWkiLCAiaGF3YWlpX3NvZXN0X2E4MjZfODYzM18wMGJiIl0sCiAgICAgIFsiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfMDc2YV84N2IzXzQwYTAiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0XzA3NmFfODdiM180MGEwLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlBhY0lPT1MgT2NlYW4gR2xpZGVyczogU2VhR2xpZGVyIDEzOTogTWlzc2lvbiA5IiwgIkFzIGEgcGFydCBvZiBQYWNJT09TLCBvY2VhbiBnbGlkZXJzIHByb3ZpZGUgdmVyeSBkZXRhaWxlZCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgcGh5c2ljYWwgYW5kIGNoZW1pY2FsIGNvbmRpdGlvbiBvZiB0aGUgd2F0ZXJzIGFyb3VuZCB0aGUgSGF3YWlpYW4gSXNsYW5kcy4gQWRkaXRpb25hbGx5LCB0aGVzZSBkYXRhIGdldCB1c2VkIGluIGNvbXB1dGVyIG1vZGVscyB0byBtYWtlIHByZWRpY3Rpb25zIGFib3V0IGN1cnJlbnRzLiBPY2VhbiBnbGlkZXJzIGFyZSBzbWFsbCwgZnJlZS1zd2ltbWluZywgdW5tYW5uZWQgdmVoaWNsZXMgdGhhdCBjYW4gY3J1aXNlIHRoZSBvY2VhbiBmb3Igc2V2ZXJhbCBtb250aHMgZ2F0aGVyaW5nIGluZm9ybWF0aW9uIGFib3V0IHRoZSB0ZW1wZXJhdHVyZSwgc2FsaW5pdHksIGFuZCBvdGhlciB3YXRlciBwcm9wZXJ0aWVzIGJldHdlZW4gdGhlIHN1cmZhY2UgYW5kIDEwMDAgbSBkZXB0aC4gQSBwcmVzc3VyZSBzZW5zb3Igb24gdGhlIGdsaWRlciBpcyBhYmxlIHRvIHJlY29yZCB0aGUgZGVwdGggdGhyb3VnaG91dCB0aGUgZGl2ZS4gQmVjYXVzZSBnbGlkZXJzIGFyZSB1bm1hbm5lZCwgdGhleSBjb21tdW5pY2F0ZSB3aXRoIHNjaWVudGlzdHMgb24gbGFuZCB3aGVuIHRoZXkgYXJlIGF0IHRoZSBzdXJmYWNlIHVzaW5nIGFuIGFudGVubmEgb24gdGhlIGVuZCBvZiB0aGUgZ2xpZGVyLiBUaGUgU2VhR2xpZGVyIGF1dG9ub21vdXMgdW5kZXJ3YXRlciB2ZWhpY2xlIChBVVYpIHdhcyBkZXNpZ25lZCBhdCB0aGUgVW5pdmVyc2l0eSBvZiBXYXNoaW5ndG9uIChVVykgQXBwbGllZCBQaHlzaWNzIExhYm9yYXRvcnkgKEFQTCkuIFRoZXNlIGRhdGEgYXJlIHRha2VuIGZyb20gTWlzc2lvbiA5IG9mIFNlYUdsaWRlciAxMzkuXG5cbmNkbV9kYXRhX3R5cGUgPSBUcmFqZWN0b3J5XG5WQVJJQUJMRVM6XG50cmFqZWN0b3J5XG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxudGVtcGVyYXR1cmUgKHNlYV93YXRlcl90ZW1wZXJhdHVyZSwgQ2Vsc2l1cylcbmNvbmR1Y3Rpdml0eSAoc2VhX3dhdGVyX2VsZWN0cmljYWxfY29uZHVjdGl2aXR5LCBTIG0tMSlcbnNhbGluaXR5IChzZWFfd2F0ZXJfc2FsaW5pdHksIDFlLTMpXG5kZW5zaXR5IChzZWFfd2F0ZXJfZGVuc2l0eSwga2cgbS0zKVxucHJlc3N1cmUgKHNlYV93YXRlcl9wcmVzc3VyZSwgZGJhcilcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9oYXdhaWlfc29lc3RfMDc2YV84N2IzXzQwYTBfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2hhd2FpaV9zb2VzdF8wNzZhXzg3YjNfNDBhMF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9oYXdhaWlfc29lc3RfMDc2YV84N2IzXzQwYTAvaW5kZXguanNvbiIsICJodHRwOi8vd3d3LnBhY2lvb3MuaGF3YWlpLmVkdSIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9oYXdhaWlfc29lc3RfMDc2YV84N2IzXzQwYTAucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWhhd2FpaV9zb2VzdF8wNzZhXzg3YjNfNDBhMCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJVbml2ZXJzaXR5IG9mIEhhd2FpaSIsICJoYXdhaWlfc29lc3RfMDc2YV84N2IzXzQwYTAiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF80YzgyXzQ3MjhfMDEwYiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfNGM4Ml80NzI4XzAxMGIuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiUGFjSU9PUyBPY2VhbiBHbGlkZXJzOiBTZWFHbGlkZXIgNTIzOiBNaXNzaW9uIDEiLCAiQXMgYSBwYXJ0IG9mIFBhY0lPT1MsIG9jZWFuIGdsaWRlcnMgcHJvdmlkZSB2ZXJ5IGRldGFpbGVkIGluZm9ybWF0aW9uIGFib3V0IHRoZSBwaHlzaWNhbCBhbmQgY2hlbWljYWwgY29uZGl0aW9uIG9mIHRoZSB3YXRlcnMgYXJvdW5kIHRoZSBIYXdhaWlhbiBJc2xhbmRzLiBBZGRpdGlvbmFsbHksIHRoZXNlIGRhdGEgZ2V0IHVzZWQgaW4gY29tcHV0ZXIgbW9kZWxzIHRvIG1ha2UgcHJlZGljdGlvbnMgYWJvdXQgY3VycmVudHMuIE9jZWFuIGdsaWRlcnMgYXJlIHNtYWxsLCBmcmVlLXN3aW1taW5nLCB1bm1hbm5lZCB2ZWhpY2xlcyB0aGF0IGNhbiBjcnVpc2UgdGhlIG9jZWFuIGZvciBzZXZlcmFsIG1vbnRocyBnYXRoZXJpbmcgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHRlbXBlcmF0dXJlLCBzYWxpbml0eSwgYW5kIG90aGVyIHdhdGVyIHByb3BlcnRpZXMgYmV0d2VlbiB0aGUgc3VyZmFjZSBhbmQgMTAwMCBtIGRlcHRoLiBBIHByZXNzdXJlIHNlbnNvciBvbiB0aGUgZ2xpZGVyIGlzIGFibGUgdG8gcmVjb3JkIHRoZSBkZXB0aCB0aHJvdWdob3V0IHRoZSBkaXZlLiBCZWNhdXNlIGdsaWRlcnMgYXJlIHVubWFubmVkLCB0aGV5IGNvbW11bmljYXRlIHdpdGggc2NpZW50aXN0cyBvbiBsYW5kIHdoZW4gdGhleSBhcmUgYXQgdGhlIHN1cmZhY2UgdXNpbmcgYW4gYW50ZW5uYSBvbiB0aGUgZW5kIG9mIHRoZSBnbGlkZXIuIFRoZSBTZWFHbGlkZXIgYXV0b25vbW91cyB1bmRlcndhdGVyIHZlaGljbGUgKEFVVikgd2FzIGRlc2lnbmVkIGF0IHRoZSBVbml2ZXJzaXR5IG9mIFdhc2hpbmd0b24gKFVXKSBBcHBsaWVkIFBoeXNpY3MgTGFib3JhdG9yeSAoQVBMKS4gVGhlc2UgZGF0YSBhcmUgdGFrZW4gZnJvbSBNaXNzaW9uIDEgb2YgU2VhR2xpZGVyIDUyMy5cblxuY2RtX2RhdGFfdHlwZSA9IFRyYWplY3RvcnlcblZBUklBQkxFUzpcbnRyYWplY3RvcnlcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG50ZW1wZXJhdHVyZSAoc2VhX3dhdGVyX3RlbXBlcmF0dXJlLCBDZWxzaXVzKVxuY29uZHVjdGl2aXR5IChzZWFfd2F0ZXJfZWxlY3RyaWNhbF9jb25kdWN0aXZpdHksIFMgbS0xKVxuc2FsaW5pdHkgKHNlYV93YXRlcl9zYWxpbml0eSwgMWUtMylcbmRlbnNpdHkgKHNlYV93YXRlcl9kZW5zaXR5LCBrZyBtLTMpXG5wcmVzc3VyZSAoc2VhX3dhdGVyX3ByZXNzdXJlLCBkYmFyKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2hhd2FpaV9zb2VzdF80YzgyXzQ3MjhfMDEwYl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvaGF3YWlpX3NvZXN0XzRjODJfNDcyOF8wMTBiX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2hhd2FpaV9zb2VzdF80YzgyXzQ3MjhfMDEwYi9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cucGFjaW9vcy5oYXdhaWkuZWR1IiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2hhd2FpaV9zb2VzdF80YzgyXzQ3MjhfMDEwYi5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9aGF3YWlpX3NvZXN0XzRjODJfNDcyOF8wMTBiJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIlVuaXZlcnNpdHkgb2YgSGF3YWlpIiwgImhhd2FpaV9zb2VzdF80YzgyXzQ3MjhfMDEwYiJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0Xzg1NmJfN2U2Nl84YzNmIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF84NTZiXzdlNjZfOGMzZi5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJQYWNJT09TIE9jZWFuIEdsaWRlcnM6IFNlYUdsaWRlciA1MjM6IE1pc3Npb24gMyIsICJBcyBhIHBhcnQgb2YgUGFjSU9PUywgb2NlYW4gZ2xpZGVycyBwcm92aWRlIHZlcnkgZGV0YWlsZWQgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHBoeXNpY2FsIGFuZCBjaGVtaWNhbCBjb25kaXRpb24gb2YgdGhlIHdhdGVycyBhcm91bmQgdGhlIEhhd2FpaWFuIElzbGFuZHMuIEFkZGl0aW9uYWxseSwgdGhlc2UgZGF0YSBnZXQgdXNlZCBpbiBjb21wdXRlciBtb2RlbHMgdG8gbWFrZSBwcmVkaWN0aW9ucyBhYm91dCBjdXJyZW50cy4gT2NlYW4gZ2xpZGVycyBhcmUgc21hbGwsIGZyZWUtc3dpbW1pbmcsIHVubWFubmVkIHZlaGljbGVzIHRoYXQgY2FuIGNydWlzZSB0aGUgb2NlYW4gZm9yIHNldmVyYWwgbW9udGhzIGdhdGhlcmluZyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdGVtcGVyYXR1cmUsIHNhbGluaXR5LCBhbmQgb3RoZXIgd2F0ZXIgcHJvcGVydGllcyBiZXR3ZWVuIHRoZSBzdXJmYWNlIGFuZCAxMDAwIG0gZGVwdGguIEEgcHJlc3N1cmUgc2Vuc29yIG9uIHRoZSBnbGlkZXIgaXMgYWJsZSB0byByZWNvcmQgdGhlIGRlcHRoIHRocm91Z2hvdXQgdGhlIGRpdmUuIEJlY2F1c2UgZ2xpZGVycyBhcmUgdW5tYW5uZWQsIHRoZXkgY29tbXVuaWNhdGUgd2l0aCBzY2llbnRpc3RzIG9uIGxhbmQgd2hlbiB0aGV5IGFyZSBhdCB0aGUgc3VyZmFjZSB1c2luZyBhbiBhbnRlbm5hIG9uIHRoZSBlbmQgb2YgdGhlIGdsaWRlci4gVGhlIFNlYUdsaWRlciBhdXRvbm9tb3VzIHVuZGVyd2F0ZXIgdmVoaWNsZSAoQVVWKSB3YXMgZGVzaWduZWQgYXQgdGhlIFVuaXZlcnNpdHkgb2YgV2FzaGluZ3RvbiAoVVcpIEFwcGxpZWQgUGh5c2ljcyBMYWJvcmF0b3J5IChBUEwpLiBUaGVzZSBkYXRhIGFyZSB0YWtlbiBmcm9tIE1pc3Npb24gMyBvZiBTZWFHbGlkZXIgNTIzLlxuXG5jZG1fZGF0YV90eXBlID0gVHJhamVjdG9yeVxuVkFSSUFCTEVTOlxudHJhamVjdG9yeVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbnRlbXBlcmF0dXJlIChzZWFfd2F0ZXJfdGVtcGVyYXR1cmUsIENlbHNpdXMpXG5jb25kdWN0aXZpdHkgKHNlYV93YXRlcl9lbGVjdHJpY2FsX2NvbmR1Y3Rpdml0eSwgUyBtLTEpXG5zYWxpbml0eSAoc2VhX3dhdGVyX3NhbGluaXR5LCAxZS0zKVxuZGVuc2l0eSAoc2VhX3dhdGVyX2RlbnNpdHksIGtnIG0tMylcbnByZXNzdXJlIChzZWFfd2F0ZXJfcHJlc3N1cmUsIGRiYXIpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvaGF3YWlpX3NvZXN0Xzg1NmJfN2U2Nl84YzNmX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9oYXdhaWlfc29lc3RfODU2Yl83ZTY2XzhjM2ZfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vaGF3YWlpX3NvZXN0Xzg1NmJfN2U2Nl84YzNmL2luZGV4Lmpzb24iLCAiaHR0cDovL3d3dy5wYWNpb29zLmhhd2FpaS5lZHUiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvaGF3YWlpX3NvZXN0Xzg1NmJfN2U2Nl84YzNmLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1oYXdhaWlfc29lc3RfODU2Yl83ZTY2XzhjM2Ymc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiVW5pdmVyc2l0eSBvZiBIYXdhaWkiLCAiaGF3YWlpX3NvZXN0Xzg1NmJfN2U2Nl84YzNmIl0sCiAgICAgIFsiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfMmYyMV80MDYzX2NmZWMiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0XzJmMjFfNDA2M19jZmVjLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlBhY0lPT1MgT2NlYW4gR2xpZGVyczogU2VhR2xpZGVyIDUyMzogTWlzc2lvbiA0IiwgIkFzIGEgcGFydCBvZiBQYWNJT09TLCBvY2VhbiBnbGlkZXJzIHByb3ZpZGUgdmVyeSBkZXRhaWxlZCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgcGh5c2ljYWwgYW5kIGNoZW1pY2FsIGNvbmRpdGlvbiBvZiB0aGUgd2F0ZXJzIGFyb3VuZCB0aGUgSGF3YWlpYW4gSXNsYW5kcy4gQWRkaXRpb25hbGx5LCB0aGVzZSBkYXRhIGdldCB1c2VkIGluIGNvbXB1dGVyIG1vZGVscyB0byBtYWtlIHByZWRpY3Rpb25zIGFib3V0IGN1cnJlbnRzLiBPY2VhbiBnbGlkZXJzIGFyZSBzbWFsbCwgZnJlZS1zd2ltbWluZywgdW5tYW5uZWQgdmVoaWNsZXMgdGhhdCBjYW4gY3J1aXNlIHRoZSBvY2VhbiBmb3Igc2V2ZXJhbCBtb250aHMgZ2F0aGVyaW5nIGluZm9ybWF0aW9uIGFib3V0IHRoZSB0ZW1wZXJhdHVyZSwgc2FsaW5pdHksIGFuZCBvdGhlciB3YXRlciBwcm9wZXJ0aWVzIGJldHdlZW4gdGhlIHN1cmZhY2UgYW5kIDEwMDAgbSBkZXB0aC4gQSBwcmVzc3VyZSBzZW5zb3Igb24gdGhlIGdsaWRlciBpcyBhYmxlIHRvIHJlY29yZCB0aGUgZGVwdGggdGhyb3VnaG91dCB0aGUgZGl2ZS4gQmVjYXVzZSBnbGlkZXJzIGFyZSB1bm1hbm5lZCwgdGhleSBjb21tdW5pY2F0ZSB3aXRoIHNjaWVudGlzdHMgb24gbGFuZCB3aGVuIHRoZXkgYXJlIGF0IHRoZSBzdXJmYWNlIHVzaW5nIGFuIGFudGVubmEgb24gdGhlIGVuZCBvZiB0aGUgZ2xpZGVyLiBUaGUgU2VhR2xpZGVyIGF1dG9ub21vdXMgdW5kZXJ3YXRlciB2ZWhpY2xlIChBVVYpIHdhcyBkZXNpZ25lZCBhdCB0aGUgVW5pdmVyc2l0eSBvZiBXYXNoaW5ndG9uIChVVykgQXBwbGllZCBQaHlzaWNzIExhYm9yYXRvcnkgKEFQTCkuIFRoZXNlIGRhdGEgYXJlIHRha2VuIGZyb20gTWlzc2lvbiA0IG9mIFNlYUdsaWRlciA1MjMuXG5cbmNkbV9kYXRhX3R5cGUgPSBUcmFqZWN0b3J5XG5WQVJJQUJMRVM6XG50cmFqZWN0b3J5XG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxudGVtcGVyYXR1cmUgKHNlYV93YXRlcl90ZW1wZXJhdHVyZSwgQ2Vsc2l1cylcbmNvbmR1Y3Rpdml0eSAoc2VhX3dhdGVyX2VsZWN0cmljYWxfY29uZHVjdGl2aXR5LCBTIG0tMSlcbnNhbGluaXR5IChzZWFfd2F0ZXJfc2FsaW5pdHksIDFlLTMpXG5kZW5zaXR5IChzZWFfd2F0ZXJfZGVuc2l0eSwga2cgbS0zKVxucHJlc3N1cmUgKHNlYV93YXRlcl9wcmVzc3VyZSwgZGJhcilcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9oYXdhaWlfc29lc3RfMmYyMV80MDYzX2NmZWNfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2hhd2FpaV9zb2VzdF8yZjIxXzQwNjNfY2ZlY19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9oYXdhaWlfc29lc3RfMmYyMV80MDYzX2NmZWMvaW5kZXguanNvbiIsICJodHRwOi8vd3d3LnBhY2lvb3MuaGF3YWlpLmVkdSIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9oYXdhaWlfc29lc3RfMmYyMV80MDYzX2NmZWMucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWhhd2FpaV9zb2VzdF8yZjIxXzQwNjNfY2ZlYyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJVbml2ZXJzaXR5IG9mIEhhd2FpaSIsICJoYXdhaWlfc29lc3RfMmYyMV80MDYzX2NmZWMiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF83YWRjXzViMmJfNzY5ZSIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfN2FkY181YjJiXzc2OWUuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiUGFjSU9PUyBXYXRlciBRdWFsaXR5IEJ1b3kgMDMgKFdRQi0wMyk6IEtpaG9sbyBCYXksIEJpZyBJc2xhbmQsIEhhd2FpaSIsICJUaGUgd2F0ZXIgcXVhbGl0eSBidW95cyBhcmUgcGFydCBvZiB0aGUgUGFjaWZpYyBJc2xhbmRzIE9jZWFuIE9ic2VydmluZyBTeXN0ZW0gKFBhY0lPT1MpIGFuZCBhcmUgZGVzaWduZWQgdG8gbWVhc3VyZSBhIHZhcmlldHkgb2Ygb2NlYW4gcGFyYW1ldGVycyBhdCBmaXhlZCBwb2ludHMuIFdRQi0wMyBpcyBsb2NhdGVkIGF0IEtpaG9sbyBCYXkgYWxvbmcgdGhlIGxlZXdhcmQgKFdlc3Rlcm4pIGNvYXN0IG9mIHRoZSBOb3J0aCBLb25hIGRpc3RyaWN0IG9mIEJpZyBJc2xhbmQgaW4gSGF3YWlpLiBDb250aW51b3VzIHNhbXBsaW5nIG9mIHRoaXMgb3V0ZmxvdyBhcmVhIHByb3ZpZGVzIGEgcmVjb3JkIG9mIGJhc2VsaW5lIGNvbmRpdGlvbnMgb2YgdGhlIGNoZW1pY2FsIGFuZCBiaW9sb2dpY2FsIGVudmlyb25tZW50IGZvciBjb21wYXJpc29uIHdoZW4gdGhlcmUgYXJlIHBvbGx1dGlvbiBldmVudHMgc3VjaCBhcyBzdG9ybSBydW5vZmYgb3IgYSBzZXdhZ2Ugc3BpbGwuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKGRlcHRoIGJlbG93IG1lYW4gc2VhIGxldmVsLCBtKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbnN0YXRpb25fbmFtZVxudGVtcGVyYXR1cmUgKHdhdGVyIHRlbXBlcmF0dXJlIChwcm9jZXNzZWQpLCBDZWxzaXVzKVxudGVtcGVyYXR1cmVfcmF3IChUZW1wZXJhdHVyZSAocmF3KSwgQ2Vsc2l1cylcbnRlbXBlcmF0dXJlX3FkIChUZW1wZXJhdHVyZSBxdWFsaXR5IGRlc2NyaXB0b3IsIDApXG5jb25kdWN0aXZpdHkgKENvbmR1Y3Rpdml0eSAocHJvY2Vzc2VkKSwgUyBtLTEpXG5jb25kdWN0aXZpdHlfcmF3IChDb25kdWN0aXZpdHkgKHJhdyksIFMgbS0xKVxuY29uZHVjdGl2aXR5X3FkIChDb25kdWN0aXZpdHkgcXVhbGl0eSBkZXNjcmlwdG9yLCAwKVxuc2FsaW5pdHkgKFNhbGluaXR5IChwcm9jZXNzZWQpLCAxZS0zKVxuc2FsaW5pdHlfcmF3IChTYWxpbml0eSAocmF3KSwgMWUtMylcbnNhbGluaXR5X3FkIChTYWxpbml0eSBxdWFsaXR5IGRlc2NyaXB0b3IsIDApXG5veHlnZW4gKERpc3NvbHZlZCBveHlnZW4gY29uY2VudHJhdGlvbiAocHJvY2Vzc2VkKSwga2cgbS0zKVxub3h5Z2VuX3JhdyAoRGlzc29sdmVkIG94eWdlbiBjb25jZW50cmF0aW9uIChyYXcpLCBrZyBtLTMpXG5veHlnZW5fcWQgKERpc3NvbHZlZCBveHlnZW4gY29uY2VudHJhdGlvbiBxdWFsaXR5IGRlc2NyaXB0b3IsIDApXG5veHlnZW5fc2F0dXJhdGlvbiAoRGlzc29sdmVkIG94eWdlbiBzYXR1cmF0aW9uIChwcm9jZXNzZWQpLCAxKVxub3h5Z2VuX3NhdHVyYXRpb25fcmF3IChEaXNzb2x2ZWQgb3h5Z2VuIHNhdHVyYXRpb24gKHJhdyksIDEpXG5veHlnZW5fc2F0dXJhdGlvbl9xZCAoRGlzc29sdmVkIG94eWdlbiBzYXR1cmF0aW9uIHF1YWxpdHkgZGVzY3JpcHRvciwgMClcbm94eWdlbl9zYXR1cmF0aW9uX2NvbmNlbnRyYXRpb24gKERpc3NvbHZlZCBveHlnZW4gc2F0dXJhdGlvbiBjb25jZW50cmF0aW9uIChwcm9jZXNzZWQpLCBrZyBtLTMpXG5veHlnZW5fc2F0dXJhdGlvbl9jb25jZW50cmF0aW9uX3JhdyAoRGlzc29sdmVkIG94eWdlbiBzYXR1cmF0aW9uIGNvbmNlbnRyYXRpb24gKHJhdyksIGtnIG0tMylcbi4uLiAoMTYgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvaGF3YWlpX3NvZXN0XzdhZGNfNWIyYl83NjllX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9oYXdhaWlfc29lc3RfN2FkY181YjJiXzc2OWVfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vaGF3YWlpX3NvZXN0XzdhZGNfNWIyYl83NjllL2luZGV4Lmpzb24iLCAiaHR0cDovL3d3dy5wYWNpb29zLmhhd2FpaS5lZHUvd2F0ZXIvd3FidW95LWtpaG9sby8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvaGF3YWlpX3NvZXN0XzdhZGNfNWIyYl83NjllLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1oYXdhaWlfc29lc3RfN2FkY181YjJiXzc2OWUmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiVW5pdmVyc2l0eSBvZiBIYXdhaWkiLCAiaGF3YWlpX3NvZXN0XzdhZGNfNWIyYl83NjllIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF81ZWZiXzA2ZWNfZmY2My5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0XzVlZmJfMDZlY19mZjYzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF81ZWZiXzA2ZWNfZmY2My5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJQYWNJT09TIFdhdGVyIFF1YWxpdHkgQnVveSAwNCAoV1FCLTA0KTogSGlsbyBCYXksIEJpZyBJc2xhbmQsIEhhd2FpaSIsICJUaGUgd2F0ZXIgcXVhbGl0eSBidW95cyBhcmUgcGFydCBvZiB0aGUgUGFjaWZpYyBJc2xhbmRzIE9jZWFuIE9ic2VydmluZyBTeXN0ZW0gKFBhY0lPT1MpIGFuZCBhcmUgZGVzaWduZWQgdG8gbWVhc3VyZSBhIHZhcmlldHkgb2Ygb2NlYW4gcGFyYW1ldGVycyBhdCBmaXhlZCBwb2ludHMuICBXUUIwNCBpcyBsb2NhdGVkIGluIEhpbG8gQmF5IG9uIHRoZSBlYXN0IHNpZGUgb2YgdGhlIEJpZyBJc2xhbmQuICBDb250aW51b3VzIHNhbXBsaW5nIG9mIHRoaXMgYXJlYSBwcm92aWRlcyBhIHJlY29yZCBvZiBiYXNlbGluZSBjb25kaXRpb25zIG9mIHRoZSBjaGVtaWNhbCBhbmQgYmlvbG9naWNhbCBlbnZpcm9ubWVudCBmb3IgY29tcGFyaXNvbiB3aGVuIHRoZXJlIGFyZSBwb2xsdXRpb24gZXZlbnRzIHN1Y2ggYXMgc3Rvcm0gcnVub2ZmIG9yIGEgc2V3YWdlIHNwaWxsLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5kZXB0aCAoRGVwdGggYmVsb3cgbWVhbiBzZWEgbGV2ZWwsIG0pXG5zdGF0aW9uX25hbWUgKFdRQjA0OiBQYWNJT09TIFdhdGVyIFF1YWxpdHkgQnVveSAwNCAoV1FCLTA0KTogSGlsbyBCYXksIEJpZyBJc2xhbmQsIEhhd2FpaSlcbnRlbXBlcmF0dXJlIChUZW1wZXJhdHVyZSAocHJvY2Vzc2VkKSwgQ2Vsc2l1cylcbnNhbGluaXR5IChTYWxpbml0eSAocHJvY2Vzc2VkKSwgMWUtMylcbnR1cmJpZGl0eSAoVHVyYmlkaXR5IChwcm9jZXNzZWQpLCBOVFUpXG5jaGxvcm9waHlsbCAoQ2hsb3JvcGh5bGwgKHByb2Nlc3NlZCksIGtnIG0tMylcbm94eWdlbiAoRGlzc29sdmVkIG94eWdlbiBjb25jZW50cmF0aW9uIChwcm9jZXNzZWQpLCBrZyBtLTMpXG5veHlnZW5fc2F0dXJhdGlvbiAoRGlzc29sdmVkIG94eWdlbiBzYXR1cmF0aW9uIChwcm9jZXNzZWQpLCAxKVxucGggKHBIIChwcm9jZXNzZWQpLCAxKVxudGVtcGVyYXR1cmVfcmF3IChUZW1wZXJhdHVyZSAocmF3KSwgQ2Vsc2l1cylcbnRlbXBlcmF0dXJlX2RtX3FkIChUZW1wZXJhdHVyZSBkZWxheWVkLW1vZGUgcXVhbGl0eSBkZXNjcmlwdG9yLCAwKVxudGVtcGVyYXR1cmVfcWNfZ2FwIChRQVJUT0QgR2FwIFRlc3QsIDApXG50ZW1wZXJhdHVyZV9xY19zeW4gKDApXG50ZW1wZXJhdHVyZV9xY19sb2MgKFFBUlRPRCBMb2NhdGlvbiBUZXN0LCAwKVxudGVtcGVyYXR1cmVfcWNfcm5nIChRQVJUT0QgR3Jvc3MgUmFuZ2UgVGVzdCwgMClcbnRlbXBlcmF0dXJlX3FjX2NsbSAoUUFSVE9EIENsaW1hdG9sb2dpY2FsIFRlc3QsIDApXG50ZW1wZXJhdHVyZV9xY19zcGsgKFFBUlRPRCBTcGlrZSBUZXN0LCAwKVxudGVtcGVyYXR1cmVfcWNfcnRjIChRQVJUT0QgUmF0ZSBvZiBDaGFuZ2UgVGVzdCwgMClcbnRlbXBlcmF0dXJlX3FjX2ZsdCAoUUFSVE9EIEZsYXQgTGluZSBUZXN0LCAwKVxudGVtcGVyYXR1cmVfcWNfbXZyIChRQVJUT0QgTXVsdGktVmFyaWF0ZSBUZXN0LCAwKVxuLi4uICg4NyBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9oYXdhaWlfc29lc3RfNWVmYl8wNmVjX2ZmNjNfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2hhd2FpaV9zb2VzdF81ZWZiXzA2ZWNfZmY2M19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9oYXdhaWlfc29lc3RfNWVmYl8wNmVjX2ZmNjMvaW5kZXguanNvbiIsICJodHRwOi8vd3d3LnBhY2lvb3MuaGF3YWlpLmVkdS93YXRlci93cWJ1b3ktaGlsby8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvaGF3YWlpX3NvZXN0XzVlZmJfMDZlY19mZjYzLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1oYXdhaWlfc29lc3RfNWVmYl8wNmVjX2ZmNjMmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiVW5pdmVyc2l0eSBvZiBIYXdhaWkiLCAiaGF3YWlpX3NvZXN0XzVlZmJfMDZlY19mZjYzIl0sCiAgICAgIFsiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfNWVmYV9jYzZlXzc5YzUiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0XzVlZmFfY2M2ZV83OWM1LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlBhY0lPT1MgV2F0ZXIgUXVhbGl0eSBCdW95IEFXIChXUUItQVcpOiBBbGEgV2FpLCBPYWh1LCBIYXdhaWkiLCAiVGhlIHdhdGVyIHF1YWxpdHkgYnVveXMgYXJlIHBhcnQgb2YgdGhlIFBhY2lmaWMgSXNsYW5kcyBPY2VhbiBPYnNlcnZpbmcgU3lzdGVtIChQYWNJT09TKSBhbmQgYXJlIGRlc2lnbmVkIHRvIG1lYXN1cmUgYSB2YXJpZXR5IG9mIG9jZWFuIHBhcmFtZXRlcnMgYXQgZml4ZWQgcG9pbnRzLiBXUUItQVcgaXMgbG9jYXRlZCBhdCB0aGUgZXhpdCBvZiB0aGUgQWxhIFdhaSBDYW5hbCwgbmVhciBNYWdpYyBJc2xhbmQuIENvbnRpbnVvdXMgc2FtcGxpbmcgb2YgdGhpcyBvdXRmbG93IGFyZWEgcHJvdmlkZXMgYSByZWNvcmQgb2YgYmFzZWxpbmUgY29uZGl0aW9ucyBvZiB0aGUgY2hlbWljYWwgYW5kIGJpb2xvZ2ljYWwgZW52aXJvbm1lbnQgZm9yIGNvbXBhcmlzb24gd2hlbiB0aGVyZSBhcmUgcG9sbHV0aW9uIGV2ZW50cyBzdWNoIGFzIHN0b3JtIHJ1bm9mZiBvciBhIHNld2FnZSBzcGlsbC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAoZGVwdGggYmVsb3cgbWVhbiBzZWEgbGV2ZWwsIG0pXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuc3RhdGlvbl9uYW1lXG50ZW1wZXJhdHVyZSAoVGVtcGVyYXR1cmUgKHByb2Nlc3NlZCksIENlbHNpdXMpXG50ZW1wZXJhdHVyZV9yYXcgKFRlbXBlcmF0dXJlIChyYXcpLCBDZWxzaXVzKVxudGVtcGVyYXR1cmVfZG1fcWQgKFRlbXBlcmF0dXJlIHF1YWxpdHkgZGVzY3JpcHRvciwgMClcbnNhbGluaXR5IChTYWxpbml0eSAocHJvY2Vzc2VkKSwgMWUtMylcbnNhbGluaXR5X3JhdyAoU2FsaW5pdHkgKHJhdyksIDFlLTMpXG5zYWxpbml0eV9kbV9xZCAoU2FsaW5pdHkgcXVhbGl0eSBkZXNjcmlwdG9yLCAwKVxuY29uZHVjdGl2aXR5IChDb25kdWN0aXZpdHkgKHByb2Nlc3NlZCksIFMgbS0xKVxuY29uZHVjdGl2aXR5X3JhdyAoQ29uZHVjdGl2aXR5IChyYXcpLCBTIG0tMSlcbmNvbmR1Y3Rpdml0eV9kbV9xZCAoQ29uZHVjdGl2aXR5IHF1YWxpdHkgZGVzY3JpcHRvciwgMClcbm94eWdlbiAoRGlzc29sdmVkIG94eWdlbiBjb25jZW50cmF0aW9uIChwcm9jZXNzZWQpLCBrZyBtLTMpXG5veHlnZW5fcmF3IChEaXNzb2x2ZWQgb3h5Z2VuIGNvbmNlbnRyYXRpb24gKHJhdyksIGtnIG0tMylcbm94eWdlbl9kbV9xZCAoRGlzc29sdmVkIG94eWdlbiBjb25jZW50cmF0aW9uIHF1YWxpdHkgZGVzY3JpcHRvciwgMClcbnR1cmJpZGl0eSAoVHVyYmlkaXR5IChwcm9jZXNzZWQpLCBOVFUpXG50dXJiaWRpdHlfcmF3IChUdXJiaWRpdHkgKHJhdyksIE5UVSlcbnR1cmJpZGl0eV9kbV9xZCAoVHVyYmlkaXR5IHF1YWxpdHkgZGVzY3JpcHRvciwgMClcbmNobG9yb3BoeWxsIChDaGxvcm9waHlsbCAocHJvY2Vzc2VkKSwga2cgbS0zKVxuY2hsb3JvcGh5bGxfcmF3IChDaGxvcm9waHlsbCAocmF3KSwga2cgbS0zKVxuY2hsb3JvcGh5bGxfZG1fcWQgKENobG9yb3BoeWxsIHF1YWxpdHkgZGVzY3JpcHRvciwgMClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9oYXdhaWlfc29lc3RfNWVmYV9jYzZlXzc5YzVfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2hhd2FpaV9zb2VzdF81ZWZhX2NjNmVfNzljNV9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9oYXdhaWlfc29lc3RfNWVmYV9jYzZlXzc5YzUvaW5kZXguanNvbiIsICJodHRwOi8vd3d3LnBhY2lvb3MuaGF3YWlpLmVkdS93YXRlci93cWJ1b3ktYWxhd2FpLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9oYXdhaWlfc29lc3RfNWVmYV9jYzZlXzc5YzUucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWhhd2FpaV9zb2VzdF81ZWZhX2NjNmVfNzljNSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJVbml2ZXJzaXR5IG9mIEhhd2FpaSIsICJoYXdhaWlfc29lc3RfNWVmYV9jYzZlXzc5YzUiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF8yZDY5X2EwZDlfZDU1OSIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfMmQ2OV9hMGQ5X2Q1NTkuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiUGFjSU9PUyBXYXRlciBRdWFsaXR5IEJ1b3kgS04gKFdRQi1LTik6IEtpbG8gTmFsdSwgT2FodSwgSGF3YWlpIiwgIlRoZSB3YXRlciBxdWFsaXR5IGJ1b3lzIGFyZSBwYXJ0IG9mIHRoZSBQYWNpZmljIElzbGFuZHMgT2NlYW4gT2JzZXJ2aW5nIFN5c3RlbSAoUGFjSU9PUykgYW5kIGFyZSBkZXNpZ25lZCB0byBtZWFzdXJlIGEgdmFyaWV0eSBvZiBvY2VhbiBwYXJhbWV0ZXJzIGF0IGZpeGVkIHBvaW50cy4gV1FCLUtOIGlzIGxvY2F0ZWQgYXQgdGhlIEtpbG8gTmFsdSBOZWFyc2hvcmUgUmVlZiBPYnNlcnZhdG9yeSwgbmVhciBLYWthYWtvIFdhdGVyZnJvbnQgUGFyayBhbmQgS2V3YWxvIEJhc2luIG9mZiBvZiBBbGEgTW9hbmEgQm91bGV2YXJkIGluIEhvbm9sdWx1LiBDb250aW51b3VzIHNhbXBsaW5nIG9mIHRoaXMgYXJlYSBwcm92aWRlcyBhIHJlY29yZCBvZiBiYXNlbGluZSBjb25kaXRpb25zIG9mIHRoZSBjaGVtaWNhbCBhbmQgYmlvbG9naWNhbCBlbnZpcm9ubWVudCBmb3IgY29tcGFyaXNvbiB3aGVuIHRoZXJlIGFyZSBwb2xsdXRpb24gZXZlbnRzIHN1Y2ggYXMgc3Rvcm0gcnVub2ZmIG9yIGEgc2V3YWdlIHNwaWxsLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChkZXB0aCBiZWxvdyBtZWFuIHNlYSBsZXZlbCwgbSlcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5zdGF0aW9uX25hbWVcbnRlbXBlcmF0dXJlIChUZW1wZXJhdHVyZSAocHJvY2Vzc2VkKSwgQ2Vsc2l1cylcbnRlbXBlcmF0dXJlX3JhdyAoVGVtcGVyYXR1cmUgKHJhdyksIENlbHNpdXMpXG50ZW1wZXJhdHVyZV9kbV9xZCAoVGVtcGVyYXR1cmUgcXVhbGl0eSBkZXNjcmlwdG9yLCAwKVxuc2FsaW5pdHkgKFNhbGluaXR5IChwcm9jZXNzZWQpLCAxZS0zKVxuc2FsaW5pdHlfcmF3IChTYWxpbml0eSAocmF3KSwgMWUtMylcbnNhbGluaXR5X2RtX3FkIChTYWxpbml0eSBxdWFsaXR5IGRlc2NyaXB0b3IsIDApXG5jb25kdWN0aXZpdHkgKENvbmR1Y3Rpdml0eSAocHJvY2Vzc2VkKSwgUyBtLTEpXG5jb25kdWN0aXZpdHlfcmF3IChDb25kdWN0aXZpdHkgKHJhdyksIFMgbS0xKVxuY29uZHVjdGl2aXR5X2RtX3FkIChDb25kdWN0aXZpdHkgcXVhbGl0eSBkZXNjcmlwdG9yLCAwKVxub3h5Z2VuIChEaXNzb2x2ZWQgb3h5Z2VuIGNvbmNlbnRyYXRpb24gKHByb2Nlc3NlZCksIGtnIG0tMylcbm94eWdlbl9yYXcgKERpc3NvbHZlZCBveHlnZW4gY29uY2VudHJhdGlvbiAocmF3KSwga2cgbS0zKVxub3h5Z2VuX2RtX3FkIChEaXNzb2x2ZWQgb3h5Z2VuIGNvbmNlbnRyYXRpb24gcXVhbGl0eSBkZXNjcmlwdG9yLCAwKVxudHVyYmlkaXR5IChUdXJiaWRpdHkgKHByb2Nlc3NlZCksIE5UVSlcbnR1cmJpZGl0eV9yYXcgKFR1cmJpZGl0eSAocmF3KSwgTlRVKVxudHVyYmlkaXR5X2RtX3FkIChUdXJiaWRpdHkgcXVhbGl0eSBkZXNjcmlwdG9yLCAwKVxuY2hsb3JvcGh5bGwgKENobG9yb3BoeWxsIChwcm9jZXNzZWQpLCBrZyBtLTMpXG5jaGxvcm9waHlsbF9yYXcgKENobG9yb3BoeWxsIChyYXcpLCBrZyBtLTMpXG5jaGxvcm9waHlsbF9kbV9xZCAoQ2hsb3JvcGh5bGwgcXVhbGl0eSBkZXNjcmlwdG9yLCAwKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2hhd2FpaV9zb2VzdF8yZDY5X2EwZDlfZDU1OV9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvaGF3YWlpX3NvZXN0XzJkNjlfYTBkOV9kNTU5X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2hhd2FpaV9zb2VzdF8yZDY5X2EwZDlfZDU1OS9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cucGFjaW9vcy5oYXdhaWkuZWR1L3dhdGVyL3dxYnVveS1raWxvbmFsdS8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvaGF3YWlpX3NvZXN0XzJkNjlfYTBkOV9kNTU5LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1oYXdhaWlfc29lc3RfMmQ2OV9hMGQ5X2Q1NTkmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiVW5pdmVyc2l0eSBvZiBIYXdhaWkiLCAiaGF3YWlpX3NvZXN0XzJkNjlfYTBkOV9kNTU5Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL0NodWtjaGlTZWFfNDU0YV8wMzdhX2ZjZjQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL0NodWtjaGlTZWFfNDU0YV8wMzdhX2ZjZjQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvQ2h1a2NoaVNlYV80NTRhXzAzN2FfZmNmNC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJQTUVMIEVjb0ZPQ0kgQ2h1a2NoaSBTZWEgcHJvZmlsZSBkYXRhLCAyMDEwLTIwMTIiLCAiUGFjaWZpYyBNYXJpbmUgRW52aXJvbm1lbnRhbCBMYWJvcmF0b3J5IChQTUVMKSBGaXNoZXJpZXMtT2NlYW5vZ3JhcGh5IENvb3BlcmF0aXZlIEludmVzdGlnYXRpb25zIChGT0NJKSBDaHVrY2hpIFNlYS4gUE1FTCBFY29GT0NJIGRhdGEgZnJvbSBhIGxvY2FsIHNvdXJjZS5cblxuY2RtX2RhdGFfdHlwZSA9IFByb2ZpbGVcblZBUklBQkxFUzpcbnByb2ZcbmlkIChwcm9maWxlIGlkKVxuY2FzdCAoY2FzdCBudW1iZXIpXG5jcnVpc2UgKENydWlzZSBuYW1lKVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxvbmdpdHVkZSAoc3RhdGlvbiBsb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxvbjM2MCAoc3RhdGlvbiBsb25naXR1ZGUgMzYwLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoc3RhdGlvbiBsYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbmRlcHRoIChtKVxub2NlYW5fdGVtcGVyYXR1cmVfMSAoVGVtcGVyYXR1cmUgMVxyLCBEZWdyZWVfQylcbm9jZWFuX3RlbXBlcmF0dXJlXzIgKFRlbXBlcmF0dXJlIDJcciwgRGVncmVlX0MpXG5vY2Vhbl9kaXNzb2x2ZWRfb3h5Z2VuX2NvbmNlbnRyYXRpb25fMV9tTHBlckwgKGRpc3NvbHZlZCBveHlnZW4gY29uY2VudHJhdGlvbiAxIG1ML0xcciwgbUwvTClcbm9jZWFuX2Rpc3NvbHZlZF9veHlnZW5fY29uY2VudHJhdGlvbl8yX21McGVyTCAoZGlzc29sdmVkIG94eWdlbiBjb25jZW50cmF0aW9uIDIgbUwvTFxyLCBtTC9MKVxucGhvdG9zeW50aGV0aWNhbGx5X2FjdGl2ZV9yYWRpYXRpb24gKFBob3Rvc3ludGhldGljYWxseSBBY3RpdmUgUmFkaWF0aW9uXHIsIG1pY3JvRWluIGNtLTIgcy0xKVxub2NlYW5fY2hsb3JvcGh5bGxfYV9jb25jZW50cmF0aW9uX2ZhY3RvcnlDYWwgKENobG9yb3BoeWxsIGEgQ29uY2VudHJhdGlvbiAoRmFjdG9yeSBDYWxpYnJhdGlvbilcciwgbWljcm9ncmFtcy9MKVxub2NlYW5fY2hsb3JvcGh5bGxfZmx1b3Jlc2NlbmNlX3JhdyAoUmF3IENobG9yb3BoeWxsIEZsb3VyZXNjZW5jZVxyLCB2b2x0cylcbm9jZWFuX3ByYWN0aWNhbF9zYWxpbml0eV8xIChTYWxpbml0eSAxIChQU1UgUFNTLTc4KVxyLCBQU1UpXG5vY2Vhbl9wcmFjdGljYWxfc2FsaW5pdHlfMiAoU2FsaW5pdHkgMiAoUFNVIFBTUy03OClcciwgUFNVKVxub2NlYW5fc2lnbWFfdCAoU2lnbWEtVCwga2cgbS0zKVxuc2VhX3dhdGVyX251dHJpZW50X2JvdHRsZV9udW1iZXIgKE51dHJpZW50cyBOaXNraW4gQm90dGxlIE51bWJlclxyLCBudW1iZXIpXG5zZWFfd2F0ZXJfcGhvc3BoYXRlX2NvbmNlbnRyYXRpb24gKFBPNCwgbWljcm9tb2xlcy9rZylcbnNlYV93YXRlcl9zaWxpY2F0ZV9jb25jZW50cmF0aW9uIChTSSwgbWljcm9tb2xlcy9rZylcbnNlYV93YXRlcl9uaXRyYXRlX2NvbmNlbnRyYXRpb24gKE5PMywgbWljcm9tb2xlcy9rZylcbnNlYV93YXRlcl9uaXRyaXRlX2NvbmNlbnRyYXRpb24gKE5PMiwgbWljcm9tb2xlcy9rZylcbnNlYV93YXRlcl9hbW1vbml1bV9jb25jZW50cmF0aW9uIChOSDQsIG1pY3JvbW9sZXMva2cpXG5vY2Vhbl9kaXNzb2x2ZWRfb3h5Z2VuX2NvbmNlbnRyYXRpb25fMV9tTXBlcmtnIChEaXNzb2x2ZWQgT3h5Z2VuIENvbmNlbnRyYXRpb24gMSBtTW9sZXMva2dcciwgbWljcm9tb2xlcy9rZylcbm9jZWFuX2Rpc3NvbHZlZF9veHlnZW5fY29uY2VudHJhdGlvbl8yX21NcGVya2cgKERpc3NvbHZlZCBPeHlnZW4gQ29uY2VudHJhdGlvbiAyIG1Nb2xlcy9rZ1xyLCBtaWNyb21vbGVzL2tnKVxub2NlYW5fb3h5Z2VuX3NhdHVyYXRpb25fMSAoT3h5Z2VuIFBlcmNlbnQgU2F0dXJhdGlvbiAxXHIsIHBlcmNlbnQgc2F0dXJhdGlvbilcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9DaHVrY2hpU2VhXzQ1NGFfMDM3YV9mY2Y0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9DaHVrY2hpU2VhXzQ1NGFfMDM3YV9mY2Y0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL0NodWtjaGlTZWFfNDU0YV8wMzdhX2ZjZjQvaW5kZXguanNvbiIsICJ3d3cuZWNvZm9jaS5ub2FhLmdvdiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9DaHVrY2hpU2VhXzQ1NGFfMDM3YV9mY2Y0LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1DaHVrY2hpU2VhXzQ1NGFfMDM3YV9mY2Y0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIlBNRUwgRWNvRk9DSSIsICJDaHVrY2hpU2VhXzQ1NGFfMDM3YV9mY2Y0Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2FyY3RpY1Jlc2N1ZURhdGFfZTViZl9jZWY4XzNmNzIuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2FyY3RpY1Jlc2N1ZURhdGFfZTViZl9jZWY4XzNmNzIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvYXJjdGljUmVzY3VlRGF0YV9lNWJmX2NlZjhfM2Y3Mi5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJQTUVMIEVjb0ZPQ0kgRWFybHkgQXJjdGljIERhdGEsIDE5ODYtMTk5MSIsICJQYWNpZmljIE1hcmluZSBFbnZpcm9ubWVudGFsIExhYm9yYXRvcnkgKFBNRUwpIEZpc2hlcmllcy1PY2Vhbm9ncmFwaHkgQ29vcGVyYXRpdmUgSW52ZXN0aWdhdGlvbnMgKEZPQ0kpIEVhcmx5IEFyY3RpYyBEYXRhLCAxOTg3IC0gMTk5MVxuXG5jZG1fZGF0YV90eXBlID0gUHJvZmlsZVxuVkFSSUFCTEVTOlxucHJvZlxuaWQgKHByb2ZpbGUgaWQpXG5jYXN0IChjYXN0IG51bWJlcilcbmNydWlzZSAoQ3J1aXNlIG5hbWUpXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubG9uZ2l0dWRlIChzdGF0aW9uIGxvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubG9uMzYwIChzdGF0aW9uIGxvbmdpdHVkZSAzNjAsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChzdGF0aW9uIGxhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxuZGVwdGggKG0pXG5vY2Vhbl90ZW1wZXJhdHVyZV8xIChUZW1wZXJhdHVyZSAxXHIsIERlZ3JlZV9DKVxub2NlYW5fY294X3NhbGluaXR5XzEgKHNlYV93YXRlcl9wcmFjdGljYWxfc2FsaW5pdHksIFBTVSlcbm9jZWFuX3ByYWN0aWNhbF9zYWxpbml0eV8xIChTYWxpbml0eSAxIChQU1UgUFNTLTc4KVxyLCBQU1UpXG5vY2Vhbl9zaWdtYV90IChTaWdtYS1ULCBrZyBtLTMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvYXJjdGljUmVzY3VlRGF0YV9lNWJmX2NlZjhfM2Y3Ml9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvYXJjdGljUmVzY3VlRGF0YV9lNWJmX2NlZjhfM2Y3Ml9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9hcmN0aWNSZXNjdWVEYXRhX2U1YmZfY2VmOF8zZjcyL2luZGV4Lmpzb24iLCAid3d3LmVjb2ZvY2kubm9hYS5nb3YiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvYXJjdGljUmVzY3VlRGF0YV9lNWJmX2NlZjhfM2Y3Mi5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9YXJjdGljUmVzY3VlRGF0YV9lNWJmX2NlZjhfM2Y3MiZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJQTUVMIEVjb0ZPQ0kiLCAiYXJjdGljUmVzY3VlRGF0YV9lNWJmX2NlZjhfM2Y3MiJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9TaGVsaWtvZl9saW5lOF8zNjk1XzBhZGFfZDA2Ni5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvU2hlbGlrb2ZfbGluZThfMzY5NV8wYWRhX2QwNjYiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvU2hlbGlrb2ZfbGluZThfMzY5NV8wYWRhX2QwNjYuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiUE1FTCBFY29GT0NJIFNoZWxpa29mIExpbmUgOCBEYXRhLCAxOTgxLW9wZW4iLCAiUGFjaWZpYyBNYXJpbmUgRW52aXJvbm1lbnRhbCBMYWJvcmF0b3J5IChQTUVMKSBGaXNoZXJpZXMtT2NlYW5vZ3JhcGh5IENvb3BlcmF0aXZlIEludmVzdGlnYXRpb25zIChGT0NJKSBTaGVsaWtvZiBMaW5lIDggRGF0YVxuXG5jZG1fZGF0YV90eXBlID0gUHJvZmlsZVxuVkFSSUFCTEVTOlxucHJvZlxuaWQgKHByb2ZpbGUgaWQpXG5jYXN0IChjYXN0IG51bWJlcilcbmNydWlzZSAoQ3J1aXNlIG5hbWUpXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubG9uZ2l0dWRlIChzdGF0aW9uIGxvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubG9uMzYwIChzdGF0aW9uIGxvbmdpdHVkZSAzNjAsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChzdGF0aW9uIGxhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxuZGVwdGggKG0pXG5vY2Vhbl90ZW1wZXJhdHVyZV8xIChUZW1wZXJhdHVyZSAxXHIsIERlZ3JlZV9DKVxub2NlYW5fY294X3NhbGluaXR5XzEgKHNlYV93YXRlcl9wcmFjdGljYWxfc2FsaW5pdHksIFBTVSlcbm9jZWFuX2NobG9yb3BoeWxsX2ZsdW9yZXNjZW5jZV9yYXcgKFJhdyBDaGxvcm9waHlsbCBGbG91cmVzY2VuY2Vcciwgdm9sdHMpXG5waG90b3N5bnRoZXRpY2FsbHlfYWN0aXZlX3JhZGlhdGlvbiAoUGhvdG9zeW50aGV0aWNhbGx5IEFjdGl2ZSBSYWRpYXRpb25cciwgbWljcm9FaW4gY20tMiBzLTEpXG5vY2Vhbl9zaWdtYV90IChTaWdtYS1ULCBrZyBtLTMpXG5vY2Vhbl9jaGxvcm9waHlsbF9hX2NvbmNlbnRyYXRpb25fZmFjdG9yeUNhbCAoQ2hsb3JvcGh5bGwgYSBDb25jZW50cmF0aW9uIChGYWN0b3J5IENhbGlicmF0aW9uKVxyLCBtaWNyb2dyYW1zL0wpXG5vY2Vhbl9kaXNzb2x2ZWRfb3h5Z2VuX2NvbmNlbnRyYXRpb25fMV9tTXBlcmtnIChEaXNzb2x2ZWQgT3h5Z2VuIENvbmNlbnRyYXRpb24gMSBtTW9sZXMva2dcciwgbWljcm9tb2xlcy9rZylcbm9jZWFuX2Rpc3NvbHZlZF9veHlnZW5fY29uY2VudHJhdGlvbl8yX21NcGVya2cgKG1vbGVfY29uY2VudHJhdGlvbl9vZl9kaXNzb2x2ZWRfbW9sZWN1bGFyX294eWdlbl9pbl9zZWFfd2F0ZXIsIG1pY3JvbW9sZXMva2cpXG5vY2Vhbl9keW5hbWljX2hlaWdodCAoRHluYW1pYyBIZWlnaHQsIGR5bmFtaWMgbWV0ZXJzKVxub2NlYW5fb3h5Z2VuX3NhdHVyYXRpb25fMSAoT3h5Z2VuIFBlcmNlbnQgU2F0dXJhdGlvbiAxXHIsIHBlcmNlbnQgc2F0dXJhdGlvbilcbm9jZWFuX3ByYWN0aWNhbF9zYWxpbml0eV8xIChTYWxpbml0eSAxIChQU1UgUFNTLTc4KVxyLCBQU1UpXG5vY2Vhbl9wcmFjdGljYWxfc2FsaW5pdHlfMiAoU2FsaW5pdHkgMiAoUFNVIFBTUy03OClcciwgUFNVKVxub2NlYW5fdGVtcGVyYXR1cmVfMiAoVGVtcGVyYXR1cmUgMlxyLCBEZWdyZWVfQylcbnBob3Rvc3ludGhldGljYWxseV9hY3RpdmVfcmFkaWF0aW9uX3JhdyAoUmF3IFBob3Rvc3ludGhldGljYWxseSBBY3RpdmUgUmFkaWF0aW9uXHIsIHZvbHRzKVxudHJhbnNtaXR0YW5jZV9wZXJjZW50YWdlIChQZXJjZW50IExpZ2h0IFRyYW5zbWl0dGFuY2UsIHBlcmNlbnQpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvU2hlbGlrb2ZfbGluZThfMzY5NV8wYWRhX2QwNjZfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL1NoZWxpa29mX2xpbmU4XzM2OTVfMGFkYV9kMDY2X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL1NoZWxpa29mX2xpbmU4XzM2OTVfMGFkYV9kMDY2L2luZGV4Lmpzb24iLCAid3d3LmVjb2ZvY2kubm9hYS5nb3YiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvU2hlbGlrb2ZfbGluZThfMzY5NV8wYWRhX2QwNjYucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPVNoZWxpa29mX2xpbmU4XzM2OTVfMGFkYV9kMDY2JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIlBNRUwgRWNvRk9DSSIsICJTaGVsaWtvZl9saW5lOF8zNjk1XzBhZGFfZDA2NiJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VSZXNlYXJjaFNoaXBXREM5NDE3bnJ0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VSZXNlYXJjaFNoaXBXREM5NDE3bnJ0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdVJlc2VhcmNoU2hpcFdEQzk0MTducnQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiUmVzZWFyY2ggU2hpcCBBdGxhbnRpYyBFeHBsb3JlciBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhLCBRdWFsaXR5IENvbnRyb2xsZWQiLCAiUmVzZWFyY2ggU2hpcCBBdGxhbnRpYyBFeHBsb3JlciBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhIChkZWxheWVkIH4xMCBkYXlzIGZvciBxdWFsaXR5IGNvbnRyb2wpIGFyZSBmcm9tIHRoZSBTaGlwYm9hcmQgQXV0b21hdGVkIE1ldGVvcm9sb2dpY2FsIGFuZCBPY2Vhbm9ncmFwaGljIFN5c3RlbSAoU0FNT1MpIHByb2dyYW0uXG5cbklNUE9SVEFOVDogQUxXQVlTIFVTRSBUSEUgUVVBTElUWSBGTEFHIERBVEEhIEVhY2ggZGF0YSB2YXJpYWJsZSdzIG1ldGFkYXRhIGluY2x1ZGVzIGEgcWNpbmRleCBhdHRyaWJ1dGUgd2hpY2ggaW5kaWNhdGVzIGEgY2hhcmFjdGVyIG51bWJlciBpbiB0aGUgZmxhZyBkYXRhLiAgQUxXQVlTIGNoZWNrIHRoZSBmbGFnIGRhdGEgZm9yIGVhY2ggcm93IG9mIGRhdGEgdG8gc2VlIHdoaWNoIGRhdGEgaXMgZ29vZCAoZmxhZz0nWicpIGFuZCB3aGljaCBkYXRhIGlzbid0LiAgRm9yIGV4YW1wbGUsIHRvIGV4dHJhY3QganVzdCBkYXRhIHdoZXJlIHRpbWUgKHFjaW5kZXg9MSksIGxhdGl0dWRlIChxY2luZGV4PTIpLCBsb25naXR1ZGUgKHFjaW5kZXg9MyksIGFuZCBhaXJUZW1wZXJhdHVyZSAocWNpbmRleD0xMikgYXJlICdnb29kJyBkYXRhLCBpbmNsdWRlIHRoaXMgY29uc3RyYWludCBpbiB5b3VyIEVSRERBUCBxdWVyeTpcbiBmbGFnPX5cIlpaWi4uLi4uLi4uWi4qXCJcbmluIHlvdXIgcXVlcnkuXG4nPX4nIGluZGljYXRlcyB0aGlzIGlzIGEgcmVndWxhciBleHByZXNzaW9uIGNvbnN0cmFpbnQuXG5UaGUgJ1oncyBhcmUgbGl0ZXJhbCBjaGFyYWN0ZXJzLiAgSW4gdGhpcyBkYXRhc2V0LCAnWicgaW5kaWNhdGVzICdnb29kJyBkYXRhLlxuVGhlICcuJ3Mgc2F5IHRvIG1hdGNoIGFueSBjaGFyYWN0ZXIuXG5UaGUgJyonIHNheXMgdG8gbWF0Y2ggdGhlIHByZXZpb3VzIGNoYXJhY3RlciAwIG9yIG1vcmUgdGltZXMuXG4oRG9uJ3QgaW5jbHVkZSBiYWNrc2xhc2hlcyBpbiB5b3VyIHF1ZXJ5LilcblNlZSB0aGUgdHV0b3JpYWwgZm9yIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXRcbmh0dHA6Ly93d3cudm9nZWxsYS5jb20vdHV0b3JpYWxzL0phdmFSZWd1bGFyRXhwcmVzc2lvbnMvYXJ0aWNsZS5odG1sXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlX2lkXG5leHBvY29kZVxuZmFjaWxpdHlcbklEXG5JTU9cbnBsYXRmb3JtXG5wbGF0Zm9ybV92ZXJzaW9uXG5zaXRlXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbi4uLiAoMTkgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZnN1UmVzZWFyY2hTaGlwV0RDOTQxN25ydF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZnN1UmVzZWFyY2hTaGlwV0RDOTQxN25ydF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9mc3VSZXNlYXJjaFNoaXBXREM5NDE3bnJ0L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zYW1vcy5jb2Fwcy5mc3UuZWR1L2h0bWwvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2ZzdVJlc2VhcmNoU2hpcFdEQzk0MTducnQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWZzdVJlc2VhcmNoU2hpcFdEQzk0MTducnQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiRlNVIiwgImZzdVJlc2VhcmNoU2hpcFdEQzk0MTducnQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1UmVzZWFyY2hTaGlwS0FRUC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1UmVzZWFyY2hTaGlwS0FRUCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VSZXNlYXJjaFNoaXBLQVFQLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlJlc2VhcmNoIFNoaXAgQXRsYW50aXMgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSwgUXVhbGl0eSBDb250cm9sbGVkIiwgIlJlc2VhcmNoIFNoaXAgQXRsYW50aXMgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSAoZGVsYXllZCB+MTAgZGF5cyBmb3IgcXVhbGl0eSBjb250cm9sKSBhcmUgZnJvbSB0aGUgU2hpcGJvYXJkIEF1dG9tYXRlZCBNZXRlb3JvbG9naWNhbCBhbmQgT2NlYW5vZ3JhcGhpYyBTeXN0ZW0gKFNBTU9TKSBwcm9ncmFtLlxuXG5JTVBPUlRBTlQ6IEFMV0FZUyBVU0UgVEhFIFFVQUxJVFkgRkxBRyBEQVRBISBFYWNoIGRhdGEgdmFyaWFibGUncyBtZXRhZGF0YSBpbmNsdWRlcyBhIHFjaW5kZXggYXR0cmlidXRlIHdoaWNoIGluZGljYXRlcyBhIGNoYXJhY3RlciBudW1iZXIgaW4gdGhlIGZsYWcgZGF0YS4gIEFMV0FZUyBjaGVjayB0aGUgZmxhZyBkYXRhIGZvciBlYWNoIHJvdyBvZiBkYXRhIHRvIHNlZSB3aGljaCBkYXRhIGlzIGdvb2QgKGZsYWc9J1onKSBhbmQgd2hpY2ggZGF0YSBpc24ndC4gIEZvciBleGFtcGxlLCB0byBleHRyYWN0IGp1c3QgZGF0YSB3aGVyZSB0aW1lIChxY2luZGV4PTEpLCBsYXRpdHVkZSAocWNpbmRleD0yKSwgbG9uZ2l0dWRlIChxY2luZGV4PTMpLCBhbmQgYWlyVGVtcGVyYXR1cmUgKHFjaW5kZXg9MTIpIGFyZSAnZ29vZCcgZGF0YSwgaW5jbHVkZSB0aGlzIGNvbnN0cmFpbnQgaW4geW91ciBFUkREQVAgcXVlcnk6XG4gZmxhZz1+XCJaWlouLi4uLi4uLlouKlwiXG5pbiB5b3VyIHF1ZXJ5LlxuJz1+JyBpbmRpY2F0ZXMgdGhpcyBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBjb25zdHJhaW50LlxuVGhlICdaJ3MgYXJlIGxpdGVyYWwgY2hhcmFjdGVycy4gIEluIHRoaXMgZGF0YXNldCwgJ1onIGluZGljYXRlcyAnZ29vZCcgZGF0YS5cblRoZSAnLidzIHNheSB0byBtYXRjaCBhbnkgY2hhcmFjdGVyLlxuVGhlICcqJyBzYXlzIHRvIG1hdGNoIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIgMCBvciBtb3JlIHRpbWVzLlxuKERvbid0IGluY2x1ZGUgYmFja3NsYXNoZXMgaW4geW91ciBxdWVyeS4pXG5TZWUgdGhlIHR1dG9yaWFsIGZvciByZWd1bGFyIGV4cHJlc3Npb25zIGF0XG5odHRwOi8vd3d3LnZvZ2VsbGEuY29tL3R1dG9yaWFscy9KYXZhUmVndWxhckV4cHJlc3Npb25zL2FydGljbGUuaHRtbFxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZV9pZFxuZXhwb2NvZGVcbmZhY2lsaXR5XG5JRFxuSU1PXG5wbGF0Zm9ybVxucGxhdGZvcm1fdmVyc2lvblxuc2l0ZVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG4uLi4gKDMzIG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2ZzdVJlc2VhcmNoU2hpcEtBUVBfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2ZzdVJlc2VhcmNoU2hpcEtBUVBfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZnN1UmVzZWFyY2hTaGlwS0FRUC9pbmRleC5qc29uIiwgImh0dHBzOi8vc2Ftb3MuY29hcHMuZnN1LmVkdS9odG1sLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9mc3VSZXNlYXJjaFNoaXBLQVFQLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1mc3VSZXNlYXJjaFNoaXBLQVFQJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkZTVSIsICJmc3VSZXNlYXJjaFNoaXBLQVFQIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdVJlc2VhcmNoU2hpcEtBUVBucnQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdVJlc2VhcmNoU2hpcEtBUVBucnQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1UmVzZWFyY2hTaGlwS0FRUG5ydC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJSZXNlYXJjaCBTaGlwIEF0bGFudGlzIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEsIFF1YWxpdHkgQ29udHJvbGxlZCIsICJSZXNlYXJjaCBTaGlwIEF0bGFudGlzIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEgKGRlbGF5ZWQgfjEwIGRheXMgZm9yIHF1YWxpdHkgY29udHJvbCkgYXJlIGZyb20gdGhlIFNoaXBib2FyZCBBdXRvbWF0ZWQgTWV0ZW9yb2xvZ2ljYWwgYW5kIE9jZWFub2dyYXBoaWMgU3lzdGVtIChTQU1PUykgcHJvZ3JhbS5cblxuSU1QT1JUQU5UOiBBTFdBWVMgVVNFIFRIRSBRVUFMSVRZIEZMQUcgREFUQSEgRWFjaCBkYXRhIHZhcmlhYmxlJ3MgbWV0YWRhdGEgaW5jbHVkZXMgYSBxY2luZGV4IGF0dHJpYnV0ZSB3aGljaCBpbmRpY2F0ZXMgYSBjaGFyYWN0ZXIgbnVtYmVyIGluIHRoZSBmbGFnIGRhdGEuICBBTFdBWVMgY2hlY2sgdGhlIGZsYWcgZGF0YSBmb3IgZWFjaCByb3cgb2YgZGF0YSB0byBzZWUgd2hpY2ggZGF0YSBpcyBnb29kIChmbGFnPSdaJykgYW5kIHdoaWNoIGRhdGEgaXNuJ3QuICBGb3IgZXhhbXBsZSwgdG8gZXh0cmFjdCBqdXN0IGRhdGEgd2hlcmUgdGltZSAocWNpbmRleD0xKSwgbGF0aXR1ZGUgKHFjaW5kZXg9MiksIGxvbmdpdHVkZSAocWNpbmRleD0zKSwgYW5kIGFpclRlbXBlcmF0dXJlIChxY2luZGV4PTEyKSBhcmUgJ2dvb2QnIGRhdGEsIGluY2x1ZGUgdGhpcyBjb25zdHJhaW50IGluIHlvdXIgRVJEREFQIHF1ZXJ5OlxuIGZsYWc9flwiWlpaLi4uLi4uLi5aLipcIlxuaW4geW91ciBxdWVyeS5cbic9ficgaW5kaWNhdGVzIHRoaXMgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24gY29uc3RyYWludC5cblRoZSAnWidzIGFyZSBsaXRlcmFsIGNoYXJhY3RlcnMuICBJbiB0aGlzIGRhdGFzZXQsICdaJyBpbmRpY2F0ZXMgJ2dvb2QnIGRhdGEuXG5UaGUgJy4ncyBzYXkgdG8gbWF0Y2ggYW55IGNoYXJhY3Rlci5cblRoZSAnKicgc2F5cyB0byBtYXRjaCB0aGUgcHJldmlvdXMgY2hhcmFjdGVyIDAgb3IgbW9yZSB0aW1lcy5cbihEb24ndCBpbmNsdWRlIGJhY2tzbGFzaGVzIGluIHlvdXIgcXVlcnkuKVxuU2VlIHRoZSB0dXRvcmlhbCBmb3IgcmVndWxhciBleHByZXNzaW9ucyBhdFxuaHR0cDovL3d3dy52b2dlbGxhLmNvbS90dXRvcmlhbHMvSmF2YVJlZ3VsYXJFeHByZXNzaW9ucy9hcnRpY2xlLmh0bWxcblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2VfaWRcbmV4cG9jb2RlXG5mYWNpbGl0eVxuSURcbklNT1xucGxhdGZvcm1cbnBsYXRmb3JtX3ZlcnNpb25cbnNpdGVcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuLi4uICgzMyBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9mc3VSZXNlYXJjaFNoaXBLQVFQbnJ0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9mc3VSZXNlYXJjaFNoaXBLQVFQbnJ0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2ZzdVJlc2VhcmNoU2hpcEtBUVBucnQvaW5kZXguanNvbiIsICJodHRwczovL3NhbW9zLmNvYXBzLmZzdS5lZHUvaHRtbC8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZnN1UmVzZWFyY2hTaGlwS0FRUG5ydC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZnN1UmVzZWFyY2hTaGlwS0FRUG5ydCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJGU1UiLCAiZnN1UmVzZWFyY2hTaGlwS0FRUG5ydCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VSZXNlYXJjaFNoaXBORVBQLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VSZXNlYXJjaFNoaXBORVBQIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdVJlc2VhcmNoU2hpcE5FUFAuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiUmVzZWFyY2ggU2hpcCBIZWFseSBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhLCBRdWFsaXR5IENvbnRyb2xsZWQiLCAiUmVzZWFyY2ggU2hpcCBIZWFseSBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhIChkZWxheWVkIH4xMCBkYXlzIGZvciBxdWFsaXR5IGNvbnRyb2wpIGFyZSBmcm9tIHRoZSBTaGlwYm9hcmQgQXV0b21hdGVkIE1ldGVvcm9sb2dpY2FsIGFuZCBPY2Vhbm9ncmFwaGljIFN5c3RlbSAoU0FNT1MpIHByb2dyYW0uXG5cbklNUE9SVEFOVDogQUxXQVlTIFVTRSBUSEUgUVVBTElUWSBGTEFHIERBVEEhIEVhY2ggZGF0YSB2YXJpYWJsZSdzIG1ldGFkYXRhIGluY2x1ZGVzIGEgcWNpbmRleCBhdHRyaWJ1dGUgd2hpY2ggaW5kaWNhdGVzIGEgY2hhcmFjdGVyIG51bWJlciBpbiB0aGUgZmxhZyBkYXRhLiAgQUxXQVlTIGNoZWNrIHRoZSBmbGFnIGRhdGEgZm9yIGVhY2ggcm93IG9mIGRhdGEgdG8gc2VlIHdoaWNoIGRhdGEgaXMgZ29vZCAoZmxhZz0nWicpIGFuZCB3aGljaCBkYXRhIGlzbid0LiAgRm9yIGV4YW1wbGUsIHRvIGV4dHJhY3QganVzdCBkYXRhIHdoZXJlIHRpbWUgKHFjaW5kZXg9MSksIGxhdGl0dWRlIChxY2luZGV4PTIpLCBsb25naXR1ZGUgKHFjaW5kZXg9MyksIGFuZCBhaXJUZW1wZXJhdHVyZSAocWNpbmRleD0xMikgYXJlICdnb29kJyBkYXRhLCBpbmNsdWRlIHRoaXMgY29uc3RyYWludCBpbiB5b3VyIEVSRERBUCBxdWVyeTpcbiBmbGFnPX5cIlpaWi4uLi4uLi4uWi4qXCJcbmluIHlvdXIgcXVlcnkuXG4nPX4nIGluZGljYXRlcyB0aGlzIGlzIGEgcmVndWxhciBleHByZXNzaW9uIGNvbnN0cmFpbnQuXG5UaGUgJ1oncyBhcmUgbGl0ZXJhbCBjaGFyYWN0ZXJzLiAgSW4gdGhpcyBkYXRhc2V0LCAnWicgaW5kaWNhdGVzICdnb29kJyBkYXRhLlxuVGhlICcuJ3Mgc2F5IHRvIG1hdGNoIGFueSBjaGFyYWN0ZXIuXG5UaGUgJyonIHNheXMgdG8gbWF0Y2ggdGhlIHByZXZpb3VzIGNoYXJhY3RlciAwIG9yIG1vcmUgdGltZXMuXG4oRG9uJ3QgaW5jbHVkZSBiYWNrc2xhc2hlcyBpbiB5b3VyIHF1ZXJ5LilcblNlZSB0aGUgdHV0b3JpYWwgZm9yIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXRcbmh0dHA6Ly93d3cudm9nZWxsYS5jb20vdHV0b3JpYWxzL0phdmFSZWd1bGFyRXhwcmVzc2lvbnMvYXJ0aWNsZS5odG1sXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlX2lkXG5leHBvY29kZVxuZmFjaWxpdHlcbklEXG5JTU9cbnBsYXRmb3JtXG5wbGF0Zm9ybV92ZXJzaW9uXG5zaXRlXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbi4uLiAoMjIgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZnN1UmVzZWFyY2hTaGlwTkVQUF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZnN1UmVzZWFyY2hTaGlwTkVQUF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9mc3VSZXNlYXJjaFNoaXBORVBQL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zYW1vcy5jb2Fwcy5mc3UuZWR1L2h0bWwvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2ZzdVJlc2VhcmNoU2hpcE5FUFAucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWZzdVJlc2VhcmNoU2hpcE5FUFAmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiRlNVIiwgImZzdVJlc2VhcmNoU2hpcE5FUFAiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1UmVzZWFyY2hTaGlwV0RBNzgyN25ydC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1UmVzZWFyY2hTaGlwV0RBNzgyN25ydCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VSZXNlYXJjaFNoaXBXREE3ODI3bnJ0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlJlc2VhcmNoIFNoaXAgS2lsbyBNb2FuYSBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhLCBRdWFsaXR5IENvbnRyb2xsZWQiLCAiUmVzZWFyY2ggU2hpcCBLaWxvIE1vYW5hIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEgKGRlbGF5ZWQgfjEwIGRheXMgZm9yIHF1YWxpdHkgY29udHJvbCkgYXJlIGZyb20gdGhlIFNoaXBib2FyZCBBdXRvbWF0ZWQgTWV0ZW9yb2xvZ2ljYWwgYW5kIE9jZWFub2dyYXBoaWMgU3lzdGVtIChTQU1PUykgcHJvZ3JhbS5cblxuSU1QT1JUQU5UOiBBTFdBWVMgVVNFIFRIRSBRVUFMSVRZIEZMQUcgREFUQSEgRWFjaCBkYXRhIHZhcmlhYmxlJ3MgbWV0YWRhdGEgaW5jbHVkZXMgYSBxY2luZGV4IGF0dHJpYnV0ZSB3aGljaCBpbmRpY2F0ZXMgYSBjaGFyYWN0ZXIgbnVtYmVyIGluIHRoZSBmbGFnIGRhdGEuICBBTFdBWVMgY2hlY2sgdGhlIGZsYWcgZGF0YSBmb3IgZWFjaCByb3cgb2YgZGF0YSB0byBzZWUgd2hpY2ggZGF0YSBpcyBnb29kIChmbGFnPSdaJykgYW5kIHdoaWNoIGRhdGEgaXNuJ3QuICBGb3IgZXhhbXBsZSwgdG8gZXh0cmFjdCBqdXN0IGRhdGEgd2hlcmUgdGltZSAocWNpbmRleD0xKSwgbGF0aXR1ZGUgKHFjaW5kZXg9MiksIGxvbmdpdHVkZSAocWNpbmRleD0zKSwgYW5kIGFpclRlbXBlcmF0dXJlIChxY2luZGV4PTEyKSBhcmUgJ2dvb2QnIGRhdGEsIGluY2x1ZGUgdGhpcyBjb25zdHJhaW50IGluIHlvdXIgRVJEREFQIHF1ZXJ5OlxuIGZsYWc9flwiWlpaLi4uLi4uLi5aLipcIlxuaW4geW91ciBxdWVyeS5cbic9ficgaW5kaWNhdGVzIHRoaXMgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24gY29uc3RyYWludC5cblRoZSAnWidzIGFyZSBsaXRlcmFsIGNoYXJhY3RlcnMuICBJbiB0aGlzIGRhdGFzZXQsICdaJyBpbmRpY2F0ZXMgJ2dvb2QnIGRhdGEuXG5UaGUgJy4ncyBzYXkgdG8gbWF0Y2ggYW55IGNoYXJhY3Rlci5cblRoZSAnKicgc2F5cyB0byBtYXRjaCB0aGUgcHJldmlvdXMgY2hhcmFjdGVyIDAgb3IgbW9yZSB0aW1lcy5cbihEb24ndCBpbmNsdWRlIGJhY2tzbGFzaGVzIGluIHlvdXIgcXVlcnkuKVxuU2VlIHRoZSB0dXRvcmlhbCBmb3IgcmVndWxhciBleHByZXNzaW9ucyBhdFxuaHR0cDovL3d3dy52b2dlbGxhLmNvbS90dXRvcmlhbHMvSmF2YVJlZ3VsYXJFeHByZXNzaW9ucy9hcnRpY2xlLmh0bWxcblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2VfaWRcbmV4cG9jb2RlXG5mYWNpbGl0eVxuSURcbklNT1xucGxhdGZvcm1cbnBsYXRmb3JtX3ZlcnNpb25cbnNpdGVcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuLi4uICgyMCBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9mc3VSZXNlYXJjaFNoaXBXREE3ODI3bnJ0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9mc3VSZXNlYXJjaFNoaXBXREE3ODI3bnJ0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2ZzdVJlc2VhcmNoU2hpcFdEQTc4MjducnQvaW5kZXguanNvbiIsICJodHRwczovL3NhbW9zLmNvYXBzLmZzdS5lZHUvaHRtbC8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZnN1UmVzZWFyY2hTaGlwV0RBNzgyN25ydC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZnN1UmVzZWFyY2hTaGlwV0RBNzgyN25ydCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJGU1UiLCAiZnN1UmVzZWFyY2hTaGlwV0RBNzgyN25ydCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VSZXNlYXJjaFNoaXBLQ0VKLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VSZXNlYXJjaFNoaXBLQ0VKIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdVJlc2VhcmNoU2hpcEtDRUouZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiUmVzZWFyY2ggU2hpcCBLbm9yciBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhLCBRdWFsaXR5IENvbnRyb2xsZWQiLCAiUmVzZWFyY2ggU2hpcCBLbm9yciBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhIChkZWxheWVkIH4xMCBkYXlzIGZvciBxdWFsaXR5IGNvbnRyb2wpIGFyZSBmcm9tIHRoZSBTaGlwYm9hcmQgQXV0b21hdGVkIE1ldGVvcm9sb2dpY2FsIGFuZCBPY2Vhbm9ncmFwaGljIFN5c3RlbSAoU0FNT1MpIHByb2dyYW0uXG5cbklNUE9SVEFOVDogQUxXQVlTIFVTRSBUSEUgUVVBTElUWSBGTEFHIERBVEEhIEVhY2ggZGF0YSB2YXJpYWJsZSdzIG1ldGFkYXRhIGluY2x1ZGVzIGEgcWNpbmRleCBhdHRyaWJ1dGUgd2hpY2ggaW5kaWNhdGVzIGEgY2hhcmFjdGVyIG51bWJlciBpbiB0aGUgZmxhZyBkYXRhLiAgQUxXQVlTIGNoZWNrIHRoZSBmbGFnIGRhdGEgZm9yIGVhY2ggcm93IG9mIGRhdGEgdG8gc2VlIHdoaWNoIGRhdGEgaXMgZ29vZCAoZmxhZz0nWicpIGFuZCB3aGljaCBkYXRhIGlzbid0LiAgRm9yIGV4YW1wbGUsIHRvIGV4dHJhY3QganVzdCBkYXRhIHdoZXJlIHRpbWUgKHFjaW5kZXg9MSksIGxhdGl0dWRlIChxY2luZGV4PTIpLCBsb25naXR1ZGUgKHFjaW5kZXg9MyksIGFuZCBhaXJUZW1wZXJhdHVyZSAocWNpbmRleD0xMikgYXJlICdnb29kJyBkYXRhLCBpbmNsdWRlIHRoaXMgY29uc3RyYWludCBpbiB5b3VyIEVSRERBUCBxdWVyeTpcbiBmbGFnPX5cIlpaWi4uLi4uLi4uWi4qXCJcbmluIHlvdXIgcXVlcnkuXG4nPX4nIGluZGljYXRlcyB0aGlzIGlzIGEgcmVndWxhciBleHByZXNzaW9uIGNvbnN0cmFpbnQuXG5UaGUgJ1oncyBhcmUgbGl0ZXJhbCBjaGFyYWN0ZXJzLiAgSW4gdGhpcyBkYXRhc2V0LCAnWicgaW5kaWNhdGVzICdnb29kJyBkYXRhLlxuVGhlICcuJ3Mgc2F5IHRvIG1hdGNoIGFueSBjaGFyYWN0ZXIuXG5UaGUgJyonIHNheXMgdG8gbWF0Y2ggdGhlIHByZXZpb3VzIGNoYXJhY3RlciAwIG9yIG1vcmUgdGltZXMuXG4oRG9uJ3QgaW5jbHVkZSBiYWNrc2xhc2hlcyBpbiB5b3VyIHF1ZXJ5LilcblNlZSB0aGUgdHV0b3JpYWwgZm9yIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXRcbmh0dHA6Ly93d3cudm9nZWxsYS5jb20vdHV0b3JpYWxzL0phdmFSZWd1bGFyRXhwcmVzc2lvbnMvYXJ0aWNsZS5odG1sXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlX2lkXG5leHBvY29kZVxuZmFjaWxpdHlcbklEXG5JTU9cbnBsYXRmb3JtXG5wbGF0Zm9ybV92ZXJzaW9uXG5zaXRlXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbi4uLiAoMzMgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZnN1UmVzZWFyY2hTaGlwS0NFSl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZnN1UmVzZWFyY2hTaGlwS0NFSl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9mc3VSZXNlYXJjaFNoaXBLQ0VKL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zYW1vcy5jb2Fwcy5mc3UuZWR1L2h0bWwvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2ZzdVJlc2VhcmNoU2hpcEtDRUoucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWZzdVJlc2VhcmNoU2hpcEtDRUomc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiRlNVIiwgImZzdVJlc2VhcmNoU2hpcEtDRUoiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1UmVzZWFyY2hTaGlwV0NYNzQ0NW5ydC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1UmVzZWFyY2hTaGlwV0NYNzQ0NW5ydCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VSZXNlYXJjaFNoaXBXQ1g3NDQ1bnJ0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlJlc2VhcmNoIFNoaXAgTGF1cmVuY2UgTS4gR291bGQgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSwgUXVhbGl0eSBDb250cm9sbGVkIiwgIlJlc2VhcmNoIFNoaXAgTGF1cmVuY2UgTS4gR291bGQgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSAoZGVsYXllZCB+MTAgZGF5cyBmb3IgcXVhbGl0eSBjb250cm9sKSBhcmUgZnJvbSB0aGUgU2hpcGJvYXJkIEF1dG9tYXRlZCBNZXRlb3JvbG9naWNhbCBhbmQgT2NlYW5vZ3JhcGhpYyBTeXN0ZW0gKFNBTU9TKSBwcm9ncmFtLlxuXG5JTVBPUlRBTlQ6IEFMV0FZUyBVU0UgVEhFIFFVQUxJVFkgRkxBRyBEQVRBISBFYWNoIGRhdGEgdmFyaWFibGUncyBtZXRhZGF0YSBpbmNsdWRlcyBhIHFjaW5kZXggYXR0cmlidXRlIHdoaWNoIGluZGljYXRlcyBhIGNoYXJhY3RlciBudW1iZXIgaW4gdGhlIGZsYWcgZGF0YS4gIEFMV0FZUyBjaGVjayB0aGUgZmxhZyBkYXRhIGZvciBlYWNoIHJvdyBvZiBkYXRhIHRvIHNlZSB3aGljaCBkYXRhIGlzIGdvb2QgKGZsYWc9J1onKSBhbmQgd2hpY2ggZGF0YSBpc24ndC4gIEZvciBleGFtcGxlLCB0byBleHRyYWN0IGp1c3QgZGF0YSB3aGVyZSB0aW1lIChxY2luZGV4PTEpLCBsYXRpdHVkZSAocWNpbmRleD0yKSwgbG9uZ2l0dWRlIChxY2luZGV4PTMpLCBhbmQgYWlyVGVtcGVyYXR1cmUgKHFjaW5kZXg9MTIpIGFyZSAnZ29vZCcgZGF0YSwgaW5jbHVkZSB0aGlzIGNvbnN0cmFpbnQgaW4geW91ciBFUkREQVAgcXVlcnk6XG4gZmxhZz1+XCJaWlouLi4uLi4uLlouKlwiXG5pbiB5b3VyIHF1ZXJ5LlxuJz1+JyBpbmRpY2F0ZXMgdGhpcyBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBjb25zdHJhaW50LlxuVGhlICdaJ3MgYXJlIGxpdGVyYWwgY2hhcmFjdGVycy4gIEluIHRoaXMgZGF0YXNldCwgJ1onIGluZGljYXRlcyAnZ29vZCcgZGF0YS5cblRoZSAnLidzIHNheSB0byBtYXRjaCBhbnkgY2hhcmFjdGVyLlxuVGhlICcqJyBzYXlzIHRvIG1hdGNoIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIgMCBvciBtb3JlIHRpbWVzLlxuKERvbid0IGluY2x1ZGUgYmFja3NsYXNoZXMgaW4geW91ciBxdWVyeS4pXG5TZWUgdGhlIHR1dG9yaWFsIGZvciByZWd1bGFyIGV4cHJlc3Npb25zIGF0XG5odHRwOi8vd3d3LnZvZ2VsbGEuY29tL3R1dG9yaWFscy9KYXZhUmVndWxhckV4cHJlc3Npb25zL2FydGljbGUuaHRtbFxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZV9pZFxuZXhwb2NvZGVcbmZhY2lsaXR5XG5JRFxuSU1PXG5wbGF0Zm9ybVxucGxhdGZvcm1fdmVyc2lvblxuc2l0ZVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG4uLi4gKDIxIG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2ZzdVJlc2VhcmNoU2hpcFdDWDc0NDVucnRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2ZzdVJlc2VhcmNoU2hpcFdDWDc0NDVucnRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZnN1UmVzZWFyY2hTaGlwV0NYNzQ0NW5ydC9pbmRleC5qc29uIiwgImh0dHBzOi8vc2Ftb3MuY29hcHMuZnN1LmVkdS9odG1sLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9mc3VSZXNlYXJjaFNoaXBXQ1g3NDQ1bnJ0LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1mc3VSZXNlYXJjaFNoaXBXQ1g3NDQ1bnJ0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkZTVSIsICJmc3VSZXNlYXJjaFNoaXBXQ1g3NDQ1bnJ0Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdVJlc2VhcmNoU2hpcFdFQ0JucnQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdVJlc2VhcmNoU2hpcFdFQ0JucnQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1UmVzZWFyY2hTaGlwV0VDQm5ydC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJSZXNlYXJjaCBTaGlwIE1lbHZpbGxlIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEsIFF1YWxpdHkgQ29udHJvbGxlZCIsICJSZXNlYXJjaCBTaGlwIE1lbHZpbGxlIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEgKGRlbGF5ZWQgfjEwIGRheXMgZm9yIHF1YWxpdHkgY29udHJvbCkgYXJlIGZyb20gdGhlIFNoaXBib2FyZCBBdXRvbWF0ZWQgTWV0ZW9yb2xvZ2ljYWwgYW5kIE9jZWFub2dyYXBoaWMgU3lzdGVtIChTQU1PUykgcHJvZ3JhbS5cblxuSU1QT1JUQU5UOiBBTFdBWVMgVVNFIFRIRSBRVUFMSVRZIEZMQUcgREFUQSEgRWFjaCBkYXRhIHZhcmlhYmxlJ3MgbWV0YWRhdGEgaW5jbHVkZXMgYSBxY2luZGV4IGF0dHJpYnV0ZSB3aGljaCBpbmRpY2F0ZXMgYSBjaGFyYWN0ZXIgbnVtYmVyIGluIHRoZSBmbGFnIGRhdGEuICBBTFdBWVMgY2hlY2sgdGhlIGZsYWcgZGF0YSBmb3IgZWFjaCByb3cgb2YgZGF0YSB0byBzZWUgd2hpY2ggZGF0YSBpcyBnb29kIChmbGFnPSdaJykgYW5kIHdoaWNoIGRhdGEgaXNuJ3QuICBGb3IgZXhhbXBsZSwgdG8gZXh0cmFjdCBqdXN0IGRhdGEgd2hlcmUgdGltZSAocWNpbmRleD0xKSwgbGF0aXR1ZGUgKHFjaW5kZXg9MiksIGxvbmdpdHVkZSAocWNpbmRleD0zKSwgYW5kIGFpclRlbXBlcmF0dXJlIChxY2luZGV4PTEyKSBhcmUgJ2dvb2QnIGRhdGEsIGluY2x1ZGUgdGhpcyBjb25zdHJhaW50IGluIHlvdXIgRVJEREFQIHF1ZXJ5OlxuIGZsYWc9flwiWlpaLi4uLi4uLi5aLipcIlxuaW4geW91ciBxdWVyeS5cbic9ficgaW5kaWNhdGVzIHRoaXMgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24gY29uc3RyYWludC5cblRoZSAnWidzIGFyZSBsaXRlcmFsIGNoYXJhY3RlcnMuICBJbiB0aGlzIGRhdGFzZXQsICdaJyBpbmRpY2F0ZXMgJ2dvb2QnIGRhdGEuXG5UaGUgJy4ncyBzYXkgdG8gbWF0Y2ggYW55IGNoYXJhY3Rlci5cblRoZSAnKicgc2F5cyB0byBtYXRjaCB0aGUgcHJldmlvdXMgY2hhcmFjdGVyIDAgb3IgbW9yZSB0aW1lcy5cbihEb24ndCBpbmNsdWRlIGJhY2tzbGFzaGVzIGluIHlvdXIgcXVlcnkuKVxuU2VlIHRoZSB0dXRvcmlhbCBmb3IgcmVndWxhciBleHByZXNzaW9ucyBhdFxuaHR0cDovL3d3dy52b2dlbGxhLmNvbS90dXRvcmlhbHMvSmF2YVJlZ3VsYXJFeHByZXNzaW9ucy9hcnRpY2xlLmh0bWxcblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2VfaWRcbmV4cG9jb2RlXG5mYWNpbGl0eVxuSURcbklNT1xucGxhdGZvcm1cbnBsYXRmb3JtX3ZlcnNpb25cbnNpdGVcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuLi4uICgxOSBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9mc3VSZXNlYXJjaFNoaXBXRUNCbnJ0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9mc3VSZXNlYXJjaFNoaXBXRUNCbnJ0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2ZzdVJlc2VhcmNoU2hpcFdFQ0JucnQvaW5kZXguanNvbiIsICJodHRwczovL3NhbW9zLmNvYXBzLmZzdS5lZHUvaHRtbC8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZnN1UmVzZWFyY2hTaGlwV0VDQm5ydC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZnN1UmVzZWFyY2hTaGlwV0VDQm5ydCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJGU1UiLCAiZnN1UmVzZWFyY2hTaGlwV0VDQm5ydCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VSZXNlYXJjaFNoaXBXQlAzMjEwLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VSZXNlYXJjaFNoaXBXQlAzMjEwIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdVJlc2VhcmNoU2hpcFdCUDMyMTAuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiUmVzZWFyY2ggU2hpcCBOYXRoYW5pZWwgQi4gUGFsbWVyIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEsIFF1YWxpdHkgQ29udHJvbGxlZCIsICJSZXNlYXJjaCBTaGlwIE5hdGhhbmllbCBCLiBQYWxtZXIgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSAoZGVsYXllZCB+MTAgZGF5cyBmb3IgcXVhbGl0eSBjb250cm9sKSBhcmUgZnJvbSB0aGUgU2hpcGJvYXJkIEF1dG9tYXRlZCBNZXRlb3JvbG9naWNhbCBhbmQgT2NlYW5vZ3JhcGhpYyBTeXN0ZW0gKFNBTU9TKSBwcm9ncmFtLlxuXG5JTVBPUlRBTlQ6IEFMV0FZUyBVU0UgVEhFIFFVQUxJVFkgRkxBRyBEQVRBISBFYWNoIGRhdGEgdmFyaWFibGUncyBtZXRhZGF0YSBpbmNsdWRlcyBhIHFjaW5kZXggYXR0cmlidXRlIHdoaWNoIGluZGljYXRlcyBhIGNoYXJhY3RlciBudW1iZXIgaW4gdGhlIGZsYWcgZGF0YS4gIEFMV0FZUyBjaGVjayB0aGUgZmxhZyBkYXRhIGZvciBlYWNoIHJvdyBvZiBkYXRhIHRvIHNlZSB3aGljaCBkYXRhIGlzIGdvb2QgKGZsYWc9J1onKSBhbmQgd2hpY2ggZGF0YSBpc24ndC4gIEZvciBleGFtcGxlLCB0byBleHRyYWN0IGp1c3QgZGF0YSB3aGVyZSB0aW1lIChxY2luZGV4PTEpLCBsYXRpdHVkZSAocWNpbmRleD0yKSwgbG9uZ2l0dWRlIChxY2luZGV4PTMpLCBhbmQgYWlyVGVtcGVyYXR1cmUgKHFjaW5kZXg9MTIpIGFyZSAnZ29vZCcgZGF0YSwgaW5jbHVkZSB0aGlzIGNvbnN0cmFpbnQgaW4geW91ciBFUkREQVAgcXVlcnk6XG4gZmxhZz1+XCJaWlouLi4uLi4uLlouKlwiXG5pbiB5b3VyIHF1ZXJ5LlxuJz1+JyBpbmRpY2F0ZXMgdGhpcyBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBjb25zdHJhaW50LlxuVGhlICdaJ3MgYXJlIGxpdGVyYWwgY2hhcmFjdGVycy4gIEluIHRoaXMgZGF0YXNldCwgJ1onIGluZGljYXRlcyAnZ29vZCcgZGF0YS5cblRoZSAnLidzIHNheSB0byBtYXRjaCBhbnkgY2hhcmFjdGVyLlxuVGhlICcqJyBzYXlzIHRvIG1hdGNoIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIgMCBvciBtb3JlIHRpbWVzLlxuKERvbid0IGluY2x1ZGUgYmFja3NsYXNoZXMgaW4geW91ciBxdWVyeS4pXG5TZWUgdGhlIHR1dG9yaWFsIGZvciByZWd1bGFyIGV4cHJlc3Npb25zIGF0XG5odHRwOi8vd3d3LnZvZ2VsbGEuY29tL3R1dG9yaWFscy9KYXZhUmVndWxhckV4cHJlc3Npb25zL2FydGljbGUuaHRtbFxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZV9pZFxuZXhwb2NvZGVcbmZhY2lsaXR5XG5JRFxuSU1PXG5wbGF0Zm9ybVxucGxhdGZvcm1fdmVyc2lvblxuc2l0ZVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG4uLi4gKDE4IG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2ZzdVJlc2VhcmNoU2hpcFdCUDMyMTBfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2ZzdVJlc2VhcmNoU2hpcFdCUDMyMTBfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZnN1UmVzZWFyY2hTaGlwV0JQMzIxMC9pbmRleC5qc29uIiwgImh0dHBzOi8vc2Ftb3MuY29hcHMuZnN1LmVkdS9odG1sLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9mc3VSZXNlYXJjaFNoaXBXQlAzMjEwLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1mc3VSZXNlYXJjaFNoaXBXQlAzMjEwJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkZTVSIsICJmc3VSZXNlYXJjaFNoaXBXQlAzMjEwIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdVJlc2VhcmNoU2hpcFdCUDMyMTBucnQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdVJlc2VhcmNoU2hpcFdCUDMyMTBucnQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1UmVzZWFyY2hTaGlwV0JQMzIxMG5ydC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJSZXNlYXJjaCBTaGlwIE5hdGhhbmllbCBCLiBQYWxtZXIgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSwgUXVhbGl0eSBDb250cm9sbGVkIiwgIlJlc2VhcmNoIFNoaXAgTmF0aGFuaWVsIEIuIFBhbG1lciBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhIChkZWxheWVkIH4xMCBkYXlzIGZvciBxdWFsaXR5IGNvbnRyb2wpIGFyZSBmcm9tIHRoZSBTaGlwYm9hcmQgQXV0b21hdGVkIE1ldGVvcm9sb2dpY2FsIGFuZCBPY2Vhbm9ncmFwaGljIFN5c3RlbSAoU0FNT1MpIHByb2dyYW0uXG5cbklNUE9SVEFOVDogQUxXQVlTIFVTRSBUSEUgUVVBTElUWSBGTEFHIERBVEEhIEVhY2ggZGF0YSB2YXJpYWJsZSdzIG1ldGFkYXRhIGluY2x1ZGVzIGEgcWNpbmRleCBhdHRyaWJ1dGUgd2hpY2ggaW5kaWNhdGVzIGEgY2hhcmFjdGVyIG51bWJlciBpbiB0aGUgZmxhZyBkYXRhLiAgQUxXQVlTIGNoZWNrIHRoZSBmbGFnIGRhdGEgZm9yIGVhY2ggcm93IG9mIGRhdGEgdG8gc2VlIHdoaWNoIGRhdGEgaXMgZ29vZCAoZmxhZz0nWicpIGFuZCB3aGljaCBkYXRhIGlzbid0LiAgRm9yIGV4YW1wbGUsIHRvIGV4dHJhY3QganVzdCBkYXRhIHdoZXJlIHRpbWUgKHFjaW5kZXg9MSksIGxhdGl0dWRlIChxY2luZGV4PTIpLCBsb25naXR1ZGUgKHFjaW5kZXg9MyksIGFuZCBhaXJUZW1wZXJhdHVyZSAocWNpbmRleD0xMikgYXJlICdnb29kJyBkYXRhLCBpbmNsdWRlIHRoaXMgY29uc3RyYWludCBpbiB5b3VyIEVSRERBUCBxdWVyeTpcbiBmbGFnPX5cIlpaWi4uLi4uLi4uWi4qXCJcbmluIHlvdXIgcXVlcnkuXG4nPX4nIGluZGljYXRlcyB0aGlzIGlzIGEgcmVndWxhciBleHByZXNzaW9uIGNvbnN0cmFpbnQuXG5UaGUgJ1oncyBhcmUgbGl0ZXJhbCBjaGFyYWN0ZXJzLiAgSW4gdGhpcyBkYXRhc2V0LCAnWicgaW5kaWNhdGVzICdnb29kJyBkYXRhLlxuVGhlICcuJ3Mgc2F5IHRvIG1hdGNoIGFueSBjaGFyYWN0ZXIuXG5UaGUgJyonIHNheXMgdG8gbWF0Y2ggdGhlIHByZXZpb3VzIGNoYXJhY3RlciAwIG9yIG1vcmUgdGltZXMuXG4oRG9uJ3QgaW5jbHVkZSBiYWNrc2xhc2hlcyBpbiB5b3VyIHF1ZXJ5LilcblNlZSB0aGUgdHV0b3JpYWwgZm9yIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXRcbmh0dHA6Ly93d3cudm9nZWxsYS5jb20vdHV0b3JpYWxzL0phdmFSZWd1bGFyRXhwcmVzc2lvbnMvYXJ0aWNsZS5odG1sXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlX2lkXG5leHBvY29kZVxuZmFjaWxpdHlcbklEXG5JTU9cbnBsYXRmb3JtXG5wbGF0Zm9ybV92ZXJzaW9uXG5zaXRlXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbi4uLiAoMTggbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZnN1UmVzZWFyY2hTaGlwV0JQMzIxMG5ydF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZnN1UmVzZWFyY2hTaGlwV0JQMzIxMG5ydF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9mc3VSZXNlYXJjaFNoaXBXQlAzMjEwbnJ0L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zYW1vcy5jb2Fwcy5mc3UuZWR1L2h0bWwvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2ZzdVJlc2VhcmNoU2hpcFdCUDMyMTBucnQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWZzdVJlc2VhcmNoU2hpcFdCUDMyMTBucnQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiRlNVIiwgImZzdVJlc2VhcmNoU2hpcFdCUDMyMTBucnQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1UmVzZWFyY2hTaGlwV0tXQm5ydC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1UmVzZWFyY2hTaGlwV0tXQm5ydCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VSZXNlYXJjaFNoaXBXS1dCbnJ0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlJlc2VhcmNoIFNoaXAgTmV3IEhvcml6b24gVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSwgUXVhbGl0eSBDb250cm9sbGVkIiwgIlJlc2VhcmNoIFNoaXAgTmV3IEhvcml6b24gVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSAoZGVsYXllZCB+MTAgZGF5cyBmb3IgcXVhbGl0eSBjb250cm9sKSBhcmUgZnJvbSB0aGUgU2hpcGJvYXJkIEF1dG9tYXRlZCBNZXRlb3JvbG9naWNhbCBhbmQgT2NlYW5vZ3JhcGhpYyBTeXN0ZW0gKFNBTU9TKSBwcm9ncmFtLlxuXG5JTVBPUlRBTlQ6IEFMV0FZUyBVU0UgVEhFIFFVQUxJVFkgRkxBRyBEQVRBISBFYWNoIGRhdGEgdmFyaWFibGUncyBtZXRhZGF0YSBpbmNsdWRlcyBhIHFjaW5kZXggYXR0cmlidXRlIHdoaWNoIGluZGljYXRlcyBhIGNoYXJhY3RlciBudW1iZXIgaW4gdGhlIGZsYWcgZGF0YS4gIEFMV0FZUyBjaGVjayB0aGUgZmxhZyBkYXRhIGZvciBlYWNoIHJvdyBvZiBkYXRhIHRvIHNlZSB3aGljaCBkYXRhIGlzIGdvb2QgKGZsYWc9J1onKSBhbmQgd2hpY2ggZGF0YSBpc24ndC4gIEZvciBleGFtcGxlLCB0byBleHRyYWN0IGp1c3QgZGF0YSB3aGVyZSB0aW1lIChxY2luZGV4PTEpLCBsYXRpdHVkZSAocWNpbmRleD0yKSwgbG9uZ2l0dWRlIChxY2luZGV4PTMpLCBhbmQgYWlyVGVtcGVyYXR1cmUgKHFjaW5kZXg9MTIpIGFyZSAnZ29vZCcgZGF0YSwgaW5jbHVkZSB0aGlzIGNvbnN0cmFpbnQgaW4geW91ciBFUkREQVAgcXVlcnk6XG4gZmxhZz1+XCJaWlouLi4uLi4uLlouKlwiXG5pbiB5b3VyIHF1ZXJ5LlxuJz1+JyBpbmRpY2F0ZXMgdGhpcyBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBjb25zdHJhaW50LlxuVGhlICdaJ3MgYXJlIGxpdGVyYWwgY2hhcmFjdGVycy4gIEluIHRoaXMgZGF0YXNldCwgJ1onIGluZGljYXRlcyAnZ29vZCcgZGF0YS5cblRoZSAnLidzIHNheSB0byBtYXRjaCBhbnkgY2hhcmFjdGVyLlxuVGhlICcqJyBzYXlzIHRvIG1hdGNoIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIgMCBvciBtb3JlIHRpbWVzLlxuKERvbid0IGluY2x1ZGUgYmFja3NsYXNoZXMgaW4geW91ciBxdWVyeS4pXG5TZWUgdGhlIHR1dG9yaWFsIGZvciByZWd1bGFyIGV4cHJlc3Npb25zIGF0XG5odHRwOi8vd3d3LnZvZ2VsbGEuY29tL3R1dG9yaWFscy9KYXZhUmVndWxhckV4cHJlc3Npb25zL2FydGljbGUuaHRtbFxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZV9pZFxuZXhwb2NvZGVcbmZhY2lsaXR5XG5JRFxuSU1PXG5wbGF0Zm9ybVxucGxhdGZvcm1fdmVyc2lvblxuc2l0ZVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG4uLi4gKDI1IG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2ZzdVJlc2VhcmNoU2hpcFdLV0JucnRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2ZzdVJlc2VhcmNoU2hpcFdLV0JucnRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZnN1UmVzZWFyY2hTaGlwV0tXQm5ydC9pbmRleC5qc29uIiwgImh0dHBzOi8vc2Ftb3MuY29hcHMuZnN1LmVkdS9odG1sLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9mc3VSZXNlYXJjaFNoaXBXS1dCbnJ0LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1mc3VSZXNlYXJjaFNoaXBXS1dCbnJ0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkZTVSIsICJmc3VSZXNlYXJjaFNoaXBXS1dCbnJ0Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdVJlc2VhcmNoU2hpcFdYQVEuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdVJlc2VhcmNoU2hpcFdYQVEiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1UmVzZWFyY2hTaGlwV1hBUS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJSZXNlYXJjaCBTaGlwIE9jZWFudXMgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSwgUXVhbGl0eSBDb250cm9sbGVkIiwgIlJlc2VhcmNoIFNoaXAgT2NlYW51cyBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhIChkZWxheWVkIH4xMCBkYXlzIGZvciBxdWFsaXR5IGNvbnRyb2wpIGFyZSBmcm9tIHRoZSBTaGlwYm9hcmQgQXV0b21hdGVkIE1ldGVvcm9sb2dpY2FsIGFuZCBPY2Vhbm9ncmFwaGljIFN5c3RlbSAoU0FNT1MpIHByb2dyYW0uXG5cbklNUE9SVEFOVDogQUxXQVlTIFVTRSBUSEUgUVVBTElUWSBGTEFHIERBVEEhIEVhY2ggZGF0YSB2YXJpYWJsZSdzIG1ldGFkYXRhIGluY2x1ZGVzIGEgcWNpbmRleCBhdHRyaWJ1dGUgd2hpY2ggaW5kaWNhdGVzIGEgY2hhcmFjdGVyIG51bWJlciBpbiB0aGUgZmxhZyBkYXRhLiAgQUxXQVlTIGNoZWNrIHRoZSBmbGFnIGRhdGEgZm9yIGVhY2ggcm93IG9mIGRhdGEgdG8gc2VlIHdoaWNoIGRhdGEgaXMgZ29vZCAoZmxhZz0nWicpIGFuZCB3aGljaCBkYXRhIGlzbid0LiAgRm9yIGV4YW1wbGUsIHRvIGV4dHJhY3QganVzdCBkYXRhIHdoZXJlIHRpbWUgKHFjaW5kZXg9MSksIGxhdGl0dWRlIChxY2luZGV4PTIpLCBsb25naXR1ZGUgKHFjaW5kZXg9MyksIGFuZCBhaXJUZW1wZXJhdHVyZSAocWNpbmRleD0xMikgYXJlICdnb29kJyBkYXRhLCBpbmNsdWRlIHRoaXMgY29uc3RyYWludCBpbiB5b3VyIEVSRERBUCBxdWVyeTpcbiBmbGFnPX5cIlpaWi4uLi4uLi4uWi4qXCJcbmluIHlvdXIgcXVlcnkuXG4nPX4nIGluZGljYXRlcyB0aGlzIGlzIGEgcmVndWxhciBleHByZXNzaW9uIGNvbnN0cmFpbnQuXG5UaGUgJ1oncyBhcmUgbGl0ZXJhbCBjaGFyYWN0ZXJzLiAgSW4gdGhpcyBkYXRhc2V0LCAnWicgaW5kaWNhdGVzICdnb29kJyBkYXRhLlxuVGhlICcuJ3Mgc2F5IHRvIG1hdGNoIGFueSBjaGFyYWN0ZXIuXG5UaGUgJyonIHNheXMgdG8gbWF0Y2ggdGhlIHByZXZpb3VzIGNoYXJhY3RlciAwIG9yIG1vcmUgdGltZXMuXG4oRG9uJ3QgaW5jbHVkZSBiYWNrc2xhc2hlcyBpbiB5b3VyIHF1ZXJ5LilcblNlZSB0aGUgdHV0b3JpYWwgZm9yIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXRcbmh0dHA6Ly93d3cudm9nZWxsYS5jb20vdHV0b3JpYWxzL0phdmFSZWd1bGFyRXhwcmVzc2lvbnMvYXJ0aWNsZS5odG1sXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlX2lkXG5leHBvY29kZVxuZmFjaWxpdHlcbklEXG5JTU9cbnBsYXRmb3JtXG5wbGF0Zm9ybV92ZXJzaW9uXG5zaXRlXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbi4uLiAoMjkgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZnN1UmVzZWFyY2hTaGlwV1hBUV9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZnN1UmVzZWFyY2hTaGlwV1hBUV9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9mc3VSZXNlYXJjaFNoaXBXWEFRL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zYW1vcy5jb2Fwcy5mc3UuZWR1L2h0bWwvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2ZzdVJlc2VhcmNoU2hpcFdYQVEucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWZzdVJlc2VhcmNoU2hpcFdYQVEmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiRlNVIiwgImZzdVJlc2VhcmNoU2hpcFdYQVEiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1UmVzZWFyY2hTaGlwV1NRMjY3NG5ydC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1UmVzZWFyY2hTaGlwV1NRMjY3NG5ydCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VSZXNlYXJjaFNoaXBXU1EyNjc0bnJ0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlJlc2VhcmNoIFNoaXAgUm9iZXJ0IEdvcmRvbiBTcHJvdWwgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSwgUXVhbGl0eSBDb250cm9sbGVkIiwgIlJlc2VhcmNoIFNoaXAgUm9iZXJ0IEdvcmRvbiBTcHJvdWwgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSAoZGVsYXllZCB+MTAgZGF5cyBmb3IgcXVhbGl0eSBjb250cm9sKSBhcmUgZnJvbSB0aGUgU2hpcGJvYXJkIEF1dG9tYXRlZCBNZXRlb3JvbG9naWNhbCBhbmQgT2NlYW5vZ3JhcGhpYyBTeXN0ZW0gKFNBTU9TKSBwcm9ncmFtLlxuXG5JTVBPUlRBTlQ6IEFMV0FZUyBVU0UgVEhFIFFVQUxJVFkgRkxBRyBEQVRBISBFYWNoIGRhdGEgdmFyaWFibGUncyBtZXRhZGF0YSBpbmNsdWRlcyBhIHFjaW5kZXggYXR0cmlidXRlIHdoaWNoIGluZGljYXRlcyBhIGNoYXJhY3RlciBudW1iZXIgaW4gdGhlIGZsYWcgZGF0YS4gIEFMV0FZUyBjaGVjayB0aGUgZmxhZyBkYXRhIGZvciBlYWNoIHJvdyBvZiBkYXRhIHRvIHNlZSB3aGljaCBkYXRhIGlzIGdvb2QgKGZsYWc9J1onKSBhbmQgd2hpY2ggZGF0YSBpc24ndC4gIEZvciBleGFtcGxlLCB0byBleHRyYWN0IGp1c3QgZGF0YSB3aGVyZSB0aW1lIChxY2luZGV4PTEpLCBsYXRpdHVkZSAocWNpbmRleD0yKSwgbG9uZ2l0dWRlIChxY2luZGV4PTMpLCBhbmQgYWlyVGVtcGVyYXR1cmUgKHFjaW5kZXg9MTIpIGFyZSAnZ29vZCcgZGF0YSwgaW5jbHVkZSB0aGlzIGNvbnN0cmFpbnQgaW4geW91ciBFUkREQVAgcXVlcnk6XG4gZmxhZz1+XCJaWlouLi4uLi4uLlouKlwiXG5pbiB5b3VyIHF1ZXJ5LlxuJz1+JyBpbmRpY2F0ZXMgdGhpcyBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBjb25zdHJhaW50LlxuVGhlICdaJ3MgYXJlIGxpdGVyYWwgY2hhcmFjdGVycy4gIEluIHRoaXMgZGF0YXNldCwgJ1onIGluZGljYXRlcyAnZ29vZCcgZGF0YS5cblRoZSAnLidzIHNheSB0byBtYXRjaCBhbnkgY2hhcmFjdGVyLlxuVGhlICcqJyBzYXlzIHRvIG1hdGNoIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIgMCBvciBtb3JlIHRpbWVzLlxuKERvbid0IGluY2x1ZGUgYmFja3NsYXNoZXMgaW4geW91ciBxdWVyeS4pXG5TZWUgdGhlIHR1dG9yaWFsIGZvciByZWd1bGFyIGV4cHJlc3Npb25zIGF0XG5odHRwOi8vd3d3LnZvZ2VsbGEuY29tL3R1dG9yaWFscy9KYXZhUmVndWxhckV4cHJlc3Npb25zL2FydGljbGUuaHRtbFxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZV9pZFxuZXhwb2NvZGVcbmZhY2lsaXR5XG5JRFxuSU1PXG5wbGF0Zm9ybVxucGxhdGZvcm1fdmVyc2lvblxuc2l0ZVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG4uLi4gKDcgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZnN1UmVzZWFyY2hTaGlwV1NRMjY3NG5ydF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZnN1UmVzZWFyY2hTaGlwV1NRMjY3NG5ydF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9mc3VSZXNlYXJjaFNoaXBXU1EyNjc0bnJ0L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zYW1vcy5jb2Fwcy5mc3UuZWR1L2h0bWwvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2ZzdVJlc2VhcmNoU2hpcFdTUTI2NzRucnQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWZzdVJlc2VhcmNoU2hpcFdTUTI2NzRucnQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiRlNVIiwgImZzdVJlc2VhcmNoU2hpcFdTUTI2NzRucnQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1UmVzZWFyY2hTaGlwS0FPVW5ydC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1UmVzZWFyY2hTaGlwS0FPVW5ydCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VSZXNlYXJjaFNoaXBLQU9VbnJ0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlJlc2VhcmNoIFNoaXAgUm9nZXIgUmV2ZWxsZSBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhLCBRdWFsaXR5IENvbnRyb2xsZWQiLCAiUmVzZWFyY2ggU2hpcCBSb2dlciBSZXZlbGxlIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEgKGRlbGF5ZWQgfjEwIGRheXMgZm9yIHF1YWxpdHkgY29udHJvbCkgYXJlIGZyb20gdGhlIFNoaXBib2FyZCBBdXRvbWF0ZWQgTWV0ZW9yb2xvZ2ljYWwgYW5kIE9jZWFub2dyYXBoaWMgU3lzdGVtIChTQU1PUykgcHJvZ3JhbS5cblxuSU1QT1JUQU5UOiBBTFdBWVMgVVNFIFRIRSBRVUFMSVRZIEZMQUcgREFUQSEgRWFjaCBkYXRhIHZhcmlhYmxlJ3MgbWV0YWRhdGEgaW5jbHVkZXMgYSBxY2luZGV4IGF0dHJpYnV0ZSB3aGljaCBpbmRpY2F0ZXMgYSBjaGFyYWN0ZXIgbnVtYmVyIGluIHRoZSBmbGFnIGRhdGEuICBBTFdBWVMgY2hlY2sgdGhlIGZsYWcgZGF0YSBmb3IgZWFjaCByb3cgb2YgZGF0YSB0byBzZWUgd2hpY2ggZGF0YSBpcyBnb29kIChmbGFnPSdaJykgYW5kIHdoaWNoIGRhdGEgaXNuJ3QuICBGb3IgZXhhbXBsZSwgdG8gZXh0cmFjdCBqdXN0IGRhdGEgd2hlcmUgdGltZSAocWNpbmRleD0xKSwgbGF0aXR1ZGUgKHFjaW5kZXg9MiksIGxvbmdpdHVkZSAocWNpbmRleD0zKSwgYW5kIGFpclRlbXBlcmF0dXJlIChxY2luZGV4PTEyKSBhcmUgJ2dvb2QnIGRhdGEsIGluY2x1ZGUgdGhpcyBjb25zdHJhaW50IGluIHlvdXIgRVJEREFQIHF1ZXJ5OlxuIGZsYWc9flwiWlpaLi4uLi4uLi5aLipcIlxuaW4geW91ciBxdWVyeS5cbic9ficgaW5kaWNhdGVzIHRoaXMgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24gY29uc3RyYWludC5cblRoZSAnWidzIGFyZSBsaXRlcmFsIGNoYXJhY3RlcnMuICBJbiB0aGlzIGRhdGFzZXQsICdaJyBpbmRpY2F0ZXMgJ2dvb2QnIGRhdGEuXG5UaGUgJy4ncyBzYXkgdG8gbWF0Y2ggYW55IGNoYXJhY3Rlci5cblRoZSAnKicgc2F5cyB0byBtYXRjaCB0aGUgcHJldmlvdXMgY2hhcmFjdGVyIDAgb3IgbW9yZSB0aW1lcy5cbihEb24ndCBpbmNsdWRlIGJhY2tzbGFzaGVzIGluIHlvdXIgcXVlcnkuKVxuU2VlIHRoZSB0dXRvcmlhbCBmb3IgcmVndWxhciBleHByZXNzaW9ucyBhdFxuaHR0cDovL3d3dy52b2dlbGxhLmNvbS90dXRvcmlhbHMvSmF2YVJlZ3VsYXJFeHByZXNzaW9ucy9hcnRpY2xlLmh0bWxcblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2VfaWRcbmV4cG9jb2RlXG5mYWNpbGl0eVxuSURcbklNT1xucGxhdGZvcm1cbnBsYXRmb3JtX3ZlcnNpb25cbnNpdGVcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuLi4uICgyMCBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9mc3VSZXNlYXJjaFNoaXBLQU9VbnJ0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9mc3VSZXNlYXJjaFNoaXBLQU9VbnJ0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2ZzdVJlc2VhcmNoU2hpcEtBT1VucnQvaW5kZXguanNvbiIsICJodHRwczovL3NhbW9zLmNvYXBzLmZzdS5lZHUvaHRtbC8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZnN1UmVzZWFyY2hTaGlwS0FPVW5ydC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZnN1UmVzZWFyY2hTaGlwS0FPVW5ydCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJGU1UiLCAiZnN1UmVzZWFyY2hTaGlwS0FPVW5ydCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VSZXNlYXJjaFNoaXBWTEhKLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VSZXNlYXJjaFNoaXBWTEhKIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdVJlc2VhcmNoU2hpcFZMSEouZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiUmVzZWFyY2ggU2hpcCBTb3V0aGVybiBTdXJ2ZXlvciBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhLCBRdWFsaXR5IENvbnRyb2xsZWQiLCAiUmVzZWFyY2ggU2hpcCBTb3V0aGVybiBTdXJ2ZXlvciBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhIChkZWxheWVkIH4xMCBkYXlzIGZvciBxdWFsaXR5IGNvbnRyb2wpIGFyZSBmcm9tIHRoZSBTaGlwYm9hcmQgQXV0b21hdGVkIE1ldGVvcm9sb2dpY2FsIGFuZCBPY2Vhbm9ncmFwaGljIFN5c3RlbSAoU0FNT1MpIHByb2dyYW0uXG5cbklNUE9SVEFOVDogQUxXQVlTIFVTRSBUSEUgUVVBTElUWSBGTEFHIERBVEEhIEVhY2ggZGF0YSB2YXJpYWJsZSdzIG1ldGFkYXRhIGluY2x1ZGVzIGEgcWNpbmRleCBhdHRyaWJ1dGUgd2hpY2ggaW5kaWNhdGVzIGEgY2hhcmFjdGVyIG51bWJlciBpbiB0aGUgZmxhZyBkYXRhLiAgQUxXQVlTIGNoZWNrIHRoZSBmbGFnIGRhdGEgZm9yIGVhY2ggcm93IG9mIGRhdGEgdG8gc2VlIHdoaWNoIGRhdGEgaXMgZ29vZCAoZmxhZz0nWicpIGFuZCB3aGljaCBkYXRhIGlzbid0LiAgRm9yIGV4YW1wbGUsIHRvIGV4dHJhY3QganVzdCBkYXRhIHdoZXJlIHRpbWUgKHFjaW5kZXg9MSksIGxhdGl0dWRlIChxY2luZGV4PTIpLCBsb25naXR1ZGUgKHFjaW5kZXg9MyksIGFuZCBhaXJUZW1wZXJhdHVyZSAocWNpbmRleD0xMikgYXJlICdnb29kJyBkYXRhLCBpbmNsdWRlIHRoaXMgY29uc3RyYWludCBpbiB5b3VyIEVSRERBUCBxdWVyeTpcbiBmbGFnPX5cIlpaWi4uLi4uLi4uWi4qXCJcbmluIHlvdXIgcXVlcnkuXG4nPX4nIGluZGljYXRlcyB0aGlzIGlzIGEgcmVndWxhciBleHByZXNzaW9uIGNvbnN0cmFpbnQuXG5UaGUgJ1oncyBhcmUgbGl0ZXJhbCBjaGFyYWN0ZXJzLiAgSW4gdGhpcyBkYXRhc2V0LCAnWicgaW5kaWNhdGVzICdnb29kJyBkYXRhLlxuVGhlICcuJ3Mgc2F5IHRvIG1hdGNoIGFueSBjaGFyYWN0ZXIuXG5UaGUgJyonIHNheXMgdG8gbWF0Y2ggdGhlIHByZXZpb3VzIGNoYXJhY3RlciAwIG9yIG1vcmUgdGltZXMuXG4oRG9uJ3QgaW5jbHVkZSBiYWNrc2xhc2hlcyBpbiB5b3VyIHF1ZXJ5LilcblNlZSB0aGUgdHV0b3JpYWwgZm9yIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXRcbmh0dHA6Ly93d3cudm9nZWxsYS5jb20vdHV0b3JpYWxzL0phdmFSZWd1bGFyRXhwcmVzc2lvbnMvYXJ0aWNsZS5odG1sXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlX2lkXG5leHBvY29kZVxuZmFjaWxpdHlcbklEXG5JTU9cbnBsYXRmb3JtXG5wbGF0Zm9ybV92ZXJzaW9uXG5zaXRlXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbi4uLiAoMjcgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZnN1UmVzZWFyY2hTaGlwVkxISl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZnN1UmVzZWFyY2hTaGlwVkxISl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9mc3VSZXNlYXJjaFNoaXBWTEhKL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zYW1vcy5jb2Fwcy5mc3UuZWR1L2h0bWwvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2ZzdVJlc2VhcmNoU2hpcFZMSEoucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWZzdVJlc2VhcmNoU2hpcFZMSEomc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiRlNVIiwgImZzdVJlc2VhcmNoU2hpcFZMSEoiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1UmVzZWFyY2hTaGlwS1REUW5ydC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1UmVzZWFyY2hTaGlwS1REUW5ydCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VSZXNlYXJjaFNoaXBLVERRbnJ0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlJlc2VhcmNoIFNoaXAgVC4gRy4gVGhvbXBzb24gVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSwgUXVhbGl0eSBDb250cm9sbGVkIiwgIlJlc2VhcmNoIFNoaXAgVC4gRy4gVGhvbXBzb24gVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSAoZGVsYXllZCB+MTAgZGF5cyBmb3IgcXVhbGl0eSBjb250cm9sKSBhcmUgZnJvbSB0aGUgU2hpcGJvYXJkIEF1dG9tYXRlZCBNZXRlb3JvbG9naWNhbCBhbmQgT2NlYW5vZ3JhcGhpYyBTeXN0ZW0gKFNBTU9TKSBwcm9ncmFtLlxuXG5JTVBPUlRBTlQ6IEFMV0FZUyBVU0UgVEhFIFFVQUxJVFkgRkxBRyBEQVRBISBFYWNoIGRhdGEgdmFyaWFibGUncyBtZXRhZGF0YSBpbmNsdWRlcyBhIHFjaW5kZXggYXR0cmlidXRlIHdoaWNoIGluZGljYXRlcyBhIGNoYXJhY3RlciBudW1iZXIgaW4gdGhlIGZsYWcgZGF0YS4gIEFMV0FZUyBjaGVjayB0aGUgZmxhZyBkYXRhIGZvciBlYWNoIHJvdyBvZiBkYXRhIHRvIHNlZSB3aGljaCBkYXRhIGlzIGdvb2QgKGZsYWc9J1onKSBhbmQgd2hpY2ggZGF0YSBpc24ndC4gIEZvciBleGFtcGxlLCB0byBleHRyYWN0IGp1c3QgZGF0YSB3aGVyZSB0aW1lIChxY2luZGV4PTEpLCBsYXRpdHVkZSAocWNpbmRleD0yKSwgbG9uZ2l0dWRlIChxY2luZGV4PTMpLCBhbmQgYWlyVGVtcGVyYXR1cmUgKHFjaW5kZXg9MTIpIGFyZSAnZ29vZCcgZGF0YSwgaW5jbHVkZSB0aGlzIGNvbnN0cmFpbnQgaW4geW91ciBFUkREQVAgcXVlcnk6XG4gZmxhZz1+XCJaWlouLi4uLi4uLlouKlwiXG5pbiB5b3VyIHF1ZXJ5LlxuJz1+JyBpbmRpY2F0ZXMgdGhpcyBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBjb25zdHJhaW50LlxuVGhlICdaJ3MgYXJlIGxpdGVyYWwgY2hhcmFjdGVycy4gIEluIHRoaXMgZGF0YXNldCwgJ1onIGluZGljYXRlcyAnZ29vZCcgZGF0YS5cblRoZSAnLidzIHNheSB0byBtYXRjaCBhbnkgY2hhcmFjdGVyLlxuVGhlICcqJyBzYXlzIHRvIG1hdGNoIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIgMCBvciBtb3JlIHRpbWVzLlxuKERvbid0IGluY2x1ZGUgYmFja3NsYXNoZXMgaW4geW91ciBxdWVyeS4pXG5TZWUgdGhlIHR1dG9yaWFsIGZvciByZWd1bGFyIGV4cHJlc3Npb25zIGF0XG5odHRwOi8vd3d3LnZvZ2VsbGEuY29tL3R1dG9yaWFscy9KYXZhUmVndWxhckV4cHJlc3Npb25zL2FydGljbGUuaHRtbFxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZV9pZFxuZXhwb2NvZGVcbmZhY2lsaXR5XG5JRFxuSU1PXG5wbGF0Zm9ybVxucGxhdGZvcm1fdmVyc2lvblxuc2l0ZVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG4uLi4gKDE3IG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2ZzdVJlc2VhcmNoU2hpcEtURFFucnRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2ZzdVJlc2VhcmNoU2hpcEtURFFucnRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZnN1UmVzZWFyY2hTaGlwS1REUW5ydC9pbmRleC5qc29uIiwgImh0dHBzOi8vc2Ftb3MuY29hcHMuZnN1LmVkdS9odG1sLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9mc3VSZXNlYXJjaFNoaXBLVERRbnJ0LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1mc3VSZXNlYXJjaFNoaXBLVERRbnJ0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkZTVSIsICJmc3VSZXNlYXJjaFNoaXBLVERRbnJ0Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdVJlc2VhcmNoU2hpcFpNRlJucnQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdVJlc2VhcmNoU2hpcFpNRlJucnQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1UmVzZWFyY2hTaGlwWk1GUm5ydC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJSZXNlYXJjaCBTaGlwIFRhbmdhcm9hIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEsIFF1YWxpdHkgQ29udHJvbGxlZCIsICJSZXNlYXJjaCBTaGlwIFRhbmdhcm9hIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEgKGRlbGF5ZWQgfjEwIGRheXMgZm9yIHF1YWxpdHkgY29udHJvbCkgYXJlIGZyb20gdGhlIFNoaXBib2FyZCBBdXRvbWF0ZWQgTWV0ZW9yb2xvZ2ljYWwgYW5kIE9jZWFub2dyYXBoaWMgU3lzdGVtIChTQU1PUykgcHJvZ3JhbS5cblxuSU1QT1JUQU5UOiBBTFdBWVMgVVNFIFRIRSBRVUFMSVRZIEZMQUcgREFUQSEgRWFjaCBkYXRhIHZhcmlhYmxlJ3MgbWV0YWRhdGEgaW5jbHVkZXMgYSBxY2luZGV4IGF0dHJpYnV0ZSB3aGljaCBpbmRpY2F0ZXMgYSBjaGFyYWN0ZXIgbnVtYmVyIGluIHRoZSBmbGFnIGRhdGEuICBBTFdBWVMgY2hlY2sgdGhlIGZsYWcgZGF0YSBmb3IgZWFjaCByb3cgb2YgZGF0YSB0byBzZWUgd2hpY2ggZGF0YSBpcyBnb29kIChmbGFnPSdaJykgYW5kIHdoaWNoIGRhdGEgaXNuJ3QuICBGb3IgZXhhbXBsZSwgdG8gZXh0cmFjdCBqdXN0IGRhdGEgd2hlcmUgdGltZSAocWNpbmRleD0xKSwgbGF0aXR1ZGUgKHFjaW5kZXg9MiksIGxvbmdpdHVkZSAocWNpbmRleD0zKSwgYW5kIGFpclRlbXBlcmF0dXJlIChxY2luZGV4PTEyKSBhcmUgJ2dvb2QnIGRhdGEsIGluY2x1ZGUgdGhpcyBjb25zdHJhaW50IGluIHlvdXIgRVJEREFQIHF1ZXJ5OlxuIGZsYWc9flwiWlpaLi4uLi4uLi5aLipcIlxuaW4geW91ciBxdWVyeS5cbic9ficgaW5kaWNhdGVzIHRoaXMgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24gY29uc3RyYWludC5cblRoZSAnWidzIGFyZSBsaXRlcmFsIGNoYXJhY3RlcnMuICBJbiB0aGlzIGRhdGFzZXQsICdaJyBpbmRpY2F0ZXMgJ2dvb2QnIGRhdGEuXG5UaGUgJy4ncyBzYXkgdG8gbWF0Y2ggYW55IGNoYXJhY3Rlci5cblRoZSAnKicgc2F5cyB0byBtYXRjaCB0aGUgcHJldmlvdXMgY2hhcmFjdGVyIDAgb3IgbW9yZSB0aW1lcy5cbihEb24ndCBpbmNsdWRlIGJhY2tzbGFzaGVzIGluIHlvdXIgcXVlcnkuKVxuU2VlIHRoZSB0dXRvcmlhbCBmb3IgcmVndWxhciBleHByZXNzaW9ucyBhdFxuaHR0cDovL3d3dy52b2dlbGxhLmNvbS90dXRvcmlhbHMvSmF2YVJlZ3VsYXJFeHByZXNzaW9ucy9hcnRpY2xlLmh0bWxcblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2VfaWRcbmV4cG9jb2RlXG5mYWNpbGl0eVxuSURcbklNT1xucGxhdGZvcm1cbnBsYXRmb3JtX3ZlcnNpb25cbnNpdGVcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuLi4uICgxNyBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9mc3VSZXNlYXJjaFNoaXBaTUZSbnJ0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9mc3VSZXNlYXJjaFNoaXBaTUZSbnJ0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2ZzdVJlc2VhcmNoU2hpcFpNRlJucnQvaW5kZXguanNvbiIsICJodHRwczovL3NhbW9zLmNvYXBzLmZzdS5lZHUvaHRtbC8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZnN1UmVzZWFyY2hTaGlwWk1GUm5ydC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZnN1UmVzZWFyY2hTaGlwWk1GUm5ydCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJGU1UiLCAiZnN1UmVzZWFyY2hTaGlwWk1GUm5ydCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9GRURfUm9ja2Zpc2hfQ2F0Y2guc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL0ZFRF9Sb2NrZmlzaF9DYXRjaCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9GRURfUm9ja2Zpc2hfQ2F0Y2guZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiUm9ja2Zpc2ggUmVjcnVpdG1lbnQgYW5kIEVjb3N5c3RlbSBBc3Nlc3NtZW50IFN1cnZleSwgQ2F0Y2ggRGF0YSIsICJUaGUgRmlzaGVyaWVzIEVjb2xvZ3kgRGl2aXNpb24gKEZFRCwgaHR0cHM6Ly9zd2ZzYy5ub2FhLmdvdi9Hcm91bmRmaXNoQW5hbHlzaXMvKSBvZiB0aGUgU291dGh3ZXN0IEZpc2hlcmllcyBTY2llbmNlIENlbnRlciAoU1dGU0MpIGhhcyBjb25kdWN0ZWQgYSBtaWR3YXRlciB0cmF3bCBzdXJ2ZXkgb2ZmIGNlbnRyYWwgQ2FsaWZvcm5pYSBzaW5jZSAxOTgzIHdpdGggdGhlIHByaW1hcnkgZ29hbCBvZiBkZXZlbG9waW5nIHByZS1yZWNydWl0IGluZGljZXMgZm9yIHlvdW5nLW9mLXRoZS15ZWFyIChZT1kpIHJvY2tmaXNoIChTZWJhc3RlcyBzcHAuKS4gVGhlIHN1cnZleSBhbHNvIHNhbXBsZXMgbnVtZXJvdXMgb3RoZXIgY29tcG9uZW50cyBvZiB0aGUgZXBpcGVsYWdpYyBtaWNyb25la3RvbiwgaW5jbHVkaW5nIG90aGVyIFlPWSBncm91bmRmaXNoIChzdWNoIGFzIFBhY2lmaWMgaGFrZSwgTWVybHVjY2l1cyBwcm9kdWN0dXMsIGFuZCBzYW5kZGFiLCBDaXRoYXJpY2h0aHlzIHNwcCApLCBjb2FzdGFsIHBlbGFnaWMgZmlzaGVzIChzdWNoIGFzIFBhY2lmaWMgc2FyZGluZSwgU2FyZGlub3BzIHNhZ2F4LCBhbmQgbm9ydGhlcm4gYW5jaG92eSwgRW5ncmF1bGlzIG1vcmRheCkgYW5kIG90aGVyIGZvcmFnZSBzcGVjaWVzLiAgQWRkaXRpb25hbCBkZXRhaWxzIHJlZ2FyZGluZyB0aGUgc3VydmV5IG1ldGhvZHMgYW5kIHJlc3VsdHMgYXJlIGRlc2NyaWJlZCBpbiBSYWxzdG9uIGV0IGFsLiAoMjAxNSkgYW5kIFNha3VtYSBldCBhbC4gKGh0dHA6Ly9jYWxjb2ZpLm9yZy9wdWJsaWNhdGlvbnMvY2FsY29maXJlcG9ydHMvdjU3L1ZvbDU3LVNha3VtYV9wYWdlcy4xNjMtMTgzLnBkZikuIFJhbHN0b24sIFMuLCBKLkMuIEZpZWxkIGFuZCBLLlMuIFNha3VtYS4gMjAxNS4gTG9uZ3Rlcm0gdmFyaWF0aW9uIGluIGEgY2VudHJhbCBDYWxpZm9ybmlhIHBlbGFnaWMgZm9yYWdlIGFzc2VtYmxhZ2UuIEpvdXJuYWwgb2YgTWFyaW5lIFN5c3RlbXMgMTQ2OiAyNi0zNy4gaHR0cHM6Ly9keC5kb2kub3JnLzEwLjEwMTYvai5qbWFyc3lzLjIwMTQuMDYuMDEzLiBTYWt1bWEsIEsuTS4sIEouQy4gRmllbGQsIEIuQi4gTWFyaW5vdmljLCBDLk4uIENhcnJpb24sIE4uSi4gTWFudHVhIGFuZCBTLiBSYWxzdG9uLiBJbiByZXZpc2lvbi4gQW5vbWFsb3VzIGVwaXBlbGFnaWMgbWljcm9uZWt0b24gYXNzZW1ibGFnZSBwYXR0ZXJucyBpbiB0aGUgbmVyaXRpYyB3YXRlcnMgb2YgdGhlIENhbGlmb3JuaWEgQ3VycmVudCBpbiBzcHJpbmcgMjAxNSBkdXJpbmcgYSBwZXJpb2Qgb2YgZXh0cmVtZSBvY2VhbiBjb25kaXRpb25zLiBDYWxDT0ZJIFJlcG9ydHMuXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxudGltZSAoTmV0LWluIHRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoTmV0LWluIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChOZXQtaW4gTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5jcnVpc2VcbmhhdWxfbm8gKEhhdWwgTnVtYmVyKVxudmVzc2VsXG5zdGF0aW9uIChTdGF0aW9uIE51bWJlcilcbmNhdGNoXG5zcGVjaWVzX2NvZGVcbmNvbW1vbl9uYW1lXG5zY2lfbmFtZSAoU2NpZW50aWZpYyBuYW1lKVxuc3BlY2llc19ncm91cFxubWF0dXJpdHlcbnNwZWNpZXNfbm90ZXNcbi4uLiAoMTQgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvRkVEX1JvY2tmaXNoX0NhdGNoX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9GRURfUm9ja2Zpc2hfQ2F0Y2hfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vRkVEX1JvY2tmaXNoX0NhdGNoL2luZGV4Lmpzb24iLCAiaHR0cDovL2NhbGNvZmkub3JnL3B1YmxpY2F0aW9ucy9jYWxjb2ZpcmVwb3J0cy92NTcvVm9sNTctU2FrdW1hX3BhZ2VzLjE2My0xODMucGRmIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL0ZFRF9Sb2NrZmlzaF9DYXRjaC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9RkVEX1JvY2tmaXNoX0NhdGNoJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgTk1GUyBTV0ZTQyBGRUQiLCAiRkVEX1JvY2tmaXNoX0NhdGNoIl0sCiAgICAgIFsiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ydGNjdGRDTUF5c2kiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcnRjY3RkQ01BeXNpLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlJUQyBDYXJxaW5leiBZU0kgQXJjaGl2ZWQgZGF0YSIsICJBcmNoaXZlZCBDTUEgZGF0YSAtIHVuZWRpdGVkIHZhcmlhYmxlIG5hbWVzXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxudGVtcGVyYXR1cmUgKFdhdGVyIFRlbXBlcmF0dXJlLCBkZWdyZWVzIEMpXG5zcGNvbmQgKHVTL2NtKVxuY29uZCAodVMvY20pXG5yZXNpc3QgKE9obSpjbSlcblREUyAoZy9MKVxuc2FsaW5pdHkgKHBwdClcbnByZXNzdXJlIChwc2lyKVxuZGVwdGggKG0pXG5waFxucGhtdiAocEgsIG1WKVxuY2hsICh1Zy9MKVxuY2hscmZ1IChjaGwsIFJGVSlcbnR1cmJpZCAoVHVyYmlkKywgTlRVKVxub2Rvc2F0ICglKVxub2RvIChtZy9MKVxuYmF0dCAoYmF0dGVyeSwgdm9sdHMpXG5zdGF0aW9uX2lkXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3J0Y2N0ZENNQXlzaV9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcnRjY3RkQ01BeXNpX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3J0Y2N0ZENNQXlzaS9pbmRleC5qc29uIiwgImh0dHBzOi8vc2ZiZWFtcy5zZnN1LmVkdS8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcnRjY3RkQ01BeXNpLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1ydGNjdGRDTUF5c2kmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiUlRDIiwgInJ0Y2N0ZENNQXlzaSJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcnRjY3RkQ01BeXNpcnQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcnRjY3RkQ01BeXNpcnQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiUlRDIENhcnFpbmV6IFlTSSBSYXcgZGF0YSIsICJUZXN0IG9mIGluc3RhbGxpbmcgRVJEREFQIG9uIHRvcCBvZiBZU0kgb3V0cHV0LlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnRlbXBlcmF0dXJlIChXYXRlciBUZW1wZXJhdHVyZSwgZGVncmVlcyBDKVxuc3Bjb25kICh1Uy9jbSlcbmNvbmQgKHVTL2NtKVxucmVzaXN0IChPaG0qY20pXG5URFMgKGcvTClcbnNhbGluaXR5IChwcHQpXG5wcmVzc3VyZSAocHNpcilcbmRlcHRoIChtKVxucGhcbnBobXYgKHBILCBtVilcbmNobCAodWcvTClcbmNobHJmdSAoY2hsLCBSRlUpXG50dXJiaWQgKFR1cmJpZCssIE5UVSlcbm9kb3NhdCAoJSlcbm9kbyAobWcvTClcbmJhdHQgKGJhdHRlcnksIHZvbHRzKVxuc3RhdGlvbl9pZFxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9ydGNjdGRDTUF5c2lydF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcnRjY3RkQ01BeXNpcnRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcnRjY3RkQ01BeXNpcnQvaW5kZXguanNvbiIsICJodHRwczovL3NmYmVhbXMuc2ZzdS5lZHUvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3J0Y2N0ZENNQXlzaXJ0LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1ydGNjdGRDTUF5c2lydCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJSVEMiLCAicnRjY3RkQ01BeXNpcnQiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3J0Y21ldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ydGNtZXQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiUlRDIE1ldFN0YXRpb24gQXJjaGl2ZWQgZGF0YSIsICJBcmNoaXZlZCBSVEMgTWV0IGRhdGEgLSB1bmVkaXRlZCB2YXJpYWJsZSBuYW1lc1xuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbkFpclRfQVZHIChBaXIgVGVtcGVyYXR1cmUsIGRlZ3JlZXMgQylcblJIIChSZWxhdGl2ZSBIdW1pZGl0eSwgJSlcbkJQX0FWRyAoQmFyb21ldHJpYyBQcmVzc3VyZSwgbWJhcilcblNscldfQVZHICh3YXR0cyBzLTFtLTIpXG5QQVJfRGVuX0FWRyAoXHUwMGMyXHUwMGI1bW9sIHMtMW0tMilcblJhaW5fVE9UIChtbSlcbldTX1NfV1ZUIChtL3MpXG5XU19VX1dWVCAobS9zKVxuV2luZERpcl9EVV9XVlQgKGRlZylcbldpbmREaXJfU0RVX1dWVCAoZGVnKVxuV1NfTUFYIChtL3MpXG5QQVJfRGVuXzJfQVZHIChcdTAwYzJcdTAwYjVtb2wgcy0xbS0yKVxuc3RhdGlvbl9pZFxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9ydGNtZXRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3J0Y21ldF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9ydGNtZXQvaW5kZXguanNvbiIsICJodHRwczovL3NmYmVhbXMuc2ZzdS5lZHUvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3J0Y21ldC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cnRjbWV0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIlJUQyIsICJydGNtZXQiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3J0Y21ldHJ0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3J0Y21ldHJ0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlJUQyBNZXRTdGF0aW9uIHJlYWwgdGltZSBkYXRhIiwgIlJlYWwgVGltZSBSVEMgTWV0IGRhdGEgLSB1bmVkaXRlZCB2YXJpYWJsZSBuYW1lc1xuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbkFpclRfQVZHIChBaXIgVGVtcGVyYXR1cmUsIGRlZ3JlZXMgQylcblJIIChSZWxhdGl2ZSBIdW1pZGl0eSwgJSlcbkJQX0FWRyAoQmFyb21ldHJpYyBQcmVzc3VyZSwgbWJhcilcblNscldfQVZHICh3YXR0cyBzLTFtLTIpXG5QQVJfRGVuX0FWRyAoXHUwMGI1bW9sIHMtMW0tMilcblJhaW5fVE9UIChtbSlcbldTX1NfV1ZUIChtL3MpXG5XU19VX1dWVCAobS9zKVxuV2luZERpcl9EVV9XVlQgKGRlZylcbldpbmREaXJfU0RVX1dWVCAoZGVnKVxuV1NfTUFYIChtL3MpXG5zdGF0aW9uX2lkXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3J0Y21ldHJ0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9ydGNtZXRydF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9ydGNtZXRydC9pbmRleC5qc29uIiwgImh0dHBzOi8vc2ZiZWFtcy5zZnN1LmVkdS8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcnRjbWV0cnQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXJ0Y21ldHJ0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIlJUQyIsICJydGNtZXRydCJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcnRjY3RkU2VhYmlyZCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ydGNjdGRTZWFiaXJkLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlJUQyBTZWFiaXJkIEFyY2hpdmVkIGRhdGEiLCAiQXJjaGl2ZWQgUlRDIFNlYWJpcmQgZGF0YSAtIHVuZWRpdGVkIHZhcmlhYmxlIG5hbWVzXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxudGVtcGVyYXR1cmUgKFdhdGVyIFRlbXBlcmF0dXJlLCBkZWdyZWVzIEMpXG5jb25kICh1Uy9jbSlcbnByZXNzdXJlIChwc2lyKVxuc2t1ZmExIChWKVxuc2t1ZmEyIChWKVxueG1pcyAoJSlcbnBhciAobWljcm9Nb2wqbS0yKnMtMSlcbnNhbGluaXR5IChwc3MpXG5zaWdtYSAoa2cvbTMpXG5pbnN0X1NOIChJbnN0cnVtZW50IFNlcmlhbCBOdW1iZXIpXG5zdGF0aW9uX2lkXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3J0Y2N0ZFNlYWJpcmRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3J0Y2N0ZFNlYWJpcmRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcnRjY3RkU2VhYmlyZC9pbmRleC5qc29uIiwgImh0dHBzOi8vc2ZiZWFtcy5zZnN1LmVkdS8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcnRjY3RkU2VhYmlyZC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cnRjY3RkU2VhYmlyZCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJSVEMiLCAicnRjY3RkU2VhYmlyZCJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcnRjY3RkUlRDeXNpIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3J0Y2N0ZFJUQ3lzaS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJSVEMgWVNJIEFyY2hpdmVkIGRhdGEiLCAiQXJjaGl2ZWQgUlRDIGRhdGEgLSB1bmVkaXRlZCB2YXJpYWJsZSBuYW1lc1xuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnRlbXBlcmF0dXJlIChXYXRlciBUZW1wZXJhdHVyZSwgZGVncmVlcyBDKVxuc3Bjb25kICh1Uy9jbSlcbmNvbmQgKHVTL2NtKVxucmVzaXN0IChPaG0qY20pXG5URFMgKGcvTClcbnNhbGluaXR5IChwcHQpXG5wcmVzc3VyZSAocHNpcilcbmRlcHRoIChtKVxucGhcbnBobXYgKHBILCBtVilcbmNobCAodWcvTClcbmNobHJmdSAoY2hsLCBSRlUpXG50dXJiaWQgKFR1cmJpZCssIE5UVSlcbm9kb3NhdCAoJSlcbm9kbyAobWcvTClcbmJhdHQgKGJhdHRlcnksIHZvbHRzKVxuc3RhdGlvbl9pZFxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9ydGNjdGRSVEN5c2lfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3J0Y2N0ZFJUQ3lzaV9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9ydGNjdGRSVEN5c2kvaW5kZXguanNvbiIsICJodHRwczovL3NmYmVhbXMuc2ZzdS5lZHUvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3J0Y2N0ZFJUQ3lzaS5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cnRjY3RkUlRDeXNpJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIlJUQyIsICJydGNjdGRSVEN5c2kiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3J0Y2N0ZFJUQ3lzaXJ0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3J0Y2N0ZFJUQ3lzaXJ0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlJUQyBZU0kgUmF3IGRhdGEiLCAiVGVzdCBvZiBpbnN0YWxsaW5nIEVSRERBUCBvbiB0b3Agb2YgWVNJIG91dHB1dC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG50ZW1wZXJhdHVyZSAoV2F0ZXIgVGVtcGVyYXR1cmUsIGRlZ3JlZXMgQylcbnNwY29uZCAodVMvY20pXG5jb25kICh1Uy9jbSlcbnJlc2lzdCAoT2htKmNtKVxuVERTIChnL0wpXG5zYWxpbml0eSAocHB0KVxucHJlc3N1cmUgKHBzaXIpXG5kZXB0aCAobSlcbnBoXG5waG12IChwSCwgbVYpXG5jaGwgKHVnL0wpXG5jaGxyZnUgKGNobCwgUkZVKVxudHVyYmlkIChUdXJiaWQrLCBOVFUpXG5vZG9zYXQgKCUpXG5vZG8gKG1nL0wpXG5iYXR0IChiYXR0ZXJ5LCB2b2x0cylcbnN0YXRpb25faWRcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcnRjY3RkUlRDeXNpcnRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3J0Y2N0ZFJUQ3lzaXJ0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3J0Y2N0ZFJUQ3lzaXJ0L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zZmJlYW1zLnNmc3UuZWR1LyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9ydGNjdGRSVEN5c2lydC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cnRjY3RkUlRDeXNpcnQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiUlRDIiwgInJ0Y2N0ZFJUQ3lzaXJ0Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2dvbW9vc0J1b3kuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2dvbW9vc0J1b3kiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZ29tb29zQnVveS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJTZW5zb3IgRGF0YSBmcm9tIHRoZSBHb01PT1MgU09TIFNlcnZlciwgMjAwMC1wcmVzZW50IiwgIlRoZSBPQ0VBTlMgSUUgLS0gZm9ybWFsbHkgYXBwcm92ZWQgYXMgYW4gT0dDIEludGVyb3BlcmFiaWxpdHlcbkV4cGVyaW1lbnQgaW4gRGVjZW1iZXIgMjAwNiAtLSBlbmdhZ2VzIGRhdGEgbWFuYWdlcnMgYW5kIHNjaWVudGlzdHNcbmluIHRoZSBPY2Vhbi1PYnNlcnZpbmcgY29tbXVuaXR5IHRvIGFkdmFuY2UgdGhlaXIgdW5kZXJzdGFuZGluZyBhbmRcbmFwcGxpY2F0aW9uIG9mIHZhcmlvdXMgT0dDIHNwZWNpZmljYXRpb25zLCBzb2xpZGlmeSBkZW1vbnN0cmF0aW9uc1xuZm9yIE9jZWFuIFNjaWVuY2UgYXBwbGljYXRpb24gYXJlYXMsIGhhcmRlbiBzb2Z0d2FyZVxuaW1wbGVtZW50YXRpb25zLCBhbmQgcHJvZHVjZSBjYW5kaWRhdGUgT0dDIEJlc3QgUHJhY3RpY2VzIGRvY3VtZW50c1xudGhhdCBjYW4gYmUgdXNlZCB0byBpbmZvcm0gdGhlIGJyb2FkZXIgb2NlYW4tb2JzZXJ2aW5nIGNvbW11bml0eS5cblxuQmVjYXVzZSBvZiB0aGUgbmF0dXJlIG9mIFNPUyByZXF1ZXN0cywgcmVxdWVzdHMgZm9yIGRhdGEgTVVTVFxuaW5jbHVkZSBjb25zdHJhaW50cyBmb3IgdGhlIGxvbmdpdHVkZSwgbGF0aXR1ZGUsIHRpbWUsIGFuZC9vclxuc3RhdGlvbl9pZCB2YXJpYWJsZXMuXG5cbkluaXRpYXRvcnM6IFNVUkEgKGxlYWQpLCBUZXhhcyBBJk0gVW5pdmVyc2l0eSwgTUJBUkksIEdvTU9PUyBhbmRcblVuaWRhdGEuXG5cblNwZWNpZmljIGdvYWxzOlxuKiBDb21wYXJlIFNlbnNvciBPYnNlcnZhdGlvbiBTZXJ2aWNlIChTT1MpIGZyb20gdGhlIE9HQydzIFNlbnNvclxuICBXZWIgRW5hYmxlbWVudCAoU1dFKSBpbml0aWF0aXZlIHRvIHRoZSBXZWIgRmVhdHVyZSBTZXJ2aWNlIChXRlMpXG4gIGFzIGFwcGxpZWQgdG8gb2NlYW4gZGF0YSBpbiBhIHZhcmlldHkgb2YgZGF0YSBmb3JtYXRzIGluY2x1ZGluZ1xuICB0ZXh0IGZpbGVzLCBuZXRDREYgZmlsZXMsIHJlbGF0aW9uYWwgZGF0YWJhc2VzLCBhbmQgcG9zc2libHlcbiAgbmF0aXZlIHNlbnNvciBvdXRwdXQ7IChzZWUgRXhwZXJpbWVudCAjMSBmb3IgZGV0YWlscylcbiogTWFrZSB1c2Ugb2Ygc2VtYW50aWMgbWVkaWF0aW9uIHZpYSBTZW1hbnRpYyBXZWIgdGVjaG5vbG9naWVzIHRvXG4gIGFsbG93IHBsdXJhbGl0eSBvZiBpZGVudGlmaWNhdGlvbiBmb3Igc291cmNlIHR5cGVzIChwbGF0Zm9ybXNcbiAgYW5kIHNlbnNvcnMpIGFuZCBwaGVub21lbmEgdHlwZXM7XG4qIFRlc3QgYWdncmVnYXRpb24gc2VydmljZXMgYW5kIGNhY2hpbmcgc3RyYXRlZ2llcyB0byBwcm92aWRlXG4gIGVmZmljaWVudCBxdWVyaWVzO1xuKiBFeHBsb3JlIHBvc3NpYmxlIGVuaGFuY2VtZW50cyBvZiBUSFJFRERTIHNlcnZlciwgc28gdGhhdCBUSFJFRERTXG4gIHJlc2lkZW50IGRhdGEgc291cmNlcyBtaWdodCBiZSBtYWRlIGF2YWlsYWJsZSB2aWEgU09TIG9yIFdGUztcblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuLi4uICgxOSBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9nb21vb3NCdW95X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9nb21vb3NCdW95X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2dvbW9vc0J1b3kvaW5kZXguanNvbiIsICJodHRwOi8vd3d3Lm9nY25ldHdvcmsubmV0L25vZGUvMzQ0IiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2dvbW9vc0J1b3kucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWdvbW9vc0J1b3kmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiR29NT09TIiwgImdvbW9vc0J1b3kiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbmVyYWNvb3NTb3Muc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25lcmFjb29zU29zIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25lcmFjb29zU29zLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlNlbnNvciBEYXRhIGZyb20gdGhlIE5FUkFDT09TIFNPUyBTZXJ2ZXIsIDIwMDAtcHJlc2VudCIsICJOb3J0aGVhc3Rlcm4gUmVnaW9uYWwgQXNzb2NpYXRpb24gb2YgQ29hc3RhbCBPY2VhblxuICAgICAgICBPYnNlcnZpbmcgU3lzdGVtcyAoTkVSQUNPT1MpIFNlbnNvciBPYnNlcnZhdGlvbiBTZXJ2aWNlIChTT1MpXG4gICAgICAgIFRoZSBPQ0VBTlMgSUUgLS0gZm9ybWFsbHkgYXBwcm92ZWQgYXMgYW4gT0dDIEludGVyb3BlcmFiaWxpdHlcbkV4cGVyaW1lbnQgaW4gRGVjZW1iZXIgMjAwNiAtLSBlbmdhZ2VzIGRhdGEgbWFuYWdlcnMgYW5kIHNjaWVudGlzdHNcbmluIHRoZSBPY2Vhbi1PYnNlcnZpbmcgY29tbXVuaXR5IHRvIGFkdmFuY2UgdGhlaXIgdW5kZXJzdGFuZGluZyBhbmRcbmFwcGxpY2F0aW9uIG9mIHZhcmlvdXMgT0dDIHNwZWNpZmljYXRpb25zLCBzb2xpZGlmeSBkZW1vbnN0cmF0aW9uc1xuZm9yIE9jZWFuIFNjaWVuY2UgYXBwbGljYXRpb24gYXJlYXMsIGhhcmRlbiBzb2Z0d2FyZVxuaW1wbGVtZW50YXRpb25zLCBhbmQgcHJvZHVjZSBjYW5kaWRhdGUgT0dDIEJlc3QgUHJhY3RpY2VzIGRvY3VtZW50c1xudGhhdCBjYW4gYmUgdXNlZCB0byBpbmZvcm0gdGhlIGJyb2FkZXIgb2NlYW4tb2JzZXJ2aW5nIGNvbW11bml0eS5cblxuQmVjYXVzZSBvZiB0aGUgbmF0dXJlIG9mIFNPUyByZXF1ZXN0cywgcmVxdWVzdHMgZm9yIGRhdGEgTVVTVFxuaW5jbHVkZSBjb25zdHJhaW50cyBmb3IgdGhlIGxvbmdpdHVkZSwgbGF0aXR1ZGUsIHRpbWUsIGFuZC9vclxuc3RhdGlvbl9pZCB2YXJpYWJsZXMuXG5cbkluaXRpYXRvcnM6IFNVUkEgKGxlYWQpLCBUZXhhcyBBJk0gVW5pdmVyc2l0eSwgTUJBUkksIEdvTU9PUyBhbmRcblVuaWRhdGEuXG5cblNwZWNpZmljIGdvYWxzOlxuKiBDb21wYXJlIFNlbnNvciBPYnNlcnZhdGlvbiBTZXJ2aWNlIChTT1MpIGZyb20gdGhlIE9HQydzIFNlbnNvclxuICBXZWIgRW5hYmxlbWVudCAoU1dFKSBpbml0aWF0aXZlIHRvIHRoZSBXZWIgRmVhdHVyZSBTZXJ2aWNlIChXRlMpXG4gIGFzIGFwcGxpZWQgdG8gb2NlYW4gZGF0YSBpbiBhIHZhcmlldHkgb2YgZGF0YSBmb3JtYXRzIGluY2x1ZGluZ1xuICB0ZXh0IGZpbGVzLCBuZXRDREYgZmlsZXMsIHJlbGF0aW9uYWwgZGF0YWJhc2VzLCBhbmQgcG9zc2libHlcbiAgbmF0aXZlIHNlbnNvciBvdXRwdXQ7IChzZWUgRXhwZXJpbWVudCAjMSBmb3IgZGV0YWlscylcbiogTWFrZSB1c2Ugb2Ygc2VtYW50aWMgbWVkaWF0aW9uIHZpYSBTZW1hbnRpYyBXZWIgdGVjaG5vbG9naWVzIHRvXG4gIGFsbG93IHBsdXJhbGl0eSBvZiBpZGVudGlmaWNhdGlvbiBmb3Igc291cmNlIHR5cGVzIChwbGF0Zm9ybXNcbiAgYW5kIHNlbnNvcnMpIGFuZCBwaGVub21lbmEgdHlwZXM7XG4qIFRlc3QgYWdncmVnYXRpb24gc2VydmljZXMgYW5kIGNhY2hpbmcgc3RyYXRlZ2llcyB0byBwcm92aWRlXG4gIGVmZmljaWVudCBxdWVyaWVzO1xuKiBFeHBsb3JlIHBvc3NpYmxlIGVuaGFuY2VtZW50cyBvZiBUSFJFRERTIHNlcnZlciwgc28gdGhhdCBUSFJFRERTXG4gIHJlc2lkZW50IGRhdGEgc291cmNlcyBtaWdodCBiZSBtYWRlIGF2YWlsYWJsZSB2aWEgU09TIG9yIFdGUztcblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuLi4uICgxOSBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9uZXJhY29vc1Nvc19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvbmVyYWNvb3NTb3NfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vbmVyYWNvb3NTb3MvaW5kZXguanNvbiIsICJodHRwOi8vd3d3Lm5lcmFjb29zLm9yZy8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvbmVyYWNvb3NTb3MucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPW5lcmFjb29zU29zJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5FUkFDT09TIiwgIm5lcmFjb29zU29zIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZEZlZFJvY2tmaXNoQ3RkLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRGZWRSb2NrZmlzaEN0ZCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRGZWRSb2NrZmlzaEN0ZC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJTV0ZTQyBGRUQgTWlkIFdhdGVyIFRyYXdsIEp1dmVuaWxlIFJvY2tmaXNoIFN1cnZleSwgQ1REIERhdGEsIDE5ODctMjAxNSIsICJTV0ZTQyBGRUQgTWlkIFdhdGVyIFRyYXdsIEp1dmVuaWxlIFJvY2tmaXNoIFN1cnZleTogQ1REIERhdGEuXG5TdXJ2ZXlzIGhhdmUgYmVlbiBjb25kdWN0ZWQgYWxvbmcgdGhlIGNlbnRyYWwgQ2FsaWZvcm5pYSBjb2FzdCBpbiBNYXkvSnVuZSBcbmV2ZXJ5IHllYXIgc2luY2UgMTk4My4gSW4gMjAwNCB0aGUgc3VydmV5IGFyZWEgd2FzIGV4cGFuZGVkIHRvIGNvdmVyIHRoZSBcbmVudGlyZSBjb2FzdCBmcm9tIFNhbiBEaWVnbyB0byBDYXBlIE1lbmRvY2luby4gIFRoZSBzdXJ2ZXkgc2FtcGxlcyBhIHNlcmllcyBcbm9mIGZpeGVkIHRyYXdsIHN0YXRpb25zIHVzaW5nIGEgbWlkd2F0ZXIgdHJhd2wuIFRoZSBtaWR3YXRlciB0cmF3bCBzdXJ2ZXkgXG5nZWFyIGNhcHR1cmVzIHNpZ25pZmljYW50IG51bWJlcnMgb2YgYXBwcm94aW1hdGVseSAxMCByb2NrZmlzaCBzcGVjaWVzIGR1cmluZ1xudGhlaXIgcGVsYWdpYyBqdXZlbmlsZSBzdGFnZSAoaS5lLiwgNTAtMTUwIGRheXMgb2xkKSwgYnkgd2hpY2ggdGltZSBhbm51YWxcbnJlcHJvZHVjdGl2ZSBzdWNjZXNzIGhhcyBiZWVuIGVzdGFibGlzaGVkLiBDYXRjaC1wZXItdW5pdC1lZmZvcnQgZGF0YSBmcm9tXG50aGUgc3VydmV5IGFyZSBhbmFseXplZCBhbmQgc2VydmUgYXMgdGhlIGJhc2lzIGZvciBwcmVkaWN0aW5nIGZ1dHVyZSBcbnJlY3J1aXRtZW50IHRvIHJvY2tmaXNoIGZpc2hlcmllcy4gUmVzdWx0cyBmb3Igc2V2ZXJhbCBzcGVjaWVzIChlLmcuLCBcbmJvY2FjY2lvLCBjaGlsaXBlcHBlciBbUy4gZ29vZGVpXSwgYW5kIHdpZG93IHJvY2tmaXNoIFtTLiBlbnRvbWVsYXNdKSBoYXZlXG5zaG93biB0aGF0IHRoZSBzdXJ2ZXkgZGF0YSBjYW4gYmUgdXNlZnVsIGluIHByZWRpY3RpbmcgeWVhci1jbGFzcyBzdHJlbmd0aFxuaW4gYWdlLWJhc2VkIHN0b2NrIGFzc2Vzc21lbnRzLlxuXG5UaGUgc3VydmV5J3MgZGF0YSBvbiBZT1kgUGFjaWZpYyB3aGl0aW5nIGhhcyBhbHNvIGJlZW4gdXNlZCBpbiB0aGUgc3RvY2tcbmFzc2Vzc21lbnQgcHJvY2Vzcy4gVG8gYXNzaXN0IGluIG9idGFpbmluZyBhZGRpdGlvbmFsIG5vcnRod2FyZCBzcGF0aWFsXG5jb3ZlcmFnZSBvZiBZT1kgUGFjaWZpYyB3aGl0aW5nIG9mZiBPcmVnb24gYW5kIFdhc2hpbmd0b24sIGluIDIwMDEgdGhlXG5QYWNpZmljIFdoaXRpbmcgQ29uc2VydmF0aW9uIENvb3BlcmF0aXZlIGluIGNvb3BlcmF0aW9uIHdpdGggdGhlIE5PQUEgTk1GU1xuTm9ydGh3ZXN0IEZpc2hlcmllcyBTY2llbmNlIENlbnRlciBiZWdhbiBhIG1pZHdhdGVyIHRyYXdsIHN1cnZleSBwYXR0ZXJuZWRcbmFmdGVyIHRoZSBOT0FBIE5NRlMgU1dGU0MgRmlzaGVyaWVzIEVjb2xvZ3kgRGl2aXNpb24ncyAoRkVEKSBleGlzdGluZyBzdXJ2ZXkuIFxuQm90aCBzdXJ2ZXlzIHdvcmsgY29vcGVyYXRpdmVseSB0b2dldGhlciBlYWNoIHllYXIgaW4gb3JkZXIgdG8gcmVzb2x2ZSBcbmludGVyYW5udWFsIGFidW5kYW5jZSBwYXR0ZXJucyBvZiBZT1kgcm9ja2Zpc2ggYW5kIFBhY2lmaWMgd2hpdGluZyBvbiBhIFxuY29hc3R3aWRlIGJhc2lzLCB3aGljaCBwcm92aWRlcyBleHBlZGllbnQsIGNyaXRpY2FsIGluZm9ybWF0aW9uIHRoYXQgY2FuIGJlIFxudXNlZCBpbiB0aGUgZmlzaGVyaWVzIG1hbmFnZW1lbnQgcHJvY2Vzcy5cblxuVGhlIGxhcmdlIHF1YW50aXR5IG9mIHBoeXNpY2FsIGRhdGEgY29sbGVjdGVkIGR1cmluZyB0aGUgc3VydmV5cyAoZS5nLiwgQ1REXG53aXRoIGF0dGFjaGVkIHRyYW5zaW1pc3NvbWV0ZXIgYW5kIGZsdW9yb21ldGVyLCB0aGVybW9zYWxpbm9tZXRlciwgYW5kIEFEQ1ApXG5oYXZlIHByb3ZpZGVkIGEgYmV0dGVyIHVuZGVyc3RhbmRpbmcgb2YgdGhlIGh5ZHJvZ3JhcGhpYyBjb25kaXRpb25zIG9mZiB0aGVcbkNhbGlmb3JuaWEgY29hc3QgYW5kIGFuYWx5c2lzIG9mIHRoZXNlIGRhdGEgaGF2ZSBiZWVuIGRpc3RyaWJ1dGVkIHRocm91Z2ggdGhlXG5wdWJsaWNhdGlvbiBvZiBOT0FBIE5NRlMgVGVjaG5pY2FsIE1lbW9yYW5kYS5cblxuRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSBodHRwczovL3N3ZnNjLm5vYWEuZ292L0dyb3VuZGZpc2hBbmFseXNpcy8gYW5kXG5odHRwOi8vd3d3LnNhbmN0dWFyeXNpbW9uLm9yZy9wcm9qZWN0cy9wcm9qZWN0X2luZm8ucGhwP3Byb2plY3RJRD0xMDAxMThcblxuY2RtX2RhdGFfdHlwZSA9IFRyYWplY3RvcnlQcm9maWxlXG5WQVJJQUJMRVM6XG5jcnVpc2Vcbi4uLiAoMTcgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkRmVkUm9ja2Zpc2hDdGRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2VyZEZlZFJvY2tmaXNoQ3RkX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZEZlZFJvY2tmaXNoQ3RkL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zd2ZzYy5ub2FhLmdvdi9Hcm91bmRmaXNoQW5hbHlzaXMvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZEZlZFJvY2tmaXNoQ3RkLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmRGZWRSb2NrZmlzaEN0ZCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFNXRlNDIEZFRCIsICJlcmRGZWRSb2NrZmlzaEN0ZCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRGZWRSb2NrZmlzaFN0YXRpb24uc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZEZlZFJvY2tmaXNoU3RhdGlvbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRGZWRSb2NrZmlzaFN0YXRpb24uZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiU1dGU0MgRkVEIE1pZCBXYXRlciBUcmF3bCBKdXZlbmlsZSBSb2NrZmlzaCBTdXJ2ZXksIFN1cmZhY2UgRGF0YSwgMTk4Ny0yMDE1IiwgIlNXRlNDIEZFRCBNaWQgV2F0ZXIgVHJhd2wgSnV2ZW5pbGUgUm9ja2Zpc2ggU3VydmV5OiBTdGF0aW9uIEluZm9ybWF0aW9uIGFuZCBTdXJmYWNlIERhdGEuXG5TdXJ2ZXlzIGhhdmUgYmVlbiBjb25kdWN0ZWQgYWxvbmcgdGhlIGNlbnRyYWwgQ2FsaWZvcm5pYSBjb2FzdCBpbiBNYXkvSnVuZSBcbmV2ZXJ5IHllYXIgc2luY2UgMTk4My4gSW4gMjAwNCB0aGUgc3VydmV5IGFyZWEgd2FzIGV4cGFuZGVkIHRvIGNvdmVyIHRoZSBcbmVudGlyZSBjb2FzdCBmcm9tIFNhbiBEaWVnbyB0byBDYXBlIE1lbmRvY2luby4gIFRoZSBzdXJ2ZXkgc2FtcGxlcyBhIHNlcmllcyBcbm9mIGZpeGVkIHRyYXdsIHN0YXRpb25zIHVzaW5nIGEgbWlkd2F0ZXIgdHJhd2wuIFRoZSBtaWR3YXRlciB0cmF3bCBzdXJ2ZXkgXG5nZWFyIGNhcHR1cmVzIHNpZ25pZmljYW50IG51bWJlcnMgb2YgYXBwcm94aW1hdGVseSAxMCByb2NrZmlzaCBzcGVjaWVzIGR1cmluZ1xudGhlaXIgcGVsYWdpYyBqdXZlbmlsZSBzdGFnZSAoaS5lLiwgNTAtMTUwIGRheXMgb2xkKSwgYnkgd2hpY2ggdGltZSBhbm51YWxcbnJlcHJvZHVjdGl2ZSBzdWNjZXNzIGhhcyBiZWVuIGVzdGFibGlzaGVkLiBDYXRjaC1wZXItdW5pdC1lZmZvcnQgZGF0YSBmcm9tXG50aGUgc3VydmV5IGFyZSBhbmFseXplZCBhbmQgc2VydmUgYXMgdGhlIGJhc2lzIGZvciBwcmVkaWN0aW5nIGZ1dHVyZSBcbnJlY3J1aXRtZW50IHRvIHJvY2tmaXNoIGZpc2hlcmllcy4gUmVzdWx0cyBmb3Igc2V2ZXJhbCBzcGVjaWVzIChlLmcuLCBcbmJvY2FjY2lvLCBjaGlsaXBlcHBlciBbUy4gZ29vZGVpXSwgYW5kIHdpZG93IHJvY2tmaXNoIFtTLiBlbnRvbWVsYXNdKSBoYXZlXG5zaG93biB0aGF0IHRoZSBzdXJ2ZXkgZGF0YSBjYW4gYmUgdXNlZnVsIGluIHByZWRpY3RpbmcgeWVhci1jbGFzcyBzdHJlbmd0aFxuaW4gYWdlLWJhc2VkIHN0b2NrIGFzc2Vzc21lbnRzLlxuXG5UaGUgc3VydmV5J3MgZGF0YSBvbiBZT1kgUGFjaWZpYyB3aGl0aW5nIGhhcyBhbHNvIGJlZW4gdXNlZCBpbiB0aGUgc3RvY2tcbmFzc2Vzc21lbnQgcHJvY2Vzcy4gVG8gYXNzaXN0IGluIG9idGFpbmluZyBhZGRpdGlvbmFsIG5vcnRod2FyZCBzcGF0aWFsXG5jb3ZlcmFnZSBvZiBZT1kgUGFjaWZpYyB3aGl0aW5nIG9mZiBPcmVnb24gYW5kIFdhc2hpbmd0b24sIGluIDIwMDEgdGhlXG5QYWNpZmljIFdoaXRpbmcgQ29uc2VydmF0aW9uIENvb3BlcmF0aXZlIGluIGNvb3BlcmF0aW9uIHdpdGggdGhlIE5PQUEgTk1GU1xuTm9ydGh3ZXN0IEZpc2hlcmllcyBTY2llbmNlIENlbnRlciBiZWdhbiBhIG1pZHdhdGVyIHRyYXdsIHN1cnZleSBwYXR0ZXJuZWRcbmFmdGVyIHRoZSBOT0FBIE5NRlMgU1dGU0MgRmlzaGVyaWVzIEVjb2xvZ3kgRGl2aXNpb24ncyAoRkVEKSBleGlzdGluZyBzdXJ2ZXkuIFxuQm90aCBzdXJ2ZXlzIHdvcmsgY29vcGVyYXRpdmVseSB0b2dldGhlciBlYWNoIHllYXIgaW4gb3JkZXIgdG8gcmVzb2x2ZSBcbmludGVyYW5udWFsIGFidW5kYW5jZSBwYXR0ZXJucyBvZiBZT1kgcm9ja2Zpc2ggYW5kIFBhY2lmaWMgd2hpdGluZyBvbiBhIFxuY29hc3R3aWRlIGJhc2lzLCB3aGljaCBwcm92aWRlcyBleHBlZGllbnQsIGNyaXRpY2FsIGluZm9ybWF0aW9uIHRoYXQgY2FuIGJlIFxudXNlZCBpbiB0aGUgZmlzaGVyaWVzIG1hbmFnZW1lbnQgcHJvY2Vzcy5cblxuVGhlIGxhcmdlIHF1YW50aXR5IG9mIHBoeXNpY2FsIGRhdGEgY29sbGVjdGVkIGR1cmluZyB0aGUgc3VydmV5cyAoZS5nLiwgQ1REXG53aXRoIGF0dGFjaGVkIHRyYW5zaW1pc3NvbWV0ZXIgYW5kIGZsdW9yb21ldGVyLCB0aGVybW9zYWxpbm9tZXRlciwgYW5kIEFEQ1ApXG5oYXZlIHByb3ZpZGVkIGEgYmV0dGVyIHVuZGVyc3RhbmRpbmcgb2YgdGhlIGh5ZHJvZ3JhcGhpYyBjb25kaXRpb25zIG9mZiB0aGVcbkNhbGlmb3JuaWEgY29hc3QgYW5kIGFuYWx5c2lzIG9mIHRoZXNlIGRhdGEgaGF2ZSBiZWVuIGRpc3RyaWJ1dGVkIHRocm91Z2ggdGhlXG5wdWJsaWNhdGlvbiBvZiBOT0FBIE5NRlMgVGVjaG5pY2FsIE1lbW9yYW5kYS5cblxuRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSBodHRwczovL3N3ZnNjLm5vYWEuZ292L0dyb3VuZGZpc2hBbmFseXNpcy8gYW5kXG5odHRwOi8vd3d3LnNhbmN0dWFyeXNpbW9uLm9yZy9wcm9qZWN0cy9wcm9qZWN0X2luZm8ucGhwP3Byb2plY3RJRD0xMDAxMThcblxuY2RtX2RhdGFfdHlwZSA9IFRyYWplY3RvcnlcblZBUklBQkxFUzpcbmNydWlzZVxuLi4uICgxMSBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRGZWRSb2NrZmlzaFN0YXRpb25fZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2VyZEZlZFJvY2tmaXNoU3RhdGlvbl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRGZWRSb2NrZmlzaFN0YXRpb24vaW5kZXguanNvbiIsICJodHRwczovL3N3ZnNjLm5vYWEuZ292L0dyb3VuZGZpc2hBbmFseXNpcy8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkRmVkUm9ja2Zpc2hTdGF0aW9uLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmRGZWRSb2NrZmlzaFN0YXRpb24mc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBTV0ZTQyBGRUQiLCAiZXJkRmVkUm9ja2Zpc2hTdGF0aW9uIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZFByZEN0ZC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkUHJkQ3RkIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZFByZEN0ZC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJTV0ZTQyBQcm90ZWN0ZWQgUmVzb3VyY2VzIERpdmlzaW9uIENURCBEYXRhIiwgIkRhdGEgZnJvbSBOT0FBIFNXRlNDIFByb3RlY3RlZCBSZXNvdXJjZXMgRGl2aXNpb24gKFBSRCkuXG5cbmNkbV9kYXRhX3R5cGUgPSBUcmFqZWN0b3J5XG5WQVJJQUJMRVM6XG50cmFqZWN0b3J5XG5zaGlwX3N0YXRpb24gKFNoaXAgYW5kIFN0YXRpb24pXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmNobG9ybyAoU3VyZmFjZSBDaGxvcm9waHlsbCwgdWcgTC0xKVxucGhhZW8gKFN1cmZhY2UgUGhhZW9waHl0aW4sIHVnIEwtMSlcbnByb2R1Y3Rpdml0eSAoSW50ZWdyYXRlZCBFdXBob3RpYyBab25lIFByb2R1Y3Rpdml0eSwgbWcgQ2FyYm9uIG0tMiBkYXktMSlcbnNzdCAoU2VhIFN1cmZhY2UgVGVtcGVyYXR1cmUsIGRlZ3JlZV9DKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZFByZEN0ZF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkUHJkQ3RkX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZFByZEN0ZC9pbmRleC5qc29uIiwgImh0dHBzOi8vc3dmc2Mubm9hYS5nb3YvUFJELyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lcmRQcmRDdGQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZFByZEN0ZCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFNXRlNDIFBSRCIsICJlcmRQcmRDdGQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlJc28uc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5SXNvIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5SXNvLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIDUtRGF5LCAxOTc3LXByZXNlbnQsIDIwQyBJc290aGVybSBEZXB0aCIsICJUaGlzIGRhdGFzZXQgaGFzIDUtZGF5IDIwQyBJc290aGVybSBEZXB0aCBkYXRhICh0aGUgZGVwdGggYXQgd2hpY2ggdGhlIG9jZWFuIHRlbXBlcmF0dXJlIGlzIDIwQykgZnJvbSB0aGUgXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIDUtZGF5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBkYWlseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBjb25zZWN1dGl2ZSBmaXZlIGRheSBpbnRlcnZhbHMuICBBIG1pbmltdW0gb2YgMiBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSA1LWRheSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcbklTT182ICgyMEMgSXNvdGhlcm0gRGVwdGgsIG0pXG5RSV81MDA2ICgyMEMgRGVwdGggUXVhbGl0eSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvNWRheUlzb19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhbzVkYXlJc29faXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhbzVkYXlJc28vaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhbzVkYXlJc28ucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW81ZGF5SXNvJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW81ZGF5SXNvIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5QWlydC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlBaXJ0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5QWlydC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCA1LURheSwgMTk3Ny1wcmVzZW50LCBBaXIgVGVtcGVyYXR1cmUiLCAiVGhpcyBkYXRhc2V0IGhhcyA1LWRheSBBaXIgVGVtcGVyYXR1cmUgZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICA1LWRheSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgZGFpbHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgY29uc2VjdXRpdmUgZml2ZSBkYXkgaW50ZXJ2YWxzLiAgQSBtaW5pbXVtIG9mIDIgZGFpbHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgNS1kYXkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5BVF8yMSAoQWlyIFRlbXBlcmF0dXJlLCBkZWdyZWVfQylcblFBVF81MDIxIChBaXIgVGVtcGVyYXR1cmUgUXVhbGl0eSlcblNBVF82MDIxIChBaXIgVGVtcGVyYXR1cmUgU291cmNlKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW81ZGF5QWlydF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhbzVkYXlBaXJ0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW81ZGF5QWlydC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvNWRheUFpcnQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW81ZGF5QWlydCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvNWRheUFpcnQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlDdXIuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5Q3VyIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5Q3VyLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIDUtRGF5LCAxOTc3LXByZXNlbnQsIEN1cnJlbnRzIiwgIlRoaXMgZGF0YXNldCBoYXMgNS1kYXkgQ3VycmVudHMgZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICA1LWRheSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgZGFpbHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgY29uc2VjdXRpdmUgZml2ZSBkYXkgaW50ZXJ2YWxzLiAgQSBtaW5pbXVtIG9mIDIgZGFpbHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgNS1kYXkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5VXzMyMCAoRWFzdHdhcmQgU2VhIFdhdGVyIFZlbG9jaXR5LCBjbSBzLTEpXG5WXzMyMSAoTm9ydGh3YXJkIFNlYSBXYXRlciBWZWxvY2l0eSwgY20gcy0xKVxuQ1NfMzAwIChTZWEgV2F0ZXIgVmVsb2NpdHksIGNtIHMtMSlcbkNEXzMxMCAoRGlyZWN0aW9uIG9mIFNlYSBXYXRlciBWZWxvY2l0eSwgZGVncmVlc190cnVlKVxuUUNTXzUzMDAgKEN1cnJlbnQgU3BlZWQgUXVhbGl0eSlcblFDRF81MzEwIChDdXJyZW50IERpcmVjdGlvbiBRdWFsaXR5KVxuU0NTXzYzMDAgKEN1cnJlbnQgU3BlZWQgU291cmNlKVxuQ0lDXzczMDAgKEN1cnJlbnQgSW5zdHJ1bWVudCBDb2RlKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW81ZGF5Q3VyX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvNWRheUN1cl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvNWRheUN1ci9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvNWRheUN1ci5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhbzVkYXlDdXImc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhbzVkYXlDdXIiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlTc3Quc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5U3N0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5U3N0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIDUtRGF5LCAxOTc3LXByZXNlbnQsIFNlYSBTdXJmYWNlIFRlbXBlcmF0dXJlIiwgIlRoaXMgZGF0YXNldCBoYXMgNS1kYXkgU2VhIFN1cmZhY2UgVGVtcGVyYXR1cmUgKFNTVCkgZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICA1LWRheSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgZGFpbHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgY29uc2VjdXRpdmUgZml2ZSBkYXkgaW50ZXJ2YWxzLiAgQSBtaW5pbXVtIG9mIDIgZGFpbHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgNS1kYXkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5UXzI1IChTZWEgU3VyZmFjZSBUZW1wZXJhdHVyZSwgZGVncmVlX0MpXG5RVF81MDI1IChTZWEgU3VyZmFjZSBUZW1wZXJhdHVyZSBRdWFsaXR5KVxuU1RfNjAyNSAoU2VhIFN1cmZhY2UgVGVtcGVyYXR1cmUgU291cmNlKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW81ZGF5U3N0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvNWRheVNzdF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvNWRheVNzdC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvNWRheVNzdC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhbzVkYXlTc3Qmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhbzVkYXlTc3QiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlULnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheVQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlULmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIDUtRGF5LCAxOTc3LXByZXNlbnQsIFRlbXBlcmF0dXJlIiwgIlRoaXMgZGF0YXNldCBoYXMgNS1kYXkgVGVtcGVyYXR1cmUgZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICA1LWRheSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgZGFpbHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgY29uc2VjdXRpdmUgZml2ZSBkYXkgaW50ZXJ2YWxzLiAgQSBtaW5pbXVtIG9mIDIgZGFpbHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgNS1kYXkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5UXzIwIChTZWEgV2F0ZXIgVGVtcGVyYXR1cmUsIGRlZ3JlZV9DKVxuUVRfNTAyMCAoVGVtcGVyYXR1cmUgUXVhbGl0eSlcblNUXzYwMjAgKFRlbXBlcmF0dXJlIFNvdXJjZSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvNWRheVRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW81ZGF5VF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvNWRheVQvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhbzVkYXlULnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvNWRheVQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhbzVkYXlUIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5Vy5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlXIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5Vy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCA1LURheSwgMTk3Ny1wcmVzZW50LCBXaW5kIiwgIlRoaXMgZGF0YXNldCBoYXMgNS1kYXkgV2luZCBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIDUtZGF5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBkYWlseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBjb25zZWN1dGl2ZSBmaXZlIGRheSBpbnRlcnZhbHMuICBBIG1pbmltdW0gb2YgMiBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSA1LWRheSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcbldVXzQyMiAoWm9uYWwgV2luZCwgbSBzLTEpXG5XVl80MjMgKE1lcmlkaW9uYWwgV2luZCwgbSBzLTEpXG5XU180MDEgKFdpbmQgU3BlZWQsIG0gcy0xKVxuUVdTXzU0MDEgKFdpbmQgU3BlZWQgUXVhbGl0eSlcblNXU182NDAxIChXaW5kIFNwZWVkIFNvdXJjZSlcbldEXzQxMCAoV2luZCBEaXJlY3Rpb24sIGRlZ3JlZXNfdHJ1ZSlcblFXRF81NDEwIChXaW5kIERpcmVjdGlvbiBRdWFsaXR5KVxuU1dEXzY0MTAgKFdpbmQgRGlyZWN0aW9uIFNvdXJjZSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvNWRheVdfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW81ZGF5V19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvNWRheVcvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhbzVkYXlXLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvNWRheVcmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhbzVkYXlXIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5RHluLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheUR5biIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheUR5bi5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCA1LURheSwgMTk4MC1wcmVzZW50LCBEeW5hbWljIEhlaWdodCIsICJUaGlzIGRhdGFzZXQgaGFzIDUtZGF5IER5bmFtaWMgSGVpZ2h0IGRhdGEgKGEgbWVhc3VyZSBvZiB0aGUgZWxldmF0aW9uIG9mIHRoZSBzZWEgbGV2ZWwsIGNhbGN1bGF0ZWQgYnkgaW50ZWdyYXRpbmcgdGhlIHNwZWNpZmljIHZvbHVtZSBhbm9tYWx5IG9mIHRoZSBzZWEgd2F0ZXIgYmV0d2VlbiB0aGUgc2VhIHN1cmZhY2UgYW5kIDUwMCBtIGRlcHRoKSBmcm9tIHRoZSBcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgNS1kYXkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIGRhaWx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGNvbnNlY3V0aXZlIGZpdmUgZGF5IGludGVydmFscy4gIEEgbWluaW11bSBvZiAyIGRhaWx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIDUtZGF5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuRFlOXzEzIChEeW5hbWljIEhlaWdodCwgZHluLWNtKVxuUURfNTAxMyAoRHluYW1pYyBIZWlnaHQgUXVhbGl0eSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvNWRheUR5bl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhbzVkYXlEeW5faXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhbzVkYXlEeW4vaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhbzVkYXlEeW4ucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW81ZGF5RHluJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW81ZGF5RHluIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5SGVhdC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlIZWF0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5SGVhdC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCA1LURheSwgMTk4MC1wcmVzZW50LCBIZWF0IENvbnRlbnQiLCAiVGhpcyBkYXRhc2V0IGhhcyA1LWRheSBIZWF0IENvbnRlbnQgZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICA1LWRheSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgZGFpbHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgY29uc2VjdXRpdmUgZml2ZSBkYXkgaW50ZXJ2YWxzLiAgQSBtaW5pbXVtIG9mIDIgZGFpbHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgNS1kYXkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5IVENfMTMwIChIZWF0IENvbnRlbnQsIDEwKioxMCBKIG0tMilcbkhUQ181MTMwIChIZWF0IENvbnRlbnQgUXVhbGl0eSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvNWRheUhlYXRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW81ZGF5SGVhdF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvNWRheUhlYXQvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhbzVkYXlIZWF0LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvNWRheUhlYXQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhbzVkYXlIZWF0Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5UG9zLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheVBvcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheVBvcy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCA1LURheSwgMTk4MC1wcmVzZW50LCBQb3NpdGlvbiIsICJUaGlzIGRhdGFzZXQgaGFzIDUtZGF5IFBvc2l0aW9uIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgNS1kYXkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIGRhaWx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGNvbnNlY3V0aXZlIGZpdmUgZGF5IGludGVydmFscy4gIEEgbWluaW11bSBvZiAyIGRhaWx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIDUtZGF5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuTE9OXzUwMiAoUHJlY2lzZSBMb25naXR1ZGUsIGRlZ3JlZV9lYXN0KVxuUVhfNTUwMiAoTG9uZ2l0dWRlIFF1YWxpdHkpXG5MQVRfNTAwIChQcmVjaXNlIExhdGl0dWRlLCBkZWdyZWVfbm9ydGgpXG5RWV81NTAwIChMYXRpdHVkZSBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW81ZGF5UG9zX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvNWRheVBvc19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvNWRheVBvcy9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvNWRheVBvcy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhbzVkYXlQb3Mmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhbzVkYXlQb3MiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlELnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheUQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlELmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIDUtRGF5LCAxOTg3LXByZXNlbnQsIFBvdGVudGlhbCBEZW5zaXR5IEFub21hbHkiLCAiVGhpcyBkYXRhc2V0IGhhcyA1LWRheSBQb3RlbnRpYWwgRGVuc2l0eSBBbm9tYWx5IChzaWdtYS10aGV0YSkgZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICA1LWRheSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgZGFpbHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgY29uc2VjdXRpdmUgZml2ZSBkYXkgaW50ZXJ2YWxzLiAgQSBtaW5pbXVtIG9mIDIgZGFpbHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgNS1kYXkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5TVEhfNzEgKFNpZ21hLVRoZXRhLCBrZyBtLTMpXG5RU1RfNTA3MSAoU2lnbWEtVGhldGEgUXVhbGl0eSlcblNTVF82MDcxIChTaWdtYS1UaGV0YSBTb3VyY2UpXG5ESUNfNzA3MSAoU2lnbWEtVGhldGEgSW5zdHJ1bWVudCBDb2RlKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW81ZGF5RF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhbzVkYXlEX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW81ZGF5RC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvNWRheUQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW81ZGF5RCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvNWRheUQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlTLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheVMiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlTLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIDUtRGF5LCAxOTg3LXByZXNlbnQsIFNhbGluaXR5IiwgIlRoaXMgZGF0YXNldCBoYXMgNS1kYXkgU2FsaW5pdHkgZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICA1LWRheSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgZGFpbHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgY29uc2VjdXRpdmUgZml2ZSBkYXkgaW50ZXJ2YWxzLiAgQSBtaW5pbXVtIG9mIDIgZGFpbHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgNS1kYXkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5TXzQxIChTZWEgV2F0ZXIgUHJhY3RpY2FsIFNhbGluaXR5LCBQU1UpXG5RU181MDQxIChTYWxpbml0eSBRdWFsaXR5KVxuU1NfNjA0MSAoU2FsaW5pdHkgU291cmNlKVxuU0lDXzgwNDEgKFNhbGluaXR5IEluc3RydW1lbnQgQ29kZSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvNWRheVNfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW81ZGF5U19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvNWRheVMvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhbzVkYXlTLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvNWRheVMmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhbzVkYXlTIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5QWRjcC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlBZGNwIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5QWRjcC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCA1LURheSwgMTk4OC0yMDE3LCBBRENQIiwgIlRoaXMgZGF0YXNldCBoYXMgNS1kYXkgQWNvdXN0aWMgRG9wcGxlciBDdXJyZW50IFByb2ZpbGVyIChBRENQKSB3YXRlciBjdXJyZW50cyBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIDUtZGF5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBkYWlseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBjb25zZWN1dGl2ZSBmaXZlIGRheSBpbnRlcnZhbHMuICBBIG1pbmltdW0gb2YgMiBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSA1LWRheSBhdmVyYWdlLiAgQURDUCBkYXRhIGFyZSBhdmFpbGFibGUgb25seSBhZnRlciBtb29yaW5nIHJlY292ZXJpZXMsIHdoaWNoIGFyZSBzY2hlZHVsZWQgb24gYW4gYW5udWFsIGJhc2lzLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG51XzEyMDUgKEVhc3R3YXJkIFNlYSBXYXRlciBWZWxvY2l0eSwgY20vcylcblFVXzUyMDUgKEVhc3R3YXJkIFNlYSBXYXRlciBWZWxvY2l0eSBRdWFsaXR5KVxudl8xMjA2IChOb3J0aHdhcmQgU2VhIFdhdGVyIFZlbG9jaXR5LCBjbS9zKVxuUVZfNTIwNiAoTm9ydGh3YXJkIFNlYSBXYXRlciBWZWxvY2l0eSBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW81ZGF5QWRjcF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhbzVkYXlBZGNwX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW81ZGF5QWRjcC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvNWRheUFkY3AucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW81ZGF5QWRjcCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvNWRheUFkY3AiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlFdmFwLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheUV2YXAiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlFdmFwLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIDUtRGF5LCAxOTg5LXByZXNlbnQsIEV2YXBvcmF0aW9uIiwgIlRoaXMgZGF0YXNldCBoYXMgNS1kYXkgRXZhcG9yYXRpb24gZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICA1LWRheSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgZGFpbHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgY29uc2VjdXRpdmUgZml2ZSBkYXkgaW50ZXJ2YWxzLiAgQSBtaW5pbXVtIG9mIDIgZGFpbHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgNS1kYXkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5FXzI1MCAoRXZhcG9yYXRpb24sIE1NL0hSKVxuUUVfNTI1MCAoRXZhcG9yYXRpb24gUXVhbGl0eSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvNWRheUV2YXBfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW81ZGF5RXZhcF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvNWRheUV2YXAvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhbzVkYXlFdmFwLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvNWRheUV2YXAmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhbzVkYXlFdmFwIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5UWxhdC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlRbGF0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5UWxhdC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCA1LURheSwgMTk4OS1wcmVzZW50LCBMYXRlbnQgSGVhdCBGbHV4IiwgIlRoaXMgZGF0YXNldCBoYXMgNS1kYXkgTGF0ZW50IEhlYXQgRmx1eCBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIDUtZGF5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBkYWlseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBjb25zZWN1dGl2ZSBmaXZlIGRheSBpbnRlcnZhbHMuICBBIG1pbmltdW0gb2YgMiBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSA1LWRheSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblFMXzEzNyAoTGF0ZW50IEhlYXQgRmx1eCwgVyBtLTIpXG5RUUxfNTEzNyAoTGF0ZW50IEhlYXQgRmx1eCBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW81ZGF5UWxhdF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhbzVkYXlRbGF0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW81ZGF5UWxhdC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvNWRheVFsYXQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW81ZGF5UWxhdCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvNWRheVFsYXQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlSaC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlSaCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheVJoLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIDUtRGF5LCAxOTg5LXByZXNlbnQsIFJlbGF0aXZlIEh1bWlkaXR5IiwgIlRoaXMgZGF0YXNldCBoYXMgNS1kYXkgUmVsYXRpdmUgSHVtaWRpdHkgZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICA1LWRheSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgZGFpbHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgY29uc2VjdXRpdmUgZml2ZSBkYXkgaW50ZXJ2YWxzLiAgQSBtaW5pbXVtIG9mIDIgZGFpbHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgNS1kYXkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5SSF85MTAgKFJlbGF0aXZlIEh1bWlkaXR5LCBwZXJjZW50KVxuUVJIXzU5MTAgKFJlbGF0aXZlIEh1bWlkaXR5IFF1YWxpdHkpXG5TUkhfNjkxMCAoUmVsYXRpdmUgSHVtaWRpdHkgU291cmNlKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW81ZGF5UmhfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW81ZGF5UmhfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhbzVkYXlSaC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvNWRheVJoLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvNWRheVJoJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW81ZGF5UmgiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlRc2VuLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheVFzZW4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlRc2VuLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIDUtRGF5LCAxOTg5LXByZXNlbnQsIFNlbnNpYmxlIEhlYXQgRmx1eCIsICJUaGlzIGRhdGFzZXQgaGFzIDUtZGF5IFNlbnNpYmxlIEhlYXQgRmx1eCBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIDUtZGF5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBkYWlseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBjb25zZWN1dGl2ZSBmaXZlIGRheSBpbnRlcnZhbHMuICBBIG1pbmltdW0gb2YgMiBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSA1LWRheSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblFTXzEzOCAoU2Vuc2libGUgSGVhdCBGbHV4LCBXIG0tMilcblFRU181MTM4IChTZW5zaWJsZSBIZWF0IEZsdXggUXVhbGl0eSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvNWRheVFzZW5fZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW81ZGF5UXNlbl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvNWRheVFzZW4vaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhbzVkYXlRc2VuLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvNWRheVFzZW4mc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhbzVkYXlRc2VuIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5VGF1LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheVRhdSIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheVRhdS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCA1LURheSwgMTk4OS1wcmVzZW50LCBXaW5kIFN0cmVzcyIsICJUaGlzIGRhdGFzZXQgaGFzIDUtZGF5IFdpbmQgU3RyZXNzIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgNS1kYXkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIGRhaWx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGNvbnNlY3V0aXZlIGZpdmUgZGF5IGludGVydmFscy4gIEEgbWluaW11bSBvZiAyIGRhaWx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIDUtZGF5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuVFhfNDQyIChab25hbCBXaW5kIFN0cmVzcywgTi9tMilcblRZXzQ0MyAoTWVyaWRpb25hbCBXaW5kIFN0cmVzcywgTi9tMilcblRBVV80NDAgKFdpbmQgU3RyZXNzLCBOL20yKVxuVERfNDQ1IChXaW5kIFN0cmVzcyBEaXJlY3Rpb24sIGRlZ3JlZXNfdHJ1ZSlcblFUQVVfNTQ0MCAoV2luZCBTdHJlc3MgUXVhbGl0eSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvNWRheVRhdV9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhbzVkYXlUYXVfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhbzVkYXlUYXUvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhbzVkYXlUYXUucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW81ZGF5VGF1JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW81ZGF5VGF1Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5UmFkLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheVJhZCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheVJhZC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCA1LURheSwgMTk5MS1wcmVzZW50LCBEb3duZ29pbmcgU2hvcnR3YXZlIFJhZGlhdGlvbiIsICJUaGlzIGRhdGFzZXQgaGFzIDUtZGF5IERvd25nb2luZyBTaG9ydHdhdmUgUmFkaWF0aW9uIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgNS1kYXkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIGRhaWx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGNvbnNlY3V0aXZlIGZpdmUgZGF5IGludGVydmFscy4gIEEgbWluaW11bSBvZiAyIGRhaWx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIDUtZGF5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuUkRfNDk1IChEb3duZ29pbmcgU2hvcnR3YXZlIFJhZGlhdGlvbiwgVy9NKioyKVxuUVNXXzU0OTUgKFNob3J0d2F2ZSBSYWRpYXRpb24gUXVhbGl0eSlcblNTV182NDk1IChTaG9ydHdhdmUgUmFkaWF0aW9uIFNvdXJjZSlcblJEU180OTYgKFNob3J0d2F2ZSBSYWRpYXRpb24gU3RhbmRhcmQgRGV2aWF0aW9uLCBXL00qKjIpXG5SRFBfNDk3IChTaG9ydHdhdmUgUmFkaWF0aW9uIFBlYWssIFcvTSoqMilcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvNWRheVJhZF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhbzVkYXlSYWRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhbzVkYXlSYWQvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhbzVkYXlSYWQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW81ZGF5UmFkJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW81ZGF5UmFkIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5U3duZXQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5U3duZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlTd25ldC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCA1LURheSwgMTk5MS1wcmVzZW50LCBOZXQgU2hvcnR3YXZlIFJhZGlhdGlvbiIsICJUaGlzIGRhdGFzZXQgaGFzIDUtZGF5IE5ldCBTaG9ydHdhdmUgUmFkaWF0aW9uIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgNS1kYXkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIGRhaWx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGNvbnNlY3V0aXZlIGZpdmUgZGF5IGludGVydmFscy4gIEEgbWluaW11bSBvZiAyIGRhaWx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIDUtZGF5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuU1dOXzE0OTUgKE5ldCBTaG9ydHdhdmUgUmFkaWF0aW9uLCBXL00qKjIpXG5RU1dfNTQ5NSAoU2hvcnR3YXZlIFJhZGlhdGlvbiBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW81ZGF5U3duZXRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW81ZGF5U3duZXRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhbzVkYXlTd25ldC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvNWRheVN3bmV0LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvNWRheVN3bmV0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW81ZGF5U3duZXQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlTc3Muc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5U3NzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5U3NzLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIDUtRGF5LCAxOTkyLXByZXNlbnQsIFNlYSBTdXJmYWNlIFNhbGluaXR5IiwgIlRoaXMgZGF0YXNldCBoYXMgNS1kYXkgU2VhIFN1cmZhY2UgU2FsaW5pdHkgZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICA1LWRheSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgZGFpbHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgY29uc2VjdXRpdmUgZml2ZSBkYXkgaW50ZXJ2YWxzLiAgQSBtaW5pbXVtIG9mIDIgZGFpbHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgNS1kYXkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5TXzQxIChTZWEgV2F0ZXIgUHJhY3RpY2FsIFNhbGluaXR5LCBQU1UpXG5RU181MDQxIChTYWxpbml0eSBRdWFsaXR5KVxuU1NfNjA0MSAoU2FsaW5pdHkgU291cmNlKVxuU0lDXzcwNDEgKFNhbGluaXR5IEluc3RydW1lbnQgQ29kZSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvNWRheVNzc19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhbzVkYXlTc3NfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhbzVkYXlTc3MvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhbzVkYXlTc3MucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW81ZGF5U3NzJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW81ZGF5U3NzIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5U3NkLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheVNzZCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheVNzZC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCA1LURheSwgMTk5Mi1wcmVzZW50LCBTaWdtYS1UaGV0YSIsICJUaGlzIGRhdGFzZXQgaGFzIDUtZGF5IFNpZ21hLVRoZXRhIChQb3RlbnRpYWwgRGVuc2l0eSBBbm9tYWx5KSBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIDUtZGF5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBkYWlseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBjb25zZWN1dGl2ZSBmaXZlIGRheSBpbnRlcnZhbHMuICBBIG1pbmltdW0gb2YgMiBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSA1LWRheSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblNUSF83MSAoU2lnbWEtVGhldGEsIGtnIG0tMylcblFTVF81MDcxIChTaWdtYS1UaGV0YSBRdWFsaXR5KVxuU1NUXzYwNzEgKFNpZ21hLVRoZXRhIFNvdXJjZSlcbkRJQ183MDcxIChTaWdtYS1UaGV0YSBJbnN0cnVtZW50IENvZGUpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhbzVkYXlTc2RfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW81ZGF5U3NkX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW81ZGF5U3NkL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW81ZGF5U3NkLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvNWRheVNzZCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvNWRheVNzZCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheUVtcC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlFbXAiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlFbXAuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgNS1EYXksIDE5OTctcHJlc2VudCwgRXZhcG9yYXRpb24gTWludXMgUHJlY2lwaXRhdGlvbiIsICJUaGlzIGRhdGFzZXQgaGFzIDUtZGF5IEV2YXBvcmF0aW9uIE1pbnVzIFByZWNpcGl0YXRpb24gZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICA1LWRheSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgZGFpbHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgY29uc2VjdXRpdmUgZml2ZSBkYXkgaW50ZXJ2YWxzLiAgQSBtaW5pbXVtIG9mIDIgZGFpbHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgNS1kYXkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5FTVBfMjUxIChFdmFwb3JhdGlvbiBNaW51cyBQcmVjaXBpdGF0aW9uLCBtbS9ocilcblFFTVBfNTI1MSAoRXZhcG9yYXRpb24gTWludXMgUHJlY2lwaXRhdGlvbiBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW81ZGF5RW1wX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvNWRheUVtcF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvNWRheUVtcC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvNWRheUVtcC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhbzVkYXlFbXAmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhbzVkYXlFbXAiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlSZi5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlSZiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheVJmLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIDUtRGF5LCAxOTk3LXByZXNlbnQsIEhlYXQgRmx1eCBEdWUgVG8gUmFpbiIsICJUaGlzIGRhdGFzZXQgaGFzIDUtZGF5IEhlYXQgRmx1eCBEdWUgVG8gUmFpbiBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIDUtZGF5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBkYWlseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBjb25zZWN1dGl2ZSBmaXZlIGRheSBpbnRlcnZhbHMuICBBIG1pbmltdW0gb2YgMiBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSA1LWRheSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblFSXzEzOSAoSGVhdCBGbHV4IER1ZSBUbyBSYWluLCBXIG0tMilcblFRUl81MTM5IChIZWF0IEZsdXggRHVlIFRvIFJhaW4gUXVhbGl0eSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvNWRheVJmX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvNWRheVJmX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW81ZGF5UmYvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhbzVkYXlSZi5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhbzVkYXlSZiZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvNWRheVJmIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5UmFpbi5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlSYWluIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5UmFpbi5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCA1LURheSwgMTk5Ny1wcmVzZW50LCBQcmVjaXBpdGF0aW9uIiwgIlRoaXMgZGF0YXNldCBoYXMgNS1kYXkgUHJlY2lwaXRhdGlvbiBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIDUtZGF5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBkYWlseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBjb25zZWN1dGl2ZSBmaXZlIGRheSBpbnRlcnZhbHMuICBBIG1pbmltdW0gb2YgMiBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSA1LWRheSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblJOXzQ4NSAoUHJlY2lwaXRhdGlvbiwgTU0vSFIpXG5RUk5fNTQ4NSAoUHJlY2lwaXRhdGlvbiBRdWFsaXR5KVxuU1JOXzY0ODUgKFByZWNpcGl0YXRpb24gU291cmNlKVxuUk5TXzQ4NiAoUHJlY2lwaXRhdGlvbiBTdGFuZGFyZCBEZXZpYXRpb24sIE1NL0hSKVxuUk5QXzQ4NyAoUGVyY2VudCBUaW1lIFJhaW5pbmcsIHBlcmNlbnQpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhbzVkYXlSYWluX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvNWRheVJhaW5faXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhbzVkYXlSYWluL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW81ZGF5UmFpbi5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhbzVkYXlSYWluJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW81ZGF5UmFpbiJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheUJwLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheUJwIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5QnAuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgNS1EYXksIDE5OTgtcHJlc2VudCwgQmFyb21ldHJpYyAoQWlyKSBQcmVzc3VyZSIsICJUaGlzIGRhdGFzZXQgaGFzIDUtZGF5IEJhcm9tZXRyaWMgKEFpcikgUHJlc3N1cmUgZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICA1LWRheSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgZGFpbHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgY29uc2VjdXRpdmUgZml2ZSBkYXkgaW50ZXJ2YWxzLiAgQSBtaW5pbXVtIG9mIDIgZGFpbHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgNS1kYXkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5CUF85MTUgKEJhcm9tZXRyaWMgKEFpcikgUHJlc3N1cmUsIGhQYSlcblFCUF81OTE1IChCYXJvbWV0cmljIChBaXIpIFByZXNzdXJlIFF1YWxpdHkpXG5TQlBfNjkxNSAoQmFyb21ldHJpYyAoQWlyKSBQcmVzc3VyZSBTb3VyY2UpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhbzVkYXlCcF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhbzVkYXlCcF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvNWRheUJwL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW81ZGF5QnAucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW81ZGF5QnAmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhbzVkYXlCcCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheUJmLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheUJmIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5QmYuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgNS1EYXksIDIwMDAtcHJlc2VudCwgQnVveWFuY3kgRmx1eCIsICJUaGlzIGRhdGFzZXQgaGFzIDUtZGF5IEJ1b3lhbmN5IEZsdXggZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICA1LWRheSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgZGFpbHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgY29uc2VjdXRpdmUgZml2ZSBkYXkgaW50ZXJ2YWxzLiAgQSBtaW5pbXVtIG9mIDIgZGFpbHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgNS1kYXkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5CRl8xOTEgKEJ1b3lhbmN5IEZsdXgsIDEwKio2IGtnIG0tMiBzLTEpXG5RQkZfNTE5MSAoQnVveWFuY3kgRmx1eCBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW81ZGF5QmZfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW81ZGF5QmZfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhbzVkYXlCZi9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvNWRheUJmLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvNWRheUJmJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW81ZGF5QmYiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlMdy5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlMdyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheUx3LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIDUtRGF5LCAyMDAwLXByZXNlbnQsIExvbmd3YXZlIFJhZGlhdGlvbiIsICJUaGlzIGRhdGFzZXQgaGFzIDUtZGF5IEluY29taW5nIExvbmd3YXZlIFJhZGlhdGlvbiBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIDUtZGF5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBkYWlseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBjb25zZWN1dGl2ZSBmaXZlIGRheSBpbnRlcnZhbHMuICBBIG1pbmltdW0gb2YgMiBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSA1LWRheSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblFsXzEzNiAoSW5jb21pbmcgTG9uZ3dhdmUgUmFkaWF0aW9uLCBXIG0tMilcblFMV181MTM2IChMb25nd2F2ZSBSYWRpYXRpb24gUXVhbGl0eSlcblNMV182MTM2IChMb25nd2F2ZSBSYWRpYXRpb24gU291cmNlKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW81ZGF5THdfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW81ZGF5THdfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhbzVkYXlMdy9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvNWRheUx3LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvNWRheUx3JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW81ZGF5THciXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlMd25ldC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlMd25ldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheUx3bmV0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIDUtRGF5LCAyMDAwLXByZXNlbnQsIE5ldCBMb25nd2F2ZSBSYWRpYXRpb24iLCAiVGhpcyBkYXRhc2V0IGhhcyA1LWRheSBOZXQgTG9uZ3dhdmUgUmFkaWF0aW9uIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgNS1kYXkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIGRhaWx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGNvbnNlY3V0aXZlIGZpdmUgZGF5IGludGVydmFscy4gIEEgbWluaW11bSBvZiAyIGRhaWx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIDUtZGF5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuTFdOXzExMzYgKE5ldCBMb25nd2F2ZSBSYWRpYXRpb24sIFcgbS0yKVxuUUxXXzUxMzYgKExvbmd3YXZlIFJhZGlhdGlvbiBRdWFsaXR5KVxuU0xXXzYxMzYgKExvbmd3YXZlIFJhZGlhdGlvbiBTb3VyY2UpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhbzVkYXlMd25ldF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhbzVkYXlMd25ldF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvNWRheUx3bmV0L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW81ZGF5THduZXQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW81ZGF5THduZXQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhbzVkYXlMd25ldCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheVFuZXQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5UW5ldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheVFuZXQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgNS1EYXksIDIwMDAtcHJlc2VudCwgVG90YWwgSGVhdCBGbHV4IiwgIlRoaXMgZGF0YXNldCBoYXMgNS1kYXkgVG90YWwgSGVhdCBGbHV4IGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgNS1kYXkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIGRhaWx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGNvbnNlY3V0aXZlIGZpdmUgZGF5IGludGVydmFscy4gIEEgbWluaW11bSBvZiAyIGRhaWx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIDUtZGF5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuUVRfMjEwIChUb3RhbCBIZWF0IEZsdXgsIFcvTSoqMilcblFRMF81MjEwIChUb3RhbCBIZWF0IEZsdXggUXVhbGl0eSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvNWRheVFuZXRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW81ZGF5UW5ldF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvNWRheVFuZXQvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhbzVkYXlRbmV0LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvNWRheVFuZXQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhbzVkYXlRbmV0Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeUlzby5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5SXNvIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeUlzby5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBEYWlseSwgMTk3Ny1wcmVzZW50LCAyMEMgSXNvdGhlcm0gRGVwdGgiLCAiVGhpcyBkYXRhc2V0IGhhcyBkYWlseSAyMEMgSXNvdGhlcm0gRGVwdGggZGF0YSAodGhlIGRlcHRoIGF0IHdoaWNoIHRoZSBvY2VhbiB0ZW1wZXJhdHVyZSBpcyAyMEMpIGZyb20gdGhlIFxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBEYWlseSBhdmVyYWdlcyBhcmUgY29tcHV0ZWQgc3RhcnRpbmcgYXQgMDA6MDBaIGFuZCBhcmUgYXNzaWduZWQgYW4gb2JzZXJ2YXRpb24gJ3RpbWUnIG9mIDEyOjAwWi4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuSVNPXzYgKDIwQyBJc290aGVybSBEZXB0aCwgbSlcblFJXzUwMDYgKDIwQyBEZXB0aCBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9EeUlzb19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb0R5SXNvX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9EeUlzby9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvRHlJc28ucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9EeUlzbyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvRHlJc28iXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5QWlydC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5QWlydCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlBaXJ0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIERhaWx5LCAxOTc3LXByZXNlbnQsIEFpciBUZW1wZXJhdHVyZSIsICJUaGlzIGRhdGFzZXQgaGFzIGRhaWx5IEFpciBUZW1wZXJhdHVyZSBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIERhaWx5IGF2ZXJhZ2VzIGFyZSBjb21wdXRlZCBzdGFydGluZyBhdCAwMDowMFogYW5kIGFyZSBhc3NpZ25lZCBhbiBvYnNlcnZhdGlvbiAndGltZScgb2YgMTI6MDBaLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5BVF8yMSAoQWlyIFRlbXBlcmF0dXJlLCBkZWdyZWVfQylcblFBVF81MDIxIChBaXIgVGVtcGVyYXR1cmUgUXVhbGl0eSlcblNBVF82MDIxIChBaXIgVGVtcGVyYXR1cmUgU291cmNlKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9EeUFpcnRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9EeUFpcnRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb0R5QWlydC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvRHlBaXJ0LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvRHlBaXJ0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9EeUFpcnQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5Q3VyLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlDdXIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5Q3VyLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIERhaWx5LCAxOTc3LXByZXNlbnQsIEN1cnJlbnRzIiwgIlRoaXMgZGF0YXNldCBoYXMgZGFpbHkgQ3VycmVudHMgZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBEYWlseSBhdmVyYWdlcyBhcmUgY29tcHV0ZWQgc3RhcnRpbmcgYXQgMDA6MDBaIGFuZCBhcmUgYXNzaWduZWQgYW4gb2JzZXJ2YXRpb24gJ3RpbWUnIG9mIDEyOjAwWi4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuVV8zMjAgKEVhc3R3YXJkIFNlYSBXYXRlciBWZWxvY2l0eSwgY20gcy0xKVxuVl8zMjEgKE5vcnRod2FyZCBTZWEgV2F0ZXIgVmVsb2NpdHksIGNtIHMtMSlcbkNTXzMwMCAoU2VhIFdhdGVyIFZlbG9jaXR5LCBjbSBzLTEpXG5DRF8zMTAgKERpcmVjdGlvbiBvZiBTZWEgV2F0ZXIgVmVsb2NpdHksIGRlZ3JlZXNfdHJ1ZSlcblFDU181MzAwIChDdXJyZW50IFNwZWVkIFF1YWxpdHkpXG5RQ0RfNTMxMCAoQ3VycmVudCBEaXJlY3Rpb24gUXVhbGl0eSlcblNDU182MzAwIChDdXJyZW50IFNwZWVkIFNvdXJjZSlcbkNJQ183MzAwIChDdXJyZW50IEluc3RydW1lbnQgQ29kZSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvRHlDdXJfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9EeUN1cl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvRHlDdXIvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb0R5Q3VyLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvRHlDdXImc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb0R5Q3VyIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeVNzdC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5U3N0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeVNzdC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBEYWlseSwgMTk3Ny1wcmVzZW50LCBTZWEgU3VyZmFjZSBUZW1wZXJhdHVyZSIsICJUaGlzIGRhdGFzZXQgaGFzIGRhaWx5IFNlYSBTdXJmYWNlIFRlbXBlcmF0dXJlIChTU1QpIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgRGFpbHkgYXZlcmFnZXMgYXJlIGNvbXB1dGVkIHN0YXJ0aW5nIGF0IDAwOjAwWiBhbmQgYXJlIGFzc2lnbmVkIGFuIG9ic2VydmF0aW9uICd0aW1lJyBvZiAxMjowMFouICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblRfMjUgKFNlYSBTdXJmYWNlIFRlbXBlcmF0dXJlLCBkZWdyZWVfQylcblFUXzUwMjUgKFNlYSBTdXJmYWNlIFRlbXBlcmF0dXJlIFF1YWxpdHkpXG5TVF82MDI1IChTZWEgU3VyZmFjZSBUZW1wZXJhdHVyZSBTb3VyY2UpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb0R5U3N0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvRHlTc3RfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb0R5U3N0L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9EeVNzdC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb0R5U3N0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9EeVNzdCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlULnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlUIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeVQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgRGFpbHksIDE5NzctcHJlc2VudCwgVGVtcGVyYXR1cmUiLCAiVGhpcyBkYXRhc2V0IGhhcyBkYWlseSBUZW1wZXJhdHVyZSBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIERhaWx5IGF2ZXJhZ2VzIGFyZSBjb21wdXRlZCBzdGFydGluZyBhdCAwMDowMFogYW5kIGFyZSBhc3NpZ25lZCBhbiBvYnNlcnZhdGlvbiAndGltZScgb2YgMTI6MDBaLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5UXzIwIChTZWEgV2F0ZXIgVGVtcGVyYXR1cmUsIGRlZ3JlZV9DKVxuUVRfNTAyMCAoVGVtcGVyYXR1cmUgUXVhbGl0eSlcblNUXzYwMjAgKFRlbXBlcmF0dXJlIFNvdXJjZSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvRHlUX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvRHlUX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9EeVQvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb0R5VC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb0R5VCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvRHlUIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeVcuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeVciLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5Vy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBEYWlseSwgMTk3Ny1wcmVzZW50LCBXaW5kIiwgIlRoaXMgZGF0YXNldCBoYXMgZGFpbHkgV2luZCBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIERhaWx5IGF2ZXJhZ2VzIGFyZSBjb21wdXRlZCBzdGFydGluZyBhdCAwMDowMFogYW5kIGFyZSBhc3NpZ25lZCBhbiBvYnNlcnZhdGlvbiAndGltZScgb2YgMTI6MDBaLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5XVV80MjIgKFpvbmFsIFdpbmQsIG0gcy0xKVxuV1ZfNDIzIChNZXJpZGlvbmFsIFdpbmQsIG0gcy0xKVxuV1NfNDAxIChXaW5kIFNwZWVkLCBtIHMtMSlcblFXU181NDAxIChXaW5kIFNwZWVkIFF1YWxpdHkpXG5TV1NfNjQwMSAoV2luZCBTcGVlZCBTb3VyY2UpXG5XRF80MTAgKFdpbmQgRGlyZWN0aW9uLCBkZWdyZWVzX3RydWUpXG5RV0RfNTQxMCAoV2luZCBEaXJlY3Rpb24gUXVhbGl0eSlcblNXRF82NDEwIChXaW5kIERpcmVjdGlvbiBTb3VyY2UpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb0R5V19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb0R5V19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvRHlXL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9EeVcucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9EeVcmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb0R5VyJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlEeW4uc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeUR5biIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlEeW4uZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgRGFpbHksIDE5ODAtcHJlc2VudCwgRHluYW1pYyBIZWlnaHQiLCAiVGhpcyBkYXRhc2V0IGhhcyBkYWlseSBEeW5hbWljIEhlaWdodCBkYXRhIChhIG1lYXN1cmUgb2YgdGhlIGVsZXZhdGlvbiBvZiB0aGUgc2VhIGxldmVsLCBjYWxjdWxhdGVkIGJ5IGludGVncmF0aW5nIHRoZSBzcGVjaWZpYyB2b2x1bWUgYW5vbWFseSBvZiB0aGUgc2VhIHdhdGVyIGJldHdlZW4gdGhlIHNlYSBzdXJmYWNlIGFuZCA1MDAgbSBkZXB0aCkgZnJvbSB0aGUgXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIERhaWx5IGF2ZXJhZ2VzIGFyZSBjb21wdXRlZCBzdGFydGluZyBhdCAwMDowMFogYW5kIGFyZSBhc3NpZ25lZCBhbiBvYnNlcnZhdGlvbiAndGltZScgb2YgMTI6MDBaLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5EWU5fMTMgKER5bmFtaWMgSGVpZ2h0LCBkeW4tY20pXG5RRF81MDEzIChEeW5hbWljIEhlaWdodCBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9EeUR5bl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb0R5RHluX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9EeUR5bi9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvRHlEeW4ucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9EeUR5biZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvRHlEeW4iXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5SGVhdC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5SGVhdCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlIZWF0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIERhaWx5LCAxOTgwLXByZXNlbnQsIEhlYXQgQ29udGVudCIsICJUaGlzIGRhdGFzZXQgaGFzIGRhaWx5IEhlYXQgQ29udGVudCBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIERhaWx5IGF2ZXJhZ2VzIGFyZSBjb21wdXRlZCBzdGFydGluZyBhdCAwMDowMFogYW5kIGFyZSBhc3NpZ25lZCBhbiBvYnNlcnZhdGlvbiAndGltZScgb2YgMTI6MDBaLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5IVENfMTMwIChIZWF0IENvbnRlbnQsIDEwKioxMCBKIG0tMilcbkhUQ181MTMwIChIZWF0IENvbnRlbnQgUXVhbGl0eSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvRHlIZWF0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvRHlIZWF0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9EeUhlYXQvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb0R5SGVhdC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb0R5SGVhdCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvRHlIZWF0Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeVBvcy5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5UG9zIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeVBvcy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBEYWlseSwgMTk4MC1wcmVzZW50LCBQb3NpdGlvbiIsICJUaGlzIGRhdGFzZXQgaGFzIGRhaWx5IFBvc2l0aW9uIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgRGFpbHkgYXZlcmFnZXMgYXJlIGNvbXB1dGVkIHN0YXJ0aW5nIGF0IDAwOjAwWiBhbmQgYXJlIGFzc2lnbmVkIGFuIG9ic2VydmF0aW9uICd0aW1lJyBvZiAxMjowMFouICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcbkxPTl81MDIgKFByZWNpc2UgTG9uZ2l0dWRlLCBkZWdyZWVfZWFzdClcblFYXzU1MDIgKExvbmdpdHVkZSBRdWFsaXR5KVxuTEFUXzUwMCAoUHJlY2lzZSBMYXRpdHVkZSwgZGVncmVlX25vcnRoKVxuUVlfNTUwMCAoTGF0aXR1ZGUgUXVhbGl0eSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvRHlQb3NfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9EeVBvc19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvRHlQb3MvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb0R5UG9zLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvRHlQb3Mmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb0R5UG9zIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeUQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeUQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5RC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBEYWlseSwgMTk4Ny1wcmVzZW50LCBQb3RlbnRpYWwgRGVuc2l0eSBBbm9tYWx5IiwgIlRoaXMgZGF0YXNldCBoYXMgZGFpbHkgUG90ZW50aWFsIERlbnNpdHkgQW5vbWFseSAoc2lnbWEtdGhldGEpIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgRGFpbHkgYXZlcmFnZXMgYXJlIGNvbXB1dGVkIHN0YXJ0aW5nIGF0IDAwOjAwWiBhbmQgYXJlIGFzc2lnbmVkIGFuIG9ic2VydmF0aW9uICd0aW1lJyBvZiAxMjowMFouICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblNUSF83MSAoU2lnbWEtVGhldGEsIGtnIG0tMylcblFTVF81MDcxIChTaWdtYS1UaGV0YSBRdWFsaXR5KVxuU1NUXzYwNzEgKFNpZ21hLVRoZXRhIFNvdXJjZSlcbkRJQ183MDcxIChTaWdtYS1UaGV0YSBJbnN0cnVtZW50IENvZGUpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb0R5RF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb0R5RF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvRHlEL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9EeUQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9EeUQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb0R5RCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlTLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlTIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeVMuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgRGFpbHksIDE5ODctcHJlc2VudCwgU2FsaW5pdHkiLCAiVGhpcyBkYXRhc2V0IGhhcyBkYWlseSBTYWxpbml0eSBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIERhaWx5IGF2ZXJhZ2VzIGFyZSBjb21wdXRlZCBzdGFydGluZyBhdCAwMDowMFogYW5kIGFyZSBhc3NpZ25lZCBhbiBvYnNlcnZhdGlvbiAndGltZScgb2YgMTI6MDBaLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5TXzQxIChTZWEgV2F0ZXIgUHJhY3RpY2FsIFNhbGluaXR5LCBQU1UpXG5RU181MDQxIChTYWxpbml0eSBRdWFsaXR5KVxuU1NfNjA0MSAoU2FsaW5pdHkgU291cmNlKVxuU0lDXzgwNDEgKFNhbGluaXR5IEluc3RydW1lbnQgQ29kZSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvRHlTX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvRHlTX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9EeVMvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb0R5Uy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb0R5UyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvRHlTIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeUFkY3Auc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeUFkY3AiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5QWRjcC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBEYWlseSwgMTk4OC0yMDE3LCBBRENQIiwgIlRoaXMgZGF0YXNldCBoYXMgZGFpbHkgQWNvdXN0aWMgRG9wcGxlciBDdXJyZW50IFByb2ZpbGVyIChBRENQKSB3YXRlciBjdXJyZW50cyBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIERhaWx5IGF2ZXJhZ2VzIGFyZSBjb21wdXRlZCBzdGFydGluZyBhdCAwMDowMFogYW5kIGFyZSBhc3NpZ25lZCBhbiBvYnNlcnZhdGlvbiAndGltZScgb2YgMTI6MDBaLiAgQURDUCBkYXRhIGFyZSBhdmFpbGFibGUgb25seSBhZnRlciBtb29yaW5nIHJlY292ZXJpZXMsIHdoaWNoIGFyZSBzY2hlZHVsZWQgb24gYW4gYW5udWFsIGJhc2lzLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG51XzEyMDUgKEVhc3R3YXJkIFNlYSBXYXRlciBWZWxvY2l0eSwgY20vcylcblFVXzUyMDUgKEVhc3R3YXJkIFNlYSBXYXRlciBWZWxvY2l0eSBRdWFsaXR5KVxudl8xMjA2IChOb3J0aHdhcmQgU2VhIFdhdGVyIFZlbG9jaXR5LCBjbS9zKVxuUVZfNTIwNiAoTm9ydGh3YXJkIFNlYSBXYXRlciBWZWxvY2l0eSBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9EeUFkY3BfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9EeUFkY3BfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb0R5QWRjcC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvRHlBZGNwLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvRHlBZGNwJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9EeUFkY3AiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5RXZhcC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5RXZhcCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlFdmFwLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIERhaWx5LCAxOTg5LXByZXNlbnQsIEV2YXBvcmF0aW9uIiwgIlRoaXMgZGF0YXNldCBoYXMgZGFpbHkgRXZhcG9yYXRpb24gZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBEYWlseSBhdmVyYWdlcyBhcmUgY29tcHV0ZWQgc3RhcnRpbmcgYXQgMDA6MDBaIGFuZCBhcmUgYXNzaWduZWQgYW4gb2JzZXJ2YXRpb24gJ3RpbWUnIG9mIDEyOjAwWi4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuRV8yNTAgKEV2YXBvcmF0aW9uLCBNTS9IUilcblFFXzUyNTAgKEV2YXBvcmF0aW9uIFF1YWxpdHkpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb0R5RXZhcF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb0R5RXZhcF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvRHlFdmFwL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9EeUV2YXAucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9EeUV2YXAmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb0R5RXZhcCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlRbGF0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlRbGF0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeVFsYXQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgRGFpbHksIDE5ODktcHJlc2VudCwgTGF0ZW50IEhlYXQgRmx1eCIsICJUaGlzIGRhdGFzZXQgaGFzIGRhaWx5IExhdGVudCBIZWF0IEZsdXggZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBEYWlseSBhdmVyYWdlcyBhcmUgY29tcHV0ZWQgc3RhcnRpbmcgYXQgMDA6MDBaIGFuZCBhcmUgYXNzaWduZWQgYW4gb2JzZXJ2YXRpb24gJ3RpbWUnIG9mIDEyOjAwWi4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuUUxfMTM3IChMYXRlbnQgSGVhdCBGbHV4LCBXIG0tMilcblFRTF81MTM3IChMYXRlbnQgSGVhdCBGbHV4IFF1YWxpdHkpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb0R5UWxhdF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb0R5UWxhdF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvRHlRbGF0L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9EeVFsYXQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9EeVFsYXQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb0R5UWxhdCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlSaC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5UmgiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5UmguZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgRGFpbHksIDE5ODktcHJlc2VudCwgUmVsYXRpdmUgSHVtaWRpdHkiLCAiVGhpcyBkYXRhc2V0IGhhcyBkYWlseSBSZWxhdGl2ZSBIdW1pZGl0eSBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIERhaWx5IGF2ZXJhZ2VzIGFyZSBjb21wdXRlZCBzdGFydGluZyBhdCAwMDowMFogYW5kIGFyZSBhc3NpZ25lZCBhbiBvYnNlcnZhdGlvbiAndGltZScgb2YgMTI6MDBaLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5SSF85MTAgKFJlbGF0aXZlIEh1bWlkaXR5LCBwZXJjZW50KVxuUVJIXzU5MTAgKFJlbGF0aXZlIEh1bWlkaXR5IFF1YWxpdHkpXG5TUkhfNjkxMCAoUmVsYXRpdmUgSHVtaWRpdHkgU291cmNlKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9EeVJoX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvRHlSaF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvRHlSaC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvRHlSaC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb0R5Umgmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb0R5UmgiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5UXNlbi5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5UXNlbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlRc2VuLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIERhaWx5LCAxOTg5LXByZXNlbnQsIFNlbnNpYmxlIEhlYXQgRmx1eCIsICJUaGlzIGRhdGFzZXQgaGFzIGRhaWx5IFNlbnNpYmxlIEhlYXQgRmx1eCBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIERhaWx5IGF2ZXJhZ2VzIGFyZSBjb21wdXRlZCBzdGFydGluZyBhdCAwMDowMFogYW5kIGFyZSBhc3NpZ25lZCBhbiBvYnNlcnZhdGlvbiAndGltZScgb2YgMTI6MDBaLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5RU18xMzggKFNlbnNpYmxlIEhlYXQgRmx1eCwgVyBtLTIpXG5RUVNfNTEzOCAoU2Vuc2libGUgSGVhdCBGbHV4IFF1YWxpdHkpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb0R5UXNlbl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb0R5UXNlbl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvRHlRc2VuL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9EeVFzZW4ucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9EeVFzZW4mc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb0R5UXNlbiJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlUYXUuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeVRhdSIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlUYXUuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgRGFpbHksIDE5ODktcHJlc2VudCwgV2luZCBTdHJlc3MiLCAiVGhpcyBkYXRhc2V0IGhhcyBkYWlseSBXaW5kIFN0cmVzcyBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIERhaWx5IGF2ZXJhZ2VzIGFyZSBjb21wdXRlZCBzdGFydGluZyBhdCAwMDowMFogYW5kIGFyZSBhc3NpZ25lZCBhbiBvYnNlcnZhdGlvbiAndGltZScgb2YgMTI6MDBaLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5UWF80NDIgKFpvbmFsIFdpbmQgU3RyZXNzLCBOL20yKVxuVFlfNDQzIChNZXJpZGlvbmFsIFdpbmQgU3RyZXNzLCBOL20yKVxuVEFVXzQ0MCAoV2luZCBTdHJlc3MsIE4vbTIpXG5URF80NDUgKFdpbmQgU3RyZXNzIERpcmVjdGlvbiwgZGVncmVlc190cnVlKVxuUVRBVV81NDQwIChXaW5kIFN0cmVzcyBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9EeVRhdV9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb0R5VGF1X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9EeVRhdS9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvRHlUYXUucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9EeVRhdSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvRHlUYXUiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5UmFkLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlSYWQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5UmFkLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIERhaWx5LCAxOTkxLXByZXNlbnQsIERvd25nb2luZyBTaG9ydHdhdmUgUmFkaWF0aW9uIiwgIlRoaXMgZGF0YXNldCBoYXMgZGFpbHkgRG93bmdvaW5nIFNob3J0d2F2ZSBSYWRpYXRpb24gZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBEYWlseSBhdmVyYWdlcyBhcmUgY29tcHV0ZWQgc3RhcnRpbmcgYXQgMDA6MDBaIGFuZCBhcmUgYXNzaWduZWQgYW4gb2JzZXJ2YXRpb24gJ3RpbWUnIG9mIDEyOjAwWi4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuUkRfNDk1IChEb3duZ29pbmcgU2hvcnR3YXZlIFJhZGlhdGlvbiwgVy9NKioyKVxuUVNXXzU0OTUgKFNob3J0d2F2ZSBSYWRpYXRpb24gUXVhbGl0eSlcblNTV182NDk1IChTaG9ydHdhdmUgUmFkaWF0aW9uIFNvdXJjZSlcblJEU180OTYgKFNob3J0d2F2ZSBSYWRpYXRpb24gU3RhbmRhcmQgRGV2aWF0aW9uLCBXL00qKjIpXG5SRFBfNDk3IChTaG9ydHdhdmUgUmFkaWF0aW9uIFBlYWssIFcvTSoqMilcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvRHlSYWRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9EeVJhZF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvRHlSYWQvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb0R5UmFkLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvRHlSYWQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb0R5UmFkIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeVN3bmV0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlTd25ldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlTd25ldC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBEYWlseSwgMTk5MS1wcmVzZW50LCBOZXQgU2hvcnR3YXZlIFJhZGlhdGlvbiIsICJUaGlzIGRhdGFzZXQgaGFzIGRhaWx5IE5ldCBTaG9ydHdhdmUgUmFkaWF0aW9uIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgRGFpbHkgYXZlcmFnZXMgYXJlIGNvbXB1dGVkIHN0YXJ0aW5nIGF0IDAwOjAwWiBhbmQgYXJlIGFzc2lnbmVkIGFuIG9ic2VydmF0aW9uICd0aW1lJyBvZiAxMjowMFouICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblNXTl8xNDk1IChOZXQgU2hvcnR3YXZlIFJhZGlhdGlvbiwgVy9NKioyKVxuUVNXXzU0OTUgKFNob3J0d2F2ZSBSYWRpYXRpb24gUXVhbGl0eSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvRHlTd25ldF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb0R5U3duZXRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb0R5U3duZXQvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb0R5U3duZXQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9EeVN3bmV0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9EeVN3bmV0Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeVNzcy5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5U3NzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeVNzcy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBEYWlseSwgMTk5Mi1wcmVzZW50LCBTZWEgU3VyZmFjZSBTYWxpbml0eSIsICJUaGlzIGRhdGFzZXQgaGFzIGRhaWx5IFNlYSBTdXJmYWNlIFNhbGluaXR5IGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgRGFpbHkgYXZlcmFnZXMgYXJlIGNvbXB1dGVkIHN0YXJ0aW5nIGF0IDAwOjAwWiBhbmQgYXJlIGFzc2lnbmVkIGFuIG9ic2VydmF0aW9uICd0aW1lJyBvZiAxMjowMFouICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblNfNDEgKFNlYSBXYXRlciBQcmFjdGljYWwgU2FsaW5pdHksIFBTVSlcblFTXzUwNDEgKFNhbGluaXR5IFF1YWxpdHkpXG5TU182MDQxIChTYWxpbml0eSBTb3VyY2UpXG5TSUNfNzA0MSAoU2FsaW5pdHkgSW5zdHJ1bWVudCBDb2RlKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9EeVNzc19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb0R5U3NzX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9EeVNzcy9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvRHlTc3MucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9EeVNzcyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvRHlTc3MiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5U3NkLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlTc2QiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5U3NkLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIERhaWx5LCAxOTkyLXByZXNlbnQsIFNpZ21hLVRoZXRhIiwgIlRoaXMgZGF0YXNldCBoYXMgZGFpbHkgU2lnbWEtVGhldGEgKFBvdGVudGlhbCBEZW5zaXR5IEFub21hbHkpIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgRGFpbHkgYXZlcmFnZXMgYXJlIGNvbXB1dGVkIHN0YXJ0aW5nIGF0IDAwOjAwWiBhbmQgYXJlIGFzc2lnbmVkIGFuIG9ic2VydmF0aW9uICd0aW1lJyBvZiAxMjowMFouICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblNUSF83MSAoU2lnbWEtVGhldGEsIGtnIG0tMylcblFTVF81MDcxIChTaWdtYS1UaGV0YSBRdWFsaXR5KVxuU1NUXzYwNzEgKFNpZ21hLVRoZXRhIFNvdXJjZSlcbkRJQ183MDcxIChTaWdtYS1UaGV0YSBJbnN0cnVtZW50IENvZGUpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb0R5U3NkX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvRHlTc2RfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb0R5U3NkL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9EeVNzZC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb0R5U3NkJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9EeVNzZCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlFbXAuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeUVtcCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlFbXAuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgRGFpbHksIDE5OTctcHJlc2VudCwgRXZhcG9yYXRpb24gTWludXMgUHJlY2lwaXRhdGlvbiIsICJUaGlzIGRhdGFzZXQgaGFzIGRhaWx5IEV2YXBvcmF0aW9uIE1pbnVzIFByZWNpcGl0YXRpb24gZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBEYWlseSBhdmVyYWdlcyBhcmUgY29tcHV0ZWQgc3RhcnRpbmcgYXQgMDA6MDBaIGFuZCBhcmUgYXNzaWduZWQgYW4gb2JzZXJ2YXRpb24gJ3RpbWUnIG9mIDEyOjAwWi4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuRU1QXzI1MSAoRXZhcG9yYXRpb24gTWludXMgUHJlY2lwaXRhdGlvbiwgbW0vaHIpXG5RRU1QXzUyNTEgKEV2YXBvcmF0aW9uIE1pbnVzIFByZWNpcGl0YXRpb24gUXVhbGl0eSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvRHlFbXBfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9EeUVtcF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvRHlFbXAvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb0R5RW1wLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvRHlFbXAmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb0R5RW1wIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeVJmLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlSZiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlSZi5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBEYWlseSwgMTk5Ny1wcmVzZW50LCBIZWF0IEZsdXggRHVlIFRvIFJhaW4iLCAiVGhpcyBkYXRhc2V0IGhhcyBkYWlseSBIZWF0IEZsdXggRHVlIFRvIFJhaW4gZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBEYWlseSBhdmVyYWdlcyBhcmUgY29tcHV0ZWQgc3RhcnRpbmcgYXQgMDA6MDBaIGFuZCBhcmUgYXNzaWduZWQgYW4gb2JzZXJ2YXRpb24gJ3RpbWUnIG9mIDEyOjAwWi4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuUVJfMTM5IChIZWF0IEZsdXggRHVlIFRvIFJhaW4sIFcgbS0yKVxuUVFSXzUxMzkgKEhlYXQgRmx1eCBEdWUgVG8gUmFpbiBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9EeVJmX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvRHlSZl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvRHlSZi9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvRHlSZi5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb0R5UmYmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb0R5UmYiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5UmFpbi5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5UmFpbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlSYWluLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIERhaWx5LCAxOTk3LXByZXNlbnQsIFByZWNpcGl0YXRpb24iLCAiVGhpcyBkYXRhc2V0IGhhcyBkYWlseSBQcmVjaXBpdGF0aW9uIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgRGFpbHkgYXZlcmFnZXMgYXJlIGNvbXB1dGVkIHN0YXJ0aW5nIGF0IDAwOjAwWiBhbmQgYXJlIGFzc2lnbmVkIGFuIG9ic2VydmF0aW9uICd0aW1lJyBvZiAxMjowMFouICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblJOXzQ4NSAoUHJlY2lwaXRhdGlvbiwgTU0vSFIpXG5RUk5fNTQ4NSAoUHJlY2lwaXRhdGlvbiBRdWFsaXR5KVxuU1JOXzY0ODUgKFByZWNpcGl0YXRpb24gU291cmNlKVxuUk5TXzQ4NiAoUHJlY2lwaXRhdGlvbiBTdGFuZGFyZCBEZXZpYXRpb24sIE1NL0hSKVxuUk5QXzQ4NyAoUGVyY2VudCBUaW1lIFJhaW5pbmcsIHBlcmNlbnQpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb0R5UmFpbl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb0R5UmFpbl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvRHlSYWluL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9EeVJhaW4ucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9EeVJhaW4mc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb0R5UmFpbiJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlCcC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5QnAiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5QnAuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgRGFpbHksIDE5OTgtcHJlc2VudCwgQmFyb21ldHJpYyAoQWlyKSBQcmVzc3VyZSIsICJUaGlzIGRhdGFzZXQgaGFzIGRhaWx5IEJhcm9tZXRyaWMgKEFpcikgUHJlc3N1cmUgZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBEYWlseSBhdmVyYWdlcyBhcmUgY29tcHV0ZWQgc3RhcnRpbmcgYXQgMDA6MDBaIGFuZCBhcmUgYXNzaWduZWQgYW4gb2JzZXJ2YXRpb24gJ3RpbWUnIG9mIDEyOjAwWi4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuQlBfOTE1IChCYXJvbWV0cmljIChBaXIpIFByZXNzdXJlLCBoUGEpXG5RQlBfNTkxNSAoQmFyb21ldHJpYyAoQWlyKSBQcmVzc3VyZSBRdWFsaXR5KVxuU0JQXzY5MTUgKEJhcm9tZXRyaWMgKEFpcikgUHJlc3N1cmUgU291cmNlKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9EeUJwX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvRHlCcF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvRHlCcC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvRHlCcC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb0R5QnAmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb0R5QnAiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5QmYuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeUJmIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeUJmLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIERhaWx5LCAyMDAwLXByZXNlbnQsIEJ1b3lhbmN5IEZsdXgiLCAiVGhpcyBkYXRhc2V0IGhhcyBkYWlseSBCdW95YW5jeSBGbHV4IGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgRGFpbHkgYXZlcmFnZXMgYXJlIGNvbXB1dGVkIHN0YXJ0aW5nIGF0IDAwOjAwWiBhbmQgYXJlIGFzc2lnbmVkIGFuIG9ic2VydmF0aW9uICd0aW1lJyBvZiAxMjowMFouICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcbkJGXzE5MSAoQnVveWFuY3kgRmx1eCwgMTAqKjYga2cgbS0yIHMtMSlcblFCRl81MTkxIChCdW95YW5jeSBGbHV4IFF1YWxpdHkpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb0R5QmZfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9EeUJmX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9EeUJmL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9EeUJmLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvRHlCZiZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvRHlCZiJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlMdy5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5THciLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5THcuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgRGFpbHksIDIwMDAtcHJlc2VudCwgTG9uZ3dhdmUgUmFkaWF0aW9uIiwgIlRoaXMgZGF0YXNldCBoYXMgZGFpbHkgSW5jb21pbmcgTG9uZ3dhdmUgUmFkaWF0aW9uIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgRGFpbHkgYXZlcmFnZXMgYXJlIGNvbXB1dGVkIHN0YXJ0aW5nIGF0IDAwOjAwWiBhbmQgYXJlIGFzc2lnbmVkIGFuIG9ic2VydmF0aW9uICd0aW1lJyBvZiAxMjowMFouICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblFsXzEzNiAoSW5jb21pbmcgTG9uZ3dhdmUgUmFkaWF0aW9uLCBXIG0tMilcblFMV181MTM2IChMb25nd2F2ZSBSYWRpYXRpb24gUXVhbGl0eSlcblNMV182MTM2IChMb25nd2F2ZSBSYWRpYXRpb24gU291cmNlKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9EeUx3X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvRHlMd19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvRHlMdy9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvRHlMdy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb0R5THcmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb0R5THciXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5THduZXQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeUx3bmV0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeUx3bmV0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIERhaWx5LCAyMDAwLXByZXNlbnQsIE5ldCBMb25nd2F2ZSBSYWRpYXRpb24iLCAiVGhpcyBkYXRhc2V0IGhhcyBkYWlseSBOZXQgTG9uZ3dhdmUgUmFkaWF0aW9uIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgRGFpbHkgYXZlcmFnZXMgYXJlIGNvbXB1dGVkIHN0YXJ0aW5nIGF0IDAwOjAwWiBhbmQgYXJlIGFzc2lnbmVkIGFuIG9ic2VydmF0aW9uICd0aW1lJyBvZiAxMjowMFouICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcbkxXTl8xMTM2IChOZXQgTG9uZ3dhdmUgUmFkaWF0aW9uLCBXIG0tMilcblFMV181MTM2IChMb25nd2F2ZSBSYWRpYXRpb24gUXVhbGl0eSlcblNMV182MTM2IChMb25nd2F2ZSBSYWRpYXRpb24gU291cmNlKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9EeUx3bmV0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvRHlMd25ldF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvRHlMd25ldC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvRHlMd25ldC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb0R5THduZXQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb0R5THduZXQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5UW5ldC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5UW5ldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlRbmV0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIERhaWx5LCAyMDAwLXByZXNlbnQsIFRvdGFsIEhlYXQgRmx1eCIsICJUaGlzIGRhdGFzZXQgaGFzIGRhaWx5IFRvdGFsIEhlYXQgRmx1eCBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIERhaWx5IGF2ZXJhZ2VzIGFyZSBjb21wdXRlZCBzdGFydGluZyBhdCAwMDowMFogYW5kIGFyZSBhc3NpZ25lZCBhbiBvYnNlcnZhdGlvbiAndGltZScgb2YgMTI6MDBaLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5RVF8yMTAgKFRvdGFsIEhlYXQgRmx1eCwgVy9NKioyKVxuUVEwXzUyMTAgKFRvdGFsIEhlYXQgRmx1eCBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9EeVFuZXRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9EeVFuZXRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb0R5UW5ldC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvRHlRbmV0LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvRHlRbmV0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9EeVFuZXQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vbklzby5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vbklzbyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uSXNvLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIE1vbnRobHksIDE5NzctcHJlc2VudCwgMjBDIElzb3RoZXJtIERlcHRoIiwgIlRoaXMgZGF0YXNldCBoYXMgbW9udGhseSAyMEMgSXNvdGhlcm0gRGVwdGggZGF0YSAodGhlIGRlcHRoIGF0IHdoaWNoIHRoZSBvY2VhbiB0ZW1wZXJhdHVyZSBpcyAyMEMpIGZyb20gdGhlIFxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBNb250aGx5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBkYWlseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBhIG1vbnRoLiAgQSBtaW5pbXVtIG9mIDE1IGRhaWx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIG1vbnRobHkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5JU09fNiAoMjBDIElzb3RoZXJtIERlcHRoLCBtKVxuUUlfNTAwNiAoMjBDIERlcHRoIFF1YWxpdHkpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb01vbklzb19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb01vbklzb19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvTW9uSXNvL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9Nb25Jc28ucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9Nb25Jc28mc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb01vbklzbyJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uQWlydC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vbkFpcnQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vbkFpcnQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgTW9udGhseSwgMTk3Ny1wcmVzZW50LCBBaXIgVGVtcGVyYXR1cmUiLCAiVGhpcyBkYXRhc2V0IGhhcyBtb250aGx5IEFpciBUZW1wZXJhdHVyZSBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIE1vbnRobHkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIGRhaWx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGEgbW9udGguICBBIG1pbmltdW0gb2YgMTUgZGFpbHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgbW9udGhseSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcbkFUXzIxIChBaXIgVGVtcGVyYXR1cmUsIGRlZ3JlZV9DKVxuUUFUXzUwMjEgKEFpciBUZW1wZXJhdHVyZSBRdWFsaXR5KVxuU0FUXzYwMjEgKEFpciBUZW1wZXJhdHVyZSBTb3VyY2UpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb01vbkFpcnRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9Nb25BaXJ0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9Nb25BaXJ0L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9Nb25BaXJ0LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvTW9uQWlydCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvTW9uQWlydCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uQ3VyLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uQ3VyIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25DdXIuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgTW9udGhseSwgMTk3Ny1wcmVzZW50LCBDdXJyZW50cyIsICJUaGlzIGRhdGFzZXQgaGFzIG1vbnRobHkgQ3VycmVudHMgZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBNb250aGx5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBkYWlseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBhIG1vbnRoLiAgQSBtaW5pbXVtIG9mIDE1IGRhaWx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIG1vbnRobHkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5VXzMyMCAoRWFzdHdhcmQgU2VhIFdhdGVyIFZlbG9jaXR5LCBjbSBzLTEpXG5WXzMyMSAoTm9ydGh3YXJkIFNlYSBXYXRlciBWZWxvY2l0eSwgY20gcy0xKVxuQ1NfMzAwIChTZWEgV2F0ZXIgVmVsb2NpdHksIGNtIHMtMSlcbkNEXzMxMCAoRGlyZWN0aW9uIG9mIFNlYSBXYXRlciBWZWxvY2l0eSwgZGVncmVlc190cnVlKVxuUUNTXzUzMDAgKEN1cnJlbnQgU3BlZWQgUXVhbGl0eSlcblFDRF81MzEwIChDdXJyZW50IERpcmVjdGlvbiBRdWFsaXR5KVxuU0NTXzYzMDAgKEN1cnJlbnQgU3BlZWQgU291cmNlKVxuQ0lDXzczMDAgKEN1cnJlbnQgSW5zdHJ1bWVudCBDb2RlKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9Nb25DdXJfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9Nb25DdXJfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb01vbkN1ci9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvTW9uQ3VyLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvTW9uQ3VyJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9Nb25DdXIiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vblNzdC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vblNzdCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uU3N0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIE1vbnRobHksIDE5NzctcHJlc2VudCwgU2VhIFN1cmZhY2UgVGVtcGVyYXR1cmUiLCAiVGhpcyBkYXRhc2V0IGhhcyBtb250aGx5IFNlYSBTdXJmYWNlIFRlbXBlcmF0dXJlIChTU1QpIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgTW9udGhseSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgZGFpbHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgYSBtb250aC4gIEEgbWluaW11bSBvZiAxNSBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSBtb250aGx5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuVF8yNSAoU2VhIFN1cmZhY2UgVGVtcGVyYXR1cmUsIGRlZ3JlZV9DKVxuUVRfNTAyNSAoU2VhIFN1cmZhY2UgVGVtcGVyYXR1cmUgUXVhbGl0eSlcblNUXzYwMjUgKFNlYSBTdXJmYWNlIFRlbXBlcmF0dXJlIFNvdXJjZSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvTW9uU3N0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvTW9uU3N0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9Nb25Tc3QvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb01vblNzdC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb01vblNzdCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvTW9uU3N0Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25ULnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uVCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uVC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBNb250aGx5LCAxOTc3LXByZXNlbnQsIFRlbXBlcmF0dXJlIiwgIlRoaXMgZGF0YXNldCBoYXMgbW9udGhseSBUZW1wZXJhdHVyZSBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIE1vbnRobHkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIGRhaWx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGEgbW9udGguICBBIG1pbmltdW0gb2YgMTUgZGFpbHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgbW9udGhseSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblRfMjAgKFNlYSBXYXRlciBUZW1wZXJhdHVyZSwgZGVncmVlX0MpXG5RVF81MDIwIChUZW1wZXJhdHVyZSBRdWFsaXR5KVxuU1RfNjAyMCAoVGVtcGVyYXR1cmUgU291cmNlKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9Nb25UX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvTW9uVF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvTW9uVC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvTW9uVC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb01vblQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb01vblQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vblcuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25XIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25XLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIE1vbnRobHksIDE5NzctcHJlc2VudCwgV2luZCIsICJUaGlzIGRhdGFzZXQgaGFzIG1vbnRobHkgV2luZCBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIE1vbnRobHkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIGRhaWx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGEgbW9udGguICBBIG1pbmltdW0gb2YgMTUgZGFpbHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgbW9udGhseSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcbldVXzQyMiAoWm9uYWwgV2luZCwgbSBzLTEpXG5XVl80MjMgKE1lcmlkaW9uYWwgV2luZCwgbSBzLTEpXG5XU180MDEgKFdpbmQgU3BlZWQsIG0gcy0xKVxuUVdTXzU0MDEgKFdpbmQgU3BlZWQgUXVhbGl0eSlcblNXU182NDAxIChXaW5kIFNwZWVkIFNvdXJjZSlcbldEXzQxMCAoV2luZCBEaXJlY3Rpb24sIGRlZ3JlZXNfdHJ1ZSlcblFXRF81NDEwIChXaW5kIERpcmVjdGlvbiBRdWFsaXR5KVxuU1dEXzY0MTAgKFdpbmQgRGlyZWN0aW9uIFNvdXJjZSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvTW9uV19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb01vbldfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb01vblcvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb01vblcucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9Nb25XJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9Nb25XIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25EeW4uc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25EeW4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vbkR5bi5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBNb250aGx5LCAxOTgwLXByZXNlbnQsIER5bmFtaWMgSGVpZ2h0IiwgIlRoaXMgZGF0YXNldCBoYXMgbW9udGhseSBEeW5hbWljIEhlaWdodCBkYXRhIChhIG1lYXN1cmUgb2YgdGhlIGVsZXZhdGlvbiBvZiB0aGUgc2VhIGxldmVsLCBjYWxjdWxhdGVkIGJ5IGludGVncmF0aW5nIHRoZSBzcGVjaWZpYyB2b2x1bWUgYW5vbWFseSBvZiB0aGUgc2VhIHdhdGVyIGJldHdlZW4gdGhlIHNlYSBzdXJmYWNlIGFuZCA1MDAgbSBkZXB0aCkgZnJvbSB0aGUgXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIE1vbnRobHkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIGRhaWx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGEgbW9udGguICBBIG1pbmltdW0gb2YgMTUgZGFpbHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgbW9udGhseSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcbkRZTl8xMyAoRHluYW1pYyBIZWlnaHQsIGR5bi1jbSlcblFEXzUwMTMgKER5bmFtaWMgSGVpZ2h0IFF1YWxpdHkpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb01vbkR5bl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb01vbkR5bl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvTW9uRHluL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9Nb25EeW4ucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9Nb25EeW4mc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb01vbkR5biJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uSGVhdC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vbkhlYXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vbkhlYXQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgTW9udGhseSwgMTk4MC1wcmVzZW50LCBIZWF0IENvbnRlbnQiLCAiVGhpcyBkYXRhc2V0IGhhcyBtb250aGx5IEhlYXQgQ29udGVudCBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIE1vbnRobHkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIGRhaWx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGEgbW9udGguICBBIG1pbmltdW0gb2YgMTUgZGFpbHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgbW9udGhseSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcbkhUQ18xMzAgKEhlYXQgQ29udGVudCwgMTAqKjEwIEogbS0yKVxuSFRDXzUxMzAgKEhlYXQgQ29udGVudCBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9Nb25IZWF0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvTW9uSGVhdF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvTW9uSGVhdC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvTW9uSGVhdC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb01vbkhlYXQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb01vbkhlYXQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vblBvcy5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vblBvcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uUG9zLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIE1vbnRobHksIDE5ODAtcHJlc2VudCwgUG9zaXRpb24iLCAiVGhpcyBkYXRhc2V0IGhhcyBtb250aGx5IFBvc2l0aW9uIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgTW9udGhseSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgZGFpbHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgYSBtb250aC4gIEEgbWluaW11bSBvZiAxNSBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSBtb250aGx5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuTE9OXzUwMiAoUHJlY2lzZSBMb25naXR1ZGUsIGRlZ3JlZV9lYXN0KVxuUVhfNTUwMiAoTG9uZ2l0dWRlIFF1YWxpdHkpXG5MQVRfNTAwIChQcmVjaXNlIExhdGl0dWRlLCBkZWdyZWVfbm9ydGgpXG5RWV81NTAwIChMYXRpdHVkZSBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9Nb25Qb3NfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9Nb25Qb3NfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb01vblBvcy9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvTW9uUG9zLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvTW9uUG9zJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9Nb25Qb3MiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vbkQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25EIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25ELmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIE1vbnRobHksIDE5ODctcHJlc2VudCwgUG90ZW50aWFsIERlbnNpdHkgQW5vbWFseSIsICJUaGlzIGRhdGFzZXQgaGFzIG1vbnRobHkgUG90ZW50aWFsIERlbnNpdHkgQW5vbWFseSAoc2lnbWEtdGhldGEpIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgTW9udGhseSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgZGFpbHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgYSBtb250aC4gIEEgbWluaW11bSBvZiAxNSBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSBtb250aGx5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuU1RIXzcxIChTaWdtYS1UaGV0YSwga2cgbS0zKVxuUVNUXzUwNzEgKFNpZ21hLVRoZXRhIFF1YWxpdHkpXG5TU1RfNjA3MSAoU2lnbWEtVGhldGEgU291cmNlKVxuRElDXzcwNzEgKFNpZ21hLVRoZXRhIEluc3RydW1lbnQgQ29kZSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvTW9uRF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb01vbkRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb01vbkQvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb01vbkQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9Nb25EJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9Nb25EIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25TLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uUyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uUy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBNb250aGx5LCAxOTg3LXByZXNlbnQsIFNhbGluaXR5IiwgIlRoaXMgZGF0YXNldCBoYXMgbW9udGhseSBTYWxpbml0eSBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIE1vbnRobHkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIGRhaWx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGEgbW9udGguICBBIG1pbmltdW0gb2YgMTUgZGFpbHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgbW9udGhseSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblNfNDEgKFNlYSBXYXRlciBQcmFjdGljYWwgU2FsaW5pdHksIFBTVSlcblFTXzUwNDEgKFNhbGluaXR5IFF1YWxpdHkpXG5TU182MDQxIChTYWxpbml0eSBTb3VyY2UpXG5TSUNfODA0MSAoU2FsaW5pdHkgSW5zdHJ1bWVudCBDb2RlKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9Nb25TX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvTW9uU19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvTW9uUy9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvTW9uUy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb01vblMmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb01vblMiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vbkFkY3Auc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25BZGNwIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25BZGNwLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIE1vbnRobHksIDE5ODgtMjAxNywgQURDUCIsICJUaGlzIGRhdGFzZXQgaGFzIG1vbnRobHkgQWNvdXN0aWMgRG9wcGxlciBDdXJyZW50IFByb2ZpbGVyIChBRENQKSB3YXRlciBjdXJyZW50cyBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIE1vbnRobHkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIGRhaWx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGEgbW9udGguICBBIG1pbmltdW0gb2YgMTUgZGFpbHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgbW9udGhseSBhdmVyYWdlLiAgQURDUCBkYXRhIGFyZSBhdmFpbGFibGUgb25seSBhZnRlciBtb29yaW5nIHJlY292ZXJpZXMsIHdoaWNoIGFyZSBzY2hlZHVsZWQgb24gYW4gYW5udWFsIGJhc2lzLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG51XzEyMDUgKEVhc3R3YXJkIFNlYSBXYXRlciBWZWxvY2l0eSwgY20vcylcblFVXzUyMDUgKEVhc3R3YXJkIFNlYSBXYXRlciBWZWxvY2l0eSBRdWFsaXR5KVxudl8xMjA2IChOb3J0aHdhcmQgU2VhIFdhdGVyIFZlbG9jaXR5LCBjbS9zKVxuUVZfNTIwNiAoTm9ydGh3YXJkIFNlYSBXYXRlciBWZWxvY2l0eSBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9Nb25BZGNwX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvTW9uQWRjcF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvTW9uQWRjcC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvTW9uQWRjcC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb01vbkFkY3Amc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb01vbkFkY3AiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vbkV2YXAuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25FdmFwIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25FdmFwLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIE1vbnRobHksIDE5ODktcHJlc2VudCwgRXZhcG9yYXRpb24iLCAiVGhpcyBkYXRhc2V0IGhhcyBtb250aGx5IEV2YXBvcmF0aW9uIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgTW9udGhseSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgZGFpbHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgYSBtb250aC4gIEEgbWluaW11bSBvZiAxNSBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSBtb250aGx5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuRV8yNTAgKEV2YXBvcmF0aW9uLCBNTS9IUilcblFFXzUyNTAgKEV2YXBvcmF0aW9uIFF1YWxpdHkpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb01vbkV2YXBfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9Nb25FdmFwX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9Nb25FdmFwL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9Nb25FdmFwLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvTW9uRXZhcCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvTW9uRXZhcCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uUWxhdC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vblFsYXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vblFsYXQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgTW9udGhseSwgMTk4OS1wcmVzZW50LCBMYXRlbnQgSGVhdCBGbHV4IiwgIlRoaXMgZGF0YXNldCBoYXMgbW9udGhseSBMYXRlbnQgSGVhdCBGbHV4IGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgTW9udGhseSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgZGFpbHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgYSBtb250aC4gIEEgbWluaW11bSBvZiAxNSBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSBtb250aGx5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuUUxfMTM3IChMYXRlbnQgSGVhdCBGbHV4LCBXIG0tMilcblFRTF81MTM3IChMYXRlbnQgSGVhdCBGbHV4IFF1YWxpdHkpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb01vblFsYXRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9Nb25RbGF0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9Nb25RbGF0L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9Nb25RbGF0LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvTW9uUWxhdCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvTW9uUWxhdCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uUmguc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25SaCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uUmguZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgTW9udGhseSwgMTk4OS1wcmVzZW50LCBSZWxhdGl2ZSBIdW1pZGl0eSIsICJUaGlzIGRhdGFzZXQgaGFzIG1vbnRobHkgUmVsYXRpdmUgSHVtaWRpdHkgZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBNb250aGx5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBkYWlseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBhIG1vbnRoLiAgQSBtaW5pbXVtIG9mIDE1IGRhaWx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIG1vbnRobHkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5SSF85MTAgKFJlbGF0aXZlIEh1bWlkaXR5LCBwZXJjZW50KVxuUVJIXzU5MTAgKFJlbGF0aXZlIEh1bWlkaXR5IFF1YWxpdHkpXG5TUkhfNjkxMCAoUmVsYXRpdmUgSHVtaWRpdHkgU291cmNlKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9Nb25SaF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb01vblJoX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9Nb25SaC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvTW9uUmgucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9Nb25SaCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvTW9uUmgiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vblFzZW4uc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25Rc2VuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25Rc2VuLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIE1vbnRobHksIDE5ODktcHJlc2VudCwgU2Vuc2libGUgSGVhdCBGbHV4IiwgIlRoaXMgZGF0YXNldCBoYXMgbW9udGhseSBTZW5zaWJsZSBIZWF0IEZsdXggZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBNb250aGx5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBkYWlseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBhIG1vbnRoLiAgQSBtaW5pbXVtIG9mIDE1IGRhaWx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIG1vbnRobHkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5RU18xMzggKFNlbnNpYmxlIEhlYXQgRmx1eCwgVyBtLTIpXG5RUVNfNTEzOCAoU2Vuc2libGUgSGVhdCBGbHV4IFF1YWxpdHkpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb01vblFzZW5fZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9Nb25Rc2VuX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9Nb25Rc2VuL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9Nb25Rc2VuLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvTW9uUXNlbiZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvTW9uUXNlbiJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uVGF1LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uVGF1IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25UYXUuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgTW9udGhseSwgMTk4OS1wcmVzZW50LCBXaW5kIFN0cmVzcyIsICJUaGlzIGRhdGFzZXQgaGFzIG1vbnRobHkgV2luZCBTdHJlc3MgZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBNb250aGx5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBkYWlseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBhIG1vbnRoLiAgQSBtaW5pbXVtIG9mIDE1IGRhaWx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIG1vbnRobHkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5UWF80NDIgKFpvbmFsIFdpbmQgU3RyZXNzLCBOL20yKVxuVFlfNDQzIChNZXJpZGlvbmFsIFdpbmQgU3RyZXNzLCBOL20yKVxuVEFVXzQ0MCAoV2luZCBTdHJlc3MsIE4vbTIpXG5URF80NDUgKFdpbmQgU3RyZXNzIERpcmVjdGlvbiwgZGVncmVlc190cnVlKVxuUVRBVV81NDQwIChXaW5kIFN0cmVzcyBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9Nb25UYXVfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9Nb25UYXVfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb01vblRhdS9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvTW9uVGF1LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvTW9uVGF1JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9Nb25UYXUiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vblJhZC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vblJhZCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uUmFkLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIE1vbnRobHksIDE5OTEtcHJlc2VudCwgRG93bmdvaW5nIFNob3J0d2F2ZSBSYWRpYXRpb24iLCAiVGhpcyBkYXRhc2V0IGhhcyBtb250aGx5IERvd25nb2luZyBTaG9ydHdhdmUgUmFkaWF0aW9uIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgTW9udGhseSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgZGFpbHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgYSBtb250aC4gIEEgbWluaW11bSBvZiAxNSBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSBtb250aGx5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuUkRfNDk1IChEb3duZ29pbmcgU2hvcnR3YXZlIFJhZGlhdGlvbiwgVy9NKioyKVxuUVNXXzU0OTUgKFNob3J0d2F2ZSBSYWRpYXRpb24gUXVhbGl0eSlcblNTV182NDk1IChTaG9ydHdhdmUgUmFkaWF0aW9uIFNvdXJjZSlcblJEU180OTYgKFNob3J0d2F2ZSBSYWRpYXRpb24gU3RhbmRhcmQgRGV2aWF0aW9uLCBXL00qKjIpXG5SRFBfNDk3IChTaG9ydHdhdmUgUmFkaWF0aW9uIFBlYWssIFcvTSoqMilcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvTW9uUmFkX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvTW9uUmFkX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9Nb25SYWQvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb01vblJhZC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb01vblJhZCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvTW9uUmFkIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25Td25ldC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vblN3bmV0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25Td25ldC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBNb250aGx5LCAxOTkxLXByZXNlbnQsIE5ldCBTaG9ydHdhdmUgUmFkaWF0aW9uIiwgIlRoaXMgZGF0YXNldCBoYXMgbW9udGhseSBOZXQgU2hvcnR3YXZlIFJhZGlhdGlvbiBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIE1vbnRobHkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIGRhaWx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGEgbW9udGguICBBIG1pbmltdW0gb2YgMTUgZGFpbHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgbW9udGhseSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblNXTl8xNDk1IChOZXQgU2hvcnR3YXZlIFJhZGlhdGlvbiwgVy9NKioyKVxuUVNXXzU0OTUgKFNob3J0d2F2ZSBSYWRpYXRpb24gUXVhbGl0eSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvTW9uU3duZXRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9Nb25Td25ldF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvTW9uU3duZXQvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb01vblN3bmV0LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvTW9uU3duZXQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb01vblN3bmV0Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25Tc3Muc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25Tc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vblNzcy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBNb250aGx5LCAxOTkyLXByZXNlbnQsIFNlYSBTdXJmYWNlIFNhbGluaXR5IiwgIlRoaXMgZGF0YXNldCBoYXMgbW9udGhseSBTZWEgU3VyZmFjZSBTYWxpbml0eSBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIE1vbnRobHkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIGRhaWx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGEgbW9udGguICBBIG1pbmltdW0gb2YgMTUgZGFpbHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgbW9udGhseSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblNfNDEgKFNlYSBXYXRlciBQcmFjdGljYWwgU2FsaW5pdHksIFBTVSlcblFTXzUwNDEgKFNhbGluaXR5IFF1YWxpdHkpXG5TU182MDQxIChTYWxpbml0eSBTb3VyY2UpXG5TSUNfNzA0MSAoU2FsaW5pdHkgSW5zdHJ1bWVudCBDb2RlKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9Nb25Tc3NfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9Nb25Tc3NfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb01vblNzcy9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvTW9uU3NzLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvTW9uU3NzJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9Nb25Tc3MiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vblNzZC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vblNzZCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uU3NkLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIE1vbnRobHksIDE5OTItcHJlc2VudCwgU2lnbWEtVGhldGEiLCAiVGhpcyBkYXRhc2V0IGhhcyBtb250aGx5IFNpZ21hLVRoZXRhIChQb3RlbnRpYWwgRGVuc2l0eSBBbm9tYWx5KSBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIE1vbnRobHkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIGRhaWx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGEgbW9udGguICBBIG1pbmltdW0gb2YgMTUgZGFpbHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgbW9udGhseSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblNUSF83MSAoU2lnbWEtVGhldGEsIGtnIG0tMylcblFTVF81MDcxIChTaWdtYS1UaGV0YSBRdWFsaXR5KVxuU1NUXzYwNzEgKFNpZ21hLVRoZXRhIFNvdXJjZSlcbkRJQ183MDcxIChTaWdtYS1UaGV0YSBJbnN0cnVtZW50IENvZGUpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb01vblNzZF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb01vblNzZF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvTW9uU3NkL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9Nb25Tc2QucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9Nb25Tc2Qmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb01vblNzZCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uRW1wLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uRW1wIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25FbXAuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgTW9udGhseSwgMTk5Ny1wcmVzZW50LCBFdmFwb3JhdGlvbiBNaW51cyBQcmVjaXBpdGF0aW9uIiwgIlRoaXMgZGF0YXNldCBoYXMgbW9udGhseSBFdmFwb3JhdGlvbiBNaW51cyBQcmVjaXBpdGF0aW9uIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgTW9udGhseSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgZGFpbHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgYSBtb250aC4gIEEgbWluaW11bSBvZiAxNSBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSBtb250aGx5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuRU1QXzI1MSAoRXZhcG9yYXRpb24gTWludXMgUHJlY2lwaXRhdGlvbiwgbW0vaHIpXG5RRU1QXzUyNTEgKEV2YXBvcmF0aW9uIE1pbnVzIFByZWNpcGl0YXRpb24gUXVhbGl0eSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvTW9uRW1wX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvTW9uRW1wX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9Nb25FbXAvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb01vbkVtcC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb01vbkVtcCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvTW9uRW1wIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25SZi5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vblJmIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25SZi5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBNb250aGx5LCAxOTk3LXByZXNlbnQsIEhlYXQgRmx1eCBEdWUgVG8gUmFpbiIsICJUaGlzIGRhdGFzZXQgaGFzIG1vbnRobHkgSGVhdCBGbHV4IER1ZSBUbyBSYWluIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgTW9udGhseSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgZGFpbHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgYSBtb250aC4gIEEgbWluaW11bSBvZiAxNSBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSBtb250aGx5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuUVJfMTM5IChIZWF0IEZsdXggRHVlIFRvIFJhaW4sIFcgbS0yKVxuUVFSXzUxMzkgKEhlYXQgRmx1eCBEdWUgVG8gUmFpbiBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9Nb25SZl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb01vblJmX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9Nb25SZi9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvTW9uUmYucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9Nb25SZiZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvTW9uUmYiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vblJhaW4uc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25SYWluIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25SYWluLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIE1vbnRobHksIDE5OTctcHJlc2VudCwgUHJlY2lwaXRhdGlvbiIsICJUaGlzIGRhdGFzZXQgaGFzIG1vbnRobHkgUHJlY2lwaXRhdGlvbiBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIE1vbnRobHkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIGRhaWx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGEgbW9udGguICBBIG1pbmltdW0gb2YgMTUgZGFpbHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgbW9udGhseSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblJOXzQ4NSAoUHJlY2lwaXRhdGlvbiwgTU0vSFIpXG5RUk5fNTQ4NSAoUHJlY2lwaXRhdGlvbiBRdWFsaXR5KVxuU1JOXzY0ODUgKFByZWNpcGl0YXRpb24gU291cmNlKVxuUk5TXzQ4NiAoUHJlY2lwaXRhdGlvbiBTdGFuZGFyZCBEZXZpYXRpb24sIE1NL0hSKVxuUk5QXzQ4NyAoUGVyY2VudCBUaW1lIFJhaW5pbmcsIHBlcmNlbnQpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb01vblJhaW5fZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9Nb25SYWluX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9Nb25SYWluL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9Nb25SYWluLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvTW9uUmFpbiZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvTW9uUmFpbiJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uQnAuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25CcCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uQnAuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgTW9udGhseSwgMTk5OC1wcmVzZW50LCBCYXJvbWV0cmljIChBaXIpIFByZXNzdXJlIiwgIlRoaXMgZGF0YXNldCBoYXMgbW9udGhseSBCYXJvbWV0cmljIChBaXIpIFByZXNzdXJlIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgTW9udGhseSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgZGFpbHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgYSBtb250aC4gIEEgbWluaW11bSBvZiAxNSBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSBtb250aGx5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuQlBfOTE1IChCYXJvbWV0cmljIChBaXIpIFByZXNzdXJlLCBoUGEpXG5RQlBfNTkxNSAoQmFyb21ldHJpYyAoQWlyKSBQcmVzc3VyZSBRdWFsaXR5KVxuU0JQXzY5MTUgKEJhcm9tZXRyaWMgKEFpcikgUHJlc3N1cmUgU291cmNlKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9Nb25CcF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb01vbkJwX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9Nb25CcC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvTW9uQnAucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9Nb25CcCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvTW9uQnAiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vbkJmLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uQmYiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vbkJmLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIE1vbnRobHksIDIwMDAtcHJlc2VudCwgQnVveWFuY3kgRmx1eCIsICJUaGlzIGRhdGFzZXQgaGFzIG1vbnRobHkgQnVveWFuY3kgRmx1eCBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIE1vbnRobHkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIGRhaWx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGEgbW9udGguICBBIG1pbmltdW0gb2YgMTUgZGFpbHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgbW9udGhseSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcbkJGXzE5MSAoQnVveWFuY3kgRmx1eCwgMTAqKjYga2cgbS0yIHMtMSlcblFCRl81MTkxIChCdW95YW5jeSBGbHV4IFF1YWxpdHkpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb01vbkJmX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvTW9uQmZfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb01vbkJmL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9Nb25CZi5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb01vbkJmJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9Nb25CZiJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uTHcuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25MdyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uTHcuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgTW9udGhseSwgMjAwMC1wcmVzZW50LCBMb25nd2F2ZSBSYWRpYXRpb24iLCAiVGhpcyBkYXRhc2V0IGhhcyBtb250aGx5IEluY29taW5nIExvbmd3YXZlIFJhZGlhdGlvbiBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIE1vbnRobHkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIGRhaWx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGEgbW9udGguICBBIG1pbmltdW0gb2YgMTUgZGFpbHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgbW9udGhseSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblFsXzEzNiAoSW5jb21pbmcgTG9uZ3dhdmUgUmFkaWF0aW9uLCBXIG0tMilcblFMV181MTM2IChMb25nd2F2ZSBSYWRpYXRpb24gUXVhbGl0eSlcblNMV182MTM2IChMb25nd2F2ZSBSYWRpYXRpb24gU291cmNlKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9Nb25Md19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb01vbkx3X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9Nb25Mdy9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvTW9uTHcucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9Nb25MdyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvTW9uTHciXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vbkx3bmV0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uTHduZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vbkx3bmV0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIE1vbnRobHksIDIwMDAtcHJlc2VudCwgTmV0IExvbmd3YXZlIFJhZGlhdGlvbiIsICJUaGlzIGRhdGFzZXQgaGFzIG1vbnRobHkgTmV0IExvbmd3YXZlIFJhZGlhdGlvbiBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIE1vbnRobHkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIGRhaWx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGEgbW9udGguICBBIG1pbmltdW0gb2YgMTUgZGFpbHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgbW9udGhseSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcbkxXTl8xMTM2IChOZXQgTG9uZ3dhdmUgUmFkaWF0aW9uLCBXIG0tMilcblFMV181MTM2IChMb25nd2F2ZSBSYWRpYXRpb24gUXVhbGl0eSlcblNMV182MTM2IChMb25nd2F2ZSBSYWRpYXRpb24gU291cmNlKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9Nb25Md25ldF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb01vbkx3bmV0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9Nb25Md25ldC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvTW9uTHduZXQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9Nb25Md25ldCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvTW9uTHduZXQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vblFuZXQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25RbmV0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25RbmV0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIE1vbnRobHksIDIwMDAtcHJlc2VudCwgVG90YWwgSGVhdCBGbHV4IiwgIlRoaXMgZGF0YXNldCBoYXMgbW9udGhseSBUb3RhbCBIZWF0IEZsdXggZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBNb250aGx5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBkYWlseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBhIG1vbnRoLiAgQSBtaW5pbXVtIG9mIDE1IGRhaWx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIG1vbnRobHkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5RVF8yMTAgKFRvdGFsIEhlYXQgRmx1eCwgVy9NKioyKVxuUVEwXzUyMTAgKFRvdGFsIEhlYXQgRmx1eCBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9Nb25RbmV0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvTW9uUW5ldF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvTW9uUW5ldC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvTW9uUW5ldC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb01vblFuZXQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb01vblFuZXQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydFJhZC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydFJhZCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0UmFkLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIFF1YXJ0ZXJseSwgMTkwMS1wcmVzZW50LCBEb3duZ29pbmcgU2hvcnR3YXZlIFJhZGlhdGlvbiIsICJUaGlzIGRhdGFzZXQgaGFzIHF1YXJ0ZXJseSBEb3duZ29pbmcgU2hvcnR3YXZlIFJhZGlhdGlvbiBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIFF1YXJ0ZXJseSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgbW9udGhseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBhIDMgbW9udGggcGVyaW9kLiAgQSBtaW5pbXVtIG9mIDIgbW9udGhseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSBxdWFydGVybHkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5SRF80OTUgKERvd25nb2luZyBTaG9ydHdhdmUgUmFkaWF0aW9uLCBXL00qKjIpXG5RU1dfNTQ5NSAoU2hvcnR3YXZlIFJhZGlhdGlvbiBRdWFsaXR5KVxuU1NXXzY0OTUgKFNob3J0d2F2ZSBSYWRpYXRpb24gU291cmNlKVxuUkRTXzQ5NiAoU2hvcnR3YXZlIFJhZGlhdGlvbiBTdGFuZGFyZCBEZXZpYXRpb24sIFcvTSoqMilcblJEUF80OTcgKFNob3J0d2F2ZSBSYWRpYXRpb24gUGVhaywgVy9NKioyKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9RcnRSYWRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9RcnRSYWRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb1FydFJhZC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvUXJ0UmFkLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvUXJ0UmFkJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9RcnRSYWQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydElzby5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydElzbyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0SXNvLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIFF1YXJ0ZXJseSwgMTk3Ny1wcmVzZW50LCAyMEMgSXNvdGhlcm0gRGVwdGgiLCAiVGhpcyBkYXRhc2V0IGhhcyBxdWFydGVybHkgMjBDIElzb3RoZXJtIERlcHRoIGRhdGEgKHRoZSBkZXB0aCBhdCB3aGljaCB0aGUgb2NlYW4gdGVtcGVyYXR1cmUgaXMgMjBDKSBmcm9tIHRoZSBcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgUXVhcnRlcmx5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBtb250aGx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGEgMyBtb250aCBwZXJpb2QuICBBIG1pbmltdW0gb2YgMiBtb250aGx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIHF1YXJ0ZXJseSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcbklTT182ICgyMEMgSXNvdGhlcm0gRGVwdGgsIG0pXG5RSV81MDA2ICgyMEMgRGVwdGggUXVhbGl0eSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvUXJ0SXNvX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvUXJ0SXNvX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9RcnRJc28vaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb1FydElzby5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb1FydElzbyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvUXJ0SXNvIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRBaXJ0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0QWlydCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0QWlydC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBRdWFydGVybHksIDE5NzctcHJlc2VudCwgQWlyIFRlbXBlcmF0dXJlIiwgIlRoaXMgZGF0YXNldCBoYXMgcXVhcnRlcmx5IEFpciBUZW1wZXJhdHVyZSBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIFF1YXJ0ZXJseSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgbW9udGhseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBhIDMgbW9udGggcGVyaW9kLiAgQSBtaW5pbXVtIG9mIDIgbW9udGhseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSBxdWFydGVybHkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5BVF8yMSAoQWlyIFRlbXBlcmF0dXJlLCBkZWdyZWVfQylcblFBVF81MDIxIChBaXIgVGVtcGVyYXR1cmUgUXVhbGl0eSlcblNBVF82MDIxIChBaXIgVGVtcGVyYXR1cmUgU291cmNlKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9RcnRBaXJ0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvUXJ0QWlydF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvUXJ0QWlydC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvUXJ0QWlydC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb1FydEFpcnQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb1FydEFpcnQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydEN1ci5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydEN1ciIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0Q3VyLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIFF1YXJ0ZXJseSwgMTk3Ny1wcmVzZW50LCBDdXJyZW50cyIsICJUaGlzIGRhdGFzZXQgaGFzIHF1YXJ0ZXJseSBDdXJyZW50cyBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIFF1YXJ0ZXJseSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgbW9udGhseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBhIDMgbW9udGggcGVyaW9kLiAgQSBtaW5pbXVtIG9mIDIgbW9udGhseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSBxdWFydGVybHkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5VXzMyMCAoRWFzdHdhcmQgU2VhIFdhdGVyIFZlbG9jaXR5LCBjbSBzLTEpXG5WXzMyMSAoTm9ydGh3YXJkIFNlYSBXYXRlciBWZWxvY2l0eSwgY20gcy0xKVxuQ1NfMzAwIChTZWEgV2F0ZXIgVmVsb2NpdHksIGNtIHMtMSlcbkNEXzMxMCAoRGlyZWN0aW9uIG9mIFNlYSBXYXRlciBWZWxvY2l0eSwgZGVncmVlc190cnVlKVxuUUNTXzUzMDAgKEN1cnJlbnQgU3BlZWQgUXVhbGl0eSlcblFDRF81MzEwIChDdXJyZW50IERpcmVjdGlvbiBRdWFsaXR5KVxuU0NTXzYzMDAgKEN1cnJlbnQgU3BlZWQgU291cmNlKVxuQ0lDXzczMDAgKEN1cnJlbnQgSW5zdHJ1bWVudCBDb2RlKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9RcnRDdXJfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9RcnRDdXJfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb1FydEN1ci9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvUXJ0Q3VyLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvUXJ0Q3VyJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9RcnRDdXIiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydFNzdC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydFNzdCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0U3N0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIFF1YXJ0ZXJseSwgMTk3Ny1wcmVzZW50LCBTZWEgU3VyZmFjZSBUZW1wZXJhdHVyZSIsICJUaGlzIGRhdGFzZXQgaGFzIHF1YXJ0ZXJseSBTZWEgU3VyZmFjZSBUZW1wZXJhdHVyZSAoU1NUKSBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIFF1YXJ0ZXJseSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgbW9udGhseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBhIDMgbW9udGggcGVyaW9kLiAgQSBtaW5pbXVtIG9mIDIgbW9udGhseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSBxdWFydGVybHkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5UXzI1IChTZWEgU3VyZmFjZSBUZW1wZXJhdHVyZSwgZGVncmVlX0MpXG5RVF81MDI1IChTZWEgU3VyZmFjZSBUZW1wZXJhdHVyZSBRdWFsaXR5KVxuU1RfNjAyNSAoU2VhIFN1cmZhY2UgVGVtcGVyYXR1cmUgU291cmNlKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9RcnRTc3RfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9RcnRTc3RfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb1FydFNzdC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvUXJ0U3N0LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvUXJ0U3N0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9RcnRTc3QiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydFQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRUIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRULmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIFF1YXJ0ZXJseSwgMTk3Ny1wcmVzZW50LCBUZW1wZXJhdHVyZSIsICJUaGlzIGRhdGFzZXQgaGFzIHF1YXJ0ZXJseSBUZW1wZXJhdHVyZSBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIFF1YXJ0ZXJseSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgbW9udGhseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBhIDMgbW9udGggcGVyaW9kLiAgQSBtaW5pbXVtIG9mIDIgbW9udGhseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSBxdWFydGVybHkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5UXzIwIChTZWEgV2F0ZXIgVGVtcGVyYXR1cmUsIGRlZ3JlZV9DKVxuUVRfNTAyMCAoVGVtcGVyYXR1cmUgUXVhbGl0eSlcblNUXzYwMjAgKFRlbXBlcmF0dXJlIFNvdXJjZSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvUXJ0VF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb1FydFRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb1FydFQvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb1FydFQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9RcnRUJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9RcnRUIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRXLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0VyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0Vy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBRdWFydGVybHksIDE5NzctcHJlc2VudCwgV2luZCIsICJUaGlzIGRhdGFzZXQgaGFzIHF1YXJ0ZXJseSBXaW5kIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgUXVhcnRlcmx5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBtb250aGx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGEgMyBtb250aCBwZXJpb2QuICBBIG1pbmltdW0gb2YgMiBtb250aGx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIHF1YXJ0ZXJseSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcbldVXzQyMiAoWm9uYWwgV2luZCwgbSBzLTEpXG5XVl80MjMgKE1lcmlkaW9uYWwgV2luZCwgbSBzLTEpXG5XU180MDEgKFdpbmQgU3BlZWQsIG0gcy0xKVxuUVdTXzU0MDEgKFdpbmQgU3BlZWQgUXVhbGl0eSlcblNXU182NDAxIChXaW5kIFNwZWVkIFNvdXJjZSlcbldEXzQxMCAoV2luZCBEaXJlY3Rpb24sIGRlZ3JlZXNfdHJ1ZSlcblFXRF81NDEwIChXaW5kIERpcmVjdGlvbiBRdWFsaXR5KVxuU1dEXzY0MTAgKFdpbmQgRGlyZWN0aW9uIFNvdXJjZSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvUXJ0V19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb1FydFdfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb1FydFcvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb1FydFcucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9RcnRXJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9RcnRXIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnREeW4uc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnREeW4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydER5bi5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBRdWFydGVybHksIDE5ODAtcHJlc2VudCwgRHluYW1pYyBIZWlnaHQiLCAiVGhpcyBkYXRhc2V0IGhhcyBxdWFydGVybHkgRHluYW1pYyBIZWlnaHQgZGF0YSAoYSBtZWFzdXJlIG9mIHRoZSBlbGV2YXRpb24gb2YgdGhlIHNlYSBsZXZlbCwgY2FsY3VsYXRlZCBieSBpbnRlZ3JhdGluZyB0aGUgc3BlY2lmaWMgdm9sdW1lIGFub21hbHkgb2YgdGhlIHNlYSB3YXRlciBiZXR3ZWVuIHRoZSBzZWEgc3VyZmFjZSBhbmQgNTAwIG0gZGVwdGgpIGZyb20gdGhlIFxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBRdWFydGVybHkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIG1vbnRobHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgYSAzIG1vbnRoIHBlcmlvZC4gIEEgbWluaW11bSBvZiAyIG1vbnRobHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgcXVhcnRlcmx5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuRFlOXzEzIChEeW5hbWljIEhlaWdodCwgZHluLWNtKVxuUURfNTAxMyAoRHluYW1pYyBIZWlnaHQgUXVhbGl0eSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvUXJ0RHluX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvUXJ0RHluX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9RcnREeW4vaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb1FydER5bi5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb1FydER5biZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvUXJ0RHluIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRIZWF0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0SGVhdCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0SGVhdC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBRdWFydGVybHksIDE5ODAtcHJlc2VudCwgSGVhdCBDb250ZW50IiwgIlRoaXMgZGF0YXNldCBoYXMgcXVhcnRlcmx5IEhlYXQgQ29udGVudCBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIFF1YXJ0ZXJseSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgbW9udGhseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBhIDMgbW9udGggcGVyaW9kLiAgQSBtaW5pbXVtIG9mIDIgbW9udGhseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSBxdWFydGVybHkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5IVENfMTMwIChIZWF0IENvbnRlbnQsIDEwKioxMCBKIG0tMilcbkhUQ181MTMwIChIZWF0IENvbnRlbnQgUXVhbGl0eSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvUXJ0SGVhdF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb1FydEhlYXRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb1FydEhlYXQvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb1FydEhlYXQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9RcnRIZWF0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9RcnRIZWF0Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRQb3Muc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRQb3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydFBvcy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBRdWFydGVybHksIDE5ODAtcHJlc2VudCwgUG9zaXRpb24iLCAiVGhpcyBkYXRhc2V0IGhhcyBxdWFydGVybHkgUG9zaXRpb24gZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBRdWFydGVybHkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIG1vbnRobHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgYSAzIG1vbnRoIHBlcmlvZC4gIEEgbWluaW11bSBvZiAyIG1vbnRobHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgcXVhcnRlcmx5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuTE9OXzUwMiAoUHJlY2lzZSBMb25naXR1ZGUsIGRlZ3JlZV9lYXN0KVxuUVhfNTUwMiAoTG9uZ2l0dWRlIFF1YWxpdHkpXG5MQVRfNTAwIChQcmVjaXNlIExhdGl0dWRlLCBkZWdyZWVfbm9ydGgpXG5RWV81NTAwIChMYXRpdHVkZSBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9RcnRQb3NfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9RcnRQb3NfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb1FydFBvcy9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvUXJ0UG9zLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvUXJ0UG9zJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9RcnRQb3MiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydEQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnREIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRELmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIFF1YXJ0ZXJseSwgMTk4Ny1wcmVzZW50LCBQb3RlbnRpYWwgRGVuc2l0eSBBbm9tYWx5IiwgIlRoaXMgZGF0YXNldCBoYXMgcXVhcnRlcmx5IFBvdGVudGlhbCBEZW5zaXR5IEFub21hbHkgKHNpZ21hLXRoZXRhKSBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIFF1YXJ0ZXJseSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgbW9udGhseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBhIDMgbW9udGggcGVyaW9kLiAgQSBtaW5pbXVtIG9mIDIgbW9udGhseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSBxdWFydGVybHkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5TVEhfNzEgKFNpZ21hLVRoZXRhLCBrZyBtLTMpXG5RU1RfNTA3MSAoU2lnbWEtVGhldGEgUXVhbGl0eSlcblNTVF82MDcxIChTaWdtYS1UaGV0YSBTb3VyY2UpXG5ESUNfNzA3MSAoU2lnbWEtVGhldGEgSW5zdHJ1bWVudCBDb2RlKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9RcnREX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvUXJ0RF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvUXJ0RC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvUXJ0RC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb1FydEQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb1FydEQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydFMuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRTIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRTLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIFF1YXJ0ZXJseSwgMTk4Ny1wcmVzZW50LCBTYWxpbml0eSIsICJUaGlzIGRhdGFzZXQgaGFzIHF1YXJ0ZXJseSBTYWxpbml0eSBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIFF1YXJ0ZXJseSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgbW9udGhseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBhIDMgbW9udGggcGVyaW9kLiAgQSBtaW5pbXVtIG9mIDIgbW9udGhseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSBxdWFydGVybHkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5TXzQxIChTZWEgV2F0ZXIgUHJhY3RpY2FsIFNhbGluaXR5LCBQU1UpXG5RU181MDQxIChTYWxpbml0eSBRdWFsaXR5KVxuU1NfNjA0MSAoU2FsaW5pdHkgU291cmNlKVxuU0lDXzgwNDEgKFNhbGluaXR5IEluc3RydW1lbnQgQ29kZSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvUXJ0U19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb1FydFNfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb1FydFMvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb1FydFMucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9RcnRTJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9RcnRTIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRBZGNwLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0QWRjcCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0QWRjcC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBRdWFydGVybHksIDE5ODgtMjAxNywgQURDUCIsICJUaGlzIGRhdGFzZXQgaGFzIHF1YXJ0ZXJseSBBY291c3RpYyBEb3BwbGVyIEN1cnJlbnQgUHJvZmlsZXIgKEFEQ1ApIHdhdGVyIGN1cnJlbnRzIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgUXVhcnRlcmx5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBtb250aGx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGEgMyBtb250aCBwZXJpb2QuICBBIG1pbmltdW0gb2YgMiBtb250aGx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIHF1YXJ0ZXJseSBhdmVyYWdlLiAgQURDUCBkYXRhIGFyZSBhdmFpbGFibGUgb25seSBhZnRlciBtb29yaW5nIHJlY292ZXJpZXMsIHdoaWNoIGFyZSBzY2hlZHVsZWQgb24gYW4gYW5udWFsIGJhc2lzLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG51XzEyMDUgKEVhc3R3YXJkIFNlYSBXYXRlciBWZWxvY2l0eSwgY20vcylcblFVXzUyMDUgKEVhc3R3YXJkIFNlYSBXYXRlciBWZWxvY2l0eSBRdWFsaXR5KVxudl8xMjA2IChOb3J0aHdhcmQgU2VhIFdhdGVyIFZlbG9jaXR5LCBjbS9zKVxuUVZfNTIwNiAoTm9ydGh3YXJkIFNlYSBXYXRlciBWZWxvY2l0eSBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9RcnRBZGNwX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvUXJ0QWRjcF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvUXJ0QWRjcC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvUXJ0QWRjcC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb1FydEFkY3Amc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb1FydEFkY3AiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydEV2YXAuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRFdmFwIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRFdmFwLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIFF1YXJ0ZXJseSwgMTk4OS1wcmVzZW50LCBFdmFwb3JhdGlvbiIsICJUaGlzIGRhdGFzZXQgaGFzIHF1YXJ0ZXJseSBFdmFwb3JhdGlvbiBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIFF1YXJ0ZXJseSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgbW9udGhseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBhIDMgbW9udGggcGVyaW9kLiAgQSBtaW5pbXVtIG9mIDIgbW9udGhseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSBxdWFydGVybHkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5FXzI1MCAoRXZhcG9yYXRpb24sIE1NL0hSKVxuUUVfNTI1MCAoRXZhcG9yYXRpb24gUXVhbGl0eSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvUXJ0RXZhcF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb1FydEV2YXBfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb1FydEV2YXAvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb1FydEV2YXAucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9RcnRFdmFwJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9RcnRFdmFwIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRRbGF0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0UWxhdCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0UWxhdC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBRdWFydGVybHksIDE5ODktcHJlc2VudCwgTGF0ZW50IEhlYXQgRmx1eCIsICJUaGlzIGRhdGFzZXQgaGFzIHF1YXJ0ZXJseSBMYXRlbnQgSGVhdCBGbHV4IGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgUXVhcnRlcmx5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBtb250aGx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGEgMyBtb250aCBwZXJpb2QuICBBIG1pbmltdW0gb2YgMiBtb250aGx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIHF1YXJ0ZXJseSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblFMXzEzNyAoTGF0ZW50IEhlYXQgRmx1eCwgVyBtLTIpXG5RUUxfNTEzNyAoTGF0ZW50IEhlYXQgRmx1eCBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9RcnRRbGF0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvUXJ0UWxhdF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvUXJ0UWxhdC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvUXJ0UWxhdC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb1FydFFsYXQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb1FydFFsYXQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydFJoLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0UmgiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydFJoLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIFF1YXJ0ZXJseSwgMTk4OS1wcmVzZW50LCBSZWxhdGl2ZSBIdW1pZGl0eSIsICJUaGlzIGRhdGFzZXQgaGFzIHF1YXJ0ZXJseSBSZWxhdGl2ZSBIdW1pZGl0eSBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIFF1YXJ0ZXJseSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgbW9udGhseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBhIDMgbW9udGggcGVyaW9kLiAgQSBtaW5pbXVtIG9mIDIgbW9udGhseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSBxdWFydGVybHkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5SSF85MTAgKFJlbGF0aXZlIEh1bWlkaXR5LCBwZXJjZW50KVxuUVJIXzU5MTAgKFJlbGF0aXZlIEh1bWlkaXR5IFF1YWxpdHkpXG5TUkhfNjkxMCAoUmVsYXRpdmUgSHVtaWRpdHkgU291cmNlKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9RcnRSaF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb1FydFJoX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9RcnRSaC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvUXJ0UmgucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9RcnRSaCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvUXJ0UmgiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydFFzZW4uc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRRc2VuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRRc2VuLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIFF1YXJ0ZXJseSwgMTk4OS1wcmVzZW50LCBTZW5zaWJsZSBIZWF0IEZsdXgiLCAiVGhpcyBkYXRhc2V0IGhhcyBxdWFydGVybHkgU2Vuc2libGUgSGVhdCBGbHV4IGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgUXVhcnRlcmx5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBtb250aGx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGEgMyBtb250aCBwZXJpb2QuICBBIG1pbmltdW0gb2YgMiBtb250aGx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIHF1YXJ0ZXJseSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblFTXzEzOCAoU2Vuc2libGUgSGVhdCBGbHV4LCBXIG0tMilcblFRU181MTM4IChTZW5zaWJsZSBIZWF0IEZsdXggUXVhbGl0eSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvUXJ0UXNlbl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb1FydFFzZW5faXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb1FydFFzZW4vaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb1FydFFzZW4ucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9RcnRRc2VuJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9RcnRRc2VuIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRUYXUuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRUYXUiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydFRhdS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBRdWFydGVybHksIDE5ODktcHJlc2VudCwgV2luZCBTdHJlc3MiLCAiVGhpcyBkYXRhc2V0IGhhcyBxdWFydGVybHkgV2luZCBTdHJlc3MgZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBRdWFydGVybHkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIG1vbnRobHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgYSAzIG1vbnRoIHBlcmlvZC4gIEEgbWluaW11bSBvZiAyIG1vbnRobHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgcXVhcnRlcmx5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuVFhfNDQyIChab25hbCBXaW5kIFN0cmVzcywgTi9tMilcblRZXzQ0MyAoTWVyaWRpb25hbCBXaW5kIFN0cmVzcywgTi9tMilcblRBVV80NDAgKFdpbmQgU3RyZXNzLCBOL20yKVxuVERfNDQ1IChXaW5kIFN0cmVzcyBEaXJlY3Rpb24sIGRlZ3JlZXNfdHJ1ZSlcblFUQVVfNTQ0MCAoV2luZCBTdHJlc3MgUXVhbGl0eSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvUXJ0VGF1X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvUXJ0VGF1X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9RcnRUYXUvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb1FydFRhdS5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb1FydFRhdSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvUXJ0VGF1Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRTd25ldC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydFN3bmV0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRTd25ldC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBRdWFydGVybHksIDE5OTEtcHJlc2VudCwgTmV0IFNob3J0d2F2ZSBSYWRpYXRpb24iLCAiVGhpcyBkYXRhc2V0IGhhcyBxdWFydGVybHkgTmV0IFNob3J0d2F2ZSBSYWRpYXRpb24gZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBRdWFydGVybHkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIG1vbnRobHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgYSAzIG1vbnRoIHBlcmlvZC4gIEEgbWluaW11bSBvZiAyIG1vbnRobHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgcXVhcnRlcmx5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuU1dOXzE0OTUgKE5ldCBTaG9ydHdhdmUgUmFkaWF0aW9uLCBXL00qKjIpXG5RU1dfNTQ5NSAoU2hvcnR3YXZlIFJhZGlhdGlvbiBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9RcnRTd25ldF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb1FydFN3bmV0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9RcnRTd25ldC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvUXJ0U3duZXQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9RcnRTd25ldCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvUXJ0U3duZXQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydFNzcy5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydFNzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0U3NzLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIFF1YXJ0ZXJseSwgMTk5Mi1wcmVzZW50LCBTZWEgU3VyZmFjZSBTYWxpbml0eSIsICJUaGlzIGRhdGFzZXQgaGFzIHF1YXJ0ZXJseSBTZWEgU3VyZmFjZSBTYWxpbml0eSBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIFF1YXJ0ZXJseSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgbW9udGhseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBhIDMgbW9udGggcGVyaW9kLiAgQSBtaW5pbXVtIG9mIDIgbW9udGhseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSBxdWFydGVybHkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5TXzQxIChTZWEgV2F0ZXIgUHJhY3RpY2FsIFNhbGluaXR5LCBQU1UpXG5RU181MDQxIChTYWxpbml0eSBRdWFsaXR5KVxuU1NfNjA0MSAoU2FsaW5pdHkgU291cmNlKVxuU0lDXzcwNDEgKFNhbGluaXR5IEluc3RydW1lbnQgQ29kZSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvUXJ0U3NzX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvUXJ0U3NzX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9RcnRTc3MvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb1FydFNzcy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb1FydFNzcyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvUXJ0U3NzIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRTc2Quc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRTc2QiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydFNzZC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBRdWFydGVybHksIDE5OTItcHJlc2VudCwgU2lnbWEtVGhldGEiLCAiVGhpcyBkYXRhc2V0IGhhcyBxdWFydGVybHkgU2lnbWEtVGhldGEgKFBvdGVudGlhbCBEZW5zaXR5IEFub21hbHkpIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgUXVhcnRlcmx5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBtb250aGx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGEgMyBtb250aCBwZXJpb2QuICBBIG1pbmltdW0gb2YgMiBtb250aGx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIHF1YXJ0ZXJseSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblNUSF83MSAoU2lnbWEtVGhldGEsIGtnIG0tMylcblFTVF81MDcxIChTaWdtYS1UaGV0YSBRdWFsaXR5KVxuU1NUXzYwNzEgKFNpZ21hLVRoZXRhIFNvdXJjZSlcbkRJQ183MDcxIChTaWdtYS1UaGV0YSBJbnN0cnVtZW50IENvZGUpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb1FydFNzZF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb1FydFNzZF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvUXJ0U3NkL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9RcnRTc2QucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9RcnRTc2Qmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb1FydFNzZCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0RW1wLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0RW1wIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRFbXAuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgUXVhcnRlcmx5LCAxOTk3LXByZXNlbnQsIEV2YXBvcmF0aW9uIE1pbnVzIFByZWNpcGl0YXRpb24iLCAiVGhpcyBkYXRhc2V0IGhhcyBxdWFydGVybHkgRXZhcG9yYXRpb24gTWludXMgUHJlY2lwaXRhdGlvbiBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIFF1YXJ0ZXJseSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgbW9udGhseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBhIDMgbW9udGggcGVyaW9kLiAgQSBtaW5pbXVtIG9mIDIgbW9udGhseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSBxdWFydGVybHkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5FTVBfMjUxIChFdmFwb3JhdGlvbiBNaW51cyBQcmVjaXBpdGF0aW9uLCBtbS9ocilcblFFTVBfNTI1MSAoRXZhcG9yYXRpb24gTWludXMgUHJlY2lwaXRhdGlvbiBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9RcnRFbXBfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9RcnRFbXBfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb1FydEVtcC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvUXJ0RW1wLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvUXJ0RW1wJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9RcnRFbXAiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydFJmLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0UmYiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydFJmLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIFF1YXJ0ZXJseSwgMTk5Ny1wcmVzZW50LCBIZWF0IEZsdXggRHVlIFRvIFJhaW4iLCAiVGhpcyBkYXRhc2V0IGhhcyBxdWFydGVybHkgSGVhdCBGbHV4IER1ZSBUbyBSYWluIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgUXVhcnRlcmx5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBtb250aGx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGEgMyBtb250aCBwZXJpb2QuICBBIG1pbmltdW0gb2YgMiBtb250aGx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIHF1YXJ0ZXJseSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblFSXzEzOSAoSGVhdCBGbHV4IER1ZSBUbyBSYWluLCBXIG0tMilcblFRUl81MTM5IChIZWF0IEZsdXggRHVlIFRvIFJhaW4gUXVhbGl0eSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvUXJ0UmZfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9RcnRSZl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvUXJ0UmYvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb1FydFJmLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvUXJ0UmYmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb1FydFJmIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRSYWluLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0UmFpbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0UmFpbi5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBRdWFydGVybHksIDE5OTctcHJlc2VudCwgUHJlY2lwaXRhdGlvbiIsICJUaGlzIGRhdGFzZXQgaGFzIHF1YXJ0ZXJseSBQcmVjaXBpdGF0aW9uIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgUXVhcnRlcmx5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBtb250aGx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGEgMyBtb250aCBwZXJpb2QuICBBIG1pbmltdW0gb2YgMiBtb250aGx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIHF1YXJ0ZXJseSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblJOXzQ4NSAoUHJlY2lwaXRhdGlvbiwgTU0vSFIpXG5RUk5fNTQ4NSAoUHJlY2lwaXRhdGlvbiBRdWFsaXR5KVxuU1JOXzY0ODUgKFByZWNpcGl0YXRpb24gU291cmNlKVxuUk5TXzQ4NiAoUHJlY2lwaXRhdGlvbiBTdGFuZGFyZCBEZXZpYXRpb24sIE1NL0hSKVxuUk5QXzQ4NyAoUGVyY2VudCBUaW1lIFJhaW5pbmcsIHBlcmNlbnQpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb1FydFJhaW5fZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9RcnRSYWluX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9RcnRSYWluL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9RcnRSYWluLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvUXJ0UmFpbiZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvUXJ0UmFpbiJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0QnAuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRCcCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0QnAuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgUXVhcnRlcmx5LCAxOTk4LXByZXNlbnQsIEJhcm9tZXRyaWMgKEFpcikgUHJlc3N1cmUiLCAiVGhpcyBkYXRhc2V0IGhhcyBxdWFydGVybHkgQmFyb21ldHJpYyAoQWlyKSBQcmVzc3VyZSBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIFF1YXJ0ZXJseSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgbW9udGhseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBhIDMgbW9udGggcGVyaW9kLiAgQSBtaW5pbXVtIG9mIDIgbW9udGhseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSBxdWFydGVybHkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5CUF85MTUgKEJhcm9tZXRyaWMgKEFpcikgUHJlc3N1cmUsIGhQYSlcblFCUF81OTE1IChCYXJvbWV0cmljIChBaXIpIFByZXNzdXJlIFF1YWxpdHkpXG5TQlBfNjkxNSAoQmFyb21ldHJpYyAoQWlyKSBQcmVzc3VyZSBTb3VyY2UpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb1FydEJwX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvUXJ0QnBfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb1FydEJwL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9RcnRCcC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb1FydEJwJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9RcnRCcCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0QmYuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRCZiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0QmYuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgUXVhcnRlcmx5LCAyMDAwLXByZXNlbnQsIEJ1b3lhbmN5IEZsdXgiLCAiVGhpcyBkYXRhc2V0IGhhcyBxdWFydGVybHkgQnVveWFuY3kgRmx1eCBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIFF1YXJ0ZXJseSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgbW9udGhseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBhIDMgbW9udGggcGVyaW9kLiAgQSBtaW5pbXVtIG9mIDIgbW9udGhseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSBxdWFydGVybHkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5CRl8xOTEgKEJ1b3lhbmN5IEZsdXgsIDEwKio2IGtnIG0tMiBzLTEpXG5RQkZfNTE5MSAoQnVveWFuY3kgRmx1eCBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9RcnRCZl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb1FydEJmX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9RcnRCZi9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvUXJ0QmYucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9RcnRCZiZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvUXJ0QmYiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydEx3LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0THciLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydEx3LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIFF1YXJ0ZXJseSwgMjAwMC1wcmVzZW50LCBMb25nd2F2ZSBSYWRpYXRpb24iLCAiVGhpcyBkYXRhc2V0IGhhcyBxdWFydGVybHkgSW5jb21pbmcgTG9uZ3dhdmUgUmFkaWF0aW9uIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgUXVhcnRlcmx5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBtb250aGx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGEgMyBtb250aCBwZXJpb2QuICBBIG1pbmltdW0gb2YgMiBtb250aGx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIHF1YXJ0ZXJseSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblFsXzEzNiAoSW5jb21pbmcgTG9uZ3dhdmUgUmFkaWF0aW9uLCBXIG0tMilcblFMV181MTM2IChMb25nd2F2ZSBSYWRpYXRpb24gUXVhbGl0eSlcblNMV182MTM2IChMb25nd2F2ZSBSYWRpYXRpb24gU291cmNlKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9RcnRMd19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb1FydEx3X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9RcnRMdy9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvUXJ0THcucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9RcnRMdyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvUXJ0THciXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydEx3bmV0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0THduZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydEx3bmV0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIFF1YXJ0ZXJseSwgMjAwMC1wcmVzZW50LCBOZXQgTG9uZ3dhdmUgUmFkaWF0aW9uIiwgIlRoaXMgZGF0YXNldCBoYXMgcXVhcnRlcmx5IE5ldCBMb25nd2F2ZSBSYWRpYXRpb24gZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBRdWFydGVybHkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIG1vbnRobHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgYSAzIG1vbnRoIHBlcmlvZC4gIEEgbWluaW11bSBvZiAyIG1vbnRobHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgcXVhcnRlcmx5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuTFdOXzExMzYgKE5ldCBMb25nd2F2ZSBSYWRpYXRpb24sIFcgbS0yKVxuUUxXXzUxMzYgKExvbmd3YXZlIFJhZGlhdGlvbiBRdWFsaXR5KVxuU0xXXzYxMzYgKExvbmd3YXZlIFJhZGlhdGlvbiBTb3VyY2UpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb1FydEx3bmV0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvUXJ0THduZXRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb1FydEx3bmV0L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9RcnRMd25ldC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb1FydEx3bmV0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9RcnRMd25ldCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0UW5ldC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydFFuZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydFFuZXQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgUXVhcnRlcmx5LCAyMDAwLXByZXNlbnQsIFRvdGFsIEhlYXQgRmx1eCIsICJUaGlzIGRhdGFzZXQgaGFzIHF1YXJ0ZXJseSBUb3RhbCBIZWF0IEZsdXggZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBRdWFydGVybHkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIG1vbnRobHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgYSAzIG1vbnRoIHBlcmlvZC4gIEEgbWluaW11bSBvZiAyIG1vbnRobHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgcXVhcnRlcmx5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuUVRfMjEwIChUb3RhbCBIZWF0IEZsdXgsIFcvTSoqMilcblFRMF81MjEwIChUb3RhbCBIZWF0IEZsdXggUXVhbGl0eSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvUXJ0UW5ldF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb1FydFFuZXRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb1FydFFuZXQvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb1FydFFuZXQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9RcnRRbmV0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9RcnRRbmV0Il0sCiAgICAgIFsiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRVSTIxNmhyIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZFVJMjE2aHIuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVXB3ZWxsaW5nIEluZGV4LCAyMU4gMTA3VywgNi1ob3VybHkiLCAiVXB3ZWxsaW5nIGluZGV4IGNvbXB1dGVkIGZyb20gMS1kZWdyZWUgRk5NT0Mgc2VhIGxldmVsIHByZXNzdXJlIGZvciAxNSBsb2NhdGlvbnMgb2ZmIHRoZSBOb3J0aCBBbWVyaWNhbiBXZXN0IENvYXN0IGF0IGVhY2ggMyBkZWdyZWVzIG9mIGxhdGl0dWRlIGZyb20gMjFOIHRvIDYwTi4gVGhlIGNvYXN0YWwgVXB3ZWxsaW5nIEluZGV4IGlzIGFuIGluZGV4IG9mIHRoZSBzdHJlbmd0aCBvZiB0aGUgd2luZCBmb3JjaW5nIG9uIHRoZSBvY2VhbiB3aGljaCBoYXMgYmVlbiB1c2VkIGluIG1hbnkgc3R1ZGllcyBvZiB0aGUgZWZmZWN0cyBvZiBvY2VhbiB2YXJpYWJpbGl0eSBvbiB0aGUgcmVwcm9kdWN0aXZlIGFuZCByZWNydWl0bWVudCBzdWNjZXNzIG9mIG1hbnkgZmlzaCBhbmQgaW52ZXJ0ZWJyYXRlIHNwZWNpZXMuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG50aW1lIChyZWZlcmVuY2UgdGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnVwd2VsbGluZ19pbmRleFxuc3RhdGlvbl9pZFxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRVSTIxNmhyX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRVSTIxNmhyX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZFVJMjE2aHIvaW5kZXguanNvbiIsICJodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L0xBUy9kb2NzL3dpbmRfZnJvbV9wcmVzc3VyZS5uYy5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZFVJMjE2aHIucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZFVJMjE2aHImc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQS9TV0ZTQyBFbnZpcm9ubWVudGFsIFJlc2VhcmNoIERpdmlzaW9uIiwgImVyZFVJMjE2aHIiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZFVJMjQ2aHIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkVUkyNDZoci5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJVcHdlbGxpbmcgSW5kZXgsIDI0TiAxMTNXLCA2LWhvdXJseSIsICJVcHdlbGxpbmcgaW5kZXggY29tcHV0ZWQgZnJvbSAxLWRlZ3JlZSBGTk1PQyBzZWEgbGV2ZWwgcHJlc3N1cmUgZm9yIDE1IGxvY2F0aW9ucyBvZmYgdGhlIE5vcnRoIEFtZXJpY2FuIFdlc3QgQ29hc3QgYXQgZWFjaCAzIGRlZ3JlZXMgb2YgbGF0aXR1ZGUgZnJvbSAyMU4gdG8gNjBOLiBUaGUgY29hc3RhbCBVcHdlbGxpbmcgSW5kZXggaXMgYW4gaW5kZXggb2YgdGhlIHN0cmVuZ3RoIG9mIHRoZSB3aW5kIGZvcmNpbmcgb24gdGhlIG9jZWFuIHdoaWNoIGhhcyBiZWVuIHVzZWQgaW4gbWFueSBzdHVkaWVzIG9mIHRoZSBlZmZlY3RzIG9mIG9jZWFuIHZhcmlhYmlsaXR5IG9uIHRoZSByZXByb2R1Y3RpdmUgYW5kIHJlY3J1aXRtZW50IHN1Y2Nlc3Mgb2YgbWFueSBmaXNoIGFuZCBpbnZlcnRlYnJhdGUgc3BlY2llcy5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbnRpbWUgKHJlZmVyZW5jZSB0aW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxudXB3ZWxsaW5nX2luZGV4XG5zdGF0aW9uX2lkXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZFVJMjQ2aHJfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2VyZFVJMjQ2aHJfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkVUkyNDZoci9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvTEFTL2RvY3Mvd2luZF9mcm9tX3ByZXNzdXJlLm5jLmh0bWwiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkVUkyNDZoci5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkVUkyNDZociZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBL1NXRlNDIEVudmlyb25tZW50YWwgUmVzZWFyY2ggRGl2aXNpb24iLCAiZXJkVUkyNDZociJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkVUkyNzZociIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRVSTI3NmhyLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlVwd2VsbGluZyBJbmRleCwgMjdOIDExNlcsIDYtaG91cmx5IiwgIlVwd2VsbGluZyBpbmRleCBjb21wdXRlZCBmcm9tIDEtZGVncmVlIEZOTU9DIHNlYSBsZXZlbCBwcmVzc3VyZSBmb3IgMTUgbG9jYXRpb25zIG9mZiB0aGUgTm9ydGggQW1lcmljYW4gV2VzdCBDb2FzdCBhdCBlYWNoIDMgZGVncmVlcyBvZiBsYXRpdHVkZSBmcm9tIDIxTiB0byA2ME4uIFRoZSBjb2FzdGFsIFVwd2VsbGluZyBJbmRleCBpcyBhbiBpbmRleCBvZiB0aGUgc3RyZW5ndGggb2YgdGhlIHdpbmQgZm9yY2luZyBvbiB0aGUgb2NlYW4gd2hpY2ggaGFzIGJlZW4gdXNlZCBpbiBtYW55IHN0dWRpZXMgb2YgdGhlIGVmZmVjdHMgb2Ygb2NlYW4gdmFyaWFiaWxpdHkgb24gdGhlIHJlcHJvZHVjdGl2ZSBhbmQgcmVjcnVpdG1lbnQgc3VjY2VzcyBvZiBtYW55IGZpc2ggYW5kIGludmVydGVicmF0ZSBzcGVjaWVzLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxudGltZSAocmVmZXJlbmNlIHRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG51cHdlbGxpbmdfaW5kZXhcbnN0YXRpb25faWRcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkVUkyNzZocl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkVUkyNzZocl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRVSTI3NmhyL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9MQVMvZG9jcy93aW5kX2Zyb21fcHJlc3N1cmUubmMuaHRtbCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lcmRVSTI3NmhyLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmRVSTI3NmhyJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEvU1dGU0MgRW52aXJvbm1lbnRhbCBSZXNlYXJjaCBEaXZpc2lvbiIsICJlcmRVSTI3NmhyIl0sCiAgICAgIFsiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRVSTMwNmhyIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZFVJMzA2aHIuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVXB3ZWxsaW5nIEluZGV4LCAzME4gMTE5VywgNi1ob3VybHkiLCAiVXB3ZWxsaW5nIGluZGV4IGNvbXB1dGVkIGZyb20gMS1kZWdyZWUgRk5NT0Mgc2VhIGxldmVsIHByZXNzdXJlIGZvciAxNSBsb2NhdGlvbnMgb2ZmIHRoZSBOb3J0aCBBbWVyaWNhbiBXZXN0IENvYXN0IGF0IGVhY2ggMyBkZWdyZWVzIG9mIGxhdGl0dWRlIGZyb20gMjFOIHRvIDYwTi4gVGhlIGNvYXN0YWwgVXB3ZWxsaW5nIEluZGV4IGlzIGFuIGluZGV4IG9mIHRoZSBzdHJlbmd0aCBvZiB0aGUgd2luZCBmb3JjaW5nIG9uIHRoZSBvY2VhbiB3aGljaCBoYXMgYmVlbiB1c2VkIGluIG1hbnkgc3R1ZGllcyBvZiB0aGUgZWZmZWN0cyBvZiBvY2VhbiB2YXJpYWJpbGl0eSBvbiB0aGUgcmVwcm9kdWN0aXZlIGFuZCByZWNydWl0bWVudCBzdWNjZXNzIG9mIG1hbnkgZmlzaCBhbmQgaW52ZXJ0ZWJyYXRlIHNwZWNpZXMuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG50aW1lIChyZWZlcmVuY2UgdGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnVwd2VsbGluZ19pbmRleFxuc3RhdGlvbl9pZFxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRVSTMwNmhyX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRVSTMwNmhyX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZFVJMzA2aHIvaW5kZXguanNvbiIsICJodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L0xBUy9kb2NzL3dpbmRfZnJvbV9wcmVzc3VyZS5uYy5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZFVJMzA2aHIucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZFVJMzA2aHImc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQS9TV0ZTQyBFbnZpcm9ubWVudGFsIFJlc2VhcmNoIERpdmlzaW9uIiwgImVyZFVJMzA2aHIiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZFVJMzM2aHIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkVUkzMzZoci5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJVcHdlbGxpbmcgSW5kZXgsIDMzTiAxMTlXLCA2LWhvdXJseSIsICJVcHdlbGxpbmcgaW5kZXggY29tcHV0ZWQgZnJvbSAxLWRlZ3JlZSBGTk1PQyBzZWEgbGV2ZWwgcHJlc3N1cmUgZm9yIDE1IGxvY2F0aW9ucyBvZmYgdGhlIE5vcnRoIEFtZXJpY2FuIFdlc3QgQ29hc3QgYXQgZWFjaCAzIGRlZ3JlZXMgb2YgbGF0aXR1ZGUgZnJvbSAyMU4gdG8gNjBOLiBUaGUgY29hc3RhbCBVcHdlbGxpbmcgSW5kZXggaXMgYW4gaW5kZXggb2YgdGhlIHN0cmVuZ3RoIG9mIHRoZSB3aW5kIGZvcmNpbmcgb24gdGhlIG9jZWFuIHdoaWNoIGhhcyBiZWVuIHVzZWQgaW4gbWFueSBzdHVkaWVzIG9mIHRoZSBlZmZlY3RzIG9mIG9jZWFuIHZhcmlhYmlsaXR5IG9uIHRoZSByZXByb2R1Y3RpdmUgYW5kIHJlY3J1aXRtZW50IHN1Y2Nlc3Mgb2YgbWFueSBmaXNoIGFuZCBpbnZlcnRlYnJhdGUgc3BlY2llcy5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbnRpbWUgKHJlZmVyZW5jZSB0aW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxudXB3ZWxsaW5nX2luZGV4XG5zdGF0aW9uX2lkXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZFVJMzM2aHJfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2VyZFVJMzM2aHJfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkVUkzMzZoci9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvTEFTL2RvY3Mvd2luZF9mcm9tX3ByZXNzdXJlLm5jLmh0bWwiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkVUkzMzZoci5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkVUkzMzZociZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBL1NXRlNDIEVudmlyb25tZW50YWwgUmVzZWFyY2ggRGl2aXNpb24iLCAiZXJkVUkzMzZociJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkVUkzNjZociIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRVSTM2NmhyLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlVwd2VsbGluZyBJbmRleCwgMzZOIDEyMlcsIDYtaG91cmx5IiwgIlVwd2VsbGluZyBpbmRleCBjb21wdXRlZCBmcm9tIDEtZGVncmVlIEZOTU9DIHNlYSBsZXZlbCBwcmVzc3VyZSBmb3IgMTUgbG9jYXRpb25zIG9mZiB0aGUgTm9ydGggQW1lcmljYW4gV2VzdCBDb2FzdCBhdCBlYWNoIDMgZGVncmVlcyBvZiBsYXRpdHVkZSBmcm9tIDIxTiB0byA2ME4uIFRoZSBjb2FzdGFsIFVwd2VsbGluZyBJbmRleCBpcyBhbiBpbmRleCBvZiB0aGUgc3RyZW5ndGggb2YgdGhlIHdpbmQgZm9yY2luZyBvbiB0aGUgb2NlYW4gd2hpY2ggaGFzIGJlZW4gdXNlZCBpbiBtYW55IHN0dWRpZXMgb2YgdGhlIGVmZmVjdHMgb2Ygb2NlYW4gdmFyaWFiaWxpdHkgb24gdGhlIHJlcHJvZHVjdGl2ZSBhbmQgcmVjcnVpdG1lbnQgc3VjY2VzcyBvZiBtYW55IGZpc2ggYW5kIGludmVydGVicmF0ZSBzcGVjaWVzLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxudGltZSAocmVmZXJlbmNlIHRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG51cHdlbGxpbmdfaW5kZXhcbnN0YXRpb25faWRcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkVUkzNjZocl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkVUkzNjZocl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRVSTM2NmhyL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9MQVMvZG9jcy93aW5kX2Zyb21fcHJlc3N1cmUubmMuaHRtbCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lcmRVSTM2NmhyLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmRVSTM2NmhyJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEvU1dGU0MgRW52aXJvbm1lbnRhbCBSZXNlYXJjaCBEaXZpc2lvbiIsICJlcmRVSTM2NmhyIl0sCiAgICAgIFsiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRVSTM5NmhyIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZFVJMzk2aHIuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVXB3ZWxsaW5nIEluZGV4LCAzOU4gMTI1VywgNi1ob3VybHkiLCAiVXB3ZWxsaW5nIGluZGV4IGNvbXB1dGVkIGZyb20gMS1kZWdyZWUgRk5NT0Mgc2VhIGxldmVsIHByZXNzdXJlIGZvciAxNSBsb2NhdGlvbnMgb2ZmIHRoZSBOb3J0aCBBbWVyaWNhbiBXZXN0IENvYXN0IGF0IGVhY2ggMyBkZWdyZWVzIG9mIGxhdGl0dWRlIGZyb20gMjFOIHRvIDYwTi4gVGhlIGNvYXN0YWwgVXB3ZWxsaW5nIEluZGV4IGlzIGFuIGluZGV4IG9mIHRoZSBzdHJlbmd0aCBvZiB0aGUgd2luZCBmb3JjaW5nIG9uIHRoZSBvY2VhbiB3aGljaCBoYXMgYmVlbiB1c2VkIGluIG1hbnkgc3R1ZGllcyBvZiB0aGUgZWZmZWN0cyBvZiBvY2VhbiB2YXJpYWJpbGl0eSBvbiB0aGUgcmVwcm9kdWN0aXZlIGFuZCByZWNydWl0bWVudCBzdWNjZXNzIG9mIG1hbnkgZmlzaCBhbmQgaW52ZXJ0ZWJyYXRlIHNwZWNpZXMuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG50aW1lIChyZWZlcmVuY2UgdGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnVwd2VsbGluZ19pbmRleFxuc3RhdGlvbl9pZFxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRVSTM5NmhyX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRVSTM5NmhyX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZFVJMzk2aHIvaW5kZXguanNvbiIsICJodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L0xBUy9kb2NzL3dpbmRfZnJvbV9wcmVzc3VyZS5uYy5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZFVJMzk2aHIucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZFVJMzk2aHImc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQS9TV0ZTQyBFbnZpcm9ubWVudGFsIFJlc2VhcmNoIERpdmlzaW9uIiwgImVyZFVJMzk2aHIiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZFVJNDI2aHIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkVUk0MjZoci5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJVcHdlbGxpbmcgSW5kZXgsIDQyTiAxMjVXLCA2LWhvdXJseSIsICJVcHdlbGxpbmcgaW5kZXggY29tcHV0ZWQgZnJvbSAxLWRlZ3JlZSBGTk1PQyBzZWEgbGV2ZWwgcHJlc3N1cmUgZm9yIDE1IGxvY2F0aW9ucyBvZmYgdGhlIE5vcnRoIEFtZXJpY2FuIFdlc3QgQ29hc3QgYXQgZWFjaCAzIGRlZ3JlZXMgb2YgbGF0aXR1ZGUgZnJvbSAyMU4gdG8gNjBOLiBUaGUgY29hc3RhbCBVcHdlbGxpbmcgSW5kZXggaXMgYW4gaW5kZXggb2YgdGhlIHN0cmVuZ3RoIG9mIHRoZSB3aW5kIGZvcmNpbmcgb24gdGhlIG9jZWFuIHdoaWNoIGhhcyBiZWVuIHVzZWQgaW4gbWFueSBzdHVkaWVzIG9mIHRoZSBlZmZlY3RzIG9mIG9jZWFuIHZhcmlhYmlsaXR5IG9uIHRoZSByZXByb2R1Y3RpdmUgYW5kIHJlY3J1aXRtZW50IHN1Y2Nlc3Mgb2YgbWFueSBmaXNoIGFuZCBpbnZlcnRlYnJhdGUgc3BlY2llcy5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbnRpbWUgKHJlZmVyZW5jZSB0aW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxudXB3ZWxsaW5nX2luZGV4XG5zdGF0aW9uX2lkXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZFVJNDI2aHJfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2VyZFVJNDI2aHJfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkVUk0MjZoci9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvTEFTL2RvY3Mvd2luZF9mcm9tX3ByZXNzdXJlLm5jLmh0bWwiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkVUk0MjZoci5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkVUk0MjZociZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBL1NXRlNDIEVudmlyb25tZW50YWwgUmVzZWFyY2ggRGl2aXNpb24iLCAiZXJkVUk0MjZociJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkVUk0NTZociIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRVSTQ1NmhyLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlVwd2VsbGluZyBJbmRleCwgNDVOIDEyNVcsIDYtaG91cmx5IiwgIlVwd2VsbGluZyBpbmRleCBjb21wdXRlZCBmcm9tIDEtZGVncmVlIEZOTU9DIHNlYSBsZXZlbCBwcmVzc3VyZSBmb3IgMTUgbG9jYXRpb25zIG9mZiB0aGUgTm9ydGggQW1lcmljYW4gV2VzdCBDb2FzdCBhdCBlYWNoIDMgZGVncmVlcyBvZiBsYXRpdHVkZSBmcm9tIDIxTiB0byA2ME4uIFRoZSBjb2FzdGFsIFVwd2VsbGluZyBJbmRleCBpcyBhbiBpbmRleCBvZiB0aGUgc3RyZW5ndGggb2YgdGhlIHdpbmQgZm9yY2luZyBvbiB0aGUgb2NlYW4gd2hpY2ggaGFzIGJlZW4gdXNlZCBpbiBtYW55IHN0dWRpZXMgb2YgdGhlIGVmZmVjdHMgb2Ygb2NlYW4gdmFyaWFiaWxpdHkgb24gdGhlIHJlcHJvZHVjdGl2ZSBhbmQgcmVjcnVpdG1lbnQgc3VjY2VzcyBvZiBtYW55IGZpc2ggYW5kIGludmVydGVicmF0ZSBzcGVjaWVzLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxudGltZSAocmVmZXJlbmNlIHRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG51cHdlbGxpbmdfaW5kZXhcbnN0YXRpb25faWRcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkVUk0NTZocl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkVUk0NTZocl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRVSTQ1NmhyL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9MQVMvZG9jcy93aW5kX2Zyb21fcHJlc3N1cmUubmMuaHRtbCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lcmRVSTQ1NmhyLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmRVSTQ1NmhyJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEvU1dGU0MgRW52aXJvbm1lbnRhbCBSZXNlYXJjaCBEaXZpc2lvbiIsICJlcmRVSTQ1NmhyIl0sCiAgICAgIFsiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRVSTQ4NmhyIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZFVJNDg2aHIuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVXB3ZWxsaW5nIEluZGV4LCA0OE4gMTI1VywgNi1ob3VybHkiLCAiVXB3ZWxsaW5nIGluZGV4IGNvbXB1dGVkIGZyb20gMS1kZWdyZWUgRk5NT0Mgc2VhIGxldmVsIHByZXNzdXJlIGZvciAxNSBsb2NhdGlvbnMgb2ZmIHRoZSBOb3J0aCBBbWVyaWNhbiBXZXN0IENvYXN0IGF0IGVhY2ggMyBkZWdyZWVzIG9mIGxhdGl0dWRlIGZyb20gMjFOIHRvIDYwTi4gVGhlIGNvYXN0YWwgVXB3ZWxsaW5nIEluZGV4IGlzIGFuIGluZGV4IG9mIHRoZSBzdHJlbmd0aCBvZiB0aGUgd2luZCBmb3JjaW5nIG9uIHRoZSBvY2VhbiB3aGljaCBoYXMgYmVlbiB1c2VkIGluIG1hbnkgc3R1ZGllcyBvZiB0aGUgZWZmZWN0cyBvZiBvY2VhbiB2YXJpYWJpbGl0eSBvbiB0aGUgcmVwcm9kdWN0aXZlIGFuZCByZWNydWl0bWVudCBzdWNjZXNzIG9mIG1hbnkgZmlzaCBhbmQgaW52ZXJ0ZWJyYXRlIHNwZWNpZXMuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG50aW1lIChyZWZlcmVuY2UgdGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnVwd2VsbGluZ19pbmRleFxuc3RhdGlvbl9pZFxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRVSTQ4NmhyX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRVSTQ4NmhyX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZFVJNDg2aHIvaW5kZXguanNvbiIsICJodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L0xBUy9kb2NzL3dpbmRfZnJvbV9wcmVzc3VyZS5uYy5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZFVJNDg2aHIucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZFVJNDg2aHImc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQS9TV0ZTQyBFbnZpcm9ubWVudGFsIFJlc2VhcmNoIERpdmlzaW9uIiwgImVyZFVJNDg2aHIiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZFVJNTE2aHIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkVUk1MTZoci5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJVcHdlbGxpbmcgSW5kZXgsIDUxTiAxMzFXLCA2LWhvdXJseSIsICJVcHdlbGxpbmcgaW5kZXggY29tcHV0ZWQgZnJvbSAxLWRlZ3JlZSBGTk1PQyBzZWEgbGV2ZWwgcHJlc3N1cmUgZm9yIDE1IGxvY2F0aW9ucyBvZmYgdGhlIE5vcnRoIEFtZXJpY2FuIFdlc3QgQ29hc3QgYXQgZWFjaCAzIGRlZ3JlZXMgb2YgbGF0aXR1ZGUgZnJvbSAyMU4gdG8gNjBOLiBUaGUgY29hc3RhbCBVcHdlbGxpbmcgSW5kZXggaXMgYW4gaW5kZXggb2YgdGhlIHN0cmVuZ3RoIG9mIHRoZSB3aW5kIGZvcmNpbmcgb24gdGhlIG9jZWFuIHdoaWNoIGhhcyBiZWVuIHVzZWQgaW4gbWFueSBzdHVkaWVzIG9mIHRoZSBlZmZlY3RzIG9mIG9jZWFuIHZhcmlhYmlsaXR5IG9uIHRoZSByZXByb2R1Y3RpdmUgYW5kIHJlY3J1aXRtZW50IHN1Y2Nlc3Mgb2YgbWFueSBmaXNoIGFuZCBpbnZlcnRlYnJhdGUgc3BlY2llcy5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbnRpbWUgKHJlZmVyZW5jZSB0aW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxudXB3ZWxsaW5nX2luZGV4XG5zdGF0aW9uX2lkXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZFVJNTE2aHJfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2VyZFVJNTE2aHJfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkVUk1MTZoci9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvTEFTL2RvY3Mvd2luZF9mcm9tX3ByZXNzdXJlLm5jLmh0bWwiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkVUk1MTZoci5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkVUk1MTZociZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBL1NXRlNDIEVudmlyb25tZW50YWwgUmVzZWFyY2ggRGl2aXNpb24iLCAiZXJkVUk1MTZociJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkVUk1NDZociIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRVSTU0NmhyLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlVwd2VsbGluZyBJbmRleCwgNTROIDEzNFcsIDYtaG91cmx5IiwgIlVwd2VsbGluZyBpbmRleCBjb21wdXRlZCBmcm9tIDEtZGVncmVlIEZOTU9DIHNlYSBsZXZlbCBwcmVzc3VyZSBmb3IgMTUgbG9jYXRpb25zIG9mZiB0aGUgTm9ydGggQW1lcmljYW4gV2VzdCBDb2FzdCBhdCBlYWNoIDMgZGVncmVlcyBvZiBsYXRpdHVkZSBmcm9tIDIxTiB0byA2ME4uIFRoZSBjb2FzdGFsIFVwd2VsbGluZyBJbmRleCBpcyBhbiBpbmRleCBvZiB0aGUgc3RyZW5ndGggb2YgdGhlIHdpbmQgZm9yY2luZyBvbiB0aGUgb2NlYW4gd2hpY2ggaGFzIGJlZW4gdXNlZCBpbiBtYW55IHN0dWRpZXMgb2YgdGhlIGVmZmVjdHMgb2Ygb2NlYW4gdmFyaWFiaWxpdHkgb24gdGhlIHJlcHJvZHVjdGl2ZSBhbmQgcmVjcnVpdG1lbnQgc3VjY2VzcyBvZiBtYW55IGZpc2ggYW5kIGludmVydGVicmF0ZSBzcGVjaWVzLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxudGltZSAocmVmZXJlbmNlIHRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG51cHdlbGxpbmdfaW5kZXhcbnN0YXRpb25faWRcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkVUk1NDZocl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkVUk1NDZocl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRVSTU0NmhyL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9MQVMvZG9jcy93aW5kX2Zyb21fcHJlc3N1cmUubmMuaHRtbCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lcmRVSTU0NmhyLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmRVSTU0NmhyJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEvU1dGU0MgRW52aXJvbm1lbnRhbCBSZXNlYXJjaCBEaXZpc2lvbiIsICJlcmRVSTU0NmhyIl0sCiAgICAgIFsiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRVSTU3NmhyIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZFVJNTc2aHIuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVXB3ZWxsaW5nIEluZGV4LCA1N04gMTM3VywgNi1ob3VybHkiLCAiVXB3ZWxsaW5nIGluZGV4IGNvbXB1dGVkIGZyb20gMS1kZWdyZWUgRk5NT0Mgc2VhIGxldmVsIHByZXNzdXJlIGZvciAxNSBsb2NhdGlvbnMgb2ZmIHRoZSBOb3J0aCBBbWVyaWNhbiBXZXN0IENvYXN0IGF0IGVhY2ggMyBkZWdyZWVzIG9mIGxhdGl0dWRlIGZyb20gMjFOIHRvIDYwTi4gVGhlIGNvYXN0YWwgVXB3ZWxsaW5nIEluZGV4IGlzIGFuIGluZGV4IG9mIHRoZSBzdHJlbmd0aCBvZiB0aGUgd2luZCBmb3JjaW5nIG9uIHRoZSBvY2VhbiB3aGljaCBoYXMgYmVlbiB1c2VkIGluIG1hbnkgc3R1ZGllcyBvZiB0aGUgZWZmZWN0cyBvZiBvY2VhbiB2YXJpYWJpbGl0eSBvbiB0aGUgcmVwcm9kdWN0aXZlIGFuZCByZWNydWl0bWVudCBzdWNjZXNzIG9mIG1hbnkgZmlzaCBhbmQgaW52ZXJ0ZWJyYXRlIHNwZWNpZXMuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG50aW1lIChyZWZlcmVuY2UgdGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnVwd2VsbGluZ19pbmRleFxuc3RhdGlvbl9pZFxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRVSTU3NmhyX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRVSTU3NmhyX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZFVJNTc2aHIvaW5kZXguanNvbiIsICJodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L0xBUy9kb2NzL3dpbmRfZnJvbV9wcmVzc3VyZS5uYy5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZFVJNTc2aHIucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZFVJNTc2aHImc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQS9TV0ZTQyBFbnZpcm9ubWVudGFsIFJlc2VhcmNoIERpdmlzaW9uIiwgImVyZFVJNTc2aHIiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZFVJNjA2aHIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkVUk2MDZoci5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJVcHdlbGxpbmcgSW5kZXgsIDYwTiAxNDZXLCA2LWhvdXJseSIsICJVcHdlbGxpbmcgaW5kZXggY29tcHV0ZWQgZnJvbSAxLWRlZ3JlZSBGTk1PQyBzZWEgbGV2ZWwgcHJlc3N1cmUgZm9yIDE1IGxvY2F0aW9ucyBvZmYgdGhlIE5vcnRoIEFtZXJpY2FuIFdlc3QgQ29hc3QgYXQgZWFjaCAzIGRlZ3JlZXMgb2YgbGF0aXR1ZGUgZnJvbSAyMU4gdG8gNjBOLiBUaGUgY29hc3RhbCBVcHdlbGxpbmcgSW5kZXggaXMgYW4gaW5kZXggb2YgdGhlIHN0cmVuZ3RoIG9mIHRoZSB3aW5kIGZvcmNpbmcgb24gdGhlIG9jZWFuIHdoaWNoIGhhcyBiZWVuIHVzZWQgaW4gbWFueSBzdHVkaWVzIG9mIHRoZSBlZmZlY3RzIG9mIG9jZWFuIHZhcmlhYmlsaXR5IG9uIHRoZSByZXByb2R1Y3RpdmUgYW5kIHJlY3J1aXRtZW50IHN1Y2Nlc3Mgb2YgbWFueSBmaXNoIGFuZCBpbnZlcnRlYnJhdGUgc3BlY2llcy5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbnRpbWUgKHJlZmVyZW5jZSB0aW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxudXB3ZWxsaW5nX2luZGV4XG5zdGF0aW9uX2lkXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZFVJNjA2aHJfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2VyZFVJNjA2aHJfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkVUk2MDZoci9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvTEFTL2RvY3Mvd2luZF9mcm9tX3ByZXNzdXJlLm5jLmh0bWwiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkVUk2MDZoci5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkVUk2MDZociZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBL1NXRlNDIEVudmlyb25tZW50YWwgUmVzZWFyY2ggRGl2aXNpb24iLCAiZXJkVUk2MDZociJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkVUk2MTZociIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRVSTYxNmhyLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlVwd2VsbGluZyBJbmRleCwgNjBOIDE0OVcsIDYtaG91cmx5IiwgIlVwd2VsbGluZyBpbmRleCBjb21wdXRlZCBmcm9tIDEtZGVncmVlIEZOTU9DIHNlYSBsZXZlbCBwcmVzc3VyZSBmb3IgMTUgbG9jYXRpb25zIG9mZiB0aGUgTm9ydGggQW1lcmljYW4gV2VzdCBDb2FzdCBhdCBlYWNoIDMgZGVncmVlcyBvZiBsYXRpdHVkZSBmcm9tIDIxTiB0byA2ME4uIFRoZSBjb2FzdGFsIFVwd2VsbGluZyBJbmRleCBpcyBhbiBpbmRleCBvZiB0aGUgc3RyZW5ndGggb2YgdGhlIHdpbmQgZm9yY2luZyBvbiB0aGUgb2NlYW4gd2hpY2ggaGFzIGJlZW4gdXNlZCBpbiBtYW55IHN0dWRpZXMgb2YgdGhlIGVmZmVjdHMgb2Ygb2NlYW4gdmFyaWFiaWxpdHkgb24gdGhlIHJlcHJvZHVjdGl2ZSBhbmQgcmVjcnVpdG1lbnQgc3VjY2VzcyBvZiBtYW55IGZpc2ggYW5kIGludmVydGVicmF0ZSBzcGVjaWVzLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxudGltZSAocmVmZXJlbmNlIHRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG51cHdlbGxpbmdfaW5kZXhcbnN0YXRpb25faWRcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkVUk2MTZocl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkVUk2MTZocl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRVSTYxNmhyL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9MQVMvZG9jcy93aW5kX2Zyb21fcHJlc3N1cmUubmMuaHRtbCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lcmRVSTYxNmhyLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmRVSTYxNmhyJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEvU1dGU0MgRW52aXJvbm1lbnRhbCBSZXNlYXJjaCBEaXZpc2lvbiIsICJlcmRVSTYxNmhyIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF84OGNkXzdkZmJfZWNmYS5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0Xzg4Y2RfN2RmYl9lY2ZhIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF84OGNkXzdkZmJfZWNmYS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJVUyBQYWNpZmljIElzbGFuZHMsIENvcmFsIFJlZWYgTW9uaXRvcmluZywgRmlzaCBTdXJ2ZXlzLCBCZWx0IFRyYW5zZWN0cyAoQkxUKSIsICJDb3JhbCBSZWVmIEVjb3N5dGVtIERpdmlzaW9uIChDUkVEKSBGaXNoIFN0b2NrIERhdGEgZnJvbSBSYXBpZCBFY29sb2dpY2FsIEFzc2Vzc21lbnRzIChSRUFzKVxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubWluaW11bURlcHRoSW5NZXRlcnNcbm1heGltdW1EZXB0aEluTWV0ZXJzXG5pc2xhbmRHcm91cFxudmVybmFjdWxhck5hbWVcbnNjaWVudGlmaWNOYW1lXG5vaWRcbm1vZGlmaWVkXG5kYXRhc2V0SURcbmRhdGFzZXROYW1lXG5pbnN0aXR1dGlvbkNvZGVcbmNvbGxlY3Rpb25Db2RlXG5pbnN0aXR1dGlvbklEXG5jb2xsZWN0aW9uSURcbm93bmVySW5zdGl0dXRpb25Db2RlXG5iYXNpc09mUmVjb3JkXG5jYXRhbG9nTnVtYmVyXG50YXhvblJhbmtcbnZlcmJhdGltQ29vcmRpbmF0ZXNcbnZlcmJhdGltU1JTXG5nZW9kZXRpY0RhdHVtXG5jb29yZGluYXRlVW5jZXJ0YWludHlJbk1ldGVyc1xuZ2VvcmVmZXJlbmNlZEJ5XG5nZW9yZWZlcmVuY2VQcm90b2NvbFxud2F0ZXJCb2R5XG4uLi4gKDUwIG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2hhd2FpaV9zb2VzdF84OGNkXzdkZmJfZWNmYV9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvaGF3YWlpX3NvZXN0Xzg4Y2RfN2RmYl9lY2ZhX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2hhd2FpaV9zb2VzdF84OGNkXzdkZmJfZWNmYS9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBpZnNjLm5vYWEuZ292L2NyZWQvZmlzaC5waHAiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvaGF3YWlpX3NvZXN0Xzg4Y2RfN2RmYl9lY2ZhLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1oYXdhaWlfc29lc3RfODhjZF83ZGZiX2VjZmEmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiVVNET0MvTk9BQS9OTUZTL1BJRlNDL0NSRUQiLCAiaGF3YWlpX3NvZXN0Xzg4Y2RfN2RmYl9lY2ZhIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF83NDQ4XzhkZDJfZTUyOS5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0Xzc0NDhfOGRkMl9lNTI5IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF83NDQ4XzhkZDJfZTUyOS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJVUyBQYWNpZmljIElzbGFuZHMsIENvcmFsIFJlZWYgTW9uaXRvcmluZywgRmlzaCBTdXJ2ZXlzLCBTdGF0aW9uYXJ5IFBvaW50IENvdW50cyAoblNQQykiLCAiQ29yYWwgUmVlZiBFY29zeXRlbSBEaXZpc2lvbiAoQ1JFRCkgRmlzaCBTdG9jayBEYXRhIGZyb20gUmFwaWQgRWNvbG9naWNhbCBBc3Nlc3NtZW50cyAoUkVBcylcblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbm1pbmltdW1EZXB0aEluTWV0ZXJzXG5tYXhpbXVtRGVwdGhJbk1ldGVyc1xuaXNsYW5kR3JvdXBcbnZlcm5hY3VsYXJOYW1lXG5zY2llbnRpZmljTmFtZVxub2lkXG5tb2RpZmllZFxuZGF0YXNldElEXG5kYXRhc2V0TmFtZVxuaW5zdGl0dXRpb25Db2RlXG5jb2xsZWN0aW9uQ29kZVxuaW5zdGl0dXRpb25JRFxuY29sbGVjdGlvbklEXG5vd25lckluc3RpdHV0aW9uQ29kZVxuYmFzaXNPZlJlY29yZFxuY2F0YWxvZ051bWJlclxudGF4b25SYW5rXG52ZXJiYXRpbUNvb3JkaW5hdGVzXG52ZXJiYXRpbVNSU1xuZ2VvZGV0aWNEYXR1bVxuY29vcmRpbmF0ZVVuY2VydGFpbnR5SW5NZXRlcnNcbmdlb3JlZmVyZW5jZWRCeVxuZ2VvcmVmZXJlbmNlUHJvdG9jb2xcbndhdGVyQm9keVxuLi4uICg0OSBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9oYXdhaWlfc29lc3RfNzQ0OF84ZGQyX2U1MjlfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2hhd2FpaV9zb2VzdF83NDQ4XzhkZDJfZTUyOV9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9oYXdhaWlfc29lc3RfNzQ0OF84ZGQyX2U1MjkvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5waWZzYy5ub2FhLmdvdi9jcmVkL2Zpc2gucGhwIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2hhd2FpaV9zb2VzdF83NDQ4XzhkZDJfZTUyOS5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9aGF3YWlpX3NvZXN0Xzc0NDhfOGRkMl9lNTI5JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIlVTRE9DL05PQUEvTk1GUy9QSUZTQy9DUkVEIiwgImhhd2FpaV9zb2VzdF83NDQ4XzhkZDJfZTUyOSJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfNmRjYl9lNjgxXzNlYWIuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF82ZGNiX2U2ODFfM2VhYiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfNmRjYl9lNjgxXzNlYWIuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVVMgUGFjaWZpYyBJc2xhbmRzLCBDb3JhbCBSZWVmIE1vbml0b3JpbmcsIEZpc2ggU3VydmV5cywgU3RhdGlvbmFyeSBQb2ludCBDb3VudHMgKFNQQykiLCAiQ29yYWwgUmVlZiBFY29zeXRlbSBEaXZpc2lvbiAoQ1JFRCkgRmlzaCBTdG9jayBEYXRhIGZyb20gUmFwaWQgRWNvbG9naWNhbCBBc3Nlc3NtZW50cyAoUkVBcylcblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbm1pbmltdW1EZXB0aEluTWV0ZXJzXG5tYXhpbXVtRGVwdGhJbk1ldGVyc1xuaXNsYW5kR3JvdXBcbnZlcm5hY3VsYXJOYW1lXG5zY2llbnRpZmljTmFtZVxub2lkXG5tb2RpZmllZFxuZGF0YXNldElEXG5kYXRhc2V0TmFtZVxuaW5zdGl0dXRpb25Db2RlXG5jb2xsZWN0aW9uQ29kZVxuaW5zdGl0dXRpb25JRFxuY29sbGVjdGlvbklEXG5vd25lckluc3RpdHV0aW9uQ29kZVxuYmFzaXNPZlJlY29yZFxuY2F0YWxvZ051bWJlclxudGF4b25SYW5rXG52ZXJiYXRpbUNvb3JkaW5hdGVzXG52ZXJiYXRpbVNSU1xuZ2VvZGV0aWNEYXR1bVxuY29vcmRpbmF0ZVVuY2VydGFpbnR5SW5NZXRlcnNcbmdlb3JlZmVyZW5jZWRCeVxuZ2VvcmVmZXJlbmNlUHJvdG9jb2xcbndhdGVyQm9keVxuLi4uICg0OSBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9oYXdhaWlfc29lc3RfNmRjYl9lNjgxXzNlYWJfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2hhd2FpaV9zb2VzdF82ZGNiX2U2ODFfM2VhYl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9oYXdhaWlfc29lc3RfNmRjYl9lNjgxXzNlYWIvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5waWZzYy5ub2FhLmdvdi9jcmVkL2Zpc2gucGhwIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2hhd2FpaV9zb2VzdF82ZGNiX2U2ODFfM2VhYi5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9aGF3YWlpX3NvZXN0XzZkY2JfZTY4MV8zZWFiJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIlVTRE9DL05PQUEvTk1GUy9QSUZTQy9DUkVEIiwgImhhd2FpaV9zb2VzdF82ZGNiX2U2ODFfM2VhYiJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0XzhmNDlfNDc5Nl9kZGMzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF84ZjQ5XzQ3OTZfZGRjMy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJXZWF0aGVyIFN0YXRpb246IEhhd2FpaTogT2FodTogQ29jb251dCBJc2xhbmQiLCAiVGhlIEhhd2FpaSBJbnN0aXR1dGUgb2YgTWFyaW5lIEJpb2xvZ3kgKEhJTUIpIGF1dG9tYXRpYyB3ZWF0aGVyIHN0YXRpb24gKEFXUykgcmVjb3JkcyBob3VybHkgbWVhc3VyZW1lbnRzIG9mIHByZWNpcGl0YXRpb24sIGFpciB0ZW1wZXJhdHVyZSwgd2luZCBzcGVlZCBhbmQgZGlyZWN0aW9uLCBhbmQgaXJyYWRpYW5jZS4gU2Vuc29ycyBpbmNsdWRlIGFuIEVwcGxleSAyOTUtMzg1IG5tIHVsdHJhdmlvbGV0IChVVikgcmFkaW9tZXRlciwgYSBMaUNvciAyMDBTWiBQeXJhbm9tZXRlciwgYW5kIGEgTGlDb3IgUXVhbnRhbWV0ZXIgKDQwMC03MDAgbm0pLiBUaGUgc2Vuc29ycyBhcmUgbG9jYXRlZCBvbiB0aGUgcm9vZiBvZiBISU1CJ3MgQ29yYWwgUmVlZiBFY29sb2d5IExhYm9yYXRvcnkgKFBvaW50IExhYikgb24gTW9rdSBvIExvZSAoQ29jb251dCBJc2xhbmQpIGluIEthbmVvaGUgQmF5IG9uIHRoZSB3aW5kd2FyZCAoZWFzdGVybikgY29hc3Qgb2YgT2FodSBpbiBIYXdhaWkuIEFuIGFjY29tcGFueWluZyBzZWEgd2F0ZXIgdGVtcGVyYXR1cmUgc2Vuc29yIGlzIGxvY2F0ZWQgbGVzcyB0aGFuIDEwIG0gb2Zmc2hvcmUgb2YgdGhlIHdlYXRoZXIgc3RhdGlvbiBhdCBhIHNoYWxsb3cgZGVwdGggb2YgYXBwcm94aW1hdGVseSAxIG0uXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuYWx0aXR1ZGUgKGhlaWdodCBhYm92ZSBtZWFuIHNlYSBsZXZlbCwgbSlcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5zdGF0aW9uX25hbWVcbmFpcl90ZW1wZXJhdHVyZSAoU3VyZmFjZSBhaXIgdGVtcGVyYXR1cmUsIENlbHNpdXMpXG5zZWFfd2F0ZXJfdGVtcGVyYXR1cmUgKE1lYW4gb2NlYW4gdGVtcGVyYXR1cmUsIENlbHNpdXMpXG53aW5kX3NwZWVkIChNZWFuIHdpbmQgc3BlZWQsIG0gcy0xKVxud2luZF9mcm9tX2RpcmVjdGlvbiAoTWVhbiB3aW5kIGZyb20gZGlyZWN0aW9uLCBkZWdyZWVzKVxud2luZF9mcm9tX2RpcmVjdGlvbl9zdGQgKFN0YW5kYXJkIGRldmlhdGlvbiBvZiB3aW5kIGZyb20gZGlyZWN0aW9uLCBkZWdyZWVzKVxud2luZF9zcGVlZF9tYXggKE1heGltdW0gd2luZCBndXN0LCBtIHMtMSlcbnJhaW5mYWxsX2Ftb3VudCAoUmFpbmZhbGwgdG90YWwsIG1tKVxuc2hvcnR3YXZlX3JhZGlhdGlvbiAoQXZlcmFnZSBkb3dud2VsbGluZyBzaG9ydHdhdmUgcmFkaWF0aW9uLCBXIG0tMilcbnBob3Rvc3ludGhldGljX3JhZGlhdGlvbiAoUGhvdG9zeW50aGV0aWNhbGx5IGFjdGl2ZSByYWRpYXRpb24sIHVtb2wgbS0yIHMtMSlcbnVsdHJhdmlvbGV0X3JhZGlhdGlvbiAoVyBtLTIpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvaGF3YWlpX3NvZXN0XzhmNDlfNDc5Nl9kZGMzX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9oYXdhaWlfc29lc3RfOGY0OV80Nzk2X2RkYzNfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vaGF3YWlpX3NvZXN0XzhmNDlfNDc5Nl9kZGMzL2luZGV4Lmpzb24iLCAiaHR0cDovL3d3dy5wYWNpb29zLmhhd2FpaS5lZHUvd2VhdGhlci9vYnMtbW9rdW9sb2UvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2hhd2FpaV9zb2VzdF84ZjQ5XzQ3OTZfZGRjMy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9aGF3YWlpX3NvZXN0XzhmNDlfNDc5Nl9kZGMzJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIlVuaXZlcnNpdHkgb2YgSGF3YWlpIiwgImhhd2FpaV9zb2VzdF84ZjQ5XzQ3OTZfZGRjMyJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0X2Q5OGRfMWQ0M19mZWY3IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF9kOThkXzFkNDNfZmVmNy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJXZWF0aGVyIFN0YXRpb246IFBhbGF1OiBLb3JvcjogTmdlYW5nZXMgSXNsYW5kIiwgIlNpbmNlIDIwMDcsIHRoZSBDb3JhbCBSZWVmIFJlc2VhcmNoIEZvdW5kYXRpb24gKENSUkYpIGhhcyBvcGVyYXRlZCBhIENhbXBiZWxsIFNjaWVudGlmaWMgYXV0b21hdGljIHdlYXRoZXIgc3RhdGlvbiAoQVdTKSBpbiBQYWxhdSBkZXNpZ25lZCB0byBtZWFzdXJlIG1ldGVvcm9sb2dpY2FsL2F0bW9zcGhlcmljIGNvbmRpdGlvbnMgcmVsZXZhbnQgdG8gS29yb3IgU3RhdGUncyBSb2NrIElzbGFuZHMgU291dGhlcm4gTGFnb29uLCBhIFdvcmxkIEhlcml0YWdlIFNpdGUuIFdpdGggbGl0dGxlIGZsYXQgbGFuZCBpbiB0aGUgUm9jayBJc2xhbmRzLCB0aGUgd2VhdGhlciBzdGF0aW9uIGlzIGxvY2F0ZWQgb24gYSA0MC1mdCB0b3dlciBzaXR1YXRlZCBvbiBhIGthcnN0IHJpZGdlIG9uIE5nZWFuZ2VzIElzbGFuZCBhdCAxMDAgZnQgZWxldmF0aW9uLCBhYm91dCA1LjQga20gKDMuNSBtaSkgZnJvbSBDUlJGJ3Mgc3R1ZHkgc2l0ZSBhdCBKZWxseWZpc2ggTGFrZS4gSXQgbWVhc3VyZXMgYSBzdWl0ZSBvZiBhdG1vc3BoZXJpYyBjb25kaXRpb25zIGZvciBjb21wYXJpc29uIHdpdGggQ1JSRidzIHRlbXBvcmFyeSwgZmxvYXRpbmcgd2VhdGhlciBzdGF0aW9uIGxvY2F0ZWQgb24gYSB0cmlwb2QgaW4gSmVsbHlmaXNoIExha2UsIGFuZCBwcm92aWRlcyB2aXRhbCBkYXRhIGZvciBzdHVkeWluZyBob3cgbG9jYWwgd2VhdGhlciBjb25kaXRpb25zIGFuZCBFTlNPIGV2ZW50cyBhZmZlY3QgdGhlIG1hcmluZSBsYWtlIGVudmlyb25tZW50LlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmFsdGl0dWRlIChoZWlnaHQgYWJvdmUgbWVhbiBzZWEgbGV2ZWwsIG0pXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuc3RhdGlvbl9uYW1lXG5haXJfdGVtcGVyYXR1cmUgKE1lYW4gYWlyIHRlbXBlcmF0dXJlLCBDZWxzaXVzKVxuYWlyX3RlbXBlcmF0dXJlX3N0ZCAoU3RhbmRhcmQgZGV2aWF0aW9uIG9mIGFpciB0ZW1wZXJhdHVyZSwgQ2Vsc2l1cylcbmFpcl90ZW1wZXJhdHVyZV9tYXggKE1heGltdW0gYWlyIHRlbXBlcmF0dXJlLCBDZWxzaXVzKVxuYWlyX3RlbXBlcmF0dXJlX21heF90aW1lIChUaW1lIG9mIG1heGltdW0gYWlyIHRlbXBlcmF0dXJlLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuYWlyX3RlbXBlcmF0dXJlX21pbiAoTWluaW11bSBhaXIgdGVtcGVyYXR1cmUsIENlbHNpdXMpXG5haXJfdGVtcGVyYXR1cmVfbWluX3RpbWUgKFRpbWUgb2YgbWluaW11bSBhaXIgdGVtcGVyYXR1cmUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG53aW5kX3NwZWVkIChNZWFuIHdpbmQgc3BlZWQsIG0gcy0xKVxud2luZF9zcGVlZF9zdGQgKFN0YW5kYXJkIGRldmlhdGlvbiB3aW5kIHNwZWVkLCBtIHMtMSlcbndpbmRfc3BlZWRfbWF4IChNYXhpbXVtIHdpbmQgc3BlZWQsIG0gcy0xKVxud2luZF9zcGVlZF9tYXhfdGltZSAoVGltZSBvZiBtYXhpbXVtIHdpbmQgc3BlZWQsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG53aW5kX3NwZWVkX21pbiAoTWluaW11bSB3aW5kIHNwZWVkLCBtIHMtMSlcbndpbmRfc3BlZWRfbWluX3RpbWUgKFRpbWUgb2YgbWluaW11bSB3aW5kIHNwZWVkLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxud2luZF9mcm9tX2RpcmVjdGlvbiAoZGVncmVlcylcbndpbmRfZnJvbV9kaXJlY3Rpb25fc3RkIChTdGFuZGFyZCBkZXZpYXRpb24gb2Ygd2luZCBkaXJlY3Rpb24sIGRlZ3JlZXMpXG5yYWluZmFsbF9hbW91bnQgKFJhaW5mYWxsIHRvdGFsLCBtbSlcbi4uLiAoMjAgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvaGF3YWlpX3NvZXN0X2Q5OGRfMWQ0M19mZWY3X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9oYXdhaWlfc29lc3RfZDk4ZF8xZDQzX2ZlZjdfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vaGF3YWlpX3NvZXN0X2Q5OGRfMWQ0M19mZWY3L2luZGV4Lmpzb24iLCAiaHR0cDovL3d3dy5jb3JhbHJlZWZyZXNlYXJjaGZvdW5kYXRpb24ub3JnIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2hhd2FpaV9zb2VzdF9kOThkXzFkNDNfZmVmNy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9aGF3YWlpX3NvZXN0X2Q5OGRfMWQ0M19mZWY3JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkNvcmFsIFJlZWYgUmVzZWFyY2ggRm91bmRhdGlvbiAoQ1JSRikiLCAiaGF3YWlpX3NvZXN0X2Q5OGRfMWQ0M19mZWY3Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25tc3BXY29zQWRjcEQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25tc3BXY29zQWRjcEQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm1zcFdjb3NBZGNwRC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJXZXN0IENvYXN0IE9ic2VydmluZyBTeXN0ZW0gKFdDT1MpIEFEQ1AgQ3VycmVudHMgRGF0YSwgMjAwNC0yMDA4IiwgIlRoZSBXZXN0IENvYXN0IE9ic2VydmluZyBTeXN0ZW0gKFdDT1MpIHByb2plY3QgcHJvdmlkZXMgYWNjZXNzIHRvIHRlbXBlcmF0dXJlIGFuZCBjdXJyZW50cyBkYXRhIGNvbGxlY3RlZCBhdCBmb3VyIG9mIHRoZSBmaXZlIE5hdGlvbmFsIE1hcmluZSBTYW5jdHVhcnkgc2l0ZXMsIGluY2x1ZGluZyBPbHltcGljIENvYXN0LCBHdWxmIG9mIHRoZSBGYXJhbGxvbmVzLCBNb250ZXJleSBCYXksIGFuZCBDaGFubmVsIElzbGFuZHMuIEEgc2VtaS1hdXRvbWF0ZWQgZW5kLXRvLWVuZCBkYXRhIG1hbmFnZW1lbnQgc3lzdGVtIHRyYW5zcG9ydHMgYW5kIHRyYW5zZm9ybXMgdGhlIGRhdGEgZnJvbSBzb3VyY2UgdG8gYXJjaGl2ZSwgbWFraW5nIHRoZSBkYXRhIGFjZXNzaWJsZSBmb3IgZGlzY292ZXJ5LCBhY2Nlc3MgYW5kIGFuYWx5c2lzIGZyb20gbXVsdGlwbGUgSW50ZXJuZXQgcG9pbnRzIG9mIGVudHJ5LlxuXG5UaGUgc3RhdGlvbnMgKGFuZCB0aGVpciBjb2RlIG5hbWVzKSBhcmUgU2FuIE1pZ3VlbCBOb3J0aCAoQkFZKSwgU2FudGEgUm9zYSBOb3J0aCAoQkVBKSwgQ3V5bGVyIEhhcmJvciAoQ1VZKSwgUGVsaWNhbi9Qcmlzb25lcnMgQXJlYSAoUEVMKSwgU2FuIE1pZ3VlbCBTb3V0aCAoU01TKSwgU2FudGEgUm9zYSBTb3V0aCAoU1JTKSwgVmFsbGV5IEFuY2ggKFZBTCkuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzUHJvZmlsZVxuVkFSSUFCTEVTOlxuc3RhdGlvblxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcbkRhdGFRdWFsaXR5IChEYXRhIFF1YWxpdHksIHBlcmNlbnQpXG5EYXRhUXVhbGl0eV9mbGFnIChEYXRhIFF1YWxpdHkgRmxhZylcbkVhc3R3YXJkIChFYXN0d2FyZCBDdXJyZW50LCBtIHMtMSlcbkVhc3R3YXJkX2ZsYWdcbkVycm9yVmVsb2NpdHkgKEVycm9yIFZlbG9jaXR5LCBtIHMtMSlcbkVycm9yVmVsb2NpdHlfZmxhZyAoRXJyb3IgVmVsb2NpdHkgRmxhZylcbkludGVuc2l0eSAoY291bnQpXG5JbnRlbnNpdHlfZmxhZ1xuTm9ydGh3YXJkIChOb3J0aHdhcmQgQ3VycmVudCwgbSBzLTEpXG5Ob3J0aHdhcmRfZmxhZ1xuVXB3YXJkcyAoVXB3YXJkIEN1cnJlbnQsIG0gcy0xKVxuVXB3YXJkc19mbGFnXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvbm1zcFdjb3NBZGNwRF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvbm1zcFdjb3NBZGNwRF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9ubXNwV2Nvc0FkY3BEL2luZGV4Lmpzb24iLCAiZnRwOi8vZnRwLm5vZGMubm9hYS5nb3Yvbm9kYy9hcmNoaXZlL2FyYzAwMDYvMDAwMjAzOS8xLjEvYWJvdXQvV0NPU19wcm9qZWN0X2RvY3VtZW50X3BoYXNlSV8yMDA2MDMxNy5wZGYiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3Mvbm1zcFdjb3NBZGNwRC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9bm1zcFdjb3NBZGNwRCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIE5NU1AiLCAibm1zcFdjb3NBZGNwRCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ubXNwV2Nvc0FkY3BTLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ubXNwV2Nvc0FkY3BTIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25tc3BXY29zQWRjcFMuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiV2VzdCBDb2FzdCBPYnNlcnZpbmcgU3lzdGVtIChXQ09TKSBBRENQIFN0YXRpb24gRGF0YSwgMjAwNC0yMDA4IiwgIlRoZSBXZXN0IENvYXN0IE9ic2VydmluZyBTeXN0ZW0gKFdDT1MpIHByb2plY3QgcHJvdmlkZXMgYWNjZXNzIHRvIHRlbXBlcmF0dXJlIGFuZCBjdXJyZW50cyBkYXRhIGNvbGxlY3RlZCBhdCBmb3VyIG9mIHRoZSBmaXZlIE5hdGlvbmFsIE1hcmluZSBTYW5jdHVhcnkgc2l0ZXMsIGluY2x1ZGluZyBPbHltcGljIENvYXN0LCBHdWxmIG9mIHRoZSBGYXJhbGxvbmVzLCBNb250ZXJleSBCYXksIGFuZCBDaGFubmVsIElzbGFuZHMuIEEgc2VtaS1hdXRvbWF0ZWQgZW5kLXRvLWVuZCBkYXRhIG1hbmFnZW1lbnQgc3lzdGVtIHRyYW5zcG9ydHMgYW5kIHRyYW5zZm9ybXMgdGhlIGRhdGEgZnJvbSBzb3VyY2UgdG8gYXJjaGl2ZSwgbWFraW5nIHRoZSBkYXRhIGFjZXNzaWJsZSBmb3IgZGlzY292ZXJ5LCBhY2Nlc3MgYW5kIGFuYWx5c2lzIGZyb20gbXVsdGlwbGUgSW50ZXJuZXQgcG9pbnRzIG9mIGVudHJ5LlxuXG5UaGUgc3RhdGlvbnMgKGFuZCB0aGVpciBjb2RlIG5hbWVzKSBhcmUgU2FuIE1pZ3VlbCBOb3J0aCAoQkFZKSwgU2FudGEgUm9zYSBOb3J0aCAoQkVBKSwgQ3V5bGVyIEhhcmJvciAoQ1VZKSwgUGVsaWNhbi9Qcmlzb25lcnMgQXJlYSAoUEVMKSwgU2FuIE1pZ3VlbCBTb3V0aCAoU01TKSwgU2FudGEgUm9zYSBTb3V0aCAoU1JTKSwgVmFsbGV5IEFuY2ggKFZBTCkuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzUHJvZmlsZVxuVkFSSUFCTEVTOlxuc3RhdGlvblxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5QcmVzc3VyZSAoU2VhIFdhdGVyIFByZXNzdXJlLCBkYmFyKVxuUHJlc3N1cmVfZmxhZ1xuVGVtcGVyYXR1cmUgKFNlYSBXYXRlciBUZW1wZXJhdHVyZSwgZGVncmVlX0MpXG5UZW1wZXJhdHVyZV9mbGFnXG5XYXRlckRlcHRoIChXYXRlciBEZXB0aCwgbSlcbldhdGVyRGVwdGhfZmxhZyAoV2F0ZXIgRGVwdGggRmxhZylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9ubXNwV2Nvc0FkY3BTX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9ubXNwV2Nvc0FkY3BTX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL25tc3BXY29zQWRjcFMvaW5kZXguanNvbiIsICJmdHA6Ly9mdHAubm9kYy5ub2FhLmdvdi9ub2RjL2FyY2hpdmUvYXJjMDAwNi8wMDAyMDM5LzEuMS9hYm91dC9XQ09TX3Byb2plY3RfZG9jdW1lbnRfcGhhc2VJXzIwMDYwMzE3LnBkZiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9ubXNwV2Nvc0FkY3BTLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1ubXNwV2Nvc0FkY3BTJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgTk1TUCIsICJubXNwV2Nvc0FkY3BTIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25tc3BXY29zVGVtcC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm1zcFdjb3NUZW1wIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25tc3BXY29zVGVtcC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJXZXN0IENvYXN0IE9ic2VydmluZyBTeXN0ZW0gKFdDT1MpIFRlbXBlcmF0dXJlIERhdGEsIDIwMDQtMjAxMSIsICJUaGUgV2VzdCBDb2FzdCBPYnNlcnZpbmcgU3lzdGVtIChXQ09TKSBwcm9qZWN0IHByb3ZpZGVzIGFjY2VzcyB0byB0ZW1wZXJhdHVyZSBhbmQgY3VycmVudHMgZGF0YSBjb2xsZWN0ZWQgYXQgZm91ciBvZiB0aGUgZml2ZSBOYXRpb25hbCBNYXJpbmUgU2FuY3R1YXJ5IHNpdGVzLCBpbmNsdWRpbmcgT2x5bXBpYyBDb2FzdCwgR3VsZiBvZiB0aGUgRmFyYWxsb25lcywgTW9udGVyZXkgQmF5LCBhbmQgQ2hhbm5lbCBJc2xhbmRzLiBBIHNlbWktYXV0b21hdGVkIGVuZC10by1lbmQgZGF0YSBtYW5hZ2VtZW50IHN5c3RlbSB0cmFuc3BvcnRzIGFuZCB0cmFuc2Zvcm1zIHRoZSBkYXRhIGZyb20gc291cmNlIHRvIGFyY2hpdmUsIG1ha2luZyB0aGUgZGF0YSBhY2Vzc2libGUgZm9yIGRpc2NvdmVyeSwgYWNjZXNzIGFuZCBhbmFseXNpcyBmcm9tIG11bHRpcGxlIEludGVybmV0IHBvaW50cyBvZiBlbnRyeS5cblxuVGhlIHN0YXRpb25zIChhbmQgdGhlaXIgY29kZSBuYW1lcykgYXJlIEFubyBOdWV2byAoQU5PMDAxKSwgU2FuIE1pZ3VlbCBOb3J0aCAoQkFZKSwgU2FudGEgUm9zYSBOb3J0aCAoQkVBKSwgQmlnIENyZWVrIChCSUcwMDEpLCBCb2RlZ2EgSGVhZCAoQk9EMDAxKSwgQ2FwZSBBbGF2YSAxNU0gKENBMDE1KSwgQ2FwZSBBbGF2YSA0Mk0gKENBMDQyKSwgQ2FwZSBBbGF2YSA2NU0gKENBMDY1KSwgQ2FwZSBBbGF2YSAxMDBNIChDQTEwMCksIENhbm5lcnkgUm93IChDQU4wMDEpLCBDYXBlIEVsaXphYmV0aCAxNU0gKENFMDE1KSwgQ2FwZSBFbGl6YWJldGggNDJNIChDRTA0MiksIENhcGUgRWxpemFiZXRoIDY1TSAoQ0UwNjUpLCBDYXBlIEVsaXphYmV0aCAxMDBNIChDRTEwMCksIEN1eWxlciBIYXJib3IgKENVWSksIEVzYWxlbiAoRVNBMDAxKSwgUG9pbnQgSm9lIChKT0UwMDEpLCBLYWxhbG9jaCAxNU0gKEtMMDE1KSwgS2FsYWxvY2ggMjdNIChLTDAyNyksIExhIENydXogUm9jayAoTEFDMDAxKSwgTG9wZXogUm9jayAoTE9QMDAxKSwgTWFrYWggQmF5IDE1TSAoTUIwMTUpLCBNYWthaCBCYXkgNDJNIChNQjA0MiksIFBlbGljYW4vUHJpc29uZXJzIEFyZWEgKFBFTCksIFBpZ2VvbiBQb2ludCAoUElHMDAxKSwgUGxhc2tldHQgUm9jayAoUExBMDAxKSwgU291dGhlYXN0IEZhcmFsbG9uIElzbGFuZCAoU0VGMDAxKSwgU2FuIE1pZ3VlbCBTb3V0aCAoU01TKSwgU2FudGEgUm9zYSBTb3V0aCAoU1JTKSwgU3Vuc2V0IFBvaW50IChTVU4wMDEpLCBUZWF3aGl0IEhlYWQgMTVNIChUSDAxNSksIFRlYXdoaXQgSGVhZCAzMU0gKFRIMDMxKSwgVGVhd2hpdCBIZWFkIDQyTSAoVEgwNDIpLCBUZXJyYWNlIFBvaW50IDcgKFRQVDAwNyksIFRlcnJhY2UgUG9pbnQgOCAoVFBUMDA4KSwgVmFsbGV5IEFuY2ggKFZBTCksIFdlc3RvbiBCZWFjaCAoV0VTMDAxKS5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNQcm9maWxlXG5WQVJJQUJMRVM6XG5zdGF0aW9uXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuVGVtcGVyYXR1cmUgKFNlYSBXYXRlciBUZW1wZXJhdHVyZSwgZGVncmVlX0MpXG5UZW1wZXJhdHVyZV9mbGFnXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvbm1zcFdjb3NUZW1wX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9ubXNwV2Nvc1RlbXBfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vbm1zcFdjb3NUZW1wL2luZGV4Lmpzb24iLCAiZnRwOi8vZnRwLm5vZGMubm9hYS5nb3Yvbm9kYy9hcmNoaXZlL2FyYzAwMDYvMDAwMjAzOS8xLjEvYWJvdXQvV0NPU19wcm9qZWN0X2RvY3VtZW50X3BoYXNlSV8yMDA2MDMxNy5wZGYiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3Mvbm1zcFdjb3NUZW1wLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1ubXNwV2Nvc1RlbXAmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBOTVNQIiwgIm5tc3BXY29zVGVtcCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lYXJ0aEN1YmVLZ3NCb3JlVGVtcFdWLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lYXJ0aEN1YmVLZ3NCb3JlVGVtcFdWIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VhcnRoQ3ViZUtnc0JvcmVUZW1wV1YuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiV2VzdCBWaXJnaW5pYSBCb3JlaG9sZSBUZW1wZXJhdHVyZXMsIEFBU0cgU3RhdGUgR2VvdGhlcm1hbCBEYXRhLCAxOTM2LTIwMTAiLCAiQm9yZWhvbGUgdGVtcGVyYXR1cmUgbWVhc3VyZW1lbnRzIGluIFdlc3QgVmlyZ2luaWFcblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5PYnNlcnZhdGlvblVSSSAoT2JzZXJ2YXRpb24gVVJJKVxuV2VsbE5hbWUgKFdlbGwgTmFtZSlcbkFQSU5vXG5IZWFkZXJVUkkgKEhlYWRlciBVUkkpXG5MYWJlbFxuT3BlcmF0b3JcblNwdWREYXRlIChTcHVkIERhdGUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG50aW1lIChFbmRlZCBEcmlsbGluZyBEYXRlLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuV2VsbFR5cGUgKFdlbGwgVHlwZSlcbkZpZWxkXG5Db3VudHlcblN0YXRlXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuRHJpbGxlclRvdGFsRGVwdGggKERyaWxsZXIgVG90YWwgRGVwdGgsIGZ0KVxuRGVwdGhSZWZlcmVuY2VQb2ludCAoRGVwdGggUmVmZXJlbmNlIFBvaW50KVxuV2VsbEJvcmVTaGFwZSAoV2VsbCBCb3JlIFNoYXBlKVxuVHJ1ZVZlcnRpY2FsRGVwdGggKFRydWUgVmVydGljYWwgRGVwdGgsIGZ0KVxuRWxldmF0aW9uR0wgKEVsZXZhdGlvbiBHTCwgZnQpXG5Gb3JtYXRpb25URCAoRm9ybWF0aW9uIFREKVxuTWVhc3VyZWRUZW1wZXJhdHVyZSAoTWVhc3VyZWQgVGVtcGVyYXR1cmUsIGRlZ3JlZV9GKVxuRGVwdGhPZk1lYXN1cmVtZW50IChEZXB0aCBPZiBNZWFzdXJlbWVudCwgZnQpXG5NZWFzdXJlbWVudEZvcm1hdGlvbiAoTWVhc3VyZW1lbnQgRm9ybWF0aW9uKVxuUmVsYXRlZFJlc291cmNlIChSZWxhdGVkIFJlc291cmNlKVxuVGltZVNpbmNlQ2lyY3VsYXRpb24gKFRpbWUgU2luY2UgQ2lyY3VsYXRpb24sID8pXG5PdGhlck5hbWUgKE90aGVyIE5hbWUpXG5MZWFzZU5hbWUgKExlYXNlIE5hbWUpXG5Ob3Rlc1xuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VhcnRoQ3ViZUtnc0JvcmVUZW1wV1ZfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2VhcnRoQ3ViZUtnc0JvcmVUZW1wV1ZfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZWFydGhDdWJlS2dzQm9yZVRlbXBXVi9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cud3Zncy53dm5ldC5lZHUvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VhcnRoQ3ViZUtnc0JvcmVUZW1wV1YucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVhcnRoQ3ViZUtnc0JvcmVUZW1wV1Ymc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiV2VzdCBWaXJnaW5pYSBHZW9sb2dpY2FsIGFuZCBFY29ub21pYyBTdXJ2ZXkiLCAiZWFydGhDdWJlS2dzQm9yZVRlbXBXViJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC93aG9pU29zLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC93aG9pU29zIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3dob2lTb3MuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiV0hPSSBNVkNPIDEybSBOb2RlIEFEQ1AgU09TLCAyMDA4LXByZXNlbnQiLCAiV2F2ZSBvYnNlcnZhdGlvbnMgZnJvbSB0aGUgMTJtIG5vZGUgQURDUCBpbiB0aGUgTWFydGhhJ3MgVmluZXlhcmQgQ29hc3RhbCBPYnNlcnZhdG9yeSAoTVZDTykgaW4gdGhlIG5vcnRod2VzdCBBdGxhbnRpYyBpbiBjb2FzdGFsIHdhdGVycyBvZiBOb3J0aCBBbWVyaWNhLiAgRXh0ZW5zaXZlLCBkZXRhaWxlZCBkb2N1bWVudGF0aW9uIGlzIGF2YWlsYWJsZSBpbiB0aGVzZSAueG1sIGZpbGVzOlxuaHR0cDovL212Y29kYXRhLndob2kuZWR1L2Rvd25sb2Fkcy9zZW5zb3JNTC92MS4wL2V4YW1wbGVzL3NlbnNvcnMvQURDUF8yLjIvTVZDT19PYnNlcnZpbmdTeXN0ZW0ueG1sXG5odHRwOi8vbXZjb2RhdGEud2hvaS5lZHUvZG93bmxvYWRzL3NlbnNvck1ML3YxLjAvZXhhbXBsZXMvc2Vuc29ycy9BRENQXzIuMi9BRENQX1N5c3RlbS54bWxcbmh0dHA6Ly9tdmNvZGF0YS53aG9pLmVkdS9kb3dubG9hZHMvc2Vuc29yTUwvdjEuMC9leGFtcGxlcy9zZW5zb3JzL0FEQ1BfMi4yL01WQ09fV29ya2hvcnNlXzEyMDAueG1sXG5odHRwOi8vbXZjb2RhdGEud2hvaS5lZHUvZG93bmxvYWRzL3NlbnNvck1ML3YxLjAvZXhhbXBsZXMvc2Vuc29ycy9BRENQXzIuMi9SRElfV29ya2hvcnNlXzEyMDAueG1sXG5odHRwOi8vbXZjb2RhdGEud2hvaS5lZHUvZG93bmxvYWRzL3NlbnNvck1ML3YxLjAvZXhhbXBsZXMvc2Vuc29ycy9BRENQXzIuMi9QcmVzc3VyZV9PYnNfUHJvY2Vzcy54bWxcbmh0dHA6Ly9tdmNvZGF0YS53aG9pLmVkdS9kb3dubG9hZHMvc2Vuc29yTUwvdjEuMC9leGFtcGxlcy9zZW5zb3JzL0FEQ1BfMi4yL1ZlbG9jaXR5X09ic19Qcm9jZXNzLnhtbFxuaHR0cDovL212Y29kYXRhLndob2kuZWR1L2Rvd25sb2Fkcy9zZW5zb3JNTC92MS4wL2V4YW1wbGVzL3NlbnNvcnMvQURDUF8yLjIvUHJlc3N1cmVfUUNfQ2hhaW4ueG1sXG5odHRwOi8vbXZjb2RhdGEud2hvaS5lZHUvZG93bmxvYWRzL3NlbnNvck1ML3YxLjAvZXhhbXBsZXMvc2Vuc29ycy9BRENQXzIuMi9WZWxvY2l0eV9RQ19DaGFpbi54bWxcbmh0dHA6Ly9tdmNvZGF0YS53aG9pLmVkdS9kb3dubG9hZHMvc2Vuc29yTUwvdjEuMC9leGFtcGxlcy9zZW5zb3JzL0FEQ1BfMi4yL1BVVl9BbmFseXNpcy54bWxcblxuRm9yIHRoaXMgZGF0YXNldCwgaWYgeW91IHdhbnQgdGhlIG1vc3QgcmVjZW50IGRhdGEsIHlvdSBNVVNUIGNoYW5nZSB0aGUgZGVmYXVsdCBlbmQgdGltZSBjb25zdHJhaW50IHRvIGJlIGEgdGltZSB0aGF0IGlzIHNsaWdodGx5IChhIGZldyBzZWNvbmRzIG9yIGEgZmV3IG1pbnV0ZXMpIGluIHRoZSBwYXN0LiAgVGhlIHNvdXJjZSBkYXRhIHNlcnZlciBkb2VzIG5vdCBhbGxvdyBlbmQgdGltZSBjb25zdHJhaW50cyB0aGF0IGFyZSBhZnRlciB0aGUgZXhhY3QgY3VycmVudCB0aW1lLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5zdGF0aW9uX2lkXG5hbHRpdHVkZSAobSlcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5wcmVzc3VyZSAoTWVhbiBTZWEgV2F0ZXIgUHJlc3N1cmUsIGNtKVxud2F2ZUhlaWdodEZyb21QcmVzc3VyZSAoV2F2ZSBIZWlnaHQgZnJvbSBQcmVzc3VyZSwgY20pXG53YXZlUGVyaW9kRnJvbVByZXNzdXJlIChXYXZlIFBlcmlvZCBmcm9tIFByZXNzdXJlLCBzKVxubG9DdXRvZmZGcmVxdWVuY3kgKExvdyBDdXRvZmYgRnJlcXVlbmN5LCBIeilcbmhpQ3V0b2ZmRnJlcXVlbmN5IChIaWdoIEN1dG9mZiBGcmVxdWVuY3ksIEh6KVxud2F2ZUhlaWdodEFsbCAoV2F2ZSBIZWlnaHQgQWxsLCBjbSlcbnN3ZWxsIChjbSlcbi4uLiAoMTQgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvd2hvaVNvc19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvd2hvaVNvc19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby93aG9pU29zL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cud2hvaS5lZHUvbXZjbyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy93aG9pU29zLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD13aG9pU29zJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIldvb2RzIEhvbGUgT2NlYW5vZ3JhcGhpYyBJbnN0aXR1dGlvbiIsICJ3aG9pU29zIl0KICAgIF0KICB9Cn0K
  recorded_at: 2018-09-26 19:05:49 GMT
  recorded_with: vcr/0.1.0.9110, webmockr/0.2.6, crul/0.6.0
- request:
    method: get
    uri: https://upwell.pfeg.noaa.gov/erddap/info/erdMBchlamday_LonPM180/index.json
    body:
      encoding: ''
      string: ''
    headers:
      User-Agent: libcurl/7.54.0 r-curl/3.2 crul/0.6.0
      Accept-Encoding: gzip, deflate
      Accept: application/json, text/xml, application/xml, */*
  response:
    status:
      status_code: '200'
      message: OK
      explanation: Request fulfilled, document follows
    headers:
      status: 'HTTP/1.1 200 '
      date: Wed, 26 Sep 2018 19:05:10 GMT
      strict-transport-security: max-age=31536000; includeSubDomains
      content-disposition: attachment;filename=erdMBchlamday_LonPM180_info.json
      content-encoding: gzip
      content-type: application/json;charset=UTF-8
      connection: close
      transfer-encoding: chunked
    body:
      encoding: ASCII-8BIT
      string: ewogICJ0YWJsZSI6IHsKICAgICJjb2x1bW5OYW1lcyI6IFsiUm93IFR5cGUiLCAiVmFyaWFibGUgTmFtZSIsICJBdHRyaWJ1dGUgTmFtZSIsICJEYXRhIFR5cGUiLCAiVmFsdWUiXSwKICAgICJjb2x1bW5UeXBlcyI6IFsiU3RyaW5nIiwgIlN0cmluZyIsICJTdHJpbmciLCAiU3RyaW5nIiwgIlN0cmluZyJdLAogICAgInJvd3MiOiBbCiAgICAgIFsiYXR0cmlidXRlIiwgIk5DX0dMT0JBTCIsICJhY2tub3dsZWRnZW1lbnQiLCAiU3RyaW5nIiwgIk5PQUEgTkVTRElTIENPQVNUV0FUQ0gsIE5PQUEgU1dGU0MgRVJEIl0sCiAgICAgIFsiYXR0cmlidXRlIiwgIk5DX0dMT0JBTCIsICJjZG1fZGF0YV90eXBlIiwgIlN0cmluZyIsICJHcmlkIl0sCiAgICAgIFsiYXR0cmlidXRlIiwgIk5DX0dMT0JBTCIsICJjb21wb3NpdGUiLCAiU3RyaW5nIiwgInRydWUiXSwKICAgICAgWyJhdHRyaWJ1dGUiLCAiTkNfR0xPQkFMIiwgImNvbnRyaWJ1dG9yX25hbWUiLCAiU3RyaW5nIiwgIk5BU0EgR1NGQyAoT0JQRykiXSwKICAgICAgWyJhdHRyaWJ1dGUiLCAiTkNfR0xPQkFMIiwgImNvbnRyaWJ1dG9yX3JvbGUiLCAiU3RyaW5nIiwgIlNvdXJjZSBvZiBsZXZlbCAyIGRhdGEuIl0sCiAgICAgIFsiYXR0cmlidXRlIiwgIk5DX0dMT0JBTCIsICJDb252ZW50aW9ucyIsICJTdHJpbmciLCAiQ09BUkRTLCBDRi0xLjYsIEFDREQtMS4zIl0sCiAgICAgIFsiYXR0cmlidXRlIiwgIk5DX0dMT0JBTCIsICJjcmVhdG9yX2VtYWlsIiwgIlN0cmluZyIsICJlcmQuZGF0YUBub2FhLmdvdiJdLAogICAgICBbImF0dHJpYnV0ZSIsICJOQ19HTE9CQUwiLCAiY3JlYXRvcl9uYW1lIiwgIlN0cmluZyIsICJOT0FBIE5NRlMgU1dGU0MgRVJEIl0sCiAgICAgIFsiYXR0cmlidXRlIiwgIk5DX0dMT0JBTCIsICJjcmVhdG9yX3R5cGUiLCAiU3RyaW5nIiwgImluc3RpdHV0aW9uIl0sCiAgICAgIFsiYXR0cmlidXRlIiwgIk5DX0dMT0JBTCIsICJjcmVhdG9yX3VybCIsICJTdHJpbmciLCAiaHR0cHM6Ly93d3cucGZlZy5ub2FhLmdvdiJdLAogICAgICBbImF0dHJpYnV0ZSIsICJOQ19HTE9CQUwiLCAiZGF0ZV9jcmVhdGVkIiwgIlN0cmluZyIsICIyMDE4LTA5LTAzIl0sCiAgICAgIFsiYXR0cmlidXRlIiwgIk5DX0dMT0JBTCIsICJkYXRlX2lzc3VlZCIsICJTdHJpbmciLCAiMjAxOC0wOS0wMyJdLAogICAgICBbImF0dHJpYnV0ZSIsICJOQ19HTE9CQUwiLCAiRWFzdGVybm1vc3RfRWFzdGluZyIsICJkb3VibGUiLCAiMTc5Ljk3NSJdLAogICAgICBbImF0dHJpYnV0ZSIsICJOQ19HTE9CQUwiLCAiZmlsZXMiLCAiU3RyaW5nIiwgIk1CMjAxODIxM18yMDE4MjEzX2NobGEubmMsIE1CMjAxODIxNF8yMDE4MjE0X2NobGEubmMsIE1CMjAxODIxNV8yMDE4MjE1X2NobGEubmMsIE1CMjAxODIxNl8yMDE4MjE2X2NobGEubmMsIE1CMjAxODIxN18yMDE4MjE3X2NobGEubmMsIE1CMjAxODIxOF8yMDE4MjE4X2NobGEubmMsIE1CMjAxODIxOV8yMDE4MjE5X2NobGEubmMsIE1CMjAxODIyMF8yMDE4MjIwX2NobGEubmMsIE1CMjAxODIyMV8yMDE4MjIxX2NobGEubmMsIE1CMjAxODIyMl8yMDE4MjIyX2NobGEubmMsIE1CMjAxODIyM18yMDE4MjIzX2NobGEubmMsIE1CMjAxODIyNF8yMDE4MjI0X2NobGEubmMsIE1CMjAxODIyNV8yMDE4MjI1X2NobGEubmMsIE1CMjAxODIyNl8yMDE4MjI2X2NobGEubmMsIE1CMjAxODIyN18yMDE4MjI3X2NobGEubmMsIE1CMjAxODIyOF8yMDE4MjI4X2NobGEubmMsIE1CMjAxODIzMF8yMDE4MjMwX2NobGEubmMsIE1CMjAxODIzMV8yMDE4MjMxX2NobGEubmMsIE1CMjAxODIzMl8yMDE4MjMyX2NobGEubmMsIE1CMjAxODIzM18yMDE4MjMzX2NobGEubmMsIE1CMjAxODIzNF8yMDE4MjM0X2NobGEubmMsIE1CMjAxODIzNV8yMDE4MjM1X2NobGEubmMsIE1CMjAxODIzNl8yMDE4MjM2X2NobGEubmMsIE1CMjAxODIzN18yMDE4MjM3X2NobGEubmMsIE1CMjAxODIzOF8yMDE4MjM4X2NobGEubmMsIE1CMjAxODIzOV8yMDE4MjM5X2NobGEubmMsIE1CMjAxODI0MF8yMDE4MjQwX2NobGEubmMsIE1CMjAxODI0MV8yMDE4MjQxX2NobGEubmMsIE1CMjAxODI0Ml8yMDE4MjQyX2NobGEubmMsIE1CMjAxODI0M18yMDE4MjQzX2NobGEubmMiXSwKICAgICAgWyJhdHRyaWJ1dGUiLCAiTkNfR0xPQkFMIiwgImdlb3NwYXRpYWxfbGF0X21heCIsICJkb3VibGUiLCAiNjUuMCJdLAogICAgICBbImF0dHJpYnV0ZSIsICJOQ19HTE9CQUwiLCAiZ2Vvc3BhdGlhbF9sYXRfbWluIiwgImRvdWJsZSIsICItNDUuMCJdLAogICAgICBbImF0dHJpYnV0ZSIsICJOQ19HTE9CQUwiLCAiZ2Vvc3BhdGlhbF9sYXRfcmVzb2x1dGlvbiIsICJkb3VibGUiLCAiMC4wMjUiXSwKICAgICAgWyJhdHRyaWJ1dGUiLCAiTkNfR0xPQkFMIiwgImdlb3NwYXRpYWxfbGF0X3VuaXRzIiwgIlN0cmluZyIsICJkZWdyZWVzX25vcnRoIl0sCiAgICAgIFsiYXR0cmlidXRlIiwgIk5DX0dMT0JBTCIsICJnZW9zcGF0aWFsX2xvbl9tYXgiLCAiZG91YmxlIiwgIjE3OS45NzUiXSwKICAgICAgWyJhdHRyaWJ1dGUiLCAiTkNfR0xPQkFMIiwgImdlb3NwYXRpYWxfbG9uX21pbiIsICJkb3VibGUiLCAiLTE4MC4wIl0sCiAgICAgIFsiYXR0cmlidXRlIiwgIk5DX0dMT0JBTCIsICJnZW9zcGF0aWFsX2xvbl9yZXNvbHV0aW9uIiwgImRvdWJsZSIsICIwLjAyNSJdLAogICAgICBbImF0dHJpYnV0ZSIsICJOQ19HTE9CQUwiLCAiZ2Vvc3BhdGlhbF9sb25fdW5pdHMiLCAiU3RyaW5nIiwgImRlZ3JlZXNfZWFzdCJdLAogICAgICBbImF0dHJpYnV0ZSIsICJOQ19HTE9CQUwiLCAiZ2Vvc3BhdGlhbF92ZXJ0aWNhbF9tYXgiLCAiZG91YmxlIiwgIjAuMCJdLAogICAgICBbImF0dHJpYnV0ZSIsICJOQ19HTE9CQUwiLCAiZ2Vvc3BhdGlhbF92ZXJ0aWNhbF9taW4iLCAiZG91YmxlIiwgIjAuMCJdLAogICAgICBbImF0dHJpYnV0ZSIsICJOQ19HTE9CQUwiLCAiZ2Vvc3BhdGlhbF92ZXJ0aWNhbF9wb3NpdGl2ZSIsICJTdHJpbmciLCAidXAiXSwKICAgICAgWyJhdHRyaWJ1dGUiLCAiTkNfR0xPQkFMIiwgImdlb3NwYXRpYWxfdmVydGljYWxfdW5pdHMiLCAiU3RyaW5nIiwgIm0iXSwKICAgICAgWyJhdHRyaWJ1dGUiLCAiTkNfR0xPQkFMIiwgImluZm9VcmwiLCAiU3RyaW5nIiwgImh0dHBzOi8vY29hc3R3YXRjaC5wZmVnLm5vYWEuZ292L2luZm9nL01CX2NobGFfbGFzLmh0bWwiXSwKICAgICAgWyJhdHRyaWJ1dGUiLCAiTkNfR0xPQkFMIiwgImluc3RpdHV0aW9uIiwgIlN0cmluZyIsICJOT0FBIE5NRlMgU1dGU0MgRVJEIl0sCiAgICAgIFsiYXR0cmlidXRlIiwgIk5DX0dMT0JBTCIsICJrZXl3b3JkcyIsICJTdHJpbmciLCAiYWx0aXR1ZGUsIGFxdWEsIGNoZW1pc3RyeSwgY2hsYSwgY2hsb3JvcGh5bGwsIGNobG9yb3BoeWxsLWEsIGNvYXN0LCBjb2FzdHdhdGNoLCBjb2xvciwgY29uY2VudHJhdGlvbiwgY29uY2VudHJhdGlvbl9vZl9jaGxvcm9waHlsbF9pbl9zZWFfd2F0ZXIsIGRhdGEsIGRlZ3JlZXMsIEVhcnRoIFNjaWVuY2UgPiBPY2VhbnMgPiBPY2VhbiBDaGVtaXN0cnkgPiBDaGxvcm9waHlsbCwgZXhwZXJpbWVudGFsLCBpbWFnaW5nLCBNQmNobGEsIG1vZGVyYXRlLCBtb2RpcywgbmF0aW9uYWwsIG5vYWEsIG5vZGUsIG5wcCwgb2NlYW4sIG9jZWFuIGNvbG9yLCBvY2VhbnMsIG9yYml0aW5nLCBwYWNpZmljLCBwYXJ0bmVyc2hpcCwgcG9sYXIsIHBvbGFyLW9yYml0aW5nLCByZXNvbHV0aW9uLCBzZWEsIHNlYXdhdGVyLCBzcGVjdHJvcmFkaW9tZXRlciwgdGltZSwgd2F0ZXIsIHdjbiwgd2VzdCJdLAogICAgICBbImF0dHJpYnV0ZSIsICJOQ19HTE9CQUwiLCAia2V5d29yZHNfdm9jYWJ1bGFyeSIsICJTdHJpbmciLCAiR0NNRCBTY2llbmNlIEtleXdvcmRzIl0sCiAgICAgIFsiYXR0cmlidXRlIiwgIk5DX0dMT0JBTCIsICJsaWNlbnNlIiwgIlN0cmluZyIsICJUaGUgZGF0YSBtYXkgYmUgdXNlZCBhbmQgcmVkaXN0cmlidXRlZCBmb3IgZnJlZSBidXQgaXMgbm90IGludGVuZGVkXG5mb3IgbGVnYWwgdXNlLCBzaW5jZSBpdCBtYXkgY29udGFpbiBpbmFjY3VyYWNpZXMuIE5laXRoZXIgdGhlIGRhdGFcbkNvbnRyaWJ1dG9yLCBFUkQsIE5PQUEsIG5vciB0aGUgVW5pdGVkIFN0YXRlcyBHb3Zlcm5tZW50LCBub3IgYW55XG5vZiB0aGVpciBlbXBsb3llZXMgb3IgY29udHJhY3RvcnMsIG1ha2VzIGFueSB3YXJyYW50eSwgZXhwcmVzcyBvclxuaW1wbGllZCwgaW5jbHVkaW5nIHdhcnJhbnRpZXMgb2YgbWVyY2hhbnRhYmlsaXR5IGFuZCBmaXRuZXNzIGZvciBhXG5wYXJ0aWN1bGFyIHB1cnBvc2UsIG9yIGFzc3VtZXMgYW55IGxlZ2FsIGxpYWJpbGl0eSBmb3IgdGhlIGFjY3VyYWN5LFxuY29tcGxldGVuZXNzLCBvciB1c2VmdWxuZXNzLCBvZiB0aGlzIGluZm9ybWF0aW9uLiJdLAogICAgICBbImF0dHJpYnV0ZSIsICJOQ19HTE9CQUwiLCAibmFtaW5nX2F1dGhvcml0eSIsICJTdHJpbmciLCAiZ292Lm5vYWEucGZlZy5jb2FzdHdhdGNoIl0sCiAgICAgIFsiYXR0cmlidXRlIiwgIk5DX0dMT0JBTCIsICJOb3J0aGVybm1vc3RfTm9ydGhpbmciLCAiZG91YmxlIiwgIjY1LjAiXSwKICAgICAgWyJhdHRyaWJ1dGUiLCAiTkNfR0xPQkFMIiwgIm9yaWdpbiIsICJTdHJpbmciLCAiTkFTQSBHU0ZDIChPQlBHKSJdLAogICAgICBbImF0dHJpYnV0ZSIsICJOQ19HTE9CQUwiLCAicHJvY2Vzc2luZ19sZXZlbCIsICJTdHJpbmciLCAiMyJdLAogICAgICBbImF0dHJpYnV0ZSIsICJOQ19HTE9CQUwiLCAicHJvamVjdCIsICJTdHJpbmciLCAiQ29hc3RXYXRjaCAoaHR0cHM6Ly9jb2FzdHdhdGNoLm5vYWEuZ292LykiXSwKICAgICAgWyJhdHRyaWJ1dGUiLCAiTkNfR0xPQkFMIiwgInByb2plY3Rpb24iLCAiU3RyaW5nIiwgImdlb2dyYXBoaWMiXSwKICAgICAgWyJhdHRyaWJ1dGUiLCAiTkNfR0xPQkFMIiwgInByb2plY3Rpb25fdHlwZSIsICJTdHJpbmciLCAibWFwcGVkIl0sCiAgICAgIFsiYXR0cmlidXRlIiwgIk5DX0dMT0JBTCIsICJwdWJsaXNoZXJfZW1haWwiLCAiU3RyaW5nIiwgImVyZC5kYXRhQG5vYWEuZ292Il0sCiAgICAgIFsiYXR0cmlidXRlIiwgIk5DX0dMT0JBTCIsICJwdWJsaXNoZXJfbmFtZSIsICJTdHJpbmciLCAiTk9BQSBOTUZTIFNXRlNDIEVSRCJdLAogICAgICBbImF0dHJpYnV0ZSIsICJOQ19HTE9CQUwiLCAicHVibGlzaGVyX3R5cGUiLCAiU3RyaW5nIiwgImluc3RpdHV0aW9uIl0sCiAgICAgIFsiYXR0cmlidXRlIiwgIk5DX0dMT0JBTCIsICJwdWJsaXNoZXJfdXJsIiwgIlN0cmluZyIsICJodHRwczovL3d3dy5wZmVnLm5vYWEuZ292Il0sCiAgICAgIFsiYXR0cmlidXRlIiwgIk5DX0dMT0JBTCIsICJyZWZlcmVuY2VzIiwgIlN0cmluZyIsICJBcXVhL01PRElTIGluZm9ybWF0aW9uOiBodHRwczovL29jZWFuY29sb3IuZ3NmYy5uYXNhLmdvdi8gLiBNT0RJUyBpbmZvcm1hdGlvbjogaHR0cHM6Ly9jb2FzdHdhdGNoLm5vYWEuZ292L2N3X2h0bWwvT2NlYW5Db2xvcl9OUlRfTU9ESVNfQXF1YS5odG1sIC4iXSwKICAgICAgWyJhdHRyaWJ1dGUiLCAiTkNfR0xPQkFMIiwgInNhdGVsbGl0ZSIsICJTdHJpbmciLCAiQXF1YSJdLAogICAgICBbImF0dHJpYnV0ZSIsICJOQ19HTE9CQUwiLCAic2Vuc29yIiwgIlN0cmluZyIsICJNT0RJUyJdLAogICAgICBbImF0dHJpYnV0ZSIsICJOQ19HTE9CQUwiLCAic291cmNlIiwgIlN0cmluZyIsICJzYXRlbGxpdGUgb2JzZXJ2YXRpb246IEFxdWEsIE1PRElTIl0sCiAgICAgIFsiYXR0cmlidXRlIiwgIk5DX0dMT0JBTCIsICJzb3VyY2VVcmwiLCAiU3RyaW5nIiwgIihsb2NhbCBmaWxlcykiXSwKICAgICAgWyJhdHRyaWJ1dGUiLCAiTkNfR0xPQkFMIiwgIlNvdXRoZXJubW9zdF9Ob3J0aGluZyIsICJkb3VibGUiLCAiLTQ1LjAiXSwKICAgICAgWyJhdHRyaWJ1dGUiLCAiTkNfR0xPQkFMIiwgInN0YW5kYXJkX25hbWVfdm9jYWJ1bGFyeSIsICJTdHJpbmciLCAiQ0YgU3RhbmRhcmQgTmFtZSBUYWJsZSB2NTUiXSwKICAgICAgWyJhdHRyaWJ1dGUiLCAiTkNfR0xPQkFMIiwgInN1bW1hcnkiLCAiU3RyaW5nIiwgIk5PQUEgQ29hc3RXYXRjaCBkaXN0cmlidXRlcyBjaGxvcm9waHlsbC1hIGNvbmNlbnRyYXRpb24gZGF0YSBmcm9tIE5BU0EncyBBcXVhIFNwYWNlY3JhZnQuICBNZWFzdXJlbWVudHMgYXJlIGdhdGhlcmVkIGJ5IHRoZSBNb2RlcmF0ZSBSZXNvbHV0aW9uIEltYWdpbmcgU3BlY3Ryb3JhZGlvbWV0ZXIgKE1PRElTKSBjYXJyaWVkIGFib2FyZCB0aGUgc3BhY2VjcmFmdC4gIFRoZSBhbGdvcml0aG0gY3VycmVudGx5IHVzZWQgaW4gcHJvY2Vzc2luZyB0aGUgd2F0ZXIgbGVhdmluZyByYWRpYW5jZSB0byBjaGxvcm9waHlsbCBjb25jZW50cmF0aW9uIGhhcyBub3QgeWV0IGJlZW4gYWNjZXB0ZWQgYXMgc2NpZW5jZSBxdWFsaXR5LiAgSW4gYWRkaXRpb24sIGFzc3VtcHRpb25zIGFyZSBtYWRlIGluIHRoZSBhdG1vc3BoZXJpYyBjb3JyZWN0aW9uIGluIG9yZGVyIHRvIHByb3ZpZGUgdGhlIGRhdGEgaW4gYSB0aW1lbHkgbWFubmVyLiJdLAogICAgICBbImF0dHJpYnV0ZSIsICJOQ19HTE9CQUwiLCAidGVzdE91dE9mRGF0ZSIsICJTdHJpbmciLCAibm93LTYwZGF5cyJdLAogICAgICBbImF0dHJpYnV0ZSIsICJOQ19HTE9CQUwiLCAidGltZV9jb3ZlcmFnZV9lbmQiLCAiU3RyaW5nIiwgIjIwMTgtMDgtMTZUMTI6MDA6MDBaIl0sCiAgICAgIFsiYXR0cmlidXRlIiwgIk5DX0dMT0JBTCIsICJ0aW1lX2NvdmVyYWdlX3N0YXJ0IiwgIlN0cmluZyIsICIyMDA2LTAxLTE2VDEyOjAwOjAwWiJdLAogICAgICBbImF0dHJpYnV0ZSIsICJOQ19HTE9CQUwiLCAidGl0bGUiLCAiU3RyaW5nIiwgIkNobG9yb3BoeWxsLWEsIEFxdWEgTU9ESVMsIE5QUCwgMC4wMjUgZGVncmVlcywgUGFjaWZpYyBPY2VhbiwgMjAwNi1wcmVzZW50LCBFWFBFUklNRU5UQUwgKE1vbnRobHkgQ29tcG9zaXRlKSwgTG9uKy8tMTgwIl0sCiAgICAgIFsiYXR0cmlidXRlIiwgIk5DX0dMT0JBTCIsICJXZXN0ZXJubW9zdF9FYXN0aW5nIiwgImRvdWJsZSIsICItMTgwLjAiXSwKICAgICAgWyJkaW1lbnNpb24iLCAidGltZSIsICIiLCAiZG91YmxlIiwgIm5WYWx1ZXM9MTQ5LCBldmVubHlTcGFjZWQ9ZmFsc2UsIGF2ZXJhZ2VTcGFjaW5nPTMxIGRheXMgMWggOG0gNnMiXSwKICAgICAgWyJhdHRyaWJ1dGUiLCAidGltZSIsICJfQ29vcmRpbmF0ZUF4aXNUeXBlIiwgIlN0cmluZyIsICJUaW1lIl0sCiAgICAgIFsiYXR0cmlidXRlIiwgInRpbWUiLCAiYWN0dWFsX3JhbmdlIiwgImRvdWJsZSIsICIxLjEzNzQxMjhFOSwgMS41MzQ0MjA4RTkiXSwKICAgICAgWyJhdHRyaWJ1dGUiLCAidGltZSIsICJheGlzIiwgIlN0cmluZyIsICJUIl0sCiAgICAgIFsiYXR0cmlidXRlIiwgInRpbWUiLCAiZnJhY3Rpb25fZGlnaXRzIiwgImludCIsICIwIl0sCiAgICAgIFsiYXR0cmlidXRlIiwgInRpbWUiLCAiaW9vc19jYXRlZ29yeSIsICJTdHJpbmciLCAiVGltZSJdLAogICAgICBbImF0dHJpYnV0ZSIsICJ0aW1lIiwgImxvbmdfbmFtZSIsICJTdHJpbmciLCAiQ2VudGVyZWQgVGltZSJdLAogICAgICBbImF0dHJpYnV0ZSIsICJ0aW1lIiwgInN0YW5kYXJkX25hbWUiLCAiU3RyaW5nIiwgInRpbWUiXSwKICAgICAgWyJhdHRyaWJ1dGUiLCAidGltZSIsICJ0aW1lX29yaWdpbiIsICJTdHJpbmciLCAiMDEtSkFOLTE5NzAgMDA6MDA6MDAiXSwKICAgICAgWyJhdHRyaWJ1dGUiLCAidGltZSIsICJ1bml0cyIsICJTdHJpbmciLCAic2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWiJdLAogICAgICBbImRpbWVuc2lvbiIsICJhbHRpdHVkZSIsICIiLCAiZG91YmxlIiwgIm5WYWx1ZXM9MSwgb25seVZhbHVlPTAuMCJdLAogICAgICBbImF0dHJpYnV0ZSIsICJhbHRpdHVkZSIsICJfQ29vcmRpbmF0ZUF4aXNUeXBlIiwgIlN0cmluZyIsICJIZWlnaHQiXSwKICAgICAgWyJhdHRyaWJ1dGUiLCAiYWx0aXR1ZGUiLCAiX0Nvb3JkaW5hdGVaaXNQb3NpdGl2ZSIsICJTdHJpbmciLCAidXAiXSwKICAgICAgWyJhdHRyaWJ1dGUiLCAiYWx0aXR1ZGUiLCAiYWN0dWFsX3JhbmdlIiwgImRvdWJsZSIsICIwLjAsIDAuMCJdLAogICAgICBbImF0dHJpYnV0ZSIsICJhbHRpdHVkZSIsICJheGlzIiwgIlN0cmluZyIsICJaIl0sCiAgICAgIFsiYXR0cmlidXRlIiwgImFsdGl0dWRlIiwgImZyYWN0aW9uX2RpZ2l0cyIsICJpbnQiLCAiMCJdLAogICAgICBbImF0dHJpYnV0ZSIsICJhbHRpdHVkZSIsICJpb29zX2NhdGVnb3J5IiwgIlN0cmluZyIsICJMb2NhdGlvbiJdLAogICAgICBbImF0dHJpYnV0ZSIsICJhbHRpdHVkZSIsICJsb25nX25hbWUiLCAiU3RyaW5nIiwgIkFsdGl0dWRlIl0sCiAgICAgIFsiYXR0cmlidXRlIiwgImFsdGl0dWRlIiwgInBvc2l0aXZlIiwgIlN0cmluZyIsICJ1cCJdLAogICAgICBbImF0dHJpYnV0ZSIsICJhbHRpdHVkZSIsICJzdGFuZGFyZF9uYW1lIiwgIlN0cmluZyIsICJhbHRpdHVkZSJdLAogICAgICBbImF0dHJpYnV0ZSIsICJhbHRpdHVkZSIsICJ1bml0cyIsICJTdHJpbmciLCAibSJdLAogICAgICBbImRpbWVuc2lvbiIsICJsYXRpdHVkZSIsICIiLCAiZG91YmxlIiwgIm5WYWx1ZXM9NDQwMSwgZXZlbmx5U3BhY2VkPXRydWUsIGF2ZXJhZ2VTcGFjaW5nPTAuMDI1Il0sCiAgICAgIFsiYXR0cmlidXRlIiwgImxhdGl0dWRlIiwgIl9Db29yZGluYXRlQXhpc1R5cGUiLCAiU3RyaW5nIiwgIkxhdCJdLAogICAgICBbImF0dHJpYnV0ZSIsICJsYXRpdHVkZSIsICJhY3R1YWxfcmFuZ2UiLCAiZG91YmxlIiwgIi00NS4wLCA2NS4wIl0sCiAgICAgIFsiYXR0cmlidXRlIiwgImxhdGl0dWRlIiwgImF4aXMiLCAiU3RyaW5nIiwgIlkiXSwKICAgICAgWyJhdHRyaWJ1dGUiLCAibGF0aXR1ZGUiLCAiY29vcmRzeXMiLCAiU3RyaW5nIiwgImdlb2dyYXBoaWMiXSwKICAgICAgWyJhdHRyaWJ1dGUiLCAibGF0aXR1ZGUiLCAiZnJhY3Rpb25fZGlnaXRzIiwgImludCIsICI0Il0sCiAgICAgIFsiYXR0cmlidXRlIiwgImxhdGl0dWRlIiwgImlvb3NfY2F0ZWdvcnkiLCAiU3RyaW5nIiwgIkxvY2F0aW9uIl0sCiAgICAgIFsiYXR0cmlidXRlIiwgImxhdGl0dWRlIiwgImxvbmdfbmFtZSIsICJTdHJpbmciLCAiTGF0aXR1ZGUiXSwKICAgICAgWyJhdHRyaWJ1dGUiLCAibGF0aXR1ZGUiLCAicG9pbnRfc3BhY2luZyIsICJTdHJpbmciLCAiZXZlbiJdLAogICAgICBbImF0dHJpYnV0ZSIsICJsYXRpdHVkZSIsICJzdGFuZGFyZF9uYW1lIiwgIlN0cmluZyIsICJsYXRpdHVkZSJdLAogICAgICBbImF0dHJpYnV0ZSIsICJsYXRpdHVkZSIsICJ1bml0cyIsICJTdHJpbmciLCAiZGVncmVlc19ub3J0aCJdLAogICAgICBbImRpbWVuc2lvbiIsICJsb25naXR1ZGUiLCAiIiwgImRvdWJsZSIsICJuVmFsdWVzPTE0NDAwLCBldmVubHlTcGFjZWQ9dHJ1ZSwgYXZlcmFnZVNwYWNpbmc9MC4wMjUiXSwKICAgICAgWyJhdHRyaWJ1dGUiLCAibG9uZ2l0dWRlIiwgIl9Db29yZGluYXRlQXhpc1R5cGUiLCAiU3RyaW5nIiwgIkxvbiJdLAogICAgICBbImF0dHJpYnV0ZSIsICJsb25naXR1ZGUiLCAiYWN0dWFsX3JhbmdlIiwgImRvdWJsZSIsICItMTgwLjAsIDE3OS45NzUiXSwKICAgICAgWyJhdHRyaWJ1dGUiLCAibG9uZ2l0dWRlIiwgImF4aXMiLCAiU3RyaW5nIiwgIlgiXSwKICAgICAgWyJhdHRyaWJ1dGUiLCAibG9uZ2l0dWRlIiwgImNvb3Jkc3lzIiwgIlN0cmluZyIsICJnZW9ncmFwaGljIl0sCiAgICAgIFsiYXR0cmlidXRlIiwgImxvbmdpdHVkZSIsICJmcmFjdGlvbl9kaWdpdHMiLCAiaW50IiwgIjQiXSwKICAgICAgWyJhdHRyaWJ1dGUiLCAibG9uZ2l0dWRlIiwgImlvb3NfY2F0ZWdvcnkiLCAiU3RyaW5nIiwgIkxvY2F0aW9uIl0sCiAgICAgIFsiYXR0cmlidXRlIiwgImxvbmdpdHVkZSIsICJsb25nX25hbWUiLCAiU3RyaW5nIiwgIkxvbmdpdHVkZSJdLAogICAgICBbImF0dHJpYnV0ZSIsICJsb25naXR1ZGUiLCAicG9pbnRfc3BhY2luZyIsICJTdHJpbmciLCAiZXZlbiJdLAogICAgICBbImF0dHJpYnV0ZSIsICJsb25naXR1ZGUiLCAic3RhbmRhcmRfbmFtZSIsICJTdHJpbmciLCAibG9uZ2l0dWRlIl0sCiAgICAgIFsiYXR0cmlidXRlIiwgImxvbmdpdHVkZSIsICJ1bml0cyIsICJTdHJpbmciLCAiZGVncmVlc19lYXN0Il0sCiAgICAgIFsidmFyaWFibGUiLCAiY2hsb3JvcGh5bGwiLCAiIiwgImZsb2F0IiwgInRpbWUsIGFsdGl0dWRlLCBsYXRpdHVkZSwgbG9uZ2l0dWRlIl0sCiAgICAgIFsiYXR0cmlidXRlIiwgImNobG9yb3BoeWxsIiwgIl9GaWxsVmFsdWUiLCAiZmxvYXQiLCAiLTk5OTk5OTkuMCJdLAogICAgICBbImF0dHJpYnV0ZSIsICJjaGxvcm9waHlsbCIsICJjb2xvckJhck1heGltdW0iLCAiZG91YmxlIiwgIjMwLjAiXSwKICAgICAgWyJhdHRyaWJ1dGUiLCAiY2hsb3JvcGh5bGwiLCAiY29sb3JCYXJNaW5pbXVtIiwgImRvdWJsZSIsICIwLjAzIl0sCiAgICAgIFsiYXR0cmlidXRlIiwgImNobG9yb3BoeWxsIiwgImNvbG9yQmFyU2NhbGUiLCAiU3RyaW5nIiwgIkxvZyJdLAogICAgICBbImF0dHJpYnV0ZSIsICJjaGxvcm9waHlsbCIsICJjb29yZHN5cyIsICJTdHJpbmciLCAiZ2VvZ3JhcGhpYyJdLAogICAgICBbImF0dHJpYnV0ZSIsICJjaGxvcm9waHlsbCIsICJmcmFjdGlvbl9kaWdpdHMiLCAiaW50IiwgIjIiXSwKICAgICAgWyJhdHRyaWJ1dGUiLCAiY2hsb3JvcGh5bGwiLCAiaW9vc19jYXRlZ29yeSIsICJTdHJpbmciLCAiT2NlYW4gQ29sb3IiXSwKICAgICAgWyJhdHRyaWJ1dGUiLCAiY2hsb3JvcGh5bGwiLCAibG9uZ19uYW1lIiwgIlN0cmluZyIsICJDaGxvcm9waHlsbCBDb25jZW50cmF0aW9uIGluIFNlYSBXYXRlciJdLAogICAgICBbImF0dHJpYnV0ZSIsICJjaGxvcm9waHlsbCIsICJtaXNzaW5nX3ZhbHVlIiwgImZsb2F0IiwgIi05OTk5OTk5LjAiXSwKICAgICAgWyJhdHRyaWJ1dGUiLCAiY2hsb3JvcGh5bGwiLCAic3RhbmRhcmRfbmFtZSIsICJTdHJpbmciLCAiY29uY2VudHJhdGlvbl9vZl9jaGxvcm9waHlsbF9pbl9zZWFfd2F0ZXIiXSwKICAgICAgWyJhdHRyaWJ1dGUiLCAiY2hsb3JvcGh5bGwiLCAidW5pdHMiLCAiU3RyaW5nIiwgIm1nIG0tMyJdCiAgICBdCiAgfQp9Cg==
  recorded_at: 2018-09-26 19:05:49 GMT
  recorded_with: vcr/0.1.0.9110, webmockr/0.2.6, crul/0.6.0
- request:
    method: get
    uri: https://upwell.pfeg.noaa.gov/erddap/tabledap/index.json?page=1&itemsPerPage=10000
    body:
      encoding: ''
      string: ''
    headers:
      User-Agent: libcurl/7.54.0 r-curl/3.2 crul/0.6.0
      Accept-Encoding: gzip, deflate
      Accept: application/json, text/xml, application/xml, */*
  response:
    status:
      status_code: '200'
      message: OK
      explanation: Request fulfilled, document follows
    headers:
      status: 'HTTP/1.1 200 '
      date: Wed, 26 Sep 2018 19:05:11 GMT
      strict-transport-security: max-age=31536000; includeSubDomains
      last-modified: Wed, 26 Sep 2018 19:05:11 GMT
      xdods-server: dods/3.7
      erddap-server: '1.82'
      content-disposition: attachment;filename=tabledap.json
      content-encoding: gzip
      content-type: application/json;charset=UTF-8
      connection: close
      transfer-encoding: chunked
    body:
      encoding: ASCII-8BIT
      string: 
  recorded_at: 2018-09-26 19:05:49 GMT
  recorded_with: vcr/0.1.0.9110, webmockr/0.2.6, crul/0.6.0
- request:
    method: get
    uri: https://upwell.pfeg.noaa.gov/erddap/tabledap/index.json?page=1&itemsPerPage=10000
    body:
      encoding: ''
      string: ''
    headers:
      User-Agent: libcurl/7.54.0 r-curl/3.2 crul/0.6.0
      Accept-Encoding: gzip, deflate
      Accept: application/json, text/xml, application/xml, */*
  response:
    status:
      status_code: '200'
      message: OK
      explanation: Request fulfilled, document follows
    headers:
      status: 'HTTP/1.1 200 '
      date: Wed, 26 Sep 2018 19:05:11 GMT
      strict-transport-security: max-age=31536000; includeSubDomains
      last-modified: Wed, 26 Sep 2018 19:05:11 GMT
      xdods-server: dods/3.7
      erddap-server: '1.82'
      content-disposition: attachment;filename=tabledap.json
      content-encoding: gzip
      content-type: application/json;charset=UTF-8
      connection: close
      transfer-encoding: chunked
    body:
      encoding: ASCII-8BIT
      string: 
  recorded_at: 2018-09-26 19:05:49 GMT
  recorded_with: vcr/0.1.0.9110, webmockr/0.2.6, crul/0.6.0
